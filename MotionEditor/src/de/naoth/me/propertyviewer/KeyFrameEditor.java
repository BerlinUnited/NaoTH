/*
 * KeyFrameEditor.java
 *
 * Created on 21. April 2008, 15:27
 */

package de.naoth.me.propertyviewer;

import de.naoth.me.core.Joint;
import de.naoth.me.core.JointConfiguration;
import de.naoth.me.core.KeyFrame;
import java.awt.GridLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.Vector;
import java.util.HashMap;

/**
 *
 * @author  Heinrich Mellmann
 */
public class KeyFrameEditor extends javax.swing.JPanel implements PropertyChangeListener
{

    HashMap<String, JointEditor> jointEditorList;
    HashMap<String, JointGroupLabel> jointLabelList;
    HashMap<String, Boolean> jointStateList = new HashMap<String, Boolean>();
    JointConfiguration configuration;
    
    /** Creates new form KeyFrameEditor */
    public KeyFrameEditor(KeyFrame keyFrame)
    {
        initComponents();
        configuration = keyFrame.getJointConfiguration();
        jointStateList.put("Head", true);
        jointStateList.put("Shoulder", true);
        jointStateList.put("Elbow", true);
        jointStateList.put("Hip", true);
        jointStateList.put("Knee", true);
        jointStateList.put("Ankle", true);
        jointEditorList = new HashMap<String, JointEditor>();

        initKeyFrameControls();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    setPreferredSize(new java.awt.Dimension(460, 480));

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 485, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 480, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents
    
    
  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
    
    public void setKeyFrameControls(KeyFrame keyFrame)
    {
        if(keyFrame == null) return;

        configuration = keyFrame.getJointConfiguration();
        HashMap<String,Joint> jointMap = configuration.getJointMap();

        for(String key : jointMap.keySet())
        {
          jointEditorList.get(key).setJoint(jointMap.get(key));

        }

    }//end setKeyFrameControls
    
    private void addJointControl(JointEditor jointControl)
    {
        this.add(jointControl);
        jointControl.setVisible(true);
        jointControl.repaint();
    }//end addJointControl

    public void propertyChange(PropertyChangeEvent event)
    {
      if(event.getPropertyName().equals("jointGroupStateChanged"))
      {
        if(event.getNewValue() instanceof JointGroupLabel)
        {
          JointGroupLabel gL = (JointGroupLabel) event.getNewValue();
          int index = 0;

          jointStateList.remove(gL.getID());
          this.jointStateList.put(gL.getID(), gL.getState());

          if(gL.getID().equals("Head"))
          {
            index++;
            if(gL.getState())
            {
              this.add(this.jointEditorList.get("HeadPitch"), index++);
              this.add(this.jointEditorList.get("HeadYaw"), index++);
            }
            else
            {
              this.remove(this.jointEditorList.get("HeadPitch"));
              this.remove(this.jointEditorList.get("HeadYaw"));
            }
          }
          if(this.jointStateList.get("Head").equals(Boolean.TRUE))
          {
            index += 2;
          }
          index++;
          if(gL.getID().equals("Shoulder"))
          {
            index++;
            if(gL.getState())
            {
              this.add(this.jointEditorList.get("LShoulderPitch"), index++);
              this.add(this.jointEditorList.get("RShoulderPitch"), index++);
              this.add(this.jointEditorList.get("LShoulderRoll"), index++);
              this.add(this.jointEditorList.get("RShoulderRoll"), index++);
            }
            else
            {
              this.remove(this.jointEditorList.get("LShoulderPitch"));
              this.remove(this.jointEditorList.get("RShoulderPitch"));
              this.remove(this.jointEditorList.get("LShoulderRoll"));
              this.remove(this.jointEditorList.get("RShoulderRoll"));
            }
          }
          if(this.jointStateList.get("Shoulder").equals(Boolean.TRUE))
          {
            index += 4;
          }
          index++;
          if(gL.getID().equals("Elbow"))
          {
            index++;
            if(gL.getState())
            {
              this.add(this.jointEditorList.get("LElbowYaw"), index++);
              this.add(this.jointEditorList.get("RElbowYaw"), index++);
              this.add(this.jointEditorList.get("LElbowRoll"), index++);
              this.add(this.jointEditorList.get("RElbowRoll"), index++);
            }
            else
            {
              this.remove(this.jointEditorList.get("LElbowYaw"));
              this.remove(this.jointEditorList.get("RElbowYaw"));
              this.remove(this.jointEditorList.get("LElbowRoll"));
              this.remove(this.jointEditorList.get("RElbowRoll"));
            }
          }
          if(this.jointStateList.get("Elbow").equals(Boolean.TRUE))
          {
            index += 4;
          }
          index++;
          if(gL.getID().equals("Hip"))
          {
            index++;
            if(gL.getState())
            {
              this.add(this.jointEditorList.get("LHipYawPitch"), index++);
              this.add(this.jointEditorList.get("RHipYawPitch"), index++);
              this.add(this.jointEditorList.get("LHipRoll"), index++);
              this.add(this.jointEditorList.get("RHipRoll"), index++);
              this.add(this.jointEditorList.get("LHipPitch"), index++);
              this.add(this.jointEditorList.get("RHipPitch"), index++);
            }
            else
            {
              this.remove(this.jointEditorList.get("LHipYawPitch"));
              this.remove(this.jointEditorList.get("RHipYawPitch"));
              this.remove(this.jointEditorList.get("LHipRoll"));
              this.remove(this.jointEditorList.get("RHipRoll"));
              this.remove(this.jointEditorList.get("LHipPitch"));
              this.remove(this.jointEditorList.get("RHipPitch"));
            }
          }
          if(this.jointStateList.get("Hip").equals(Boolean.TRUE))
          {
            index += 6;
          }
          index++;
          if(gL.getID().equals("Knee"))
          {
            index++;
            if(gL.getState())
            {
              this.add(this.jointEditorList.get("LKneePitch"), index++);
              this.add(this.jointEditorList.get("RKneePitch"), index++);
            }
            else
            {
              this.remove(this.jointEditorList.get("LKneePitch"));
              this.remove(this.jointEditorList.get("RKneePitch"));
            }
          }
          if(this.jointStateList.get("Knee").equals(Boolean.TRUE))
          {
            index += 2;
          }
          index++;
          if(gL.getID().equals("Ankle"))
          {
            index++;
            if(gL.getState())
            {
              this.add(this.jointEditorList.get("LAnklePitch"), index++);
              this.add(this.jointEditorList.get("RAnklePitch"), index++);
              this.add(this.jointEditorList.get("LAnkleRoll"), index++);
              this.add(this.jointEditorList.get("RAnkleRoll"), index++);
            }
            else
            {
              this.remove(this.jointEditorList.get("LAnklePitch"));
              this.remove(this.jointEditorList.get("RAnklePitch"));
              this.remove(this.jointEditorList.get("LAnkleRoll"));
              this.remove(this.jointEditorList.get("RAnkleRoll"));
            }
          }
//          GridLayout layout = new GridLayout(index, 1);
//          this.setLayout(layout);
          this.validate();
          this.repaint();
        }
      }
      if(event.getPropertyName().compareTo("jointValueChanged") == 0)
      {
        this.firePropertyChange("jointValueChanged", null, event.getNewValue());
      }
      if(event.getPropertyName().compareTo("jointStateChanged") == 0)
      {
        this.firePropertyChange("jointStateChanged", null, null);
      }
    }

    private void initKeyFrameControls()
    {
        this.removeAll();
        if(configuration == null) return;

        jointEditorList.clear();
        HashMap<String,Joint> jointMap = configuration.getJointMap();
        GridLayout layout = new GridLayout(jointMap.size() + 6, 1);
        this.setLayout(layout);

        //head joint grouping
        JointGroupLabel gL = new JointGroupLabel("Head", true);
        gL.addPropertyChangeListener("jointGroupStateChanged", this);
        this.add(gL);

        Joint joint = jointMap.get("HeadYaw");
        JointEditor jointEditor = new JointEditor(joint);
        jointEditor.addPropertyChangeListener(this);
        this.addJointControl(jointEditor);
        this.jointEditorList.put("HeadYaw", jointEditor);

        joint = jointMap.get("HeadPitch");
        jointEditor = new JointEditor(joint);
        jointEditor.addPropertyChangeListener(this);
        this.addJointControl(jointEditor);
        this.jointEditorList.put("HeadPitch", jointEditor);

        //shoulder joint grouping
        gL = new JointGroupLabel("Shoulder", true);
        gL.addPropertyChangeListener("jointGroupStateChanged", this);
        this.add(gL);

        joint = jointMap.get("LShoulderPitch");
        jointEditor = new JointEditor(joint);
        jointEditor.addPropertyChangeListener(this);
        this.addJointControl(jointEditor);
        this.jointEditorList.put("LShoulderPitch", jointEditor);

        joint = jointMap.get("RShoulderPitch");
        jointEditor = new JointEditor(joint);
        jointEditor.addPropertyChangeListener(this);
        this.addJointControl(jointEditor);
        this.jointEditorList.put("RShoulderPitch", jointEditor);

        joint = jointMap.get("LShoulderRoll");
        jointEditor = new JointEditor(joint);
        jointEditor.addPropertyChangeListener(this);
        this.addJointControl(jointEditor);
        this.jointEditorList.put("LShoulderRoll", jointEditor);

        joint = jointMap.get("RShoulderRoll");
        jointEditor = new JointEditor(joint);
        jointEditor.addPropertyChangeListener(this);
        this.addJointControl(jointEditor);
        this.jointEditorList.put("RShoulderRoll", jointEditor);

        //elbow joint grouping
        gL = new JointGroupLabel("Elbow", true);
        gL.addPropertyChangeListener("jointGroupStateChanged", this);
        this.add(gL);

        joint = jointMap.get("LElbowYaw");
        jointEditor = new JointEditor(joint);
        jointEditor.addPropertyChangeListener(this);
        this.addJointControl(jointEditor);
        this.jointEditorList.put("LElbowYaw", jointEditor);

        joint = jointMap.get("RElbowYaw");
        jointEditor = new JointEditor(joint);
        jointEditor.addPropertyChangeListener(this);
        this.addJointControl(jointEditor);
        this.jointEditorList.put("RElbowYaw", jointEditor);

        joint = jointMap.get("LElbowRoll");
        jointEditor = new JointEditor(joint);
        jointEditor.addPropertyChangeListener(this);
        this.addJointControl(jointEditor);
        this.jointEditorList.put("LElbowRoll", jointEditor);

        joint = jointMap.get("RElbowRoll");
        jointEditor = new JointEditor(joint);
        jointEditor.addPropertyChangeListener(this);
        this.addJointControl(jointEditor);
        this.jointEditorList.put("RElbowRoll", jointEditor);

        //hip joint grouping
        gL = new JointGroupLabel("Hip", true);
        gL.addPropertyChangeListener("jointGroupStateChanged", this);
        this.add(gL);

        joint = jointMap.get("LHipYawPitch");
        jointEditor = new JointEditor(joint);
        jointEditor.addPropertyChangeListener(this);
        this.addJointControl(jointEditor);
        this.jointEditorList.put("LHipYawPitch", jointEditor);

        joint = jointMap.get("RHipYawPitch");
        jointEditor = new JointEditor(joint);
        jointEditor.addPropertyChangeListener(this);
        this.addJointControl(jointEditor);
        this.jointEditorList.put("RHipYawPitch", jointEditor);

        joint = jointMap.get("LHipPitch");
        jointEditor = new JointEditor(joint);
        jointEditor.addPropertyChangeListener(this);
        this.addJointControl(jointEditor);
        this.jointEditorList.put("LHipPitch", jointEditor);

        joint = jointMap.get("RHipPitch");
        jointEditor = new JointEditor(joint);
        jointEditor.addPropertyChangeListener(this);
        this.addJointControl(jointEditor);
        this.jointEditorList.put("RHipPitch", jointEditor);

        joint = jointMap.get("LHipRoll");
        jointEditor = new JointEditor(joint);
        jointEditor.addPropertyChangeListener(this);
        this.addJointControl(jointEditor);
        this.jointEditorList.put("LHipRoll", jointEditor);

        joint = jointMap.get("RHipRoll");
        jointEditor = new JointEditor(joint);
        jointEditor.addPropertyChangeListener(this);
        this.addJointControl(jointEditor);
        this.jointEditorList.put("RHipRoll", jointEditor);

        //knee joint grouping
        gL = new JointGroupLabel("Knee", true);
        gL.addPropertyChangeListener("jointGroupStateChanged", this);
        this.add(gL);

        joint = jointMap.get("LKneePitch");
        jointEditor = new JointEditor(joint);
        jointEditor.addPropertyChangeListener(this);
        this.addJointControl(jointEditor);
        this.jointEditorList.put("LKneePitch", jointEditor);

        joint = jointMap.get("RKneePitch");
        jointEditor = new JointEditor(joint);
        jointEditor.addPropertyChangeListener(this);
        this.addJointControl(jointEditor);
        this.jointEditorList.put("RKneePitch", jointEditor);

        //knee joint grouping
        gL = new JointGroupLabel("Ankle", true);
        gL.addPropertyChangeListener("jointGroupStateChanged", this);
        this.add(gL);

        joint = jointMap.get("LAnklePitch");
        jointEditor = new JointEditor(joint);
        jointEditor.addPropertyChangeListener(this);
        this.addJointControl(jointEditor);
        this.jointEditorList.put("LAnklePitch", jointEditor);

        joint = jointMap.get("RAnklePitch");
        jointEditor = new JointEditor(joint);
        jointEditor.addPropertyChangeListener(this);
        this.addJointControl(jointEditor);
        this.jointEditorList.put("RAnklePitch", jointEditor);

        joint = jointMap.get("LAnkleRoll");
        jointEditor = new JointEditor(joint);
        jointEditor.addPropertyChangeListener(this);
        this.addJointControl(jointEditor);
        this.jointEditorList.put("LAnkleRoll", jointEditor);

        joint = jointMap.get("RAnkleRoll");
        jointEditor = new JointEditor(joint);
        jointEditor.addPropertyChangeListener(this);
        this.addJointControl(jointEditor);
        this.jointEditorList.put("RAnkleRoll", jointEditor);

    }//end setKeyFrameControls

}//end class KeyFrameEditor
