/*
 * JointControl.java
 *
 * Created on 15. MÃ¤rz 2008, 23:11
 */
package de.naoth.me.propertyviewer;

import de.naoth.me.core.Joint;
import de.naoth.me.core.ValueChangedListener;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
//import javax.swing.JOptionPane;

/**
 *
 * @author  sven
 */
public class JointEditor extends javax.swing.JPanel
{

  private Joint joint;
  private ValueChangedListener<Joint> jointListener;

  /** Creates new form JointControl */
  public JointEditor(Joint joint)
  {
    initComponents();
    setListeners();
    setJoint(joint);
  }

  private void setListeners()
  {
    this.jSliderJointValue.addChangeListener(new ChangeListener()
    {
      public void stateChanged(ChangeEvent e)
      {
        double value = Math.round(jSliderJointValue.getValue() / 100);
        jSpinnerJointValue.setValue(value);
        joint.setValue(value);
      }
    });

    this.jSpinnerJointValue.addChangeListener(new ChangeListener()
    {
      public void stateChanged(ChangeEvent e)
      {
        double value = (Double) jSpinnerJointValue.getValue();
        jSliderJointValue.setValue((int) Math.round(value * 100));
        joint.setValue(value);

        firePropertyChange("jointValueChanged", null, joint);
      }
    });

    this.jChkJointName.addChangeListener(new ChangeListener()
    {
      public void stateChanged(ChangeEvent e)
      {
        firePropertyChange("jointStateChanged", null, joint);
      }
    });

  }//end setListeners
  

  public void setJoint(Joint joint)
  {
    // remove the old listener
    if (this.jointListener != null && this.joint != null)
    {
      this.joint.removeValueChangedListener(this.jointListener);
    }//end if

    this.joint = joint;

    initJoint(joint.getId(),
              joint.getMinValue(),
              joint.getMaxValue(),
              joint.getValue(),
              joint.isValid());
  }//end setJoint

  private void initJoint(String jointName, double minValue, double maxValue, double currentValue, boolean valid)
  {

    if (!(minValue <= currentValue && currentValue <= maxValue)) 
    {
//      JOptionPane.showMessageDialog(null,
//              "Error : Wert ausserhalb der Grenzen: " + jointName + " " + minValue + " <= " + currentValue + " <= " + maxValue,
//              "Error", JOptionPane.ERROR_MESSAGE);
      if(currentValue < minValue)
      {
        currentValue = minValue;
      }
      if(currentValue > maxValue)
      {
        currentValue = maxValue;
      }
    }
    
    jSliderJointValue.setMajorTickSpacing(10);

    String text = "";
    if(jointName.contains("Yaw"))
    {
      text = "Yaw";
    }
    if(jointName.contains("Roll"))
    {
      text = "Roll";
    }
    if(jointName.contains("Pitch"))
    {
      text = "Pitch";
    }
    if(jointName.contains("YawPitch"))
    {
      text = "YawPitch";
    }
    if(jointName.startsWith("L"))
    {
      text += " left";
    }
    if(jointName.startsWith("R"))
    {
      text += " right";
    }

    this.jChkJointName.setText(text);
    this.jChkJointName.setSelected(valid);

    this.jLabelMinValue.setText(String.valueOf(minValue));
    this.jLabelMaxValue.setText(String.valueOf(maxValue));

    this.jSliderJointValue.setMinimum((int) Math.ceil(minValue * 100));
    this.jSliderJointValue.setMaximum((int) Math.ceil(maxValue * 100));
    this.jSliderJointValue.setValue((int) Math.ceil(currentValue * 100));
    //this.jSliderJointValue.setMajorTickSpacing(maxValue - minValue);
    //this.jSliderJointValue.setPaintLabels(true);

    SpinnerNumberModel model = new SpinnerNumberModel(currentValue, minValue, maxValue, 1);
    this.jSpinnerJointValue.setModel(model);
    this.jSpinnerJointValue.setValue(currentValue);

    // HACK: i dot't like this solution
    // TODO: create a new class for it
    if (this.jointListener == null) {
      this.jointListener = new ValueChangedListener<Joint>() {

        public void valueChanged(Joint joint) {
          jSliderJointValue.setValue((int) Math.round(joint.getValue() * 100));
          jSpinnerJointValue.setValue(joint.getValue());
        }

        public void stateChanged(Joint joint) {
          jChkJointName.setSelected(joint.isValid());
        }
      };
    }//end if

    this.joint.addValueChangedListener(this.jointListener);

    //this.jSpinnerJointValue.setMinimum(minValue);
    //this.jSpinnerJointValue.setMaximum(maxValue);
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jSpinnerJointValue = new javax.swing.JSpinner();
    jLabelMinValue = new javax.swing.JLabel();
    jSliderJointValue = new javax.swing.JSlider();
    jLabelMaxValue = new javax.swing.JLabel();
    jChkJointName = new javax.swing.JCheckBox();

    setToolTipText("Name of a Robots Joint/Motor");
    setMinimumSize(new java.awt.Dimension(380, 33));
    setPreferredSize(new java.awt.Dimension(380, 33));

    jSpinnerJointValue.setFont(jSpinnerJointValue.getFont().deriveFont(jSpinnerJointValue.getFont().getSize()-2f));
    jSpinnerJointValue.setPreferredSize(new java.awt.Dimension(50, 20));
    jSpinnerJointValue.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
      public void propertyChange(java.beans.PropertyChangeEvent evt) {
        jSpinnerJointValuePropertyChange(evt);
      }
    });

    jLabelMinValue.setFont(jLabelMinValue.getFont().deriveFont(jLabelMinValue.getFont().getSize()-2f));
    jLabelMinValue.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabelMinValue.setText("minVal");
    jLabelMinValue.setPreferredSize(new java.awt.Dimension(36, 14));

    jSliderJointValue.setFont(new java.awt.Font("DejaVu Sans", 0, 1));
    jSliderJointValue.setForeground(javax.swing.UIManager.getDefaults().getColor("Button.background"));
    jSliderJointValue.setMajorTickSpacing(100);

    jLabelMaxValue.setFont(jLabelMaxValue.getFont().deriveFont(jLabelMaxValue.getFont().getSize()-2f));
    jLabelMaxValue.setText("maxVal");

    jChkJointName.setText("joint");
    jChkJointName.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        jChkJointNameStateChanged(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jChkJointName, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jSpinnerJointValue, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jLabelMinValue, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(3, 3, 3)
        .addComponent(jSliderJointValue, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jLabelMaxValue)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
          .addComponent(jSpinnerJointValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabelMinValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jSliderJointValue, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabelMaxValue)
          .addComponent(jChkJointName))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void jSpinnerJointValuePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jSpinnerJointValuePropertyChange
    double value = (Double) jSpinnerJointValue.getValue();
    jSliderJointValue.setValue((int) Math.round(value * 100));
    joint.setValue(value);
  }//GEN-LAST:event_jSpinnerJointValuePropertyChange

  private void jChkJointNameStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jChkJointNameStateChanged
    joint.setValid(jChkJointName.isSelected());
  }//GEN-LAST:event_jChkJointNameStateChanged

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JCheckBox jChkJointName;
  private javax.swing.JLabel jLabelMaxValue;
  private javax.swing.JLabel jLabelMinValue;
  private javax.swing.JSlider jSliderJointValue;
  private javax.swing.JSpinner jSpinnerJointValue;
  // End of variables declaration//GEN-END:variables
}
