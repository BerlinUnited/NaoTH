/*
 * KeyFrameControl.java
 *
 * Created on 13. MÃ¤rz 2008, 18:26
 */

package de.naoth.me.controls.motionneteditor;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;

import de.naoth.me.core.KeyFrame;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;

/**
 *
 * @author  Heinrich Mellmann
 */
public class KeyFrameControl extends javax.swing.JPanel {
    
    private final Color mouseOverColor = new Color(149, 149, 193);
    private final Color mouseOutColor = new Color(220, 220, 225);
    private final Color selectedColor = new Color(250, 225, 220);
    private Color color;
    
    private boolean selected;
    private boolean focused;

    private boolean performDrag;
    private int dragOffsetX;
    private int dragOffsetY;
    
    private MotionNetEditorPanel parent;
    
    private KeyFrame keyFrame;
    
    /** Creates new form KeyFrameControl */
    public KeyFrameControl(MotionNetEditorPanel parent, KeyFrame keyFrame) 
    {
      initComponents();

      this.parent = parent;

      this.setPreferredSize(new Dimension(30,30));
      this.setSize(new Dimension(30,30));
      this.setBounds(keyFrame.getX(),keyFrame.getY(),30,30);
      this.setDoubleBuffered(true);
      this.setOpaque(false);
      color = mouseOutColor;

      this.keyFrame = keyFrame;
    }

     /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jPopupMenu = new javax.swing.JPopupMenu();
    jMenuItemDeleteKeyFrame = new javax.swing.JMenuItem();
    jMenuItemNewTransition = new javax.swing.JMenuItem();
    jMenuItemCopy = new javax.swing.JMenuItem();
    jMenuItemSetAsStart = new javax.swing.JMenuItem();

    jPopupMenu.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mousePressed(java.awt.event.MouseEvent evt) {
        jPopupMenuMousePressed(evt);
      }
    });

    jMenuItemDeleteKeyFrame.setText("Delete KeyFrame");
    jMenuItemDeleteKeyFrame.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mousePressed(java.awt.event.MouseEvent evt) {
        jMenuItemDeleteKeyFrameMousePressed(evt);
      }
    });
    jPopupMenu.add(jMenuItemDeleteKeyFrame);

    jMenuItemNewTransition.setText("New Transition");
    jMenuItemNewTransition.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        jMenuItemNewTransitionMouseReleased(evt);
      }
    });
    jPopupMenu.add(jMenuItemNewTransition);

    jMenuItemCopy.setText("Copy");
    jMenuItemCopy.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        jMenuItemCopyMouseReleased(evt);
      }
    });
    jPopupMenu.add(jMenuItemCopy);

    jMenuItemSetAsStart.setText("Set as Start");
    jMenuItemSetAsStart.setEnabled(false);
    jMenuItemSetAsStart.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        jMenuItemSetAsStartMouseReleased(evt);
      }
    });
    jPopupMenu.add(jMenuItemSetAsStart);

    jPopupMenu.getAccessibleContext().setAccessibleName("null");

    setComponentPopupMenu(jPopupMenu);
    addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        formMouseClicked(evt);
      }
      public void mouseEntered(java.awt.event.MouseEvent evt) {
        formMouseEntered(evt);
      }
      public void mouseExited(java.awt.event.MouseEvent evt) {
        formMouseExited(evt);
      }
      public void mousePressed(java.awt.event.MouseEvent evt) {
        formMousePressed(evt);
      }
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        formMouseReleased(evt);
      }
    });
    addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
      public void mouseDragged(java.awt.event.MouseEvent evt) {
        formMouseDragged(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 26, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 26, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
      dragOffsetX = evt.getX();
      dragOffsetY = evt.getY();
      performDrag = true;
      this.jMenuItemSetAsStart.setEnabled(parent.firstKeyFrameRemoved);
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
      performDrag = false;
    }//GEN-LAST:event_formMouseReleased

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
      this.parent.keyFrameControlFocused(this);
      this.focused = true;
      setColor(mouseOverColor);
    }//GEN-LAST:event_formMouseEntered

    private void formMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseExited
      setColor(mouseOutColor);
      this.focused = false;
    }//GEN-LAST:event_formMouseExited

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
      if (performDrag)
      {
        this.setLocation( this.getX() + evt.getX() - dragOffsetX, this.getY() - dragOffsetY + evt.getY());
        keyFrame.setX(this.getX());
        keyFrame.setY(this.getY());
      }
    }//GEN-LAST:event_formMouseDragged

    private void jMenuItemDeleteKeyFrameMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemDeleteKeyFrameMousePressed
      this.parent.removeKeyFrameControl(this);
    }//GEN-LAST:event_jMenuItemDeleteKeyFrameMousePressed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
      if(this.selected == true)
      {
        this.setSelected(false);
        parent.keyFrameControlSelected(null);
        parent.transitionControlSelected(null);
      }
      else
      {
        this.setSelected(true);
      }
    }//GEN-LAST:event_formMouseClicked

    private void jMenuItemNewTransitionMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemNewTransitionMouseReleased
      this.parent.startCreateNewTransition(this);
    }//GEN-LAST:event_jMenuItemNewTransitionMouseReleased

    private void jMenuItemCopyMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemCopyMouseReleased
      Clipboard systemClipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
      systemClipboard.setContents( new StringSelection(this.keyFrame.toString()), null);
      parent.setPasteEnable(true);
    }//GEN-LAST:event_jMenuItemCopyMouseReleased

    private void jMenuItemSetAsStartMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemSetAsStartMouseReleased
      if(parent.firstKeyFrameRemoved)
      {
        this.keyFrame.setId(0);
        parent.firstKeyFrameRemoved = false;
        this.jMenuItemSetAsStart.setEnabled(false);
      }
}//GEN-LAST:event_jMenuItemSetAsStartMouseReleased

    private void jPopupMenuMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPopupMenuMousePressed

    }//GEN-LAST:event_jPopupMenuMousePressed

    private void setColor(Color color)
    {
        if(this.selected)
        {
            this.color = selectedColor;
        }
        else
            this.color = color;
        repaint();
    }//end setColor
    
    public boolean isFocused() {
        return focused;
    }
        
    public KeyFrame getKeyFrame() {
        return keyFrame;
    }

    public void setKeyFrame(KeyFrame keyFrame) {
        this.keyFrame = keyFrame;
    }
        
    public boolean isSelected() {
        return selected;
    }

    public void setSelected(boolean selected) {
        this.selected = selected;
        //this.firePropertyChange(PROPERTY_SELECTED, oldSelected, this.selected);
        if(this.selected)
        {
            setColor(selectedColor);
            parent.keyFrameControlSelected(this);
        }
        else
        {
            setColor(mouseOutColor);
        }
        this.repaint();
    }//end setSelected
    
    @Override
    public void paint(Graphics g)
    {
        Graphics2D g2d = (Graphics2D)g;
        
        // schalte antialiasing ein
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        g2d.setColor(this.color);
        g2d.fillOval(0,0,getWidth(),getHeight());
        g2d.setColor(Color.black);
        g2d.drawOval(2,2,getWidth() - 5,getHeight() - 5);
        if(this.keyFrame.getId() == 0)
        {
          g2d.drawString("S", 12,20);
        }
        else
        {
          g2d.drawString(""+this.keyFrame.getId(), 12, 20);
        }

    }//end paint
    
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuItem jMenuItemCopy;
  private javax.swing.JMenuItem jMenuItemDeleteKeyFrame;
  private javax.swing.JMenuItem jMenuItemNewTransition;
  private javax.swing.JMenuItem jMenuItemSetAsStart;
  private javax.swing.JPopupMenu jPopupMenu;
  // End of variables declaration//GEN-END:variables
    
}
