// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: JointData.proto

#ifndef PROTOBUF_JointData_2eproto__INCLUDED
#define PROTOBUF_JointData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace naothmessages {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_JointData_2eproto();
void protobuf_AssignDesc_JointData_2eproto();
void protobuf_ShutdownFile_JointData_2eproto();

class JointData;
class SensorJointData;

// ===================================================================

class JointData : public ::google::protobuf::Message {
 public:
  JointData();
  virtual ~JointData();
  
  JointData(const JointData& from);
  
  inline JointData& operator=(const JointData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const JointData& default_instance();
  
  void Swap(JointData* other);
  
  // implements Message ----------------------------------------------
  
  JointData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JointData& from);
  void MergeFrom(const JointData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated double position = 1;
  inline int position_size() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline double position(int index) const;
  inline void set_position(int index, double value);
  inline void add_position(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      position() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_position();
  
  // repeated double hardness = 2;
  inline int hardness_size() const;
  inline void clear_hardness();
  static const int kHardnessFieldNumber = 2;
  inline double hardness(int index) const;
  inline void set_hardness(int index, double value);
  inline void add_hardness(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      hardness() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_hardness();
  
  // repeated double dp = 3;
  inline int dp_size() const;
  inline void clear_dp();
  static const int kDpFieldNumber = 3;
  inline double dp(int index) const;
  inline void set_dp(int index, double value);
  inline void add_dp(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      dp() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_dp();
  
  // repeated double ddp = 4;
  inline int ddp_size() const;
  inline void clear_ddp();
  static const int kDdpFieldNumber = 4;
  inline double ddp(int index) const;
  inline void set_ddp(int index, double value);
  inline void add_ddp(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      ddp() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_ddp();
  
  // @@protoc_insertion_point(class_scope:naothmessages.JointData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedField< double > position_;
  ::google::protobuf::RepeatedField< double > hardness_;
  ::google::protobuf::RepeatedField< double > dp_;
  ::google::protobuf::RepeatedField< double > ddp_;
  friend void  protobuf_AddDesc_JointData_2eproto();
  friend void protobuf_AssignDesc_JointData_2eproto();
  friend void protobuf_ShutdownFile_JointData_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static JointData* default_instance_;
};
// -------------------------------------------------------------------

class SensorJointData : public ::google::protobuf::Message {
 public:
  SensorJointData();
  virtual ~SensorJointData();
  
  SensorJointData(const SensorJointData& from);
  
  inline SensorJointData& operator=(const SensorJointData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorJointData& default_instance();
  
  void Swap(SensorJointData* other);
  
  // implements Message ----------------------------------------------
  
  SensorJointData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SensorJointData& from);
  void MergeFrom(const SensorJointData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .naothmessages.JointData jointData = 1;
  inline bool has_jointdata() const;
  inline void clear_jointdata();
  static const int kJointDataFieldNumber = 1;
  inline const ::naothmessages::JointData& jointdata() const;
  inline ::naothmessages::JointData* mutable_jointdata();
  
  // repeated double temperature = 2;
  inline int temperature_size() const;
  inline void clear_temperature();
  static const int kTemperatureFieldNumber = 2;
  inline double temperature(int index) const;
  inline void set_temperature(int index, double value);
  inline void add_temperature(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      temperature() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_temperature();
  
  // repeated double electricCurrent = 3;
  inline int electriccurrent_size() const;
  inline void clear_electriccurrent();
  static const int kElectricCurrentFieldNumber = 3;
  inline double electriccurrent(int index) const;
  inline void set_electriccurrent(int index, double value);
  inline void add_electriccurrent(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      electriccurrent() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_electriccurrent();
  
  // @@protoc_insertion_point(class_scope:naothmessages.SensorJointData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::naothmessages::JointData* jointdata_;
  ::google::protobuf::RepeatedField< double > temperature_;
  ::google::protobuf::RepeatedField< double > electriccurrent_;
  friend void  protobuf_AddDesc_JointData_2eproto();
  friend void protobuf_AssignDesc_JointData_2eproto();
  friend void protobuf_ShutdownFile_JointData_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SensorJointData* default_instance_;
};
// ===================================================================


// ===================================================================

// JointData

// repeated double position = 1;
inline int JointData::position_size() const {
  return position_.size();
}
inline void JointData::clear_position() {
  position_.Clear();
}
inline double JointData::position(int index) const {
  return position_.Get(index);
}
inline void JointData::set_position(int index, double value) {
  position_.Set(index, value);
}
inline void JointData::add_position(double value) {
  position_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
JointData::position() const {
  return position_;
}
inline ::google::protobuf::RepeatedField< double >*
JointData::mutable_position() {
  return &position_;
}

// repeated double hardness = 2;
inline int JointData::hardness_size() const {
  return hardness_.size();
}
inline void JointData::clear_hardness() {
  hardness_.Clear();
}
inline double JointData::hardness(int index) const {
  return hardness_.Get(index);
}
inline void JointData::set_hardness(int index, double value) {
  hardness_.Set(index, value);
}
inline void JointData::add_hardness(double value) {
  hardness_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
JointData::hardness() const {
  return hardness_;
}
inline ::google::protobuf::RepeatedField< double >*
JointData::mutable_hardness() {
  return &hardness_;
}

// repeated double dp = 3;
inline int JointData::dp_size() const {
  return dp_.size();
}
inline void JointData::clear_dp() {
  dp_.Clear();
}
inline double JointData::dp(int index) const {
  return dp_.Get(index);
}
inline void JointData::set_dp(int index, double value) {
  dp_.Set(index, value);
}
inline void JointData::add_dp(double value) {
  dp_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
JointData::dp() const {
  return dp_;
}
inline ::google::protobuf::RepeatedField< double >*
JointData::mutable_dp() {
  return &dp_;
}

// repeated double ddp = 4;
inline int JointData::ddp_size() const {
  return ddp_.size();
}
inline void JointData::clear_ddp() {
  ddp_.Clear();
}
inline double JointData::ddp(int index) const {
  return ddp_.Get(index);
}
inline void JointData::set_ddp(int index, double value) {
  ddp_.Set(index, value);
}
inline void JointData::add_ddp(double value) {
  ddp_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
JointData::ddp() const {
  return ddp_;
}
inline ::google::protobuf::RepeatedField< double >*
JointData::mutable_ddp() {
  return &ddp_;
}

// -------------------------------------------------------------------

// SensorJointData

// required .naothmessages.JointData jointData = 1;
inline bool SensorJointData::has_jointdata() const {
  return _has_bit(0);
}
inline void SensorJointData::clear_jointdata() {
  if (jointdata_ != NULL) jointdata_->::naothmessages::JointData::Clear();
  _clear_bit(0);
}
inline const ::naothmessages::JointData& SensorJointData::jointdata() const {
  return jointdata_ != NULL ? *jointdata_ : *default_instance_->jointdata_;
}
inline ::naothmessages::JointData* SensorJointData::mutable_jointdata() {
  _set_bit(0);
  if (jointdata_ == NULL) jointdata_ = new ::naothmessages::JointData;
  return jointdata_;
}

// repeated double temperature = 2;
inline int SensorJointData::temperature_size() const {
  return temperature_.size();
}
inline void SensorJointData::clear_temperature() {
  temperature_.Clear();
}
inline double SensorJointData::temperature(int index) const {
  return temperature_.Get(index);
}
inline void SensorJointData::set_temperature(int index, double value) {
  temperature_.Set(index, value);
}
inline void SensorJointData::add_temperature(double value) {
  temperature_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
SensorJointData::temperature() const {
  return temperature_;
}
inline ::google::protobuf::RepeatedField< double >*
SensorJointData::mutable_temperature() {
  return &temperature_;
}

// repeated double electricCurrent = 3;
inline int SensorJointData::electriccurrent_size() const {
  return electriccurrent_.size();
}
inline void SensorJointData::clear_electriccurrent() {
  electriccurrent_.Clear();
}
inline double SensorJointData::electriccurrent(int index) const {
  return electriccurrent_.Get(index);
}
inline void SensorJointData::set_electriccurrent(int index, double value) {
  electriccurrent_.Set(index, value);
}
inline void SensorJointData::add_electriccurrent(double value) {
  electriccurrent_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
SensorJointData::electriccurrent() const {
  return electriccurrent_;
}
inline ::google::protobuf::RepeatedField< double >*
SensorJointData::mutable_electriccurrent() {
  return &electriccurrent_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace naothmessages

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_JointData_2eproto__INCLUDED
