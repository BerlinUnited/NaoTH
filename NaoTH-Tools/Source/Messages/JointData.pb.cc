// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "JointData.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace naothmessages {

namespace {

const ::google::protobuf::Descriptor* JointData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JointData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SensorJointData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorJointData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_JointData_2eproto() {
  protobuf_AddDesc_JointData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "JointData.proto");
  GOOGLE_CHECK(file != NULL);
  JointData_descriptor_ = file->message_type(0);
  static const int JointData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointData, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointData, hardness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointData, dp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointData, ddp_),
  };
  JointData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JointData_descriptor_,
      JointData::default_instance_,
      JointData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JointData));
  SensorJointData_descriptor_ = file->message_type(1);
  static const int SensorJointData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorJointData, jointdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorJointData, temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorJointData, electriccurrent_),
  };
  SensorJointData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SensorJointData_descriptor_,
      SensorJointData::default_instance_,
      SensorJointData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorJointData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorJointData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SensorJointData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_JointData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JointData_descriptor_, &JointData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SensorJointData_descriptor_, &SensorJointData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_JointData_2eproto() {
  delete JointData::default_instance_;
  delete JointData_reflection_;
  delete SensorJointData::default_instance_;
  delete SensorJointData_reflection_;
}

void protobuf_AddDesc_JointData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017JointData.proto\022\rnaothmessages\"H\n\tJoin"
    "tData\022\020\n\010position\030\001 \003(\001\022\020\n\010hardness\030\002 \003("
    "\001\022\n\n\002dp\030\003 \003(\001\022\013\n\003ddp\030\004 \003(\001\"l\n\017SensorJoin"
    "tData\022+\n\tjointData\030\001 \002(\0132\030.naothmessages"
    ".JointData\022\023\n\013temperature\030\002 \003(\001\022\027\n\017elect"
    "ricCurrent\030\003 \003(\001B7\n\'de.hu_berlin.informa"
    "tik.ki.nao.messagesB\014JointDataMsg", 273);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "JointData.proto", &protobuf_RegisterTypes);
  JointData::default_instance_ = new JointData();
  SensorJointData::default_instance_ = new SensorJointData();
  JointData::default_instance_->InitAsDefaultInstance();
  SensorJointData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_JointData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_JointData_2eproto {
  StaticDescriptorInitializer_JointData_2eproto() {
    protobuf_AddDesc_JointData_2eproto();
  }
} static_descriptor_initializer_JointData_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int JointData::kPositionFieldNumber;
const int JointData::kHardnessFieldNumber;
const int JointData::kDpFieldNumber;
const int JointData::kDdpFieldNumber;
#endif  // !_MSC_VER

JointData::JointData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JointData::InitAsDefaultInstance() {
}

JointData::JointData(const JointData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JointData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JointData::~JointData() {
  SharedDtor();
}

void JointData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JointData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JointData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JointData_descriptor_;
}

const JointData& JointData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_JointData_2eproto();  return *default_instance_;
}

JointData* JointData::default_instance_ = NULL;

JointData* JointData::New() const {
  return new JointData;
}

void JointData::Clear() {
  position_.Clear();
  hardness_.Clear();
  dp_.Clear();
  ddp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JointData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_position())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_position())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_position;
        if (input->ExpectTag(17)) goto parse_hardness;
        break;
      }
      
      // repeated double hardness = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_hardness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_hardness())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_hardness())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_hardness;
        if (input->ExpectTag(25)) goto parse_dp;
        break;
      }
      
      // repeated double dp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_dp())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dp())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_dp;
        if (input->ExpectTag(33)) goto parse_ddp;
        break;
      }
      
      // repeated double ddp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ddp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_ddp())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_ddp())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_ddp;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JointData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double position = 1;
  for (int i = 0; i < this->position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->position(i), output);
  }
  
  // repeated double hardness = 2;
  for (int i = 0; i < this->hardness_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->hardness(i), output);
  }
  
  // repeated double dp = 3;
  for (int i = 0; i < this->dp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->dp(i), output);
  }
  
  // repeated double ddp = 4;
  for (int i = 0; i < this->ddp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->ddp(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JointData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double position = 1;
  for (int i = 0; i < this->position_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->position(i), target);
  }
  
  // repeated double hardness = 2;
  for (int i = 0; i < this->hardness_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->hardness(i), target);
  }
  
  // repeated double dp = 3;
  for (int i = 0; i < this->dp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->dp(i), target);
  }
  
  // repeated double ddp = 4;
  for (int i = 0; i < this->ddp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->ddp(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JointData::ByteSize() const {
  int total_size = 0;
  
  // repeated double position = 1;
  {
    int data_size = 0;
    data_size = 8 * this->position_size();
    total_size += 1 * this->position_size() + data_size;
  }
  
  // repeated double hardness = 2;
  {
    int data_size = 0;
    data_size = 8 * this->hardness_size();
    total_size += 1 * this->hardness_size() + data_size;
  }
  
  // repeated double dp = 3;
  {
    int data_size = 0;
    data_size = 8 * this->dp_size();
    total_size += 1 * this->dp_size() + data_size;
  }
  
  // repeated double ddp = 4;
  {
    int data_size = 0;
    data_size = 8 * this->ddp_size();
    total_size += 1 * this->ddp_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JointData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JointData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JointData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JointData::MergeFrom(const JointData& from) {
  GOOGLE_CHECK_NE(&from, this);
  position_.MergeFrom(from.position_);
  hardness_.MergeFrom(from.hardness_);
  dp_.MergeFrom(from.dp_);
  ddp_.MergeFrom(from.ddp_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JointData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointData::CopyFrom(const JointData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointData::IsInitialized() const {
  
  return true;
}

void JointData::Swap(JointData* other) {
  if (other != this) {
    position_.Swap(&other->position_);
    hardness_.Swap(&other->hardness_);
    dp_.Swap(&other->dp_);
    ddp_.Swap(&other->ddp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JointData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JointData_descriptor_;
  metadata.reflection = JointData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SensorJointData::kJointDataFieldNumber;
const int SensorJointData::kTemperatureFieldNumber;
const int SensorJointData::kElectricCurrentFieldNumber;
#endif  // !_MSC_VER

SensorJointData::SensorJointData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SensorJointData::InitAsDefaultInstance() {
  jointdata_ = const_cast< ::naothmessages::JointData*>(&::naothmessages::JointData::default_instance());
}

SensorJointData::SensorJointData(const SensorJointData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SensorJointData::SharedCtor() {
  _cached_size_ = 0;
  jointdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorJointData::~SensorJointData() {
  SharedDtor();
}

void SensorJointData::SharedDtor() {
  if (this != default_instance_) {
    delete jointdata_;
  }
}

void SensorJointData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorJointData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorJointData_descriptor_;
}

const SensorJointData& SensorJointData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_JointData_2eproto();  return *default_instance_;
}

SensorJointData* SensorJointData::default_instance_ = NULL;

SensorJointData* SensorJointData::New() const {
  return new SensorJointData;
}

void SensorJointData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (jointdata_ != NULL) jointdata_->::naothmessages::JointData::Clear();
    }
  }
  temperature_.Clear();
  electriccurrent_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SensorJointData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .naothmessages.JointData jointData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jointdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_temperature;
        break;
      }
      
      // repeated double temperature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_temperature())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_temperature())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_temperature;
        if (input->ExpectTag(25)) goto parse_electricCurrent;
        break;
      }
      
      // repeated double electricCurrent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_electricCurrent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_electriccurrent())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_electriccurrent())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_electricCurrent;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SensorJointData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .naothmessages.JointData jointData = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->jointdata(), output);
  }
  
  // repeated double temperature = 2;
  for (int i = 0; i < this->temperature_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->temperature(i), output);
  }
  
  // repeated double electricCurrent = 3;
  for (int i = 0; i < this->electriccurrent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->electriccurrent(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SensorJointData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .naothmessages.JointData jointData = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->jointdata(), target);
  }
  
  // repeated double temperature = 2;
  for (int i = 0; i < this->temperature_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->temperature(i), target);
  }
  
  // repeated double electricCurrent = 3;
  for (int i = 0; i < this->electriccurrent_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->electriccurrent(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SensorJointData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .naothmessages.JointData jointData = 1;
    if (has_jointdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jointdata());
    }
    
  }
  // repeated double temperature = 2;
  {
    int data_size = 0;
    data_size = 8 * this->temperature_size();
    total_size += 1 * this->temperature_size() + data_size;
  }
  
  // repeated double electricCurrent = 3;
  {
    int data_size = 0;
    data_size = 8 * this->electriccurrent_size();
    total_size += 1 * this->electriccurrent_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorJointData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SensorJointData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SensorJointData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SensorJointData::MergeFrom(const SensorJointData& from) {
  GOOGLE_CHECK_NE(&from, this);
  temperature_.MergeFrom(from.temperature_);
  electriccurrent_.MergeFrom(from.electriccurrent_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_jointdata()->::naothmessages::JointData::MergeFrom(from.jointdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SensorJointData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorJointData::CopyFrom(const SensorJointData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorJointData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SensorJointData::Swap(SensorJointData* other) {
  if (other != this) {
    std::swap(jointdata_, other->jointdata_);
    temperature_.Swap(&other->temperature_);
    electriccurrent_.Swap(&other->electriccurrent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SensorJointData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorJointData_descriptor_;
  metadata.reflection = SensorJointData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace naothmessages

// @@protoc_insertion_point(global_scope)
