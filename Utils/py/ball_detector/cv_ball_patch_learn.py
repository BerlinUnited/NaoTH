#!/usr/bin/python

import os, sys, getopt, math
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as ptc

from sklearn.linear_model import Perceptron
from sklearn.linear_model import SGDClassifier
from sklearn import svm
import sklearn.neural_network as nn

import patchReader

import cv2

show_size = (50, 30) # width, height
patch_size = (12, 12) # width, height
def getMarker(x,y,c):
  pos = (x*(patch_size[0]+1)-1,y*(patch_size[1]+1)-1)
  return ptc.Rectangle( pos, width=patch_size[0]+1, height=patch_size[1]+1, alpha=0.3, color=c)

def unroll_responses(responses, class_n):
        sample_n = len(responses)
        new_responses = np.zeros(sample_n*class_n, np.int32)
        resp_idx = np.int32( responses + np.arange(sample_n)*class_n )
        new_responses[resp_idx] = 1
        return new_responses
  
def learn(X, labels):
  
  estimator = cv2.ml.ANN_MLP_create()
  estimator.setLayerSizes(np.asarray([144,10,10,10,2]))
  # must be set!!!
  estimator.setActivationFunction(cv2.ml.ANN_MLP_SIGMOID_SYM )
  estimator.setTermCriteria((cv2.TERM_CRITERIA_COUNT + cv2.TERM_CRITERIA_EPS, 20000, 0.001))
  #estimator.setTrainMethod(cv2.ml.ANN_MLP_BACKPROP)
  #estimator.setBackpropWeightScale(0.001)
  #estimator.setBackpropMomentumScale(0.0)
  
  responses = np.float32(unroll_responses(labels, 2).reshape(-1, 2))
  
  trainData = cv2.ml.TrainData_create(samples=np.float32(X), layout=cv2.ml.ROW_SAMPLE , responses=responses, sampleIdx=np.asarray(range(0,len(X))))
  
  print("Training...")
  
  estimator.train(trainData)
  print("Saving...")
  estimator.save("ball_detector_model.dat")
  
  
  print("Evaluating...")
  image = np.zeros(((patch_size[1]+1)*show_size[1], (patch_size[0]+1)*show_size[0]))
  
  # classify
  j = 0
  marker = []
  for i in range(4400,4400+show_size[0]*show_size[1]):
    a = np.transpose(np.reshape(X[i,:], (12,12)))
    y = j // show_size[0]
    x = j % show_size[0]
    image[y*13:y*13+12,x*13:x*13+12] = a
    
    evalinput = np.asmatrix(np.float32(X[i,:]))
    ret, result = estimator.predict(evalinput)
    if ret > 0:
      #print(ret, result)
      if labels[i]:
        marker.append(getMarker(x,y,'green'))
      else:
        marker.append(getMarker(x,y,'red'))
    else:
      if labels[i]:
        marker.append(getMarker(x,y,'yellow'))
      
    j += 1
    
  plt.imshow(image, cmap=plt.cm.gray, interpolation='nearest')
  for m in marker:
    plt.gca().add_patch(m)
  plt.xticks(())
  plt.yticks(())
  plt.show()
  
  
def load_from_csv(file):
  f = open(file, 'r')
  patches = []
  
  for line in f:
    s = line.split(';')
    a = np.array(s).astype(float)
    patches.append(a)

if __name__ == "__main__":
  
  ball_labels_csv = [15, 33, 51, 70, 87, 106, 125, 144, 160, 187, 205, 224, 242, 263, 281, 300, 322, 341, 358, 379, 399, 418, 438, 459, 497, 480, 513, 530, 548, 569, 587, 615, 632, 651, 671, 692, 712, 731, 751, 770, 791, 809, 828, 847, 866, 883, 904, 924, 942, 956, 972, 998, 1024, 1046, 1067, 1087, 1109, 1128, 1147, 1162, 1180, 1197, 1214, 1230, 1248, 1268, 1287, 1312, 1330, 1346, 1366, 1380, 1399, 1419, 1437, 1498, 1516, 1536, 1554, 1572, 1590, 1608, 1626, 1645, 1660, 1681, 1696, 1717, 1732, 1756, 1772, 1789, 1809, 1824, 1845, 1847, 1863, 1864, 1884, 1886, 1911, 1940, 1917, 1948, 1959, 1966, 1979, 1986, 2006, 2013, 2023, 2034, 2052, 2068, 2047, 2077,2097, 2090, 2111, 2119, 2133, 2140, 2151, 2156, 2171, 2191, 2196, 2178, 2211, 2323, 2348, 2369, 2392, 2409, 2434, 2456, 2474, 2492, 2512, 2543, 2587, 2567, 2618, 2633, 2657, 2676, 2694, 2722, 2740, 2760, 2781, 2802, 2818, 2840, 2858, 2878, 2899, 2930, 2950, 2969, 2993, 3015, 3036, 3056, 3078, 3097, 3121, 3145, 3159, 3186, 3222, 3209, 3249, 3274, 3294, 3311, 3326, 3344, 3359, 3380, 3393, 3406, 3420, 3437, 3453, 3470, 3489, 3523, 3508, 3538, 3554, 3572, 3592, 3611, 3630, 3653,3672, 3691, 3711, 3725, 3741, 3759, 3776, 3792, 3813, 3830, 3844, 3860, 3878, 3895, 3912, 3926, 3947, 3965, 3982, 4000, 4017, 4032, 4047, 4065, 4079, 4095, 4111, 4126, 4139, 4156, 4169, 4188, 4206, 4228, 4249, 4281, 4265, 4301, 4312, 4330, 4342, 4353, 4366, 4398, 4421, 4433, 4447, 4462, 4482, 4502, 4519, 4537, 4548, 4564, 4581, 4592, 4607, 4619, 4634, 4654, 4667, 4685, 4703, 4718, 4738, 4757, 4773, 4791, 4806, 4825, 4846, 4868, 4883, 4899, 4920, 4943, 4957, 4973, 5004, 5027,5046, 5064, 5080, 5104, 5123, 5139, 5153, 5172, 5190, 5219, 5235, 5252, 5270, 5292, 5312, 5324, 5334, 5352, 5371, 5387, 5408, 5422, 5451, 5468, 5490, 5509, 5527, 5555, 5574, 5602, 5624, 5647, 5667, 5690, 5707, 5728, 5750, 5768, 5791, 5812, 5833, 5849, 5867, 5885, 5905, 5922, 5945, 5961, 5976, 5995, 6017, 6035, 6059, 6070, 6395, 6406, 6448, 6467, 6484, 6430, 6503, 6519, 6536, 6555, 6576, 6594, 6609, 6626, 6645, 6661, 6676, 6695, 6714, 6731, 6752, 6770, 6786, 6803, 6819, 6836,6851, 6866, 6883, 6902, 6923, 6937, 6953, 6971, 6987, 7017, 7043, 7061, 7080, 7104, 7123, 7141, 7163, 7182, 7202, 7220, 7234, 7250, 7267, 7283, 7302, 7327, 7353, 7372, 7387, 7404, 7426, 7444, 7465, 7490, 7549, 7563, 7583]
 
 
  #ball_labels_log = [2, 16, 31, 45, 59, 75, 90, 104, 126, 141, 158, 171, 188, 202, 217, 233, 251, 263, 278, 294, 310, 325, 341, 357, 373, 386, 400, 415, 431, 446, 466, 483, 499, 515, 530, 545, 562, 575, 593, 611, 626, 641, 656, 673, 687, 704, 720, 738, 751, 764, 784, 801, 818, 833, 848, 866, 879, 894, 907, 920, 937, 950, 962, 976, 989, 1006, 1028, 1043, 1057, 1072, 1086, 1100, 1114, 1130, 1163, 1179, 1194, 1210, 1225, 1241, 1256, 1271, 1285, 1299, 1313, 1329, 1342, 1360, 1377, 1396, 1409, 1423,1439, 1453, 1469, 1483, 1500, 1518, 1521, 1541, 1546, 1557, 1561, 1572, 1576, 1592, 1595, 1606, 1609, 1622, 1625, 1637, 1640, 1651, 1654, 1665, 1669, 1684, 1687, 1699, 1702, 1716, 1719, 1735, 1739, 1752, 1850, 1863, 1880, 1894, 1910, 1929, 1946, 1962, 1977, 1999, 2016, 2037, 2060, 2080, 2095, 2113, 2131, 2152, 2169, 2185, 2203, 2217, 2233, 2246, 2260, 2277, 2289, 2308, 2329, 2344, 2362, 2380, 2399, 2419, 2435, 2452, 2467, 2485, 2505, 2523, 2538, 2558, 2574, 2589, 2607, 2623,2636, 2651, 2665, 2679, 2692, 2705, 2716, 2728, 2743, 2758, 2772, 2786, 2799, 2810, 2821, 2834, 2849, 2863, 2878, 2891, 2906, 2921, 2937, 2951, 2964, 2977, 2989, 3002, 3015, 3031, 3049, 3061, 3075, 3089, 3102, 3116, 3131, 3143, 3156, 3171, 3185, 3199, 3210, 3222, 3236, 3248, 3260, 3273, 3285, 3298, 3309, 3321, 3335, 3346, 3363, 3379, 3388, 3402, 3415, 3426, 3435, 3448, 3457, 3467, 3482, 3492, 3505, 3517, 3526, 3542, 3558, 3570, 3586, 3598, 3610, 3621, 3633, 3645, 3654, 3663,3676, 3687, 3699, 3714, 3727, 3739, 3752, 3767, 3779, 3795, 3808, 3823, 3840, 3857, 3871, 3884, 3904, 3920, 3934, 3954, 3970, 3987, 4002, 4017, 4031, 4048, 4065, 4078, 4094, 4109, 4128, 4144, 4155, 4168, 4183, 4200, 4215, 4230, 4244, 4257, 4270, 4283, 4302, 4317, 4331, 4347, 4364, 4385, 4400, 4422, 4440, 4458, 4475, 4491, 4508, 4525, 4541, 4559, 4577, 4594, 4611, 4628, 4644, 4658, 4672, 4685, 4701, 4715, 4728, 4744, 4760, 4776, 4794, 4809, 4823, 4835, 4844, 5057, 5082, 5090,5108, 5122, 5136, 5149, 5160, 5171, 5185, 5199, 5215, 5230, 5242, 5255, 5268, 5281, 5293, 5308, 5327, 5342, 5361, 5375, 5400, 5414, 5426, 5438, 5451, 5464, 5480, 5494, 5511, 5524, 5539, 5550, 5564, 5584, 5599, 5613, 5630, 5644, 5660, 5675, 5691, 5706, 5723, 5737, 5750, 5762, 5776, 5789, 5804, 5822, 5838, 5852, 5865, 5878, 5890, 5904, 5924, 5941, 5957, 5971, 5986]
  ball_labels_log = [1, 4, 6, 8, 10, 12, 14, 17, 19, 21, 23, 25, 27, 29, 32, 34, 36, 38, 40, 42, 45, 48, 51, 54, 57, 59, 61, 63, 65, 67, 70, 72, 75, 77, 79, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 105, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 132, 134, 137, 139, 141, 144, 147, 150, 152, 155, 157, 160, 162, 165, 167, 169, 171, 173, 175, 177, 179, 181, 184, 186, 189, 191, 193, 195, 197, 200, 202, 205, 207, 209, 211, 213, 215, 217, 219, 221, 225, 227, 230, 232, 234, 237, 239, 241, 244, 249, 252, 254, 257, 260, 263, 266, 268, 271, 274, 277, 280, 283, 286, 289, 292, 295, 298, 301, 304, 307, 310, 313, 316, 319, 322, 325, 328, 331, 334, 337, 340, 343, 346, 349, 352, 355, 358, 361, 364, 367, 370, 373, 376, 379, 382, 385, 388, 391, 394, 398, 401, 404, 412, 416, 420, 423, 426, 429, 431, 433, 434, 436, 438, 440, 442, 446, 451, 457, 465, 474, 543, 551, 557, 564, 568, 572, 575, 578, 581, 585, 587, 591, 597, 610, 623, 632, 637, 639, 642, 645, 648, 651, 654, 658, 662, 666, 671, 674, 678, 684, 689, 692, 696, 700, 704, 717, 722, 726, 729, 733, 736, 739, 742, 746, 749, 752, 755, 759, 762, 764, 766, 770, 773, 776, 779, 782, 785, 790, 793, 796, 799, 802, 807, 811, 814, 818, 823, 826, 829, 832, 835, 840, 843, 846, 849, 852, 856, 859, 862, 866, 874, 884, 887, 890, 893, 897, 900, 902, 905, 907, 912, 914, 916, 920, 922, 925, 927, 929, 932, 934, 936, 939, 941, 944, 946, 948, 950, 953, 957, 960, 962, 965, 970, 975, 981, 986, 992, 998, 1512, 1519, 1524, 1528, 1533, 1537, 1541, 1546, 1553, 1558, 1564, 2148, 2152, 2154, 2158, 2163, 2166, 2172, 2178, 2187, 2195, 2213, 2215, 2218, 2221, 2222, 2224, 2226, 2229, 2233, 2236, 2239, 2243, 2248, 2253, 2260, 2267, 2975, 2979, 2982, 2987, 2991, 2997, 3940, 3952, 3964, 3976, 3987, 3998, 4011, 4023, 4036, 4048, 4059, 4071, 4082, 4092, 4103, 4116, 4127, 4138, 4150, 4162, 4175, 4187, 4198, 4210, 4222, 4234, 4245, 4255, 4267, 4278, 4290, 4302, 4314, 4326, 4337, 4347, 4358, 4370, 4382, 4395, 4407, 4417, 4429, 4439, 4450, 4462, 4474, 4486, 4498, 4509, 4520, 4530, 4543, 4556, 4567, 4578, 4592, 4604, 4614, 4625, 4636, 4647, 4661, 4671, 4683, 4695, 4706, 4716, 4728, 4740, 4751, 4763, 4774, 4784, 4798, 4808, 4821, 4833, 4845, 4858, 4872, 4881, 4893, 4900, 4914, 4926, 4936, 4949, 4961, 4974, 4987, 4999, 5011, 5021, 5033, 5046, 5056, 5067, 5076, 5087, 5099, 5111, 5122, 5133, 5143, 5154, 5166, 5175, 5186, 5195, 5206, 5220, 5231, 5243, 5253, 5264, 5273, 5284, 5295, 5305, 5315, 5327, 5341, 5350, 5362, 5376, 5388, 5395, 5421, 5433, 5445, 5456, 5465, 5477, 5490, 5504, 5516, 5523, 5530, 5536, 5544, 5554, 5569, 5590, 5613, 5637, 5663, 5687, 5703, 5715, 5727, 5734, 5741, 5748, 5757, 5768, 5788, 5887, 5907, 5915, 5924, 5933, 5938, 5947, 5957, 5964, 5971, 5981, 5995, 6009, 6019, 6029, 6037, 6043, 6050, 6056, 6062, 6068, 6074, 6082, 6090, 6098, 6107, 6117, 6127, 6136, 6144, 6151, 6158, 6166, 6175, 6184, 6193, 6204, 6213, 6220, 6229, 6239, 6249, 6258, 6266, 6277, 6287, 6296, 6305, 6314, 6326, 6334, 6342, 6351, 6359, 6369, 6375, 6384, 6393, 6404, 6415, 6425, 6434, 6444, 6452, 6460, 6471, 6482, 6492, 6501, 6512, 6520, 6530, 6539, 6550, 6560, 6570, 6578, 6587, 6597, 6607, 6617, 6625, 6634, 6643, 6653, 6663, 6673, 6682, 6692, 6701, 6710, 6719, 6729, 6737, 6747, 6755, 6764, 6773, 6782, 6793, 6818, 6825, 6832, 6841, 6850, 6864, 6872, 6880, 6902, 6926, 6933, 6939, 6948, 6957, 6964, 6972, 6980, 6988, 6998, 7007, 7016, 7026, 7034, 7041, 7050, 7059, 7069, 7077, 7086, 7092, 7099, 7105, 7114, 7120, 7127, 7135, 7144, 7152, 7158, 7166, 7175, 7183, 7191, 7199, 7206, 7211, 7215, 7219, 7224, 7228, 7233, 7238, 7243, 7250, 7256, 7265, 7277, 7289, 7302, 7313, 7326, 7335, 7345, 7358, 7364, 7370, 7375, 7381, 7392, 7398, 7403, 7410, 7418, 7429, 7447, 7459, 7469, 7478, 7483, 7489, 7500, 7511, 7523, 7531, 7548, 7555, 7567, 7577, 7588, 7601, 7605, 7609, 7617, 7629, 7644, 7652, 7659, 7665, 7671, 7677, 7683, 7688, 7694, 7699, 7705, 7710, 7715, 7720, 7726, 7731, 7736, 7741, 7746, 7751, 7757, 7761, 7766, 7770, 7775, 7780, 7784, 7789, 7795, 7800, 7804, 7809, 7813, 7817, 7822, 7827, 7832, 7837, 7842, 7847, 7852, 7856, 7861, 7865, 7870, 7874, 7878, 7882, 7885, 7890, 7895, 7900, 7905, 7910, 7915, 7920, 7924, 7928, 7932, 7936, 7939, 7942, 7945, 7949, 7952, 7955, 7958, 7962, 7966, 7970, 7974, 7978, 7982, 7987, 7992, 7996, 8001, 8006, 8010, 8014, 8018, 8022, 8025, 8028, 8030, 8033, 8037, 8041, 8044, 8047, 8053, 8059, 8064, 8069, 8073, 8078, 8083, 8088, 8093, 8098, 8103, 8108, 8113, 8117, 8120, 8124, 8128, 8132, 8136, 8141, 8146, 8151, 8157, 8163, 8168, 8173, 8178, 8182, 8188, 8193, 8197, 8201, 8204, 8207, 8211, 8216, 8222, 8227, 8233, 8239, 8244, 8249, 8253, 8257, 8262, 8265, 8270, 8275, 8279, 8283, 8290, 8302, 8313, 8323, 8335, 8345, 8352, 8363, 8374, 8386, 8394, 8413, 8423, 8435, 8440, 8444, 8448, 8452, 8456, 8460, 8464, 8468, 8472, 8476, 8480, 8484, 8488, 8492, 8496, 8500, 8504, 8512, 8516, 8520, 8524, 8528, 8531, 8533, 8536, 8541, 8545, 8548, 8551, 8555, 8558, 8561, 8564, 8567, 8570, 8574, 8580, 8585, 8588, 8592, 8595, 8598, 8602, 8606, 8611, 8615, 8620, 8624, 8628, 8633, 8638, 8643, 8648, 8654, 8659, 8664, 8668, 8673, 8677, 8681, 8685, 8688, 8692, 8696, 8701, 8707, 8713, 8718, 8722, 8728, 8733, 8738, 8744, 8749, 8754, 8761, 8766, 8773, 8780, 8784, 8790, 8798, 8805, 8811, 8817, 8822, 8828, 8834, 8840, 8846, 8852, 8856, 8861, 8865, 8871, 8876, 8882, 8887, 8890, 8895, 8900, 8906, 8911, 8916, 8921, 8926, 8931, 8936, 8941, 8945, 8950, 8955, 8960, 8965, 8970, 8974, 8979, 8983, 8987, 8990, 8993, 8996, 9000, 9004, 9007, 9009, 9012, 9016, 9021, 9024, 9028, 9032, 9036, 9039, 9043, 9047, 9050, 9054, 9058, 9061, 9065, 9067, 9071, 9074, 9078, 9082, 9086, 9090, 9094, 9098, 9102, 9107, 9111, 9115, 9119, 9124, 9127, 9131, 9134, 9137, 9139, 9141, 9147, 9153, 9158, 9163, 9168, 9172, 9178, 9184, 9188, 9202, 9206, 9210, 9214, 9218, 9222, 9225, 9229, 9232, 9235, 9237, 9239, 9241, 9243, 9245, 9246, 9248, 9250, 9252, 9254, 9256, 9258, 9260, 9262, 9264, 9266, 9268, 9271, 9274, 9277, 9279, 9281, 9282, 9285, 9290, 9293, 9296, 9298, 9302, 9305, 9309, 9311, 9314, 9317, 9320, 9322, 9326, 9329, 9331, 9333, 9335, 9336, 9338, 9339, 9344, 9350, 9352, 9357, 9362, 9364, 9372, 9376, 9386, 9409, 9425, 9435, 9451, 9468, 9477, 9481, 9484, 9486, 9488, 9489, 9491, 9492, 9493, 9494, 9495, 9501, 9505, 9510, 9515, 9523, 9533, 9544, 9556, 9569, 9582, 9591, 9603, 9613, 9620, 9631, 9640, 9650, 9660, 9667, 9671, 9679, 9687, 9697, 9709, 9720, 9728, 9740, 9750, 9759, 9767, 9776, 9787, 9796, 9807, 9817, 9827, 9837, 9848, 9858, 9871, 9882, 9892, 9905, 9915, 9923, 9936, 9947, 9959, 9969, 9978, 9989, 10001, 10011, 10022, 10033, 10041, 10052, 10060, 10069, 10078, 10089, 10099, 10110, 10121, 10133, 10144, 10157, 10168, 10178, 10188, 10197, 10208, 10217, 10228, 10239, 10249, 10261, 10273, 10283, 10294, 10303, 10316, 10327, 10341, 10348, 10361, 10370, 10383, 10395, 10406, 10417, 10428, 10439, 10450, 10460, 10470, 10480, 10490, 10501, 10511, 10522, 10532, 10545, 10553, 10563, 10572, 10582, 10595, 10604, 10613, 10622, 10635, 10645, 10656, 10663, 10675, 10687, 10699, 10713, 10722, 10733, 10743, 10753, 10765, 10773, 10786, 10797, 10809, 10819, 10825, 10835, 10841, 10853, 10864, 10873, 10878, 10886, 10896]
  # load patches from the file
  patches = patchReader.readAllPatchesFromLog('./patches-approach-ball.log')
  ball_labels = ball_labels_log
  
  X = np.array(patches)

  labels = np.zeros((X.shape[0],))
  labels[ball_labels_log] = 1
  
  learn(X, labels)
  

    
