import sys
import math
import matplotlib
from matplotlib import pyplot as plt 
from matplotlib import rcParams
from matplotlib import gridspec
import cPickle
import argparse

import math2d as m2d
from parse_behavior import BehaviorData, WorldState, Ball, Kick

import numpy as np


def getBall(s):
  return s.odometry*s.ball.percept

if __name__ == "__main__":
  rcParams["font.family"] = "serif"
  rcParams["xtick.labelsize"] = 8
  rcParams["ytick.labelsize"] = 8
  rcParams["axes.labelsize"] = 8
  rcParams["axes.titlesize"] = 8
  
  argparser = argparse.ArgumentParser(description="plot pickle files generated by parse_behavior")
  argparser.add_argument("filenames", help="locations of pickle files)", nargs="+")
  
  args = argparser.parse_args()

  trajectories = {}
  for filename in args.filenames:
    print filename
    data = None 
    with open(filename, "r") as inFile:
      data = cPickle.load(inFile)

    origin = m2d.Pose2D()

    for kick in data.kicks.values():
      if not kick.name in trajectories:
        trajectories[kick.name] = []
      
      trajectory = []
      for bp in data.state:
        if bp.frame == kick.frame:
          origin = ~(bp.odometry)
        if bp.frame >= kick.frame: # frame number
          ballpos = origin*getBall(bp)
          if len(trajectory) == 0:
            trajectory.append(ballpos)
          else:
            if bp.frame < kick.frame + 120:
              trajectory.append(ballpos)
            else:
              break
      trajectories[kick.name].append(trajectory)

  marker = {}
  marker["do_kick_with_left_foot"] = "bv"
  marker["do_kick_with_right_foot"] = "bv"
  marker["attack_with_left_foot"] = "co"
  marker["attack_with_right_foot"] = "co"
  marker["sidekick_to_right"] = 'r*'
  marker["sidekick_to_left"] = 'gs'
 
  gs = gridspec.GridSpec(4,4)
  speeds = [[],[]]
  for k in trajectories.keys():
    directions = []
    if k == "do_kick_with_left_foot" or k == "do_kick_with_right_foot":
      plt.subplot(gs[0,0])
      plt.title("do_kick: "+str(len(trajectories[k])))
    elif k == "attack_with_left_foot" or k == "attack_with_right_foot":
      plt.subplot(gs[1,0])
      plt.title("attack: "+str(len(trajectories[k])))
    elif k == "sidekick_to_left":
      plt.subplot(gs[2,0])
      plt.title("sidekick_to_left: "+str(len(trajectories[k])))
    elif k == "sidekick_to_right":
      plt.subplot(gs[3,0])
      plt.title("sidekick_to_right: "+str(len(trajectories[k])))
    else:
      print "foo"
    plt.gca().set_xlim((-500, 3000))
    plt.gca().set_ylim((-3000, 3000))
    plt.grid()
    for trajectory in trajectories[k]:
      # plot original data
      x = [b.x for b in trajectory]
      y = [b.y for b in trajectory]
      plt.plot(x, y, marker[k], mew=0)
      # fit line
      p = np.polyfit(x, y, 1)
      xx = np.linspace(min(x), max(x), 100)
      yy = p[0]*xx+p[1]
      # plot fit
      plt.plot(xx, yy, "k-", lw=1)
      # direction
      dx = xx[-1]-xx[0]
      dy = yy[-1]-yy[0]
      directions.append(math.atan2(dy, dx))
      # calculate speed
      v = np.hypot(np.diff(x), np.diff(y))
      speeds[0].extend(range(len(v)))
      speeds[1].extend(v)
    # plot direction histogram
    if k == "do_kick_with_left_foot" or k == "do_kick_with_right_foot":
      plt.subplot(gs[0,1])
      plt.title("do_kick: "+str(len(trajectories[k])))
    elif k == "attack_with_left_foot" or k == "attack_with_right_foot":
      plt.subplot(gs[1,1])
      plt.title("attack: "+str(len(trajectories[k])))
    elif k == "sidekick_to_left":
      plt.subplot(gs[2,1])
      plt.title("sidekick_to_left: "+str(len(trajectories[k])))
    elif k == "sidekick_to_right":
      plt.subplot(gs[3,1])
      plt.title("sidekick_to_right: "+str(len(trajectories[k])))
    else:
      print "foo"
    plt.gca().set_xlim((-math.pi, math.pi))
    plt.grid()
    plt.hist(directions, bins=100, range=(-math.pi, math.pi))
  # plot speeds histogram
  plt.subplot(gs[:2,2:4])
  plt.hexbin(speeds[0], speeds[1], extent=(0, max(speeds[0]), 0, 50))
  plt.colorbar()
  # show plots
  plt.gcf().set_size_inches((gs.get_geometry()[1]*5, gs.get_geometry()[0]*5))
  plt.savefig("plot_ballkick2.png", dpi=100)
  plt.show()
