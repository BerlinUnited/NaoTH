/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package naoscp;

import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.SftpException;
import java.awt.Component;
import java.awt.Container;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import naoscp.tools.BarProgressMonitor;
import naoscp.tools.FileUtils;
import naoscp.tools.Scp;

/**
 *
 * @author Henrich Mellmann
 */
public class NaoSCP extends javax.swing.JFrame {

    private final String utilsPath = "./../Utils";
    private final String deployStickScriptPath = utilsPath + "/DeployStick/startBrainwashing.sh";
    
    /**
     * Creates new form NaoSCP
     */
    public NaoSCP() {
        initComponents();
        
        Logger.getGlobal().addHandler(logTextPanel.getLogHandler());
        Logger.getGlobal().setLevel(Level.FINE);
    }

    void setEnabled(Component component, boolean enabled) {
        component.setEnabled(enabled);
        if (component instanceof Container) {
            for (Component child : ((Container) component).getComponents()) {
                setEnabled(child, enabled);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        netwokPanel = new naoscp.components.NetwokPanel();
        naoTHPanel = new naoscp.components.NaoTHPanel();
        btDeploy = new javax.swing.JButton();
        logTextPanel = new naoscp.components.LogTextPanel();
        btWriteToStick = new javax.swing.JButton();
        jProgressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("NaoSCP 1.0");
        setLocationByPlatform(true);
        setMaximumSize(new java.awt.Dimension(2147483647, 495));
        setMinimumSize(new java.awt.Dimension(0, 495));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        netwokPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Network"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(netwokPanel, gridBagConstraints);

        naoTHPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("NaoTH"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(naoTHPanel, gridBagConstraints);

        btDeploy.setText("Deploy");
        btDeploy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeployActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(btDeploy, gridBagConstraints);

        logTextPanel.setPreferredSize(new java.awt.Dimension(400, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(logTextPanel, gridBagConstraints);

        btWriteToStick.setText("Write to Stick");
        btWriteToStick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btWriteToStickActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        getContentPane().add(btWriteToStick, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(jProgressBar, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btDeployActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeployActionPerformed
        this.logTextPanel.clear();
        
        new Thread(new Runnable() {
            @Override
            public void run() {
                // STEP 1: create the deploy directory for the playerNumber
                File deployDir = new File("./deploy");

                // delete the target directory if it's existing, 
                // so we have a fresh new directory
                if (deployDir.isDirectory()) {
                    FileUtils.deleteDir(deployDir);
                }

                if (!deployDir.mkdirs()) {
                    Logger.getGlobal().log(Level.SEVERE, "Could not create deploy out directory");
                } else {
                    setEnabled(naoTHPanel, false);
                    naoTHPanel.getAction().run(deployDir);
                    
                    try {
                        Scp scp = new Scp("192.168.56.101", "nao", "nao");
                        scp.setProgressMonitor(new BarProgressMonitor(jProgressBar));
                        
                        scp.run("ls /");
                        
                        scp.put(deployDir, "/home/nao/tmp");
                        
                        scp.disconnect();
                    } catch (JSchException | SftpException | IOException ex) {
                        Logger.getGlobal().log(Level.SEVERE, ex.getMessage());
                    }
                    
                    Logger.getGlobal().log(Level.INFO, "DONE");
                    setEnabled(naoTHPanel, true);
                }
            }
        }).start();
    }//GEN-LAST:event_btDeployActionPerformed

    private void btWriteToStickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btWriteToStickActionPerformed
        this.logTextPanel.clear();

        final JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Select NaoController Directory");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        if(chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            new Thread(new Runnable() {
                @Override
                public void run() {
                    // STEP 1: create the deploy directory for the playerNumber
                    File targetDir = chooser.getSelectedFile();
                    File deployDir = new File(targetDir,"deploy");
                    
                    // delete the target directory if it's existing, 
                    // so we have a fresh new directory
                    if (deployDir.isDirectory()) {
                        // backup 
                        //FileUtils.deleteDir(deployDir);
                        if(deployDir.renameTo(new File(targetDir, "bak"))) {
                            deployDir = new File(targetDir,"deploy");
                        } else {
                            Logger.getGlobal().log(Level.WARNING, "Could not back up the deploy directory: " + deployDir.getAbsolutePath());
                        }
                    }

                    if (!deployDir.mkdirs()) {
                        Logger.getGlobal().log(Level.SEVERE, "Could not create deploy out directory");
                    } else {
                        setEnabled(naoTHPanel, false);
                        naoTHPanel.getAction().run(new File(targetDir,"deploy"));
                        FileUtils.copyFiles(new File(deployStickScriptPath), targetDir);
                        setEnabled(naoTHPanel, true);
                    }
                }
            }).start();
        }
    }//GEN-LAST:event_btWriteToStickActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NaoSCP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NaoSCP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NaoSCP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NaoSCP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NaoSCP().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btDeploy;
    private javax.swing.JButton btWriteToStick;
    private javax.swing.JProgressBar jProgressBar;
    private naoscp.components.LogTextPanel logTextPanel;
    private naoscp.components.NaoTHPanel naoTHPanel;
    private naoscp.components.NetwokPanel netwokPanel;
    // End of variables declaration//GEN-END:variables
}
