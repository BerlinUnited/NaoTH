/*
 */
package naoscp.components;

import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import naoscp.tools.usb.LinuxUSBStorageDeviceManager;
import naoscp.tools.usb.OSXUSBStorageDeviceManager;
import naoscp.tools.usb.USBStorageDevice;
import naoscp.tools.usb.USBStorageDeviceManager;
import naoscp.tools.usb.WindowsUSBStorageDeviceManager;

/**
 *
 * @author Robert Martin
 */
public class USBPanel extends javax.swing.JPanel {

    private USBStorageDevice selectedUSBStorageDevice = null;

    private USBStorageDeviceManager usbStorageDeviceManager;

    /**
     * Creates new form USBPanel
     */
    public USBPanel() {
        initComponents();
        
        String os = System.getProperty("os.name");

        if (os.startsWith("Linux")) {
            this.usbStorageDeviceManager = new LinuxUSBStorageDeviceManager();
            
        } else if (os.startsWith("Windows")) {
            this.unmountCheckBox.setVisible(false);
            this.usbStorageDeviceManager = new WindowsUSBStorageDeviceManager();
         
        } else if (os.contains("OS X")) {
            this.unmountCheckBox.setVisible(false);
            this.usbStorageDeviceManager = new OSXUSBStorageDeviceManager();
            
        } else {
            this.setVisible(false);
        }

    }

    public boolean hasSelection() {
        return this.selectedUSBStorageDevice != null;
    }

    public String getUSBPath() {
        if (this.hasSelection()) {
            return this.selectedUSBStorageDevice.getMountPoint();
        }
        return null;
    }

    public void closeUSBStorageDevice() {
        if (this.unmountCheckBox.isSelected() && this.hasSelection()) {
            this.usbStorageDeviceManager.unmount(this.selectedUSBStorageDevice);

            this.refresh();
        }
    }

    public boolean refresh() {
        this.usbSelectBox.removeAllItems();

        List<USBStorageDevice> usbStorageDevices = usbStorageDeviceManager.getUSBStorageDevices();

        if (usbStorageDevices.isEmpty()) {
            return false;
        } else {
            for (USBStorageDevice usbStorageDevice : usbStorageDeviceManager.getUSBStorageDevices()) {
                this.usbSelectBox.addItem(usbStorageDevice);
            }
            return true;
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        refreshButton = new javax.swing.JButton();
        usbSelectBox = new javax.swing.JComboBox<>();
        tippLabel = new javax.swing.JLabel();
        unmountCheckBox = new javax.swing.JCheckBox();
        clearButton = new javax.swing.JButton();

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        usbSelectBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usbSelectBoxActionPerformed(evt);
            }
        });

        tippLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        tippLabel.setText("Select the deploy stick:");

        unmountCheckBox.setText("unmount");

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(usbSelectBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 216, Short.MAX_VALUE)
                        .addComponent(tippLabel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(clearButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(unmountCheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(refreshButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tippLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usbSelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(unmountCheckBox))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        refreshButton.getAccessibleContext().setAccessibleName("refreshButton");
    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        if(!this.refresh()){
            Logger.getGlobal().log(Level.WARNING, "Couldn't find any USB storage device!");
        }
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void usbSelectBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usbSelectBoxActionPerformed
        this.selectedUSBStorageDevice = (USBStorageDevice) this.usbSelectBox.getSelectedItem();
    }//GEN-LAST:event_usbSelectBoxActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        this.usbSelectBox.removeAllItems();
    }//GEN-LAST:event_clearButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JLabel tippLabel;
    private javax.swing.JCheckBox unmountCheckBox;
    private javax.swing.JComboBox<USBStorageDevice> usbSelectBox;
    // End of variables declaration//GEN-END:variables
}
