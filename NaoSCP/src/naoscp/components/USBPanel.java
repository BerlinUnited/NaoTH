/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package naoscp.components;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author Robert Martin
 */
public class USBPanel extends javax.swing.JPanel {
    
    private String path = null;

    /**
     * Creates new form USBPanel
     */
    public USBPanel() {
        initComponents();
        
        if(!System.getProperty("os.name").matches("Linux")) {
            this.setEnabled(false);
            this.usbSelectBox.setEnabled(false);
            this.refreshButton.setEnabled(false);
            this.jLabel1.setEnabled(false);
        }
       
    }
    
    public boolean hasPath() {
        if(this.path != null) {
            return true;
        }
        return false;
    }
    
    public String getUSBPath() {
        return this.path;
    }
    
    private BufferedReader executeCommand(String command) {

        BufferedReader reader = null;

        Process p;
        try {
            p = Runtime.getRuntime().exec(command);
            p.waitFor();
            reader = new BufferedReader(new InputStreamReader(p.getInputStream()));
        } catch (IOException | InterruptedException e) {
        }

        return reader;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        refreshButton = new javax.swing.JButton();
        usbSelectBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        usbSelectBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usbSelectBoxActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("Select the deploy stick:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(usbSelectBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 167, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(refreshButton, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usbSelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        refreshButton.getAccessibleContext().setAccessibleName("refreshButton");
    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        String USB_PROPTERTY = "ID_USB_DRIVER=usb-storage";
        String PROPERTY_CHECK_CMD = "udevadm info -q property -n ";

        String DEVICE_LIST_CMD = "df ";
        Pattern DEVICE_LIST_PATTERN = Pattern.compile("^(\\/[^ ]+)[^%]+%[ ]+(.+)$");

        BufferedReader output = this.executeCommand(DEVICE_LIST_CMD);

        LinkedList<String> usbDevices = new LinkedList<>();

        String outputLine;

        try {
            while ((outputLine = output.readLine()) != null) {

                Matcher matcher = DEVICE_LIST_PATTERN.matcher(outputLine);

                if (matcher.matches()) {
                    String device = matcher.group(1);
                    String mountPoint = matcher.group(2);
                    BufferedReader out = this.executeCommand(PROPERTY_CHECK_CMD + device);
                    
                    boolean isUSBDevice = false;
                    String property;
                    while ((property = out.readLine()) != null) {
                        if (property.matches(USB_PROPTERTY)) {
                            isUSBDevice = true;
                            break;
                        }
                    }

                    if (isUSBDevice) {
                        usbDevices.add(mountPoint);
                    }
                }

            }
        } catch (IOException ex) {
            Logger.getLogger(USBPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        this.usbSelectBox.removeAllItems();

        for (String path : usbDevices) {
            this.usbSelectBox.addItem(path);
        }
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void usbSelectBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usbSelectBoxActionPerformed
        this.path = (String) this.usbSelectBox.getSelectedItem();
    }//GEN-LAST:event_usbSelectBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton refreshButton;
    private javax.swing.JComboBox<String> usbSelectBox;
    // End of variables declaration//GEN-END:variables
}
