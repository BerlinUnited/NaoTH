stages:
 - test
 - build
 - deploy

default:
  image: $DOCKER_IMAGE

variables:
    branch_name: $CI_COMMIT_REF_NAME
    pages_url_fixed: "https://pages.cms.hu-berlin.de/berlinunited/naoth-2020/"  # $CI_PAGES_URL is wrong because gitlab is badly configured
    
cppcheck:
  stage: test
  script:
  - mkdir -p $branch_name
  - cppcheck -j 4 --enable=all --inconclusive --xml --xml-version=2 . 2> cppcheck-result.xml
  - cppcheck-htmlreport --file=cppcheck-result.xml --report-dir=$branch_name --source-dir=.
  - python3 -m pip install -U cppcheck_codequality
  - cppcheck-codequality --input-file=cppcheck-result.xml --output-file=cppcheck.json
  artifacts:
    paths: 
      - $branch_name
    reports:
      codequality: cppcheck.json

publish_naoth:
  # run the publish command if the PUBLISH_NAOTH flag is set or the commit changes the develop with changes in the naoth package
  stage: deploy
  rules:
    - if: '$PUBLISH_NAOTH'
    - if: $CI_COMMIT_BRANCH == "develop"
      changes:
      - Utils/py/naoth/**/*
    
  script:
  - cd NaoTHSoccer/Make
  - premake5 gmake2 --protoc
  - cd ../../Utils/py/naoth
  - ./package_naoth.sh

.compile_nao_gcc:
  stage: build
  rules:
    - changes: 
      - Framework/**/*
      - NaoTHSoccer/**/*
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
    - if: $CI_COMMIT_BRANCH == "develop"
  script:
  - cd NaoTHSoccer/Make
  - ./compileGame.sh -j 4

.compile_local_gcc:
  stage: build
  rules:
    - changes: 
      - Framework/**/*
      - NaoTHSoccer/**/*
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
    - if: $CI_COMMIT_BRANCH == "develop"
  script:
  - cd NaoTHSoccer/Make
  - premake5 gmake2 --protoc
  - cd ../build/gmake2
  - make all -j 4

.compile_nao_clang:
  stage: build
  rules:
    - changes: 
      - Framework/**/*
      - NaoTHSoccer/**/*
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
    - if: $CI_COMMIT_BRANCH == "develop"
  script:
  - cd NaoTHSoccer/Make
  - echo -en "if PLATFORM == \"Nao\" then\n    _OPTIONS[\"crosscompiler\"] = \"clang\"\nend\n" > projectconfig.user.lua
  - ./compileGame.sh -j 4

pages:
  # TODO think about cleaning up old branches
  stage: deploy
  script:
    - apt update && apt install tree wget -y
    - ./Utils/CI-Tools/pages.sh
    #- mkdir public
    #- new_branch_name="$(sed 's/\//_/g' <<< "${branch_name}")"
    # rename folders like feature/my_cool_feature to feature_my_cool_feature
    #- if [ "$branch_name" != "$new_branch_name" ]; then mv $branch_name $new_branch_name; else new_branch_name=$branch_name; fi
    #- ls 
    #- mv $new_branch_name/ public/  # have a folder structure like public/feature_my_cool_feature/index.html
    #- apt update && apt install tree
    - cd public/ && tree -L 1 -H . -o index.html && cd ..
    #- $(wget --no-check-certificate $pages_url_fixed/content.tar.gz -O prev_content.tar.gz || exit 0;);
    #- ls
    #- if [ -f prev_content.tar.gz ]; then tar -xzf prev_content.tar.gz public/; fi
    #- '[ -f prev_content.tar.gz ] && tar -xzf prev_content.tar.gz public/'
    - tree -L 2
    #- mkdir -p public/$CI_COMMIT_REF_NAME/testcov
    #- mkdir -p public/testcov
    #- cp -r $branch_name/* public/$CI_COMMIT_REF_NAME/testcov/
    #- '[ "$CI_COMMIT_REF_NAME" == "master" ] && cp -r reports/testcov/* public/testcov/'
    #- tar -zcf public/content.tar.gz public/
  artifacts:
    paths:
      - public
