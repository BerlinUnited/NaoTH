/**
* @file PathPlanner.h
* 
* Definition of class AStarSearch
*
* @author <a href="mailto:yasinovs@informatik.hu-berlin.de">Yasinovskiy Kirill</a>
*/

#include "PathPlanner.h"

#include <Tools/Debug/DebugRequest.h>

// Debug

PathPlanner::PathPlanner()
{
  theAStarSearch = new AStarSearch(getRobotPose(), getFieldInfo(), getPlayerInfo());
  DEBUG_REQUEST_REGISTER("PathPlanner:all_nodes_field","draw all nodes generated by AStarSearch", false);
  DEBUG_REQUEST_REGISTER("PathPlanner:path_on_field_local","draw only the path and nodes that lead to target", false);
  DEBUG_REQUEST_REGISTER("PathPlanner:path_on_field_global","draw only the path and nodes that lead to target", false);
  DEBUG_REQUEST_REGISTER("PathPlanner:draw_obstacles_local", "draw obstacles on field", false);
  DEBUG_REQUEST_REGISTER("PathPlanner:draw_obstacles_global", "draw obstacles on field", false);
}

void PathPlanner::execute()
{
  // create start and goal nodes
  goalPoint = Vector2d(getPath().targetPoint);

  // collect obstacles
  collectObstacles();

  AStarNode start(Vector2d(0.0, 0.0));
  AStarNode goal(getPath().targetPoint);

 
  // store the entire path length
  double pathLength;

  // did we find the path
  bool pathFound = false;
  // no node is expanded
  bool noNodeExpandable = false;
  // start search
  AStarNode nextPoint = theAStarSearch->search(start, goal, pathLength, obstaclesPositions, pathFound, noNodeExpandable);
  getPath().nextPointToGo = nextPoint.getPosition();

  if (noNodeExpandable)
  {
    getPath().setFrameInfoWhenNodeWasNotExpanded(getFrameInfo());
  }

  // debug requests sections
  DEBUG_REQUEST("PathPlanner:all_nodes_field",
  {
    theAStarSearch->drawAllNodesField();
    // draw next point to go
    PEN(ColorClasses::colorClassToHex(ColorClasses::red), 5);
    CIRCLE(nextPoint.getPosition().x, nextPoint.getPosition().y, 8);
    // draw start point
    PEN(ColorClasses::colorClassToHex(ColorClasses::green), 5);
    CIRCLE(start.getPosition().x, start.getPosition().y, 8);
    // draw goal point
    PEN(ColorClasses::colorClassToHex(ColorClasses::blue), 5);
    CIRCLE(goal.getPosition().x, goal.getPosition().y, 8);
  }
  );// end DEBUG_REQUEST

  DEBUG_REQUEST("PathPlanner:path_on_field_local",
  {
    // draw start point
    PEN(ColorClasses::colorClassToHex(ColorClasses::red), 5);
    CIRCLE(nextPoint.getPosition().x, nextPoint.getPosition().y, 8);
    // draw path using AStarSearch function
    theAStarSearch->drawPathFieldLocal();
    // draw goal point
    PEN(ColorClasses::colorClassToHex(ColorClasses::blue), 5);
    CIRCLE(goal.getPosition().x, goal.getPosition().y, 8);
  }
  );// end DEBUG_REQUEST

  DEBUG_REQUEST("PathPlanner:path_on_field_global",
  {
    // draw path using AStarSearch function
    theAStarSearch->drawPathFieldGlobal();
    // draw goal point
  }
  );// end DEBUG_REQUEST

  DEBUG_REQUEST("PathPlanner:draw_obstacles_local",
  {
    theAStarSearch->drawObstaclesLocal();
  }
  );// end DEBUG_REQUEST

  DEBUG_REQUEST("PathPlanner:draw_obstacles_global",
  {
    theAStarSearch->drawObstaclesGlobal();
  }
  );// end DEBUG_REQUEST

}

void PathPlanner::collectObstacles()
{
  // get obstacles from radar grid
  getRadarGrid().getAllObstacles(obstaclesPositions);
  // get playersmodel/percept
  /**currently not in use*/
  // get goal model

}
