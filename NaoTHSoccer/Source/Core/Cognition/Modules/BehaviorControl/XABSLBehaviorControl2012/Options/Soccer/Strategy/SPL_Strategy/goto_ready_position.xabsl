option goto_ready_position
{
  /**  */
  float @x [mm];

  /**  */
  float @y [mm];

  float @rot [deg];

  bool @check_by_line;

  float @distToLine;
 
  float @maxLineDist [mm];
  float @minLineDist [mm];

  initial state go_to_position {
    decision {
     if (@check_by_line && action_done) {
        goto check_position_by_line;
     } else {
        stay;
     }
    }
    action
    { //_with_lokalize
      go_to_point(x=(@check_by_line)?@x-200:@x, y=@y, rot=@rot);
      head.control_mode = search_for_goal;
    }
  }

  state go_back {
    decision {
      if (line.was_seen && (line.closest.estDistance > @minLineDist || line.closest.estDistance < @maxLineDist))
        goto check_position_by_line;
      else
        stay;
    }
    action {
      go_to_relative_point(rotation=0, x=-80, y=7,
                           errorX=30, errorY=30, errorR=15);
      head.camera.id = bottom;
      head.control_mode = none;
      head.motion_type = look_at_point_on_the_ground;
      head.point_on_grond.x = @minLineDist+200;
      head.point_on_grond.y = 0;
    }
  }

  state check_position_by_line {
    decision {
      if (line.time_since_last_seen > 160 || line.closest.estDistance > @maxLineDist) //dont see any line
        goto go_back;
      else if (action_done)
        goto stand;
      else
        stay;
    }
    action {
      go_to_relative_point_with_distance_and_rot(x=odometry.preview.x(x=line.closest.estOrthPoint.x, y=line.closest.estOrthPoint.y), y=odometry.preview.y(x=line.closest.estOrthPoint.x, y=line.closest.estOrthPoint.y), rot=@rot, dist=@distToLine);
      head.camera.id = bottom;
      head.control_mode = none;
      head.motion_type = look_at_point_on_the_ground;
      head.point_on_grond.x = (line.closest.closestPoint.x == 0.0)  ? @minLineDist+100 : line.closest.closestPoint.x;
      head.point_on_grond.y = line.closest.closestPoint.y; 
    }
  }

  target state stand {
    decision {
      if (action_done)
        stay;
      else
        goto check_position_by_line;
    }
    action {
      go_to_relative_point_with_distance_and_rot(x=odometry.preview.x(x=line.closest.estOrthPoint.x, y=line.closest.estOrthPoint.y), y=odometry.preview.y(x=line.closest.estOrthPoint.x, y=line.closest.estOrthPoint.y), rot=@rot, dist=@distToLine);
      head.camera.id = bottom;
      head.control_mode = none;
      head.motion_type = look_at_point_on_the_ground;
      head.point_on_grond.x = (line.closest.closestPoint.x == 0.0)  ? @minLineDist+100 : line.closest.closestPoint.x;
      head.point_on_grond.y = line.closest.closestPoint.y; 
    }
  }


}