/** This behavior approaches the ball 
* and performs an omnidirectional kick
**/

option perform_omnidirectional_kick
{

  /**  */
  float @distance [mm];
  /**  */
  bool @right_foot;

  /** error range */
  float @errorX [mm];

  float @errorY [mm];

  float @errorR [deg];

  initial state decide_foot
  {
    decision
    {
      if(@right_foot)
      {
        goto approach_right_foot;
      }
      else
      {
        goto approach_left_foot;
      }
    }
    action
    {
      head.control_mode = search_for_ball;
      motion.walk.style = stable;
    }
  }

  state approach_right_foot
  {
    decision {
      // maybe we touched the ball accidently
      if(ball.right_foot.preview.x > 250
          || ball.right_foot.preview.x < 0
          || abs(value=attack.direction) > 90)
        goto finished;
      else if(action_done) //HACK xxx
        goto kick_prep_right_foot;
      else
        stay;
    }
    action {
      go_to_ball_cool(distance = @distance, right_foot=true,
                      errorX=@errorX, errorY=@errorY, errorR=@errorR);
      head.control_mode = search_for_ball;
      motion.walk.style = stable;
    }
  }

  state kick_prep_right_foot
  {
    decision {
         if(state_time > 900)
         {
           if(action_done 
             && ball.right_foot.y < 70
             && ball.right_foot.y > -50
             && ball.right_foot.x < 250) 
           {
             goto kick_right;
           } 
           else if (ball.right_foot.preview.y > 60)
           {
             goto approach_left_foot;
           }
           else 
           {
             goto approach_right_foot;
           }
         }
         else
         {
           stay;
         }
    }
    action {
      go_to_ball_cool(distance = @distance, right_foot=true,
                      errorX=@errorX, errorY=@errorY, errorR=@errorR);
      head.control_mode = search_for_ball;
      motion.type = stand;
    }
  }

  state approach_left_foot
  {
    decision {
      // maybe we touched the ball accidently
      if(ball.left_foot.preview.x > 250
          || ball.left_foot.preview.x < 0
          || abs(value=attack.direction) > 90)
        goto finished;
      else if(action_done) //HACK xxx
        goto kick_prep_left_foot;
      else
        stay;
    }
    action {
      go_to_ball_cool(distance = @distance, right_foot=false,
                      errorX=@errorX, errorY=@errorY, errorR=@errorR);
      head.control_mode = search_for_ball;
      motion.walk.style = stable;
    }
  }

  state kick_prep_left_foot
  {
    decision {
         if(state_time > 900)
         {
           if(action_done 
             && ball.left_foot.y < 50
             && ball.left_foot.y > -70
             && ball.left_foot.x < 250) 
           {
             //goto kick_left;
             goto walk_against_ball;
           } 
           else if (ball.left_foot.preview.y < -60)
           {
             goto approach_right_foot;
           }
           else 
           {
             goto approach_left_foot;
           }
         }
         else
         {
           stay;
         }
    }
    action {
      go_to_ball_cool(distance = @distance, right_foot=false,
                      errorX=@errorX, errorY=@errorY, errorR=@errorR);
      head.control_mode = search_for_ball;
      motion.type = stand;
    }
  }

  state kick_right {
    decision
    {
      if(action_done && state_time > 500)
        goto stabilize_after_kick;
      else
        stay;
    }
    action 
    {
      kick_ball_with_foot(direction = attack.direction, right = true);
      situation.abortable = false;
      // HACK: look at percept
      head.control_mode = none;
      head.motion_type = look_at_world_point;
      head.point_in_world.x = ball.percept.x;
      head.point_in_world.y = ball.percept.y;
      head.point_in_world.z = ball.radius;
    }
  }
  
  state kick_left {
    decision
    {
      if(action_done && state_time > 500)
        goto stabilize_after_kick;
      else
        stay;
    }
    action 
    {
      //kick_ball_with_foot(direction = attack.direction, right = false);
      situation.abortable = false;
      // HACK: look at percept
      head.control_mode = none;
      head.motion_type = look_at_world_point;
      head.point_in_world.x = ball.percept.x;
      head.point_in_world.y = ball.percept.y;
      head.point_in_world.z = ball.radius;
    }
  }

  state stabilize_after_kick {
    decision
    {
      if ( state_time > 0 )
        goto finished;
      else
        stay;
    }
    action
    {
      // HACK: look at percept
      head.control_mode = none;
      head.motion_type = look_at_world_point;
      head.point_in_world.x = ball.percept.x;
      head.point_in_world.y = ball.percept.y;
      head.point_in_world.z = ball.radius;
      motion.type = stand;
    }
  }

  target state finished
  {
    action
    {
    }
  }


  state walk_against_ball
  {
    decision {
      // get out of walk_against_ball
      if (state_time > 1000)
        goto stabilize_after_kick;
      else
        stay;
    }
    action {
      common_decision.allowed = false;
    
      motion.type = walk;
      motion.walk.coordinate = hip;
      motion.walk.style = fast;
      motion.walk_speed.x = 201;
      motion.walk_speed.y = 0;
      motion.walk_speed.rot = 0;

      // HACK: look at percept
      head.control_mode = none;
      head.motion_type = look_at_world_point;
      head.point_in_world.x = ball.percept.x;
      head.point_in_world.y = ball.percept.y;
      head.point_in_world.z = ball.radius;
    }
  }

}