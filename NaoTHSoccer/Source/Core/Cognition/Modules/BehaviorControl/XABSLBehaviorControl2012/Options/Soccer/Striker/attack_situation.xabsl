/** 
* This is an attacking behavior. 
* It should go to the ball, position and kick 
*/
option attack_situation 
{

  initial state approach_ball
  {
    decision {
      if(action_done)
        if(abs(value=attack.direction) < 90) {
          goto decide_kick_dribble;
        }
        else
        {
          goto position;
        }
      else
        stay;
    }
    action {
      // This distance plus errorX should include the dribble distance (170)
      approach_ball_with_correct_foot_ckeck_goal(dist=170, errorX=15, errorY=15, errorR=5+5*random);
      motion.type = walk;
      motion.walk.stop_with_stand = false;
    }
  }

  state stand_tester
  {
    decision
    {
      if(state_time > 10000)
      {
          goto approach_ball;
      }
      else stay;
    }
    action
    {
      motion.type = stand;
    }
  }

  
  state position
  {
    decision {
      // start kick towards the goal at 90 degree or less to be sure about the direction
      if(abs(value=attack.direction) < 90) // angle was reached
      {
        if(goal.opp.time_since_seen < 30000) //|| robot_pose.is_valid) xxx
        {
          goto approach_ball_after_position;
        }
        else // didn't see the goal for long time
        {
          goto check_the_goal;
        }
      }
      else
        stay;
    }
    action {
      // distance and direction to ball not preserved (!)
      turn_around_ball_face_goal();
      motion.type = walk;
      motion.walk.stop_with_stand = false;
    }
  }


  state check_the_goal
  {
    decision {
      // localize again or turn around ball
      if (state_time > 3000)
      {
        goto turn_around_ball;
      }
      // if a goal was seen, try to correct the position
      else if(goal.opp.time_since_seen < 3000 || goal.own.time_since_seen < 3000) //|| robot_pose.is_valid)
      {
        goto position;
      }
      else
        stay;
    }
    action {
      head.control_mode = search_for_goal;
      motion.type = walk;
      motion.walk_speed.x = 0;
      motion.walk_speed.y = 0;
      motion.walk_speed.rot = 0;
    }
  }

  // Turn around ball if not localized
  state turn_around_ball
  {
    decision
    {
      if (state_time > 2000)
      { 
        goto position;
      }
      else
      {
        stay;
      }
    }
    action {
      turn_around_ball_face_goal();
      motion.type = walk;
      motion.walk.stop_with_stand = false;
    }
  }
  
  state approach_ball_after_position
  {
    decision
    {
      if(action_done)
      {
        goto decide_kick_dribble;
      }
      else stay;
    }
    action 
    {
      // error: x=40, y=40, a=20 => dist < 180+60 = 240
      approach_ball_with_correct_foot(dist=170, errorX=15, errorY=15, errorR=5+5*random, want_to_turn_after_approach=false);

      //we've seen the ball shortly when we are here
      head.control_mode = search_for_ball_force_model;
      motion.walk.stop_with_stand = false;
      motion.type = walk;
    }
  }

  state decide_kick_dribble
  {
    decision
    {
      //if(goal.opp.distance < 2000 && abs(value=attack.direction) < 60)
        //|| random > 0.4)
        //  goto stabilize_before_kick;
      //else
      goto dribble;
    }
    action
    {
      //we've seen the ball shortly when we are here
      head.control_mode = search_for_ball_force_model;
      motion.walk.stop_with_stand = false;
      motion.type = walk;
    }
  }

  state stabilize_before_kick
  {
    decision {
      // stand 1 second before kick
      if(state_time < 1000)
        stay;
      // maybe we touched the ball accidently
      else if(!action_done)
        goto approach_ball;
      else //if(executed_motion.type == stand) HACK xxx
        goto kick_prep;
      //else
        //stay;
    }
    action {
      // should execute stand
      approach_ball_with_correct_foot(dist=170, errorX=15, errorY=15, errorR=5+5*random, want_to_turn_after_approach=false);
      head.control_mode = search_for_ball;
      motion.walk.stop_with_stand = true;
      //motion.type = stand;
      motion.type = walk;
    }
  }

  state kick_prep
  {
    decision {
         if(executed_motion.type == stand) {
           goto kick;
         } else {
            stay;
         }
    }
    action {
    
      head.control_mode = search_for_ball;
      motion.type = stand;
    }
  }

  state kick {
    decision
    {
      if(action_done && state_time > 3000)
        goto stabilize_after_kick;
      else
        stay;
    }
    action 
    {
      situation.abortable = false;
      kick_ball(direction= attack.direction);

      head.motion_type = look_at_world_point;
      head.point_in_world.x = ball.percept.x;
      head.point_in_world.y = ball.percept.y;
      head.point_in_world.z = ball.radius;
    }
  }

  state stabilize_after_kick {
    decision
    {
      if ( state_time > 0 )
        goto approach_ball;
      else
        stay;
    }
    action
    {
      situation.abortable = false;
      head.motion_type = look_at_world_point;
      head.point_in_world.x = ball.percept.x;
      head.point_in_world.y = ball.percept.y;
      head.point_in_world.z = ball.radius;
      motion.type = stand;
    }
  }

  state dribble {
    decision
    {
      if ( action_done )
        //goto stand_tester;
        goto approach_ball;
      else
        stay;
    }
    action
    {
      situation.abortable = true;
      dribble_attack_direction(sidekickDegree = 40);
    }
  }
}