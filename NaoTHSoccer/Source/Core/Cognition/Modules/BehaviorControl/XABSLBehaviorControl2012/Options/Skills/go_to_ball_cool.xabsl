/** Goto ball omnidirectional */
option go_to_ball_cool
{
  /**  */
  float @distance [mm];
  /**  */
  bool @right_foot;

  /** error range */
  float @errorX [mm];

  float @errorY [mm];

  float @errorR [deg];

  target state go_to_ball_left_foot_done {
    decision{
      if(action_done)
        stay;
      else
        goto go_to_ball_left_foot;
    }
    action{
      go_to_relative_point(rotation = atan2(y = ball.left_foot.preview.y, x = ball.left_foot.preview.x), 
                           x = ball.left_foot.preview.x - @distance * cos(angle=atan2(y = ball.left_foot.preview.y, x = ball.left_foot.preview.x)), 
                           y = ball.left_foot.preview.y - @distance * sin(angle=atan2(y = ball.left_foot.preview.y, x = ball.left_foot.preview.x)),
                           errorX=@errorX, errorY=@errorY, errorR=@errorR);
      
      motion.walk.coordinate = left_foot;
      motion.walk.stop_with_stand = true;
      
      head.control_mode = search_for_ball;

      // hack
      motion.type = stand;
    }
  }

  target state go_to_ball_right_foot_done {
    decision{
      if(action_done)
        stay;
      else
        goto go_to_ball_right_foot;
    }
    action{
     go_to_relative_point(rotation = atan2(y = ball.right_foot.preview.y, x = ball.right_foot.preview.x), 
                           x = ball.right_foot.preview.x - @distance * cos(angle=atan2(y = ball.right_foot.preview.y, x = ball.right_foot.preview.x)), 
                           y = ball.right_foot.preview.y - @distance * sin(angle=atan2(y = ball.right_foot.preview.y, x = ball.right_foot.preview.x)),
                           errorX=@errorX, errorY=@errorY, errorR=@errorR);
      
      motion.walk.coordinate = right_foot;
      motion.walk.stop_with_stand = true;
      
      head.control_mode = search_for_ball;

      // hack
      motion.type = stand;
    }
  }

  initial state go_to_ball_left_foot {
    decision{
      if (@right_foot)
        goto go_to_ball_right_foot;
      else if(action_done)
        goto go_to_ball_left_foot_done;
      else
        stay;
    }
    action{
      go_to_relative_point(rotation = atan2(y = ball.left_foot.preview.y, x = ball.left_foot.preview.x), 
                           x = ball.left_foot.preview.x - @distance * cos(angle=atan2(y = ball.left_foot.preview.y, x = ball.left_foot.preview.x)), 
                           y = ball.left_foot.preview.y - @distance * sin(angle=atan2(y = ball.left_foot.preview.y, x = ball.left_foot.preview.x)),
                           errorX=@errorX, errorY=@errorY, errorR=@errorR);
      
      motion.walk.coordinate = left_foot;
      motion.walk.stop_with_stand = true;
      
      head.control_mode = search_for_ball;
    }
  }

  state go_to_ball_right_foot {
    decision{
      if (!@right_foot)
        goto go_to_ball_left_foot;
      else if(action_done)
        goto go_to_ball_right_foot_done;
      else
        stay;
    }
    action{
     go_to_relative_point(rotation = atan2(y = ball.right_foot.preview.y, x = ball.right_foot.preview.x), 
                          x = ball.right_foot.preview.x - @distance * cos(angle=atan2(y = ball.right_foot.preview.y, x = ball.right_foot.preview.x)), 
                          y = ball.right_foot.preview.y - @distance * sin(angle=atan2(y = ball.right_foot.preview.y, x = ball.right_foot.preview.x)),
                           errorX=@errorX, errorY=@errorY, errorR=@errorR);
      
      motion.walk.coordinate = right_foot;
      motion.walk.stop_with_stand = true;
      
      head.control_mode = search_for_ball;
    }
  }
}
