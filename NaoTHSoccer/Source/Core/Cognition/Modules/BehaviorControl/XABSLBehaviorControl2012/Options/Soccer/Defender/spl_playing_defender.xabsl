/** Playing as defender/supporter */
option spl_playing_defender {

  state avoid_obstacle
  {
    decision
    {
      // if the point we want to go to is left, avoid obstacle going left
      if(motion.type == walk)
      {
        if(motion.walk_speed.y > 0)
          goto move_left_when_obstacle;
        else
          goto move_right_when_obstacle;
      }
      // just in case...
      else if(random < 0.5)
      {
        goto move_left_when_obstacle;
      }
      else
      {
        goto move_right_when_obstacle;
      }
    }
    action
    {
      motion.type = walk;
      motion.walk.style = fast;
      motion.walk_speed.x = 0;
      motion.walk_speed.y = 0;
      motion.walk_speed.rot = 0;
      check_collision();
    }
  }

  state move_left_when_obstacle
  {
    decision
    { 
      if(state_time > 1000)
      {
        goto ball_not_seen;
      }
      else
      {
        stay;
      }
    }
    action
    {
      motion.type = walk;
      motion.walk.style = fast;
      motion.walk_speed.x = 0;
      motion.walk_speed.y = 100;
      motion.walk_speed.rot = 0;
      check_collision();
    }
  }

  state move_right_when_obstacle
  {
    decision
    { 
      if(state_time > 1000)
      {
        goto ball_not_seen;
      }
      else
      {
        stay;
      }
    }
    action
    {
      motion.type = walk;
      motion.walk.style = fast;
      motion.walk_speed.x = 0;
      motion.walk_speed.y = -100;
      motion.walk_speed.rot = 0;
      check_collision();
    }
  }

  initial state ball_not_seen {
    decision{
			if ( last_state_was_penalized )
			  goto go_to_default_position; // return from penalty
			else if(action_done)
			  goto defending;
			else if(state_time > 30000) // can not find ball!!
		    goto go_to_default_position;
			else
        stay;
    }
    action {
      /* HIER NOCH WAS SINNVOLLES MACHEN */
      ball_not_seen_situation(); // only for attacker!
      check_collision();
    }
  }

  state defending {
    decision{
      if( action_done && ball.time_since_last_seen > 5000 )
        goto ball_not_seen;
      else
        stay;
    }
      action {
        spl_simple_defender();
        check_collision();
      }
  }

  state go_to_default_position {
    decision {
      if ( ball.was_seen )
        goto defending;
      else if(obstacle.ultrasound.distance < 350 && motion.walk_speed.x > 0 
          && motion.type == walk )
      {
        goto avoid_obstacle;
      }
      else if ( action_done || state_time > 30000)
        goto ball_not_seen;
      else
        stay;
    }
    action {
       decide_strategy_position();
       head.control_mode = smart_search;
       check_collision();
    }
  }
}