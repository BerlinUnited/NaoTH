/**  */
option move_around_ball
{ 
  float @direction;
  float @radius;

  common decision
  {
    if (abs(value=ball.angle)>30)
    {
      goto face_to_ball;
    }
    else if(@direction > 0){
      goto turn_right;
    }
    else if (true) {
      goto turn_left;
    }
  }

  initial state face_to_ball
  {
    action {
      motion.type = walk;
      motion.walk_speed.rot = atan2(y=ball.preview.y, x=ball.preview.x);//ball.angle;
      motion.walk_speed.x = 0;
      motion.walk_speed.y = 0;
      motion.walk.coordinate = hip;
    }
  }
  
  state turn_left
  {
  
    action {
      motion.type = walk;
      motion.walk_speed.rot = atan2(y=ball.left_foot.preview.y, x=ball.left_foot.preview.x);//relativeToRightFootA(a=ball.angle);
      motion.walk_speed.x = (vector.abs(x=ball.right_foot.preview.x, y=ball.right_foot.preview.y) - @radius) * cos(angle=motion.walk_speed.rot);
      motion.walk_speed.y = clip(value=@radius * tan(angle=clip(value=-@direction, min=0, max=45)), min=100, max=100) * cos(angle=motion.walk_speed.rot);
      motion.walk.coordinate = right_foot;
    }
  }

  state turn_right
  {
    action {
      motion.type = walk;
      motion.walk_speed.rot = atan2(y=ball.right_foot.preview.y, x=ball.right_foot.preview.x);
      motion.walk_speed.x = (vector.abs(x=ball.left_foot.preview.x, y=ball.left_foot.preview.y) - @radius) * cos(angle=motion.walk_speed.rot);
      motion.walk_speed.y = clip(value=@radius * tan(angle=clip(value=-@direction, min=-45, max=0)), min=-100, max=-100) * cos(angle=motion.walk_speed.rot);
      motion.walk.coordinate = left_foot;
    }
  }
}
