// go to ball while avoiding obstacles using ultra sonic 
option go_to_ball_with_USOA
{
  float @distance;

  initial state go
  {
    decision
    {
      if ((vector.abs(x=ball.preview.x, y=ball.preview.y) < obstacle.ultrasound.distance) &&
            (obstacle.ultrasound.distance <400) && (obstacle.ultrasound.blockedtime > 100))
          goto approach_carefully; //?
      else if(obstacle.ultrasound.left.distance < 400 && obstacle.ultrasound.blockedtime > 100)
          goto avoid_left;
      else if(obstacle.ultrasound.right.distance < 400 && obstacle.ultrasound.blockedtime > 100)
          goto avoid_right;
      else if(action_done)
        goto finish;
      else
        stay;
    }
    action 
    {
      go_to_ball(distance=@distance);
    }
  }

  state avoid_left
  {
    decision
    { if ((vector.abs(x=ball.preview.x, y=ball.preview.y) < obstacle.ultrasound.distance)&&
            (obstacle.ultrasound.distance<400) && (obstacle.ultrasound.blockedtime > 100))
        goto approach_carefully;
      else if(obstacle.ultrasound.distance > 400 && state_time > 1000)
        goto go;
      else if(obstacle.ultrasound.right.distance < obstacle.ultrasound.left.distance 
              && state_time > 1000
              && obstacle.ultrasound.blockedtime > 100)
        goto avoid_right;
      else
        stay;
    }
    action 
    {
      head.control_mode = search_for_ball;
      motion.type = walk;
      
      motion.walk.coordinate = hip;
      motion.walk.style = normal;

      motion.walk_speed.x = 0;
      motion.walk_speed.y = -100;
      motion.walk_speed.rot = (vector.abs(x=ball.preview.x, y=ball.preview.y) > 250) ? atan2(y = ball.preview.y, x = ball.preview.x) : 0;

    }
  }


  state avoid_right
  {
    decision
    { if ((vector.abs(x=ball.preview.x, y=ball.preview.y) < obstacle.ultrasound.distance)
            && (obstacle.ultrasound.distance<400) && obstacle.ultrasound.blockedtime > 100)
        goto approach_carefully;
      else if(obstacle.ultrasound.distance > 400 && state_time > 1000)
        goto go;
      else if(obstacle.ultrasound.left.distance < obstacle.ultrasound.right.distance 
              && state_time > 1000
              && obstacle.ultrasound.blockedtime > 100)
       goto avoid_left;
      else
        stay;
    }
    action 
    {
      head.control_mode = search_for_ball;
      motion.type = walk;
      
      motion.walk.coordinate = hip;
      motion.walk.style = normal;

      motion.walk_speed.x = 0;
      motion.walk_speed.y = 100;
      motion.walk_speed.rot = (vector.abs(x=ball.preview.x, y=ball.preview.y) > 250) ? atan2(y = ball.preview.y, x = ball.preview.x) : 0;

    }
  }

  state approach_carefully{
    decision{
      if (action_done)
        goto finish;
      else if (obstacle.ultrasound.distance > 400 || (vector.abs(x=ball.preview.x, y=ball.preview.y) > obstacle.ultrasound.distance))
        goto go;
      else
        stay;
    }

    action{
      go_to_ball(distance=@distance);
      motion.walk.style = stable;
    }
  }

  target state finish{
    decision
    {
      if (abs(value = (ball.percept.x - @distance - ball.radius)) > 30
        || abs(value = ball.percept.y) > 30
        || vector.abs(x=ball.speed.x, y=ball.speed.y) > 40)
        goto go;
      else
        stay;
    }
    action
    {
      motion.type = stand;
      head.control_mode = search_for_ball;
    }
  }

  
}