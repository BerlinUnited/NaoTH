/** Goto ball omnidirectional */
option go_to_relative_point_with_distance_and_rot
{

  float @x [mm];
  float @y [mm];

  /**  */
  float @rot [deg];

  /**  */
  float @dist [mm];

  target state go_to_point_done {
    decision{
      if(action_done)
        stay;
      else
        goto go_to_point;
    }
    action{

      go_to_relative_point( 
        rotation=atan2(y=odometry.preview.y(x=@x, y=@y), x=odometry.preview.x(x=@x, y=@y)) - @rot,   
        x=odometry.preview.x(x=@x, y=@y) - @dist*cos(angle=atan2(y=odometry.preview.y(x=@x, y=@y), x=odometry.preview.x(x=@x, y=@y))), 
        y=odometry.preview.y(x=@x, y=@y) - @dist*sin(angle=atan2(y=odometry.preview.y(x=@x, y=@y), x=odometry.preview.x(x=@x, y=@y))),
        errorX=30, errorY=30, errorR=15
      );
      
    }
  }

  initial state go_to_point {
    decision{
      if(action_done)
        goto go_to_point_done;
      else
        stay;
    }
    action{
      go_to_relative_point( 
        rotation=atan2(y=odometry.preview.y(x=@x, y=@y), x=odometry.preview.x(x=@x, y=@y)) - @rot,   
        x=odometry.preview.x(x=@x, y=@y) - @dist*cos(angle=atan2(y=odometry.preview.y(x=@x, y=@y), x=odometry.preview.x(x=@x, y=@y))), 
        y=odometry.preview.y(x=@x, y=@y) - @dist*sin(angle=atan2(y=odometry.preview.y(x=@x, y=@y), x=odometry.preview.x(x=@x, y=@y))),
        errorX=30, errorY=30, errorR=15
      );
    }
  }

}
