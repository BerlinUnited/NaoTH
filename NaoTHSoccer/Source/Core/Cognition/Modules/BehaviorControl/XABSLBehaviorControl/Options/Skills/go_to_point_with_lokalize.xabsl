/** Go to a specific position on the field */
option go_to_point_with_lokalize
{
  
  /** x position of the point to walk to on the field */
  float @x; //[-3700..3700] "mm";

  /** y position of the point to walk to on the field */
  float @y; // [-2700..2700] "mm";

  /** absolute rotation on field */
  float @rot; // -180...180 "deg";

  common decision
  {
    if(!robot_pose.is_valid)
      goto lokalize;
  }

  initial state lokalize
  {
    decision
    {
      else if ( action_done)
        goto stabilize_after_lokalize;
      else
        stay;
    }
    action
    {
      find_goal();
    }
  }

  state stabilize_after_lokalize
  {
    decision
    {
      else if ( state_time < 2000 )
        stay;
      else if(vector.abs(x=robot_pose.planned.x - @x, y=robot_pose.planned.y - @y) < 250)
        goto turn_to_target;
      else if(vector.abs(x=robot_pose.planned.x - @x, y=robot_pose.planned.y - @y) < 500)
          goto go_to_relative_point_no_turn;
      else
          goto go_to_relative_point;
    }
    action
    {
      find_goal();

      // remember the relative pose
      odometry.relative_point.x = locator.field_to_relative.x(x=@x, y=@y);
      odometry.relative_point.y = locator.field_to_relative.y(x=@x, y=@y);
    }
  }


  state go_to_relative_point_no_turn
  {
    decision
    {
      else if (action_done ||
              (vector.abs(x=rel2fieldX(x=odometry.relative_point.x, y=odometry.relative_point.y) - @x,
                          y=rel2fieldY(x=odometry.relative_point.x, y=odometry.relative_point.y) - @y) > 400)
          )
        goto lokalize;
      else
        stay;
    }
    action
    {
      go_to_relative_point(rotation=0, 
                           x=odometry.preview.x(x=odometry.relative_point.x, y=odometry.relative_point.y), 
                           y=odometry.preview.y(x=odometry.relative_point.x, y=odometry.relative_point.y));
      
      head.control_mode = search_for_goal;
    }
  }

  state go_to_relative_point
  {
    decision
    {
      else if (action_done ||
          (vector.abs(x=rel2fieldX(x=odometry.relative_point.x, y=odometry.relative_point.y) - @x,
                      y=rel2fieldY(x=odometry.relative_point.x, y=odometry.relative_point.y) - @y) > 1000)
          )
        goto lokalize;
      else
        stay;
    }
    action
    {
      motion.type = walk;
      motion.walk_speed.x = odometry.relative_point.x; // mm
      motion.walk_speed.y = odometry.relative_point.y; // mm
      motion.walk_speed.rot = atan2(y=odometry.relative_point.y, x=odometry.relative_point.x); //deg

      go_to_relative_point(rotation=atan2(
                             y=odometry.preview.y(x=odometry.relative_point.x, y=odometry.relative_point.y), 
                             x=odometry.preview.x(x=odometry.relative_point.x, y=odometry.relative_point.y)),
                           x=odometry.preview.x(x=odometry.relative_point.x, y=odometry.relative_point.y), 
                           y=odometry.preview.y(x=odometry.relative_point.x, y=odometry.relative_point.y));
      
      head.control_mode = search_for_goal;
    }
  }


  state turn_to_target
  {
    decision
    {
      else if(abs(value=robot_pose.rotation - @rot) < 10)
        goto finished;
      else
        stay;
    }
    action
    {
      motion.type = walk;
      motion.walk_speed.x = 0; // mm
      motion.walk_speed.y = 0; // mm
      motion.walk_speed.rot = @rot - robot_pose.rotation; //deg
      
      head.control_mode = search_for_goal;
    }
  }


  target state finished
  {
    decision
    {
      else
        stay;
    }
    action
    {
      motion.type = stand;
      head.control_mode = search_for_goal;
    }
  }

  
}
