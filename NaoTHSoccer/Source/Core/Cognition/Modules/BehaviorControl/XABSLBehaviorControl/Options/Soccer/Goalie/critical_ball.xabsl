/** clear the ball */

option critical_ball {

 common decision
  {
    //ball far away => not critical
    //use teamball! (locator.field_to_relative.x ball.team.position < 2000  && ball.team.time_since_last_update < 2000)
   if (executed_motion.type == goalie_sit_n_dive_right 
          || executed_motion.type == goalie_sit_n_dive_left)
          //|| executed_motion.type == goalie_sit_block)
      goto wait;             //2000
    else if((ball.distance > 3500 || ball.time_since_last_seen > 2000) && executed_motion.type != goalie_sit_block)
      goto not_critical;
  }

  state blockBall {
    decision {
     else if(state_time > 7000)
     {
       goto not_critical;
     } else 
        stay;
     } 
    action {
      head.control_mode = search_for_ball;
      motion.type = goalie_sit_block;
      reactiveBallModelNeeded = true;
    }
  }

  state diveLeft {
    decision {
      else if (executed_motion.type == goalie_sit_n_dive_left)
        goto wait;
      else 
        stay;
    }
    action {
      motion.execute_immediately = true;
      motion.type = goalie_sit_n_dive_left;
      head.control_mode = search_for_ball;
      reactiveBallModelNeeded = true;
    }
  }

  state diveRight {
    decision {
      else if (executed_motion.type == goalie_sit_n_dive_right)
        goto wait;
      else 
        stay;
    }
    action {
      motion.execute_immediately = true;
      motion.type = goalie_sit_n_dive_right;
      head.control_mode = search_for_ball;
      reactiveBallModelNeeded = true;
    }
  }

  state wait {
    decision {
      else if (executed_motion.type != goalie_sit_n_dive_right
          && executed_motion.type != goalie_sit_n_dive_left
          && executed_motion.type != goalie_sit_block)
        goto not_critical;
      else 
        stay;
    }
    action {
      motion.execute_immediately = false;
      motion.type = stand;
      reactiveBallModelNeeded = true;
      //do noTHING
    }
  }

state make_ready {
  decision {
    else if (state_time > 3000 && ball.time_seen > 1000)
      goto critical_ball;
    else 
      stay;

  }
  action {
    motion.type = sit;
    head.control_mode = search_for_ball;
    reactiveBallModelNeeded = true;
  }
}

initial state check_if_clearable {
  decision {
    else if (ball.distance < 900) //ball.time_seen > 1000 && motion.head.speed < 5 && 
      goto clear_ball;
    else if (ball.time_seen > 1000 && motion.head.speed < 5 && ball.distance > 4500)
      goto not_critical;
    else
      goto make_ready;
  }
  action {
    motion.type = stand;
    head.control_mode = search_for_ball;
    reactiveBallModelNeeded = true;
  }
}

state critical_ball {
  decision {//state_time, da ansonsten ball gesehen (aufstehen) aber nicht fixiert                                                                                                     //15
    else if (abs(value=attack.direction) < 50) {


       if (state_time > 1000 && motion.head.speed > 20 && abs(value=motion.head.yaw) < 5 && motion.head.pitch > -25)
         goto blockBall; //diese abfrage in common auslagern!
       else if (state_time > 1000 && motion.head.yaw > 9 && motion.head.pitch > -25 && motion.head.speed > 17)//  && abs(value=robot_pose.rotation) < 10)// && abs(value=ball.angle) PREVIEW < 10 && abs(value=robot_pose.rotation) < 15) hat nicht gestimmt
         goto diveLeft;
       else if (state_time > 1000 && motion.head.yaw < -9 && motion.head.pitch > -25 && motion.head.speed > 17)//  && abs(value=robot_pose.rotation) < 10)// && abs(value=ball.angle) PREVIEW < 10 && abs(value=robot_pose.rotation) < 15) hat nicht gestimmt
         goto diveRight;
       else if (state_time > 1000 && motion.head.yaw > 4 && motion.head.pitch > -37 && motion.head.pitch < -30 && motion.head.speed > 12) //percept jumps, then headspead 9!!!
         goto diveLeft;  
       else if (state_time > 1000 && motion.head.yaw < -4 && motion.head.pitch > -37 && motion.head.pitch < -30 && motion.head.speed > 12) //percept jumps, then headspead 9!!!
         goto diveRight;  
       else if (motion.head.speed < 5 && ball.distance < 1800)
         goto check_if_clearable;
       else if (abs(value=ball.angle) > 14) //test naoDevils 15!!
         goto rotate_to_critical_ball;
       /*go_to_strategy_point caused by go_to_strategy_point */
       else if (abs(value=robot_pose.y) > 550)
         goto not_critical;
	     else 
	       stay;    
     } else { 
    
	     if (state_time > 1000 && ball.time_seen > 1000 && motion.head.speed > 20 && abs(value=motion.head.yaw) < 5 && motion.head.pitch > 0)
	       goto blockBall; //diese abfrage in common auslagern!
       else if (motion.head.speed < 5 && ball.distance < 1800)
         goto check_if_clearable;
	     else
	       stay;
	   }
  }
  action {
    motion.type = sit;
    head.control_mode = none;
    head.motion_type = look_at_world_point;
    head.point_in_world.x = ball.percept.x;
    head.point_in_world.y = ball.percept.y;
    head.point_in_world.z = ball.radius; // radius of the ball
    reactiveBallModelNeeded = true;
  }

}

state rotate_to_critical_ball {
  decision {
     else if (action_done || !ball.was_seen) {
       goto check_if_clearable;
     } else {
        stay;
     }
  }
  action {
    head.control_mode = search_for_ball;
    go_to_relative_point(rotation=atan2(y=ball.preview.y, x=ball.preview.x), x=0, y=0,
                         errorX=30, errorY=30, errorR=15);
    reactiveBallModelNeeded = true;
  }
}

target state not_critical {
  decision {
    else if (state_time > 1000 && ball.was_seen && ball.distance < 5000) {//2000
      goto check_if_clearable;
    }
    else {
      stay;
    }
  }
  action {
    motion.type = stand;
    head.control_mode = goalie_look_around;
  }
}

state clear_ball {   
   decision {
       else if (action_done 
           || (ball.distance > 2500 && ball.time_since_last_seen < 1000)
           || (ball.time_since_last_seen > 3000)) 
       {
         goto not_critical;
       }
       else stay;
     }
     action {
       team.is_playing_as_striker = true;
       clear_ball_far_away();
     }
}

}
