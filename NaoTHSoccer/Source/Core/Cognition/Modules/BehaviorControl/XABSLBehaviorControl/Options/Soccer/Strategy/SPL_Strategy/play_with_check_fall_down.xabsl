option play_with_check_fall_down 
{  

  common decision {
    if(abs(value=sensor.inertial.y)>20)
       goto fall_and_stand_up;      
  }

  initial state _init
  {
    decision
    {
      else if (last_state_was_penalized)
        goto after_penalized_state;
      else
        goto calibrate_before_play;
    }
    action 
    {
    }
  }

  state calibrate_before_play
  {
    decision
    {
      else if(action_done)
        goto playing;
      else
        stay;
    }
    action
    {
      // it was 1500
      calibrate_intertial(stabilize_time = 0);
    }
  }

  state after_penalized_state {
    decision
    {
      else if(action_done)
        goto playing;
      else
        stay;
    }
    action 
    {
      after_penalized_state();
    }
  }

  state playing {
    decision
    {
      else if ( sensor.camera.buffer_failed_count > 0 )
        goto reset_camera;
      else
        stay;
    }
    action 
    {
      sound.request = (state_time == 0) ? playing : off;
      situationStatusOwnHalf = false;
      
      decide_role();
      //critical_ball();
      last_state_was_penalized = false;
    }
  }



  

  state calibrate
  {
    decision
    {
      else if(action_done)
        goto _init;
      else
        stay;
    }
    action
    {
      calibrate_intertial(stabilize_time = 1000);
    }
  }


  state reset_camera {
    decision {
      else if ( state_time > 0)
        goto wait_camera;
      else
        stay;
      }
    action {
      motion.type = stand;
      motion.standHeight = 220;
      head.control_mode = stay_as_forced;
      team.is_playing_as_striker = false;
      sensor.camera.reset = true;
      set_right_eye = blue;
      set_left_eye = blue;
    }
  }

  state wait_camera {
    decision {
      else if ( sensor.camera.buffer_failed_count == 0 ) 
        goto _init;
      else if ( state_time > 20000 )
        goto reset_camera;
      else
        stay;
      }
    action {
      motion.type = stand;
      motion.standHeight = 220;
      head.control_mode = stay_as_forced;
      team.is_playing_as_striker = false;
      sensor.camera.reset = false;
      set_right_eye = blue;
      set_left_eye = blue;
    }
  }

  state fall_and_stand_up
  {
    decision
    {
      else if (action_done)
        goto calibrate;//_init;
      else 
        stay; 
    }
    action
    {
      falling_down_standing_up();
    }
  }
  
}