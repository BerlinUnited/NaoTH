/** goto relative point */
option go_to_relative_point
{
  /**  */
  float @rotation [deg];

  /**  */
  float @x [mm];

  /**  */
  float @y [mm];

  /** error range */
  float @errorX [mm]; // 30

  float @errorY [mm]; // 30

  float @errorR [deg]; // 15

  target state stand
  {
    decision
    {
      if ( abs(value= @x) > @errorX + 10
        || abs(value= @y) > @errorY + 10
        || abs(value= @rotation) > @errorR + 5)
                          
      {
          goto go_to;
      }
      else
        stay;
    }
    action
    {
      motion.type = stand;
    }
  }

  initial state go_to {
    decision{
      if ( abs(value= @x) < @errorX
        && abs(value= @y) < @errorY
        && abs(value= @rotation) < @errorR)
        goto stand;
      else
        stay;
    }
    action{
      motion.type = walk;
      motion.walk.style = (abs(value=@x) < 300)?stable:((abs(value=@x) > 500)?fast:normal);
      motion.walk_speed.x =  @x; //((@x > 20) && (@x < 200))?@x/2:@x;
      motion.walk_speed.y = @y;
      motion.walk_speed.rot = @rotation;
    }
  }
}
