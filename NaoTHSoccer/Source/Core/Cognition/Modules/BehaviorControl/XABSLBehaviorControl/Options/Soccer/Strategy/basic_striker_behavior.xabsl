option basic_striker_behavior{

  common decision
  {
    if(!body.ready_to_walk || game.current_mode != playing)
      goto idle;
  }

  // this is only usefull for test agents which call basic_striker_behavior directly
  initial state idle {
    decision {
      else if(game.current_mode == playing)
        goto decide_search;
      else
        stay;
    }
    action {
    }
  }

  state decide_search{
    decision{
      else if (ball.was_seen || ball.time_since_last_seen < 100)
        goto go_to_ball;
      else
        stay;
    }
    action{
      search_ball();
    }
  
  }

  state go_to_ball {
    decision {
      else if (ball.time_since_last_seen>1500)
        goto decide_search;
      else if(action_done)
        goto check_for_obstacles;
      else
        stay;
    }
    action {
      go_to_ball_with_USOA(distance=190);
    }
  }

  state check_for_obstacles {
	   decision {
      else if((obstacle.ultrasound.distance < 400) && (obstacle.ultrasound.blockedtime > 100))
        goto close_to_ball_with_USOA_situation_state;// TODO: this is just a do side kick state
      else
        goto decide_turning_direction;
	   }
	   action {
	   }
	 }

  // TODO: this is just a do side kick state
  state close_to_ball_with_USOA_situation_state {
	   decision {
      else if (ball.time_since_last_seen>1500)// TODO: should it be a common decision?
        goto decide_search;
      else if(action_done)
        goto go_to_ball;
      else
        stay;
	   }
	   action {
      close_to_ball_with_USOA_situation();
	   }
	 }

  state decide_turning_direction {
    decision{
      else if (ball.time_since_last_seen>1500)
        goto decide_search;
      else if(vector.abs(x=ball.preview.x, y=ball.preview.y)>250)
        goto go_to_ball;
      else if (obstacle.ultrasound.blockedtime > 100 && obstacle.ultrasound.distance < 400 && state_time > 500)
        goto check_for_obstacles;
      else if((abs(value=attack.direction.preview)<20 && robot_pose.planned.x<3500) || abs(value=attack.direction.preview)<12)
        {
          if(ball.preview.y > 0)
            goto preattack_for_right;
          else
            goto preattack_for_left;
        }
      else if(( (abs(value=robot_pose.planned.x)<4000) && abs(value=attack.direction.preview)>90)
              ||(abs(value=attack.direction.preview)<90 && abs(value=attack.direction.preview)>40))
        goto sidekick_with_foot;
      else
        stay;
    }
    action{
      move_around_ball(direction=(attack.direction.preview>0)?30:-30, radius=190);
      motion.walk.style = fast;
    }
  }

  state preattack_for_right {
    decision{
      else if (obstacle.ultrasound.blockedtime > 100 && obstacle.ultrasound.distance < 400)
        goto check_for_obstacles;
      else if (ball.time_since_last_seen>1500)
        goto decide_search;
      else if (action_done) 
      {
	      if(random < 0.3)
	        goto do_kick_with_right_foot;
	      else
	        goto attack_with_right_foot;
      }
      else 
        stay;
    }
    action{
      go_to_ball_with_foot(right=true, distance=190);
      //go_to_ball_with_foot_and_USOA(right=true, distance=190);

      //motion.walk.style = normal;
    }
  }

  state attack_with_right_foot {
    decision {
      else if(action_done)
        goto go_to_ball_for_a_second;
      else
        stay;
    }
    action {
      //close_to_ball_with_USOA_situation();
      fast_forward_kick(foot = right);
    }
  }

 state do_kick_with_right_foot {
    decision {
      else if(action_done)
        goto go_to_ball_for_a_second;
      else
        stay;
    }
    action {
      kick_with_foot(foot = right);
    }
  }

  state preattack_for_left {
    decision{
      else if (obstacle.ultrasound.blockedtime > 100 && obstacle.ultrasound.distance < 400)
        goto check_for_obstacles;
      else if (ball.time_since_last_seen>1500)
        goto decide_search;
      else if (action_done) 
        {
          if(random < 0.3)
            goto do_kick_with_left_foot;
          else
            goto attack_with_left_foot;
        }
      else 
        stay;
    }
    action{
      go_to_ball_with_foot(right=false, distance=190);
      //go_to_ball_with_foot_and_USOA(right=true, distance=190);

      //motion.walk.style = normal;
    }
  }

  state attack_with_left_foot {
    decision {
      else if(action_done)
        goto go_to_ball_for_a_second;
      else
        stay;
    }
    action {
      //close_to_ball_with_USOA_situation();
      fast_forward_kick(foot = left);
    }
  }

  state do_kick_with_left_foot {
    decision {
      else if(action_done)
        goto go_to_ball_for_a_second;
      else
        stay;
    }
    action {
      kick_with_foot(foot = left);
    }
  }


  state sidekick_with_foot{
    decision{
      else if(action_done)
        goto go_to_ball_for_a_second;
      else
        stay;
    }
    action{
      sidekick(side=attack.direction.preview<0?right:left);
      
      motion.walk.style = normal;
      //motion.walk.style = stable;
    }
  }

  // unsatisfying solution for the second kick problem
  state go_to_ball_for_a_second{
    decision {
      else if (ball.time_since_last_seen>1500)
        goto decide_search;
      else if(state_time > 1000)
        goto go_to_ball;
      else
        stay;
    }
    action {
      go_to_ball_with_USOA(distance=190);
    }
  }
}
