option basic_striker_behavior{

 common decision
  {
    if(!body.ready_to_walk || game.current_mode != playing)
      goto idle;
  }
  
  initial state idle {
    decision {
      else if((game.current_mode == playing) && (ball.time_since_last_seen>1000))
        goto decide_search_far_or_close;
      else if(ball.was_seen)
        goto go_to_ball;
      else
        stay;
    }
    action {
      
    }
  }

  state decide_search_far_or_close{
    decision{
      else if((vector.abs(y=ball.preview.y,x=ball.preview.x)<250) && (state_time>3000))
        goto search_ball_close;
      else  if(state_time>3000)
        goto search_ball_far;
      else
        stay;
    }
    action{
      motion.type = stand;

      head.control_mode = search_for_ball;
    }
  
  }
  
  state search_ball_close {
    decision {
      else if(action_done)
        goto search_ball_far;
      else
        stay;
    }
    action {
      search_ball_back_rot();
    }
  }

  state search_ball_far {
    decision {
      else if(action_done)
        goto go_to_ball;
      else
        stay;
    }
    action {
      simple_search_ball();
    }
  }

  state go_to_ball {
    decision {
      else if (ball.time_since_last_seen>1000)
        goto decide_search_far_or_close;
      else if(action_done)
        goto decide_turning_direction;
      else
        stay;
    }
    action {
      go_to_ball_with_USOA(distance=130);
    }
  }

  state decide_turning_direction {
    decision{
      else if (ball.time_since_last_seen>1000)
        goto decide_search_far_or_close;
      else if(abs(value=attack.direction.preview)<10)
        goto attack;
      else if(attack.direction.preview>0)
        goto turn_right_around;
      else
        goto turn_left_around;
    }
    action{
    }

  }

  state turn_right_around {
    decision {
      else if (ball.time_since_last_seen>1000)
        goto decide_search_far_or_close;
      else if(vector.abs(x=ball.preview.x, y=ball.preview.y)>190)
        goto go_to_ball;
      else if(abs(value=attack.direction.preview)<10)
        goto attack;
      else
        stay;
    }
    action {
      move_around_ball(direction=30, radius=170);
      motion.walk.style = fast;
    }
  }

  state turn_left_around {
    decision {
      else if (ball.time_since_last_seen>1000)
        goto decide_search_far_or_close;
      else if(vector.abs(x=ball.preview.x, y=ball.preview.y)>190)
        goto go_to_ball;
      else if(abs(value=attack.direction.preview)<10)
        goto attack;
      else
        stay;
    }
    action {
      move_around_ball(direction=-30, radius=170);
      motion.walk.style = fast;
    }
  }


  state attack {
    decision {
      else if (ball.time_since_last_seen>1000)
        goto decide_search_far_or_close;
      else if(action_done)
        goto go_to_ball;
      else
        stay;
    }
    action {
      close_to_ball_with_USOA_situation();
      head.control_mode = search_for_ball;
    }
  }
}
