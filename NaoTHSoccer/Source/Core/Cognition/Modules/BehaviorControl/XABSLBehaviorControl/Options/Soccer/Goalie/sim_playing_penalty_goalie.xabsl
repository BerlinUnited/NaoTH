/** Playing as penalty goalie */
option sim_playing_penalty_goalie {


  state guard_init {
    decision {
      if ( ball.position.field.x < field.xPosOwnPenaltyArea )
        goto clear_ball;
      else
        stay;
    }
    action {
      sim_playing_goalie();
    }
  } 
  
  state clear_ball {
    decision {
      stay;
    }
    action {
      sim_playing_defender();
    }
  }

  initial state guard {
    decision {

     if(ball.time_since_last_seen > 3000)
     {
       goto ball_not_seen;
     }
     else if (ball.was_seen 
             && abs(value=ball.angle) < 60
             && ball.x > 0
             && ball.distance >= 3000
             && ball.future.x(t=10) < 500
             && abs(value=rel2fieldY(x=ball.future.y(t=10), y=ball.future.y(t=10))) < (field.yPosLeftGoal+500)
             && abs(value=ball.speed) > 600             
             )
     {
       if(ball.future.y > 0)
       {
         goto fall_left;
       }
       else
       {
         goto fall_right;
       }
     }
     else if ( ball.position.field.x < field.xPosOwnPenaltyArea )
     {
       goto clear_ball;
     }
     else
       stay;
    }
    action {
        head.control_mode = search_for_ball;
        team.is_playing_as_striker = false;
        go_to_point(
          x=penalty_goalie.pos.x,
          y=penalty_goalie.pos.y,
          rot=ball.time_since_last_seen < 3000 ? ball.angle : robot_pose.rotation);
        motion.type = walk;
    }
  }

  state ball_not_seen
  {
    decision {
      if(ball.was_seen)
      {
        goto guard;
      }
      else
      {
        stay;
      }
    }
    action {
      head.control_mode = search_for_ball;
      motion.type = walk;
      motion.walk_speed.x = 0;
      motion.walk_speed.y = 0;
      motion.walk_speed.rot = -100;
    }
  }


  state fall_left {
    decision {
      if ( state_time > 3000 )
        goto guard;
      else
        stay;
    }
    action {
      motion.type = fall_left;
    }
  }

  state fall_right {
    decision {
      if ( state_time > 3000 )
        goto guard;
      else
        stay;
    }
    action {
      motion.type = fall_right;
    }
  }
  
  
}