/**
* This is an attacking behavior. 
* It should go to the ball, and dribble or kick 
**/

option smart_attack_situation
{
  common decision
  {
    //Change angle here (and in walk_against_ball) to influence walk against ball decision 
    if(goal.opp.time_since_seen > 30000 || !robot_pose.is_valid)
      goto validate_field_position;
    else if( ((abs(value = attack.direction) < 30 && goal.opp.distance > 1500) ||
         (abs(value = attack.direction) < 5))
        && (ball.preview.x > 50 && ball.preview.x < 250 && abs(value=ball.preview.y) < 40)
        && common_decision.allowed)
    {
      goto walk_against_ball;
    }
  }

  state validate_field_position
  {
    decision
    {
      // if not localized turn around ball
      else if (state_time > 3000)
        goto turn_around_ball;
      // if position is verified, go on
      else if(goal.opp.time_since_seen < 3000 || goal.own.time_since_seen < 3000) //|| robot_pose.is_valid)
        goto approach_roughly;
      else
        stay;
    }
    action
    {
      head.control_mode = search_for_goal;
      motion.type = stand;
    }
  }

  state turn_around_ball
  {
    decision
    {
      else if (action_done)
        goto approach_roughly;
      else
        stay;
    }
    action {
      turn_around_ball_face_goal();
      motion.type = walk;
      motion.walk.stop_with_stand = false;
    }
  }


  // hold on for a while and go to approach_roughly
  state decide_what_to_do_next
  {
    decision
    {
    else if(state_time < 600)
      stay;
    else
      goto approach_roughly;
    }
    action
    {
      motion.type = stand;
      motion.walk.stop_with_stand = true;
      common_decision.allowed = false;

      // HACK: look at percept
      head.control_mode = none;
      head.motion_type = look_at_world_point;
      head.point_in_world.x = ball.percept.x;
      head.point_in_world.y = ball.percept.y;
      head.point_in_world.z = ball.radius;
    }
  }

  initial state approach_roughly
  {
    decision
    {
      // we might be delocalized
      else if(goal.opp.time_since_seen > 50000 || !robot_pose.is_valid)
      {
        goto validate_field_position;
      } 
      // ball is somewhat close
      else if( ball.right_foot.preview.x < 500
            || ball.left_foot.preview.x < 500)
      {
        // omni kick
        if(   (goal.opp.distance < 1500 && abs(value=attack.direction) < 10)
              && goal.opp.distance > 400
              && (  (ball.right_foot.preview.x < 200 && ball.right_foot.preview.x > 0 && body.temperature.leg.right < 53)
                  || (ball.left_foot.preview.x < 200 && ball.left_foot.preview.x > 0 && body.temperature.leg.left < 53))
              )
	      {
	        goto omnidirectional_kick;
	      }
	      // Ball lies good enough for sidekick with left foot
	      else if (executed_motion.step_control.left_movable
               && abs(value=(atan2(y = ball.left_foot.preview.y, x = ball.left_foot.preview.x))) < 15       
               && ball.right_foot.preview.x <= 200
               && ball.right_foot.preview.y >= 95 && ball.right_foot.preview.y <= 105)
	      {
	        goto sidekick_left;
	      }
	      // Ball lies good enough for sidekick with right foot
        // Todo: Adjust parameters here
	      else if(executed_motion.step_control.right_movable
              && abs(value=(atan2(y = ball.right_foot.preview.y, x = ball.right_foot.preview.x))) < 15
              && ball.left_foot.preview.x <= 200
              && ball.left_foot.preview.y <= -95 && ball.left_foot.preview.y >= -105)
        {
          goto sidekick_right;
        }
        //else 
        else
        {
          // default situation
          goto turn_around_ball;
        }
      }
      else
      {
        stay;
      }
    }
    action
    {
      common_decision.allowed = true;

      // approach the ball
      follow_ball_with_foot();
      
      //motion.walk.style = stable; // is also set in the follow_ball_with_foot->go_to_relative_point
      motion.walk.stop_with_stand = false;
      head.control_mode = search_for_ball;
    }
  }  


  state omnidirectional_kick
  {
    decision
    {
      else if(action_done)
        goto approach_roughly;
      else
        stay;
    }
    action
    {
      common_decision.allowed = false;
      perform_omnidirectional_kick(distance = 190, right_foot = ball.preview.y<0, errorX=30, errorY=30, errorR=20);
    }
  }

  state walk_against_ball
  {
    decision {
      // get out of walk_against_ball
      else if (state_time > 1000)
	      goto decide_what_to_do_next;
      else
        stay;
    }
    action {
      common_decision.allowed = false;
    
      motion.type = walk;
      motion.walk.coordinate = hip;
      motion.walk.style = fast;
      motion.walk_speed.x = 201;
      motion.walk_speed.y = 0;
      motion.walk_speed.rot = 0;

      // HACK: look at percept
      head.control_mode = none;
      head.motion_type = look_at_world_point;
      head.point_in_world.x = ball.percept.x;
      head.point_in_world.y = ball.percept.y;
      head.point_in_world.z = ball.radius;
    }
  }

  state sidekick_right
  {
    decision
    {
      else if(action_done)
        goto approach_roughly;
      else
        stay;
    }
    action
    {
      common_decision.allowed = true;
      sidekick(right_foot=true);
    }
  }

  state sidekick_left
  {
    decision
    {
      else if(action_done)
        goto approach_roughly;
      else
        stay;
    }
    action
    {
      common_decision.allowed = true;
      sidekick(right_foot=false);
    }
  }
}