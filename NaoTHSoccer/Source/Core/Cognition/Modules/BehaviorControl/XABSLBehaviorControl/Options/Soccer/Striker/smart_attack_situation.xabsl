/**
* This is an attacking behavior. 
* It should go to the ball, and dribble or kick 
**/

option smart_attack_situation
{
  common decision
  {
    //Change angle here to influence walk against ball decision 
    if(abs(value = attack.direction) < 0 
        && (ball.preview.x > 0 && ball.preview.x < 250 && abs(value=ball.preview.y) < 40))
    {
      goto walk_against_ball;
    }
  }

  state stand_tester
  {
    decision
    {
      else if(state_time > 10000)
      {
        if(attack.direction < 0)
        {
          goto attack_left_foot;
        }
        else
        {
          goto approach_decision;
        }
      }
      else stay;
    }
    action
    {
      motion.type = stand;
    }
  }
  
  initial state approach_decision
  {
    decision
    {
      else if(attack.direction < 0)
      {
        goto attack_left_foot;
      }
      else
      {
        goto attack_right_foot;
      }
    }
    action
    {
      head.control_mode = search_for_ball;
      motion.type = walk;
      motion.walk.stop_with_stand = false;
      motion.walk_speed.x = 0;
      motion.walk_speed.y = 0;
      motion.walk_speed.rot = 0;
    }
  }

  state attack_left_foot
  {
    decision
    {
      // We decided for left foot but attack.direction changes to much due to moving ball, approach right
      else if(attack.direction > 30)
      {
        goto attack_right_foot;
      }
      /* Include kick here
      else if(action_done
              && (goal.opp.distance < 2000 
              && abs(value=attack.direction) < 60)
              || random > 0.4)
        goto omnidirectional_kick;
      }*/
      else if (executed_motion.step_control.left_movable
               && ball.right_foot.preview.x <= 210// * cos(angle=atan2(y = ball.right_foot.preview.y, x = ball.right_foot.preview.x))
               && ball.right_foot.preview.y >= 110//  * abs(value=sin(angle=atan2(y = ball.right_foot.preview.y, x = ball.right_foot.preview.x))) 
               && ball.right_foot.preview.y <= 130)//  * abs(value=sin(angle=atan2(y = ball.right_foot.preview.y, x = ball.right_foot.preview.x))))
      {
        goto stand_tester;
//        goto sidekick_left;
      }
      else
      {
        stay;
      }
    }
    action
    {
      go_to_relative_point(rotation = (ball.distance>500?atan2(y = ball.left_foot.preview.y - sin(angle=attack.direction)*200, x = ball.left_foot.preview.x - cos(angle=attack.direction)*200)
                               :atan2(y = ball.left_foot.preview.y, x = ball.left_foot.preview.x)), 
                           x = ball.right_foot.preview.x - 200,// * cos(angle=atan2(y = ball.right_foot.preview.y, x = ball.right_foot.preview.x)) - (ball.distance>500?cos(angle=attack.direction)*200:0), 
                           y = ball.right_foot.preview.y - 120// * abs(value=sin(angle=atan2(y = ball.right_foot.preview.y, x = ball.right_foot.preview.x)))
                               - (ball.distance>500?sin(angle = clip(value=attack.direction, min=-180 ,max=0))*200:0),
                           errorX=0, errorY=0, errorR=0);
      //motion.walk.coordinate = right_foot;
      motion.type = walk;
      motion.walk.stop_with_stand = false;
      head.control_mode = search_for_ball;
    }
  }

  state attack_right_foot
  {
    decision
    {
      // We decided for right foot but attack.direction changes to much due to moving ball, approach left
      else if(attack.direction < -30)
      {
        goto attack_left_foot;
      }
      /* Include kick here
      else if(action_done
              && (goal.opp.distance < 2000 
              && abs(value=attack.direction) < 60)
              || random > 0.4)
        goto omnidirectional_kick;
      }*/
      else if(executed_motion.step_control.right_movable
              && ball.left_foot.preview.x <= 210  * cos(angle=atan2(y = ball.left_foot.preview.y, x = ball.left_foot.preview.x))
              && ball.left_foot.preview.y <= -110//  * abs(value=sin(angle=atan2(y = ball.left_foot.preview.y, x = ball.left_foot.preview.x))) 
              && ball.left_foot.preview.y >= -125)//  * abs(value=sin(angle=atan2(y = ball.left_foot.preview.y, x = ball.left_foot.preview.x))))
      {
        goto stand_tester;
//        goto sidekick_right;
      }
      else
      {
        stay;
      }
    }
    action
    {
      go_to_relative_point(rotation = (ball.distance>500?atan2(y = ball.right_foot.preview.y - sin(angle=attack.direction)*200, x = ball.right_foot.preview.x - cos(angle=attack.direction)*200)
                               :atan2(y = ball.right_foot.preview.y, x = ball.right_foot.preview.x)), 
                           x = ball.left_foot.preview.x - 200 * cos(angle=atan2(y = ball.left_foot.preview.y, x = ball.left_foot.preview.x)) - (ball.distance>500?cos(angle=attack.direction)*200:0), 
                           y = ball.left_foot.preview.y + 115,// * abs(value=sin(angle=atan2(y = ball.left_foot.preview.y, x = ball.left_foot.preview.x)))
                               //- (ball.distance>500?sin(angle = clip(value=attack.direction, min=0 ,max=180))*200:0),
                           errorX=0, errorY=0, errorR=0);
      motion.walk.coordinate = left_foot;
      motion.type = walk;
      motion.walk.stop_with_stand = false;
      head.control_mode = search_for_ball;
    }
  }

  state omnidirectional_kick
  {
    decision
    {
      else if(action_done)
      {
        if(attack.direction < 0)
        {
          goto attack_left_foot;
        }
        else
        {
          goto attack_right_foot;
        }
      }
      else
      {
        stay;
      }
    }
    action
    {
      perform_omnidirectional_kick();
    }
  }

  state walk_against_ball
  {
    decision {
      else if (state_time > 1000 
                || abs(value = attack.direction) > 30
                || ball.percept.x < 0
                || ball.percept.x > 250
                || abs(value=ball.percept.y) > 40) //state_time as backup 
      {
        if(attack.direction < 0)
        {
          goto attack_left_foot;
        }
        else
        {
          goto attack_right_foot;
        }
      }
      else
      {
        stay;
      }
    }
    action {
      motion.type = walk;
      motion.walk_speed.x = 100;
      motion.walk_speed.y = 0;
      motion.walk_speed.rot = 0;
      motion.walk.coordinate = hip;
      motion.walk.style = fast;
      head.motion_type = look_at_world_point;
      head.point_in_world.x = ball.percept.x;
      head.point_in_world.y = ball.percept.y;
      head.point_in_world.z = ball.radius;
    }
  }

  state sidekick_right
  {
    decision
    {
      else if(action_done)
      {
        if(attack.direction < 0)
        {
          goto attack_left_foot;
        }
        else
        {
          goto attack_right_foot;
        }
      }
      else
      {
        stay;
      }
    }
    action
    {
      sidekick(right_foot=true);
    }
  }

  state sidekick_left
  {
    decision
    {
      else if(action_done)
      {
        if(attack.direction < 0)
        {
          goto attack_left_foot;
        }
        else
        {
          goto attack_right_foot;
        }
      }
      else
      {
        stay;
      }
    }
    action
    {
      sidekick(right_foot=false);
    }
  }

  state finished
  {
    action
    {
      head.control_mode = search_for_ball;
      motion.type = stand;
      motion.walk.stop_with_stand = true;
    }
  }
}