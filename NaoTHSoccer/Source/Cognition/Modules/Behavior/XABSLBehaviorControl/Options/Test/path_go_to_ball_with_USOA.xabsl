// go to ball while avoiding obstacles using ultra sonic 
option path_go_to_ball_with_USOA
{
  float @distance;

  initial target state go
  {
    decision
    {
      if (obstacle.ultrasound.blockedtime > 100 && obstacle.ultrasound.distance < 400)
      {
        if (vector.abs(x=ball.preview.x, y=ball.preview.y) < obstacle.ultrasound.distance
)
          goto approach_carefully;
        else if(obstacle.ultrasound.left.distance < obstacle.ultrasound.right.distance)
          goto avoid_left;
        else
          goto avoid_right;
      }
      else
        stay;
    }
    action 
    {
      path.routine = go_to_ball;
      path.distance = @distance;
      
      //loook at percept
      head.control_mode = look_at_ball_percept;
    }
  }

  state avoid_left
  {
    decision
    { 
      if(state_time < 1000)
        stay;
      else if(obstacle.ultrasound.distance > 400)
        goto go;
      else if (vector.abs(x=ball.preview.x, y=ball.preview.y) < obstacle.ultrasound.distance)
        goto approach_carefully;
      else if(obstacle.ultrasound.right.distance < obstacle.ultrasound.left.distance)
        goto avoid_right;
      else
        stay;
    }
    action 
    {
      head.control_mode = search_for_ball;
      
      
      motion.type = walk;
      motion.walk.coordinate = hip;
      motion.walk.style = normal;

      motion.walk_speed.x = 0;
      motion.walk_speed.y = -100;
      motion.walk_speed.rot = (vector.abs(x=ball.preview.x, y=ball.preview.y) > 250) ? atan2(y = ball.preview.y, x = ball.preview.x) : 0;
    }
  }


  state avoid_right
  {
    decision
    { 
      if(state_time < 1000)
        stay;
      else if(obstacle.ultrasound.distance > 400)
        goto go;
      else if (vector.abs(x=ball.preview.x, y=ball.preview.y) < obstacle.ultrasound.distance)
        goto approach_carefully;
      else if(obstacle.ultrasound.left.distance < obstacle.ultrasound.right.distance)
       goto avoid_left;
      else
        stay;
    }
    action 
    {
      head.control_mode = search_for_ball;
      
      motion.type = walk;
      motion.walk.coordinate = hip;
      motion.walk.style = normal;

      motion.walk_speed.x = 0;
      motion.walk_speed.y = 100;
      motion.walk_speed.rot = (vector.abs(x=ball.preview.x, y=ball.preview.y) > 250) ? atan2(y = ball.preview.y, x = ball.preview.x) : 0;
    }
  }

  target state approach_carefully 
  {
    decision{
      if (obstacle.ultrasound.distance > 400)
        goto go;
      else if (vector.abs(x=ball.preview.x, y=ball.preview.y) > obstacle.ultrasound.distance)
      {
        if(obstacle.ultrasound.left.distance < obstacle.ultrasound.right.distance)
           goto avoid_left;
        else
           goto avoid_right;
      }
      else
        stay;
    }

    action{
      path.routine = go_to_ball;
      path.distance = @distance;
      
      //loook at percept
      head.control_mode = look_at_ball_percept;}
  }
}