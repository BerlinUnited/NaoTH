/**
  Searches for the ball and walking back for some distance (mm), walking an s-shaped path.
  
  First, the robot walks straight back for 1/3 of the distance,
  then it walks back and turns (rotating) for 1/3 of the distance,
  finally it walks back and turns in the opposite direction for the last 1/3 of the distance.
  
  path >>>>-.
            #-.
              #->>>>> 0

  NOTE: a small distance makes the s-shaped path smaller and not so easily recognizable
*/
option search_ball_back_rot
{
  float @distance; // in mm
  enum direction @search_direction;

  common decision  {
    // found ball!
    if(ball.know_where_itis)
      goto finish;
    // dont leave the field!
    else if(abs(value=robot_pose.planned.x) > field.xPosOpponentGroundline || 
            abs(value=robot_pose.planned.y) > field.yPosLeftSideline)
      goto finish;
  }

  /* Set the current location we want to walk back from. */
  initial state init {
    decision {
      else if(state_time > 0)
        goto walk_back_straight;
      else
        stay;
    }
    action {
      search_ball_walk_back.x = robot_pose.x;
      search_ball_walk_back.y = robot_pose.y;
    }
  }

  /* walk back straight */
  state walk_back_straight {
    decision {
      // walk half the distance back without rotating (walk straight)
      else if(vector.abs(x=robot_pose.x - search_ball_walk_back.x, y=robot_pose.y - search_ball_walk_back.y) > (@distance*0.33))
      {
        if (@search_direction == right)
          goto walk_back_turn_right_first;
        else
          goto walk_back_turn_left_first;
      }
      else
        stay;
    }
    action {
      motion.type = walk;
      motion.walk.style = fast;
      
      motion.walk.coordinate = hip;
      motion.walk_speed.x = -100;
      motion.walk_speed.y = 0;
      motion.walk_speed.rot = 0;
  
      /*
      head.control_mode = none;
      head.point_in_world.x = 200;
      head.point_in_world.y = 0;
      head.point_in_world.z = 0;
      head.motion_type = look_at_world_point;
      */
     head.control_mode = search_for_ball;
    }
  }

  /* walk back and rotate to the left first, then rotate right*/
  state walk_back_turn_left_first {
    decision {
      // walk back for a quarter of the distance, rotating left first
      // vector.abs(x=robot_pose.x - search_ball_walk_back.x, y=robot_pose.y - search_ball_walk_back.y) > (@distance*0.66)
      else if(atan2(y=robot_pose.y - search_ball_walk_back.y, x=robot_pose.x - search_ball_walk_back.x) > 30)
        goto stop_left;
      else
        stay;
    }
    action {
      motion.type = walk;
      motion.walk.style = fast;
      // NOTE: too much rotation and the robot is just turning without walking back!
      motion.walk.coordinate = hip;
      motion.walk_speed.x = -100;
      motion.walk_speed.y = -100;
      motion.walk_speed.rot = 15;
  
      head.control_mode = none;
      head.point_in_world.x = 200;
      head.point_in_world.y = 200;
      head.point_in_world.z = 0;
      head.motion_type = look_at_world_point;
    }
  }

  /* walk back and rotate to the right first, then rotate left */
  state walk_back_turn_right_first {
    decision {
      // walk back for a quarter of the distance, rotating right first
      //else if(vector.abs(x=robot_pose.x - search_ball_walk_back.x, y=robot_pose.y - search_ball_walk_back.y) > (@distance*0.66))
      else if(atan2(y=robot_pose.y - search_ball_walk_back.y, x=robot_pose.x - search_ball_walk_back.x) < -30)
        goto stop_right;
      else
        stay;
    }
    action {
      motion.type = walk;
      motion.walk.style = fast;
      // NOTE: too much rotation and the robot is just turning without walking back!
      motion.walk.coordinate = hip;
      motion.walk_speed.x = -100;
      motion.walk_speed.y = 100;
      motion.walk_speed.rot = -15;
  
      head.control_mode = none;
      head.point_in_world.x = 200;
      head.point_in_world.y = -200;
      head.point_in_world.z = 0;
      head.motion_type = look_at_world_point;
    }
  }

  /* stop walking back with rotating left, before start walking back with right rotation */
  state stop_left {
    decision{
      else if( executed_motion.type == stand || state_time > 800)
        goto walk_back_turn_right;
      else
        stay;
    }
    action {
      motion.type = stand;
  
      motion.walk.stop_with_stand=false;
      
      head.control_mode = none;
      head.point_in_world.x = 200;
      head.point_in_world.y = 200;
      head.point_in_world.z = 0;
      head.motion_type = look_at_world_point;
    }
  }

  /* stop walking back with rotating right, before start walking back with left rotation */
  state stop_right {
    decision {
      else if( executed_motion.type == stand || state_time > 800)
        goto walk_back_turn_left;
      else
        stay;
    }
    action{
      motion.type = stand;
  
      motion.walk.stop_with_stand=false;
      
      head.control_mode = none;
      head.point_in_world.x = 200;
      head.point_in_world.y = -200;
      head.point_in_world.z = 0;
      head.motion_type = look_at_world_point;
    }
  }

  /* walk back and rotate to the right (after rotating left) */
  state walk_back_turn_right {
    decision {
      //else if(vector.abs(x=robot_pose.x - search_ball_walk_back.x, y=robot_pose.y - search_ball_walk_back.y) > @distance)
      else if(atan2(y=srobot_pose.y - search_ball_walk_back.y, x=robot_pose.x - search_ball_walk_back.x) < -30)
        goto finish;
      else
        stay;
    }
    action {
      motion.type = walk;
      motion.walk.style = fast;
      // NOTE: too much rotation and the robot is just turning without walking back!
      motion.walk.coordinate = hip;
      motion.walk_speed.x = -100;
      motion.walk_speed.y = 100;
      motion.walk_speed.rot = -15;
  
      head.control_mode = none;
      head.point_in_world.x = 200;
      head.point_in_world.y = -200;
      head.point_in_world.z = 0;
      head.motion_type = look_at_world_point;
    }
  }

  /* walk back and rotate to the left (after rotating right) */
  state walk_back_turn_left {
    decision {
      //else if(vector.abs(x=robot_pose.x - search_ball_walk_back.x, y=robot_pose.y - search_ball_walk_back.y) > @distance)
      else if(atan2(y=robot_pose.y - search_ball_walk_back.y, x=robot_pose.x - search_ball_walk_back.x) > 30)
        goto finish;
      else
        stay;
    }
    action {
      motion.type = walk;
      motion.walk.style = fast;
      // NOTE: too much rotation and the robot is just turning without walking back!
      motion.walk.coordinate = hip;
      motion.walk_speed.x = -100;
      motion.walk_speed.y = -100;
      motion.walk_speed.rot = 15;
  
      head.control_mode = none;
      head.point_in_world.x = 200;
      head.point_in_world.y = 200;
      head.point_in_world.z = 0;
      head.motion_type = look_at_world_point;
    }
  }

  /* seach completed */
  target state finish {
    decision {
      else stay;
    }
    action {
      motion.type = stand;
      head.control_mode = search_for_ball;
    }
  }
}

