option roles_play_soccer
{
  common decision
  {
    if(!body.ready_to_walk)
      goto idle;
    else if(game.current_mode != playing &&
            game.current_mode != ready &&
            game.current_mode != set)
      goto idle;
  }
  

  initial state idle {
    decision {
      else if ( game.current_mode == playing ||
                game.current_mode == ready || 
                game.current_mode == set )
        goto calibrate_inertial;
      else
        stay;
    } 
    action{}
  }

  state calibrate_inertial
  {
    decision
    {
      else if(sensor.inertial.calibrated)
        goto localize;
      else 
        stay;
    }
    action
    {
      show_calibration();
      motion.type = stand;
      head.control_mode = look_straight_ahead;
    }
  }

  // actualy check for localize
  state localize
  {
    decision
    {
      else if(robot_pose.is_valid || state_time>12000)
      {
        if(game.current_mode == playing)
          goto play;
        else if(game.current_mode == ready)
          goto ready;
        else if(game.current_mode == set)
          goto set;
        else 
          goto idle;
      }
      else
        stay;
    }
    action 
    {
      head.control_mode = look_around;
      motion.type = stand;
    }
  }

  state ready
  {
    decision
    {
      else if (game.current_mode == playing)
        goto play;
      else if (game.current_mode == set)
        goto set;
      else 
        stay;
    }
    action 
    {
      roles_go_to_ready_position();
    }
  }

  state set
  {
    decision
    {
      else if (game.current_mode == playing)
      {
          // NOTE: the initial striker problem is resolved with the second/multiple striker
          //       problem: if there is only a single striker, misperception leads to a wrong striker decision!
          goto play;
      }
      else if (game.current_mode == ready)
        goto ready;
      else 
        stay;
    }
    action 
    {
      head.control_mode = search_for_ball;
    }
  }

  state play
  {
    decision
    {
      // TODO! with roles, the freekick may change too!?
      else if (game.current_mode != playing)
        goto idle;
      else if (game.set_play != none && strategy.role != goalie)
        // goalie should'n turn and search for ball - keep playing!
        goto free_kick_simple;
      /* else if (game.set_play == goal_free_kick && game.own_kickoff)
        // if free kick time is (nearly) up, we proceed with our normal game, otherwise position for free kick
        if(game.msecsRemainingSecondary > 5000)
          goto free_kick_own_goal;
        else stay;
      else if (game.set_play == goal_free_kick && !game.own_kickoff)
        // the free kick time is 1 second, we can start planing our next motion - refs won't call a penalty if there's only 1s left
        if(game.msecsRemainingSecondary > 1000)
          goto free_kick_opp_goal;
        else stay;
      else if (game.set_play == pushing_free_kick && game.own_kickoff)
        // if free kick time is (nearly) up, we proceed with our normal game, otherwise position for free kick
        if(game.msecsRemainingSecondary > 5000)
          goto free_kick_own;
        else stay;
      else if (game.set_play == pushing_free_kick && !game.own_kickoff)
        // the free kick time is 1 second, we can start planing our next motion - refs won't call a penalty if there's only 1s left
        if(game.msecsRemainingSecondary > 1000)
          goto free_kick_opp;
        else stay;
      else if (game.set_play == corner_kick && game.own_kickoff)
        // if free kick time is (nearly) up, we proceed with our normal game, otherwise position for corner kick
        if(game.msecsRemainingSecondary > 5000)
          goto free_kick_own_corner;
        else stay;
      else if (game.set_play == corner_kick && !game.own_kickoff)
        // the free kick time is 1 second, we can start planing our next motion - refs won't call a penalty if there's only 1s left
        if(game.msecsRemainingSecondary > 1000)
          goto free_kick_opp_corner;
        else stay;
      else if (game.set_play == kick_in && game.own_kickoff)
        // if free kick time is (nearly) up, we proceed with our normal game, otherwise position for corner kick
        if(game.msecsRemainingSecondary > 5000)
          goto free_kick_own_in;
        else stay;
      else if (game.set_play == kick_in && !game.own_kickoff)
        // the free kick time is 1 second, we can start planing our next motion - refs won't call a penalty if there's only 1s left
        if(game.msecsRemainingSecondary > 1000)
          goto free_kick_opp_in;
        else stay;*/
      else 
        stay;
    }
    action 
    {
      last_state_was_penalized = false; // important!!!
      roles_decide_role();
    }
  }
  
  state free_kick_simple
  {
    decision {
      else if (game.set_play == none)
        goto play;
      else
        stay;
    }
    action {
      role_free_kick_simple(own=game.own_kickoff);
    }
  }
  
  state free_kick_own_goal
  {
    decision
    {
      else if (game.set_play != goal_free_kick || game.msecsRemainingSecondary <= 5000)
        goto play;
      else
        stay;
    }
    action {
      role_free_kick_own_goal();
    }
  }
  
  state free_kick_opp_goal
  {
    decision
    {
      else if (game.set_play != goal_free_kick)
        goto play;
      else
        stay;
    }
    action {
      role_free_kick_opp_goal();
    }
  }
  
  state free_kick_own
  {
    decision
    {
      else if (game.set_play != pushing_free_kick || game.msecsRemainingSecondary <= 5000)
        goto play;
      else
        stay;
    }
    action {
      role_free_kick_own();
    }
  }
  
  state free_kick_opp
  {
    decision
    {
      else if (game.set_play != pushing_free_kick)
        goto play;
      else
        stay;
    }
    action {
      role_free_kick_opp();
    }
  }
}