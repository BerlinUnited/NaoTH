/** Scan mode for looking at the ball/searching for the ball */
option search_for_ball
{
  bool @force_ball_model_check; // false by default
  bool @look_around;
  float @look_at_ball_when_distance;
  bool @use_teamball;
  
  initial state start_search 
  {
    decision 
    {
	    if((ball.see_where_itis || @force_ball_model_check) && abs(value=ball.angle) < 60)
	      goto try_to_look_at_the_old_ball;
      else if(@use_teamball && ball.team.is_valid)
        goto look_at_teamball;
      else if(ball.angle > 0)
        goto search_for_ball_left;
      else
        goto search_for_ball_right;
	  }
	  action 
	  {
	  }
  }

  state try_to_look_at_the_old_ball
  {
    decision
    {
      if (ball.percept.was_seen)
        goto look_at_ball_percept;
      else if (state_time > 2000) {
	      if(@use_teamball && ball.team.is_valid)
	        goto look_at_teamball;
	      else if(ball.angle > 0)
	        goto search_for_ball_left;
	      else
	        goto search_for_ball_right;
      } else
        stay;
    }
    action
    {
      head.motion_type = look_at_world_point;
      head.point_in_world.x = ball.x * clip(value=ball.distance, min=250, max=500) / ball.distance;
      head.point_in_world.y = ball.y * clip(value=ball.distance, min=250, max=500) / ball.distance;
      head.point_in_world.z = ball.radius;

      head.angleVelocity = 300; // will be reseted in spl_play_soccer
    }
  }

  
  state search_for_ball_right
  {
    decision
    {
      if (ball.percept.was_seen)
        goto look_at_ball_percept;
      else if(head.yaw < -40 || state_time > 3000)
        goto search_for_ball_left_high;
      else
       stay;
    }
    action
    {
        head.point_in_world.x = 160;
        head.point_in_world.y = -200;
        head.point_in_world.z = 0;
        head.motion_type = look_at_world_point;

        head.angleVelocity = 60; // will be reseted in spl_play_soccer
    }
  }

  state search_for_ball_left
  {
    decision
    {
      if (ball.percept.was_seen)
        goto look_at_ball_percept;
      else if(head.yaw > 40 || state_time > 3000)
        goto search_for_ball_right;
      else
       stay;
    }
    action
    {
      head.point_in_world.x = 160;
      head.point_in_world.y = 200;
      head.point_in_world.z = 0;
      head.motion_type = look_at_world_point;

      head.angleVelocity = 60; // will be reseted in spl_play_soccer
    }
  }

  state search_for_ball_right_high
  {
    decision
    {
      if (ball.percept.was_seen)
        goto look_at_ball_percept;
      else if(head.yaw < -40 || state_time > 3000) {
        if(@use_teamball && ball.team.is_valid)
          goto look_at_teamball;
        else
          goto search_for_ball_left;
      } else
       stay;
    }
    action
    {
        head.point_in_world.x = 400;
        head.point_in_world.y = -500;
        head.point_in_world.z = 0;
        head.motion_type = look_at_world_point;

        head.angleVelocity = 60; // will be reseted in spl_play_soccer
    }
  }

  state search_for_ball_left_high
  {
    decision
    {
      if (ball.percept.was_seen)
        goto look_at_ball_percept;
      else if(head.yaw > 40 || state_time > 3000)
        goto search_for_ball_right_high;
      else
       stay;
    }
    action
    {
      head.point_in_world.x = 400;
      head.point_in_world.y = 500;
      head.point_in_world.z = 0;
      head.motion_type = look_at_world_point;

      head.angleVelocity = 60; // will be reseted in spl_play_soccer
    }
  }
    
  state look_at_ball_percept
  {
    decision
    {
      if (state_time > 1000) // I waited long enough...
      {
        if(ball.see_where_itis) // I still can see the ball => look at the model
          goto look_at_ball;
        else
          /* aehm, why right ???? */
          goto search_for_ball_right; // I cannt see the ball anymore, must have been a mirage => go back, where I came from
      }
      else
        stay;
    }
    action
    {
      head.motion_type = look_at_world_point;
      head.point_in_world.x = ball.percept.x * clip(value=vector.abs(x=ball.percept.x, y=ball.percept.y), min=250, max=500) / vector.abs(x=ball.percept.x, y=ball.percept.y);
      head.point_in_world.y = ball.percept.y * clip(value=vector.abs(x=ball.percept.x, y=ball.percept.y), min=250, max=500) / vector.abs(x=ball.percept.x, y=ball.percept.y);
      head.point_in_world.z = ball.radius;

      // look at ball percept fast!
      head.angleVelocity = 300;
    }
  }

  state look_at_ball
  {
    decision
    {
      if (!ball.see_where_itis) {
	      if(@use_teamball && ball.team.is_valid)
	        goto look_at_teamball;
	      else if(ball.angle > 0)
	        goto search_for_ball_left;
	      else
	        goto search_for_ball_right;
      } else if(state_time > 3000 && vector.abs(x=ball.preview.x, y=ball.preview.y) > @look_at_ball_when_distance)
        goto look_around_state;
      else
        stay;
    }
    action
    {
      head.motion_type = look_at_world_point;
      head.point_in_world.x = ball.x * clip(value=ball.distance, min=250, max=500) / ball.distance;
      head.point_in_world.y = ball.y * clip(value=ball.distance, min=250, max=500) / ball.distance;
      head.point_in_world.z = ball.radius;

      // look at ball fast!
      head.angleVelocity = 300;
    }
  }

  state look_around_state {
    decision{
      if ( state_time > 3000 )
        goto start_search;
      else 
        stay; 
    }
    action{
      head.camera.id = Top;
      look_around();
      head.angleVelocity = 60; // will be reseted in spl_play_soccer
    }
  }

  state look_at_teamball {
    decision{
      if (ball.percept.was_seen)
        goto look_at_ball_percept;
      /* NOTE: the teamball could get invalid in the 3s - evtl. we should also check for validity??? */
      else if ( state_time > 3000 )
        goto search_for_ball_left;
      else 
        stay; 
    }
    action{
      head.motion_type = look_at_world_point;
      head.point_in_world.x = ball.team.position.x * 250 / vector.abs(x=ball.team.position.x, y=ball.team.position.y);
      head.point_in_world.y = ball.team.position.y * 250 / vector.abs(x=ball.team.position.x, y=ball.team.position.y);
      head.point_in_world.z = ball.radius; // radius of the ball
    }
  }
}
