option decide_game_state 
{  
  common decision {
    if (game.state == _initial_)
      goto _initial;
    else if (game.state == ready)
      goto ready;
    else if (game.state == set)
      goto set;
    else if (game.state == penalized)
      goto penalized;
    else if (game.state == finished)
      goto _initial;
    else if(game.state == playing)
      goto playing;
    else if(game.state == unstiff)
      goto unstiff;
  }
    
  initial state _initial {
    action
    {
      game.current_mode = init;
      motion.type = init;
      arm.control_mode = normal;
      head.control_mode = stay_as_forced;
      audio.capture = false;  //whistledetector off
      last_state_was_penalized = false;
    }
  }
  
  state ready {
    action
    {
      game.current_mode = ready;
      motion.type = stand;
      //arm.control_mode = back;
      arm.react_to_collision = true;
      arm.control_mode = synchronised_with_walk;
      head.control_mode = stay_as_forced;
      audio.capture = false;  //whistledetector off
      treat_lifted();
      fall_down_and_stand_up();
      last_state_was_penalized = false;
    }
  }
  
  state set {
    action
    {
      game.current_mode = set;
      motion.type = stand;
      //arm.control_mode = back;
      //For testing:
      //arm.react_to_collision = true;
      arm.control_mode = synchronised_with_walk;
      head.control_mode = stay_as_forced;
      audio.capture = true; //whistledetector on
      treat_lifted();
      fall_down_and_stand_up();
      last_state_was_penalized = false;
    }
  }
  
  
  state playing {
    action 
    {
      game.current_mode = playing;
      motion.type = stand;
      //arm.control_mode = back;
      arm.react_to_collision = true;
      arm.control_mode = synchronised_with_walk;
      head.control_mode = stay_as_forced;
      audio.capture = false;  //whistledetector off
      treat_lifted();
      fall_down_and_stand_up();
      //achtung: don't set false
      //last_state_was_penalized = false;
      game.time_in_play = state_time;
    }
  }
  
  state penalized {
    action
    {
      game.current_mode = penalized;
      motion.type = stand;
      arm.control_mode = normal;
      head.control_mode = (state_time < 2000) ? look_straight_ahead : stay_as_forced;
      audio.capture = false;  //whistledetector off
      last_state_was_penalized = true;
    }
  }

  state unstiff {
    action
    {
      game.current_mode = init;
      motion.type = init;
      arm.control_mode = normal;
      head.control_mode = stay_as_forced;
      audio.capture = false;  //whistledetector off
      last_state_was_penalized = false;

      //TODO set chest led
    }
  }
  
  state finished {
    action
    {
      game.current_mode = finished;
      motion.type = stand;
      arm.control_mode = normal;
      head.control_mode = stay_as_forced;
      audio.capture = false;  //whistledetector off
      last_state_was_penalized = false;
    }
  }

}
