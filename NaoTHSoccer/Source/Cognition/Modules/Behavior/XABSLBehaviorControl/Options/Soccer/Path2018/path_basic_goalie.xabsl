option path_basic_goalie
{
  common decision
  {
    if(!body.ready_to_walk || game.current_mode != playing)
      goto idle;
  }

  initial state idle {
    decision {
      /* why not "body.ready_to_walk"??! */
      else if(game.current_mode == playing)
        goto go_to_strategy_point;
      else
        stay;
    }
    action {
      
    }
  }

  state go_to_strategy_point
  {
     decision 
     {
       else if (ball.know_where_itis && ball.distance < 1500 && ball.position.field.x <= field.xPosOwnPenaltyMark)
         goto clear_ball;
       else if (action_done)
         goto stand_and_look_at_ball;
       else 
         stay;
     }
     action {
       //go_to_point(x=field.xPosOwnGroundline + 200, y=0,rot=0);
       go_to_point_with_USOA(x=field.xPosOwnGroundline + 200, y=0,rot=0);
       head.control_mode = look_around;
     }
  }

  state stand_and_look_at_ball {
	  decision {
      else if (ball.know_where_itis && ball.distance < 1500 && ball.position.field.x <= field.xPosOwnPenaltyMark)
        goto clear_ball;
      else if (ball.know_where_itis && ball.distance < 4000 
        //&& (normalize(angle=atan2(y = ball.preview.y, x = ball.preview.x)) > 10)
        )
         goto watch_ball;
      else 
        stay;
	  }
	  action {
      motion.type = stand;
      head.control_mode = search_for_ball_goalie;
	  }
	}  

  state watch_ball {
    decision {
      else if (ball.know_where_itis && ball.distance < 1500 && ball.position.field.x <= field.xPosOwnPenaltyMark)
        goto clear_ball;
      else if (!ball.know_where_itis || ball.distance >= 4000)
        goto go_to_strategy_point;
      else 
        stay;
    }
    action {
      //goalie_watch_ball();
      /*
      go_to_point_with_USOA(
        x=goalie.defensive.x > field.xPosOwnGroundline + 100 ? field.xPosOwnGroundline + 100 : goalie.defensive.x,
        y=abs(value=goalie.defensive.x) > abs(value=field.yPosLeftGoal)-100 ? sgn(value=goalie.defensive.y)*(abs(value=field.yPosLeftGoal)-100) : goalie.defensive.y,
        rot=normalize(angle=atan2(y = ball.preview.y, x = ball.preview.x))
      );
      */
      go_to_point(
        x=goalie.defensive.x < field.xPosOwnGroundline + 100 ? field.xPosOwnGroundline + 100 : goalie.defensive.x,
        y=abs(value=goalie.defensive.y) > abs(value=field.yPosLeftGoal)-100 ? sgn(value=goalie.defensive.y)*(abs(value=field.yPosLeftGoal)-100) : goalie.defensive.y,
        rot=normalize(angle=atan2(y = ball.preview.y, x = ball.preview.x))
      );
      head.control_mode = search_for_ball_goalie;
    }
  }

  state clear_ball {
  //Note the goalie will not search - if path striker2018 would go to search the state
  //will change to go_to_strategy_point
   decision {
       else if (action_done 
           || (ball.distance > 1500 && ball.see_where_itis)
           || (!ball.know_where_itis)
           || ball.position.field.x > field.xPosOwnPenaltyArea + 1000)
       {
         goto go_to_strategy_point;
       }
       else stay;
     }
     action {
       team.is_playing_as_striker = true;
       path_striker2018();
     }
  }
}