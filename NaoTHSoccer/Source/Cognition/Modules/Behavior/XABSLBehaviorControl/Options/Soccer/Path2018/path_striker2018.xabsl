option path_striker2018
{

  common decision
  {
    if(!body.ready_to_walk || game.current_mode != playing)
      goto idle;
    /*
    // NOTE: this is only important for the old behavior (2018)
    else if(!game.state.playing_is_set_by_game_controller &&
           !game.own_kickoff && game.time_in_play < 10000)
      // TODO: for the roles, the initial striker isn't neccessary anymore and can be removed! (the behavior must be applied for all roles!)
      // if we see the ball outside the centercircle, the ball is free!
      if((ball.know_where_itis && (abs(value=ball.position.field.x) <= (300) && abs(value=ball.position.field.y) <= (300))) || !ball.know_where_itis)
        goto wait_for_ball_free;
      else
        goto goto_ball;
    */
    else if(situation_abortable && !ball.know_where_itis)
      goto search;
    else if(situation_abortable && vector.abs(x=ball.future.preview.x, y=ball.future.preview.y) > 500)
      goto goto_ball;
  }

  state wait_for_ball_free {
    decision {
      else
        goto search;
    }
    action {
      motion.type = stand;
      head.control_mode = search_for_ball;
    }
  }

  initial state idle 
  {
    decision 
    {
      else
        goto search;
    }
    action 
    {
      situation_abortable = true;
      team.is_playing_as_striker = false;
      
      path2018.routine = none;
    }
  }

  state search 
  {
    decision 
    {
      else if(action_done)
        goto goto_ball;
      else
        stay;
    }
    action
    {
      situation_abortable = true;
      search_ball();
    }
  }

  state goto_ball {
    decision{

      else if(vector.abs(x=ball.future.preview.x, y=ball.future.preview.y) < 300)
      {
        if(attack.best_action == kick_short) {
          goto forwardkick;
        }
        else if(attack.best_action == sidekick_left)
          //goto sidekick_left;
          goto turn;
        else if(attack.best_action == sidekick_right)
          //goto sidekick_right;
          goto turn;
        else
          goto turn;
      }
      else
        stay;
    }
    action{
      situation_abortable = true;
      /* this distance is smaller than the condition for ball.preview.x above
         possible unwanted behavior: the ball is closer than 300 but ball.preview.y is
         bigger than 50. The robot won't rotate in go_to_ball_with_USOA and will continue
         to walk to the position of the ball. Two possible outcomes:
         1. the robot runs into the ball (if ball distance is not considered)
         2. the robot will walk backwards in the successive approaching because it was too close*/
      go_to_ball_with_USOA(distance = 210); 
    }
  }

  state turn
  {
    decision
    {
    // long kick is ignored/not included in action selection
    //else if(attack.best_action == kick_long)
    //    goto long_kick;
    else if(attack.best_action == kick_short)
    {
      if(random() > 0.0)
      {
        goto forwardkick;
      }
      else
        goto dash;
    }
    else if(attack.best_action == sidekick_left)
      //goto sidekick_left;
      stay;
    else if(attack.best_action == sidekick_right)
      //goto sidekick_right;
      stay;
    else
      stay;
    }
    action
    {
      situation_abortable = true;
      
      // TODO: path_turn_to_attack_direction() should be moved to a new option
      // PathPlanner2018 stuff was hacked in there
      path_turn_to_attack_direction();
    }
  }

  state forwardkick
  {
    decision
    {
      else if (path.kick_executed)
        goto short_freeze;
      else
        stay;
    }
    action
    {
      path2018.routine = forwardkick;
      situation_abortable = true;
      head.control_mode = search_for_ball;
    }
  }

  state sidekick_right
  {
    decision
    {
      else if (path.kick_executed)
        goto short_freeze;
      else
        stay;
    }
    action
    {
      path2018.routine = sidekick_right;
      situation_abortable = true;
      head.control_mode = search_for_ball;
    }
  }
  
  state sidekick_left
  {
    decision
    {
      else if (path.kick_executed)
        goto short_freeze;
      else
        stay;
    }
    action
    {
      path2018.routine = sidekick_left;
      situation_abortable = true;
      head.control_mode = search_for_ball;
    }
  }
  
  state short_freeze
  {
    decision
    {
      else if (state_time > 500)
        goto goto_ball;
      else
        stay;
    }
    action
    {
      path2018.routine = none;
      
      situation_abortable = false;
      
      //look at percept
      head.control_mode = look_at_ball_percept;
    }
  }

  state dash 
  {
    decision
    {
      else if(action_done)
        goto goto_ball;
      else
        stay;
    }
    action
    {
      situation_abortable = true;
      path_dash();
      path2018.routine = none; // Why is this here?
    }
  }
}
