/** If the ball goes out of the baseline by us, the ball is placed back on a corner of the opponent's penalty box. */
option free_kick_opp_goal
{
  initial state decide {
    decision
    {
      if(robot_pose.x - field.xPosOppPenaltyMark > 0) {
        // the robot is behind the opponent penalty mark, walk back but avoid location of the throw-in point
        goto move_to_side;
      } else if(robot_pose.x + field.centerCircleRadius - field.xPosOppPenaltyMark > 0) {
        // the robot is in front of the penalty mark, but still inside the free kick radius, walk back
        if(ball.know_where_itis) {
          goto position_for_free_kick_ball_known;
        } else {
          goto position_for_free_kick;
        }
      } else if(ball.know_where_itis && ball.distance < field.centerCircleRadius) {
        // the robot is not near the penalty mark, but he sees the ball near him, the robot has to move away from the ball
        // NOTE: this can only happen, if the robot is delocalized, but sees the (correct) ball
        goto move_away_from_ball;
      } else if(ball.team.is_valid && vector.abs(x=(robot_pose.x - ball.team.position.x), y=(robot_pose.y-ball.team.position.y)) < field.centerCircleRadius) {
        // the robot is not near the penalty mark, but the teamball near him, the robot has to move away from the teamball
        // NOTE: this can only happen, if the robot is delocalized or the team has an invalid teamball
        goto move_away_from_teamball;
      } else if(robot_pose.x > 0) {
        // position itself on a direct line between ball and own goal
        // NOTE: there should be some differences between the robots, otherwise they block each other!!!
        goto defend_free_kick;
      } else if(ball.know_where_itis) {
        // we're in our half, just turn to the ball
        goto turn_to_ball;
      }  else {
        // we can't see the ball, but it should be near the opponent goal - turn to it
        goto turn_to_opponent_goal;
      }
    }
    action {
    }
  }

  // move back, but avoid throw-in points of the free kick
  state move_to_side {
    decision {
      if(robot_pose.x - field.xPosOppPenaltyMark < 0) {
        goto decide;
      } else {
        stay;
      }
    }
    action {
      // TODO: could be more sophisticated! eg. use relative coordinates than just 10cm from the sideline or the robot could "cut corners" is he knows where the ball is!
      go_to_point_with_USOA(x=field.xPosOppPenaltyMark-100, 
                            y=(robot_pose.y>0?field.yPosLeftSideline:field.yPosRightSideline)+(robot_pose.y>0?-1:1)*100, 
                            rot=0);
    }
  }

  // position in front of one of the throw-in point (which is closer), if i don't know where the ball is
  state position_for_free_kick {
    decision {
      if(ball.know_where_itis) {
        // the position in front of the ball is better, than "random"
        goto position_for_free_kick_ball_known;
      } else if((robot_pose.x + field.centerCircleRadius - field.xPosOppPenaltyMark) <= 0
                && abs(value=(robot_pose.y>0?field.yPosLeftPenaltyArea:field.yPosRightPenaltyArea) - robot_pose.y) <= 100) {
        // done positioning
        goto idle;
      } else {
        stay;
      }
    }
    action {
      // TODO: if there are multiple robots, all wants to go to the same position?!
      go_to_point_with_USOA(x=field.xPosOppPenaltyMark - field.centerCircleRadius - 50,
                            y=robot_pose.y>0?field.yPosLeftPenaltyArea:field.yPosRightPenaltyArea,
                            rot=0);
    }
  }

  // position in front of the ball
  state position_for_free_kick_ball_known {
    decision {
      if(!ball.know_where_itis) {
        // if lost the ball, position in front of one of the possible throw-in points
        goto position_for_free_kick;
      } else if(robot_pose.x-(ball.position.field.x-field.centerCircleRadius) < 0 
              && abs(value=robot_pose.y-ball.position.field.y) < 50) {
        // done positioning
        goto idle;
      } else {
        stay;
      }
    }
    action {
      // TODO: if there are multiple robots, all wants to go to the same position?!
      go_to_point_with_USOA(x=ball.position.field.x-field.centerCircleRadius-50, 
                            y=ball.position.field.y, 
                            rot=0);
    }
  }

  // the robot is not near the penalty mark, but he sees the ball near him, the robot has to move away from the ball
  state move_away_from_ball {
    decision {
      if(!ball.know_where_itis) {
        goto decide;
      } else if(robot_pose.x-(ball.position.field.x-field.centerCircleRadius) < 0 
              && abs(value=robot_pose.y-ball.position.field.y) < 50) {
        // done positioning
        goto idle;
      } else {
        stay;
      }
    }
    action {
      go_to_point_with_USOA(x=ball.position.field.x-field.centerCircleRadius-50, 
                            y=ball.position.field.y, 
                            rot=0);
    }
  }

  // the robot is not near the penalty mark, but the teamball near him, the robot has to move away from the teamball
  state move_away_from_teamball {
    decision {
      if(!ball.team.is_valid) {
        goto decide;
      } else if(robot_pose.x-(ball.team.position.x-field.centerCircleRadius) < 0 
              && abs(value=robot_pose.y-ball.team.position.y) < 50) {
        // done positioning
        goto idle;
      } else {
        stay;
      }
    }
    action {
      go_to_point_with_USOA(x=ball.team.position.x-field.centerCircleRadius-50, 
                            y=ball.team.position.y, 
                            rot=0);
    }
  }

  // we're in the opponents half, try to position itself on a direct line between ball and own goal
  state defend_free_kick {
    decision {
      if(abs(value=robot_pose.y-((robot_pose.y>0?-1:1)*field.centerCircleRadius * 0.75)) < 50) {
        goto idle;
      } else {
        stay;
      }
    }
    action {
      // TODO: what happens if two (or more) robots are on the same "height" (x-coordinate)?!
      go_to_point_with_USOA(x=robot_pose.x, 
                            y=(robot_pose.y>0?-1:1)*field.centerCircleRadius * 0.75, 
                            rot=0);
    }
  }

  // we're in our half and we see the ball - turn to it
  state turn_to_ball {
    decision {
      if(!ball.know_where_itis) {
        goto turn_to_opponent_goal;
      } else if(abs(value = atan2(y=ball.preview.y, x=ball.preview.x)) < 50) {
        goto idle;
      } else {
        stay;
      }
    }
    action {
      motion.type=walk;
      motion.walk_speed.x=0;
      motion.walk_speed.y=0;
      motion.walk_speed.rot=atan2(y=ball.preview.y, x=ball.preview.x);
      head.control_mode = look_at_ball;
    }
  }

  // we're in our half and we can't see the ball, but it should be near the opponent goal - turn to it
  state turn_to_opponent_goal {
    decision {
      if(ball.know_where_itis) {
        goto turn_to_ball;
      } else if(abs(value = atan2(y=locator.field_to_relative.y(x=field.xPosOpponentGroundline, y=0), 
                                  x=locator.field_to_relative.x(x=field.xPosOpponentGroundline, y=0))) < 50) {
        goto idle;
      } else {
        stay;
      }
    }
    action {
      motion.type=walk;
      motion.walk_speed.x=0;
      motion.walk_speed.y=0;
      motion.walk_speed.rot=atan2(y=locator.field_to_relative.y(x=field.xPosOpponentGroundline, y=0), 
                                  x=locator.field_to_relative.x(x=field.xPosOpponentGroundline, y=0));
      head.control_mode = search_for_ball;
    }
  }

  // we positioned our self and waiting for the free kick to complete
  target state idle {
    decision {
      if(ball.know_where_itis && abs(value = atan2(y=ball.preview.y, x=ball.preview.x)) >= 50) {
        goto turn_to_ball;
      } else {
        stay;
      }
    }
    action {
      motion.type = stand;
      head.control_mode = search_for_ball;
    }
  }
}
