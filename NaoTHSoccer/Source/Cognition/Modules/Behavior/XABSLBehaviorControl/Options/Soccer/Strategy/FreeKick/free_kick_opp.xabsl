/** If a foul was called against us, the oppenent gets a free kick.
 *  NOTE: The goalie can stay in the goal box but isn't allowed to touch the ball!
 */
option free_kick_opp
{
  initial state decide {
    decision {
      if(game.player_number == 1) {
        goto goalie_position_free_kick;
      } else if(ball.know_where_itis && vector.abs(x=ball.preview.x, y=ball.preview.y) <= field.centerCircleRadius) {
        goto player_move_away_from_ball;
      } else if(ball.team.is_valid && vector.abs(x=(robot_pose.x - ball.team.position.x), y=(robot_pose.y-ball.team.position.y)) < field.centerCircleRadius) {
        goto player_move_away_from_teamball;
      } else if((freekick.pos.x != 0 || freekick.pos.y != 0) && vector.abs(x=(robot_pose.x - freekick.pos.x), y=(robot_pose.y-freekick.pos.y)) < field.centerCircleRadius+100) {
        goto player_move_away_from_foul_position;
      } else if(ball.know_where_itis) {
        // TODO: can we somehow position us between ball and own goal?!
        goto player_turn_to_ball;
      } else {
        goto player_search_ball;
      }
    }
    action
    {
    }
  }

  /* ------------------------------------------ */
  /* The Goalie part                            */
  /* ------------------------------------------ */

  // the goalie is allowed to be in the radius of the free kick area, but shouldn't touch the ball
  // try to position on an appropiate defensive point
  state goalie_position_free_kick {
    decision {
      if(ball.know_where_itis) {
        goto goalie_position_free_kick_known;
      } else if(ball.team.is_valid) {
        goto goalie_position_free_kick_teamball;
      } else if(vector.abs(x=robot_pose.x-(field.xPosOwnGroundline + 200), y=robot_pose.y) > 100) {
        goto goalie_position_free_kick_default;
      } else {
        stay;
      }
    }
    action {
      motion.type = stand;
      head.control_mode = search_for_ball_goalie;
    }
  }

  // goalie knows where the ball is and tries to position himself between ball and goal
  state goalie_position_free_kick_known
  {
    decision {
      if(!ball.know_where_itis) {
        goto goalie_position_free_kick;
      } else {
        stay;
      }
    }
    action {
      // position on a line between goal (middle of it) and ball
      go_to_point_with_USOA(x=field.xPosOwnGroundline + 200,
                            y=clip(value=((0-ball.preview.y)/(field.xPosOwnGroundline-ball.preview.x))*200, min=field.yPosRightGoal, max=field.yPosLeftGoal),
                            rot=normalize(angle=atan2(y = ball.preview.y, x = ball.preview.x)));
    }
  }

  // goalie doesn't know where the ball is, but team knows it and goalie tries to position himself between teamball and goal
  state goalie_position_free_kick_teamball
  {
    decision {
      if(ball.know_where_itis) {
        goto goalie_position_free_kick_known;
      } else if(!ball.team.is_valid) {
        goto goalie_position_free_kick;
      } else {
        stay;
      }
    }
    action {
      // position on a line between goal (middle of it) and teamball
      go_to_point_with_USOA(x=field.xPosOwnGroundline + 200,
                            y=clip(value=((0-ball.team.position.y)/(field.xPosOwnGroundline-ball.team.position.x))*200, min=field.yPosRightGoal, max=field.yPosLeftGoal),
                            rot=normalize(angle=atan2(y = ball.team.position.y, x = ball.team.position.x)));
    }
  }

  // goalie has no infos about a ball, take the default defensive position (middle of the goal)
  state goalie_position_free_kick_default {
    decision {
      if(ball.know_where_itis) {
        goto goalie_position_free_kick_known;
      } else if(ball.team.is_valid) {
        goto goalie_position_free_kick_teamball;
      } else if(vector.abs(x=robot_pose.x-(field.xPosOwnGroundline + 200), y=robot_pose.y) <= 100) {
        goto goalie_position_free_kick;
      } else {
        stay;
      }
    }
    action {
      head.control_mode = search_for_ball;
      go_to_point_with_USOA(x=field.xPosOwnGroundline + 200, y=0,rot=0);
      // TODO: can we at least turn to the position where the foul occured?!
    }
  }

  /* ------------------------------------------ */
  /* The Player part                            */
  /* ------------------------------------------ */

  // robot knows where the ball is and moves away from it
  state player_move_away_from_ball {
    decision {
      if(!ball.know_where_itis || vector.abs(x=ball.preview.x, y=ball.preview.y) > field.centerCircleRadius) {
        goto decide;
      } else {
        stay;
      }
    }
    action {
      // "go to ball" + distance <=> move away from ball
      // TODO: what happens, if the robot is near a side/groundline?!
      // TODO: how do we rotate?!?
      // TODO: we should position us between ball and own goal!
      go_to_ball_with_USOA(distance=field.centerCircleRadius+50);
    }
  }

  // the robot doesn't know where the ball is, but the team does - move away from the teamball position
  state player_move_away_from_teamball {
    decision {
      if(!ball.team.is_valid || (robot_pose.x-(ball.team.position.x-field.centerCircleRadius) < 0 
                                  && abs(value=robot_pose.y-ball.team.position.y) < 50)) {
        goto decide;
      } else {
        stay;
      }
    }
    action {
      // TODO: what happens, if the robot is near a side/groundline?!
      // TODO: we should position us between ball and own goal!
      go_to_point_with_USOA(x=ball.team.position.x-field.centerCircleRadius-50, 
                            y=ball.team.position.y, 
                            rot=0);
    }
  }

  // the robot tries to move away from the position where the foul occurred
  state player_move_away_from_foul_position
  {
    decision {
      if(vector.abs(x=(robot_pose.x - freekick.pos.x), y=(robot_pose.y-freekick.pos.y)) >= field.centerCircleRadius+100) {
        goto decide;
      } else {
        stay;
      }
    }
    action {
      // TODO: what happens, if the robot is near a side/groundline?!
      // TODO: we should position us between ball and own goal!
      go_to_point_with_USOA(x=freekick.pos.x-field.centerCircleRadius-120, 
                            y=freekick.pos.y, 
                            rot=0);
    }
  }

  // we're apparently not near the ball and know where the ball is - turn to it
  state player_turn_to_ball {
    decision {
      if(!ball.know_where_itis) {
        goto decide;
      } else if(abs(value = atan2(y=ball.preview.y, x=ball.preview.x)) < 50) {
        goto done;
      } else {
        stay;
      }
    }
    action {
      motion.type=walk;
      motion.walk_speed.x=0;
      motion.walk_speed.y=0;
      motion.walk_speed.rot=atan2(y=ball.preview.y, x=ball.preview.x);
      head.control_mode = search_for_ball;
    }
  }

  // we're apparently not near the ball, but doesn't know where the ball is, try to find it!
  state player_search_ball {
    decision {
      if(ball.know_where_itis) {
        goto decide; // found the ball, decide what todo
      } else {
        stay;
      }
    }
    action {
      // TODO: we can take a look at the position where the foul occured!
      passive_ball_not_seen();
    }
  }

  /* ------------------------------------------ */
  /* DONE                                       */
  /* ------------------------------------------ */

  // wait until opponent completed free kick
  state done {
    decision {
      if(!ball.know_where_itis) {
        goto decide;
      } else {
        stay;
      }
    }
    action {
      motion.type = stand;
      head.control_mode = look_at_ball;
    }
  }
}
