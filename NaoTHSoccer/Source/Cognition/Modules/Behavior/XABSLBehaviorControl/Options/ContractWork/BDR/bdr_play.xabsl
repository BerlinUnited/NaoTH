option bdr_play
{
  common decision
  {
    if(!body.ready_to_walk || game.current_mode != playing)
        goto idle;
  }
  
  initial state idle{
    decision{
      else
        goto localize;
    } 
    action{
        bdr.activity = initializing;
    }
  }

  state localize
  {
    decision
    {
      else if(robot_pose.is_valid && executed_motion.time > 5000)
        goto transition;
      else
        stay;
    }
    action
    {
        motion.type = stand;
        head.control_mode = look_around;
        situationStatusOwnHalf = last_state_was_penalized;
        bdr.activity = initializing;
    }
  }

  state do_nothing
  {
    decision
    {
      else if(remote_control.bdr_control != DO_NOTHING)
        goto transition;
      else
        stay;
    }
    action
    {
      motion.type = stand;    
      motion.walk.stop_with_stand=true;        
      head.control_mode = search_for_ball_and_look_around;
      bdr.activity = doing_nothing;
    }
  }

  state autonomous_play
  {
    decision
    {
      else if(remote_control.bdr_control != AUTONOMOUS_PLAY)
        goto transition;
      else if (body.temperature.leg.left > 70
               || body.temperature.leg.right > 70)
          goto set_wartungs_reason_temperature;
      else if (platform.battery < bdr.charge_beginning - 0.02)
          goto set_wartungs_reason_battery;
      else
        stay;
    }
    action
    {
        bdr_play_soccer();
        bdr.reason = none;
        bdr.activity = playing;
    }
  }

  state set_wartungs_reason_temperature{
      decision {
          else
              goto transition;
      }
      action {
          bdr.reason = temperature;
      }
  }

  state set_wartungs_reason_battery{
      decision {
          else
              goto transition;
      }
      action {
          bdr.reason = battery_charge;
      }
  }

  state wartung
  {
    decision
    {
      else if(bdr.reason == none 
              && remote_control.bdr_control != WARTUNG)
        goto localize_after_wartung;
      else if(bdr.reason == temperature
              && body.temperature.leg.left < 50
              && body.temperature.leg.right < 50)
        goto localize_after_wartung;
      else if(bdr.reason == battery_charge
              && platform.battery > (bdr.charge_beginning + 0.02))
        goto localize_after_wartung;
      else
        stay;
    }
    action
    {
        bdr_goto_charging_station();
        //bdr_goto_exit();
    }
  }

  state localize_after_wartung
  {
    decision
    {
      else if(executed_motion.type == stand && executed_motion.time > 5000)
        goto transition;
      else
        stay;
    }
    action
    {
        motion.type = stand;
        head.control_mode = search_for_ball_and_look_around;
        bdr.reason = none; // reset wartungs reason
    }
  }

  state transition
  {
      decision
      {
          else if(executed_motion.type == stand
                  || state_time > 1000)
          {
            if(bdr.reason != none)
                goto wartung;
            else if(remote_control.bdr_control == DO_NOTHING)
                goto do_nothing;
            else if(remote_control.bdr_control == AUTONOMOUS_PLAY)
                goto autonomous_play;
            else if(remote_control.bdr_control == WARTUNG)
                goto wartung;
            else
                stay;
          }
          else 
              stay;
      }

      action
      {
        motion.type = stand;
    
        motion.walk.stop_with_stand=false;
        
        head.control_mode = none;
        head.point_in_world.x = 200;
        head.point_in_world.y = 0;
        head.point_in_world.z = 0;
        head.motion_type = look_at_world_point;

        bdr.charge_beginning = platform.battery;
      }
  }
}