/** Symbols for accessing sensors*/
namespace sensor("Sensor Symbols") {
  
  /** Gyrometer X */
  float input sensor.gyro.x;
  /** Gyrometer Y */
  float input sensor.gyro.y;

  /** Inertial X */
  float input sensor.inertial.x;
  /** Inertial Y */
  float input sensor.inertial.y;
  
  /** indicates whether the inertial sensors are calibrated */
  bool input sensor.inertial.calibrated;

  /** The ids of the states */
  enum fall_down_state {
    undefined, 
    upright, 
    lying_on_front, 
    lying_on_back,
    lying_on_left_side,
    lying_on_right_side
  };

  /** 
    Fall-Down-State of the robot.
    The value is calculated based on the <b>inertial</b> sensor; 
  */
  enum fall_down_state input fall_down_state;

  /** maximal temperature in the left leg */
  float input body.temperature.leg.left;
  /** maximal temperature in the right leg */
  float input body.temperature.leg.right;

  bool input body.foot.groundcontact.left;
  bool input body.foot.groundcontact.right;
  float input body.foot.groundcontact.statetime;

  /** indicates a collision with an arm */
  bool input body.collision.arm.left;
  bool input body.collision.arm.right;
  
  /** Ultrasound distance sensor */
  float input sensor.ultrasound;
  float input sensor.ultrasound.left;
  float input sensor.ultrasound.right;

  /** use the obstacle model */
  float input obstacle.ultrasound.distance;
  float input obstacle.ultrasound.left.distance;
  float input obstacle.ultrasound.right.distance;
  float input obstacle.ultrasound.blockedtime;

  /** The current battery charge  */
  float input platform.battery;
  bool input battery.isDischarging;

  /** The current frame number (Cognition) */
  float input platform.frameNumber;

  bool input button.bumper.pressed.left;
  bool input button.head.pressed.front;
  bool input button.head.pressed.middle;
  bool input button.head.pressed.rear;

  float output whistle.switch;

  float output sleep;
}
  
