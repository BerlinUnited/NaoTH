/** Symbols for accessing all strategy relevant information */
namespace strategy("Strategy Symbols") {
  
  /**  */
  float input attention.mi_point.x;
  float input attention.mi_point.y;

  /** the attack direction calculate in strategy */
  float input attack.direction;
  /** the attack direction preview in hip */
  float input attack.direction.preview;
  /** the attack direction preview in left foot */
  float input attack.direction.preview.left_foot;
  /** the attack direction preview in right foot */
  float input attack.direction.preview.right_foot;

  float input players.opp_closest_to_ball.number;
  float input players.opp_closest_to_ball.time_since_last_seen;
  float input players.opp_closest_to_ball.distance_to_ball;
  bool input situation.opponent_at_the_ball;

  float input players.own_closest_to_ball.number;
  float input players.own_closest_to_ball.time_since_last_seen;
  float input players.own_closest_to_ball.distance_to_ball;

  float input defense.simplePose.translation.x;
  float input defense.simplePose.translation.y;
  float input defense.simplePose.rotation;
  
  /** the best foot to approach the ball with */
  bool input attack.approaching_with_right_foot;

  float input defense.pose.translation.x;
  float input defense.pose.translation.y;
  float input defense.pose.rotation;

  /** */
  float input goalie.guardline.x;
  /** */
  float input goalie.guardline.y;

  /** defensive position of the goalie on a (half) ellipse in the penalty area */
  float input goalie.defensive.x;
  float input goalie.defensive.y;
  float input goalie.defensive.a;

  /** */
  float input penalty_goalie.pos.x;
  float input penalty_goalie.pos.y;

  /** formation */
  float input soccer_strategy.formation.x;
  float input soccer_strategy.formation.y;

  /** information for selflocator */
  bool output situationStatusOwnHalf; //true = own half, false = unknown!!!
  bool output situationStatusOppHalf; //true = opp half, false = unknown!!!

  enum attack.action_type
  {
    none,
    kick_short,
    kick_long,
    sidekick_left,
    sidekick_right
  };

  enum attack.action_type input attack.best_action;

}
  
