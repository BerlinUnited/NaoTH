#include "fy_1500_old_tk03_combined_detection_nncg.h"

#include <emmintrin.h>
#include <immintrin.h>
#include <pmmintrin.h>
#include <tmmintrin.h>
#include <xmmintrin.h>

static float w_5[3][3][1][4] = {
    7.538115e-02f,   -2.885045e-02f,  -1.0316146e-01f, -8.894719e-02f,
    8.886637e-02f,   -1.2795414e-01f, 3.9091992e-01f,  -5.4424955e-03f,
    6.122216e-02f,   2.1515816e-01f,  2.4917553e-01f,  -2.1725175e-01f,
    1.06299326e-01f, -9.490886e-02f,  2.058816e-01f,   1.8870924e-01f,
    -3.4547186e-01f, 1.387121e-01f,   -3.6555193e-02f, -4.888266e-01f,
    -2.7423775e-01f, 7.1851015e-02f,  -1.26234e-01f,   1.42898485e-02f,
    3.2743222e-01f,  -4.019744e-01f,  -1.5148586e-01f, -2.4788715e-02f,
    -1.385674e-01f,  -2.3975517e-01f, -2.1467772e-01f, -1.2524821e-01f,
    -2.0126893e-01f, 1.9967885e-01f,  3.620324e-01f,   1.8134053e-01f};
static float b_5[4] = {7.914805e-02f, 4.3910053e-02f, 1.06536165e-01f,
                       -2.9649496e-02f};
static float w_4[3][3][4][4] = {
    -6.570621e-02f,  1.6441184e-01f,  1.77179e-01f,     1.675752e-01f,
    -4.0738392e-01f, 2.2850607e-01f,  -1.4698648e-01f,  3.979204e-02f,
    1.0289875e-01f,  -9.091539e-02f,  1.9230932e-01f,   1.0217179e-01f,
    -7.175748e-02f,  1.8159771e-01f,  -4.1337613e-02f,  -1.2413197e-01f,
    -8.95738e-02f,   -7.371675e-02f,  1.3722958e-01f,   1.9885446e-01f,
    -1.5767303e-01f, 2.7736878e-01f,  -1.0752806e-01f,  -6.588761e-02f,
    1.6306707e-01f,  -6.756551e-02f,  -1.1096318e-01f,  -1.5619142e-01f,
    1.09073445e-01f, -2.649547e-02f,  -1.16439335e-01f, 1.3988857e-01f,
    1.5293716e-01f,  1.8366478e-02f,  2.1451364e-01f,   2.921104e-01f,
    -9.00396e-02f,   1.7499988e-01f,  -1.6884139e-01f,  -2.7153036e-01f,
    1.9312732e-01f,  -1.4360032e-02f, -7.465394e-02f,   6.627225e-02f,
    -2.3824611e-01f, -1.7798263e-01f, -1.2514573e-02f,  -3.2645914e-01f,
    3.3032793e-01f,  1.5596549e-01f,  7.878658e-03f,    1.3912934e-01f,
    -2.8153625e-01f, 2.9401582e-01f,  1.7445752e-01f,   7.543818e-02f,
    -5.669983e-02f,  -5.0483156e-02f, -1.793257e-01f,   2.3675677e-01f,
    -1.64768e-01f,   4.812568e-02f,   7.5762264e-02f,   2.3201986e-03f,
    3.6989608e-01f,  1.4774092e-01f,  -2.9342255e-01f,  7.1451984e-02f,
    -8.142682e-02f,  -1.533638e-02f,  -4.73628e-02f,    -7.7739246e-02f,
    -2.904877e-01f,  2.2593442e-01f,  -7.373719e-02f,   1.7292574e-02f,
    1.3117735e-01f,  -1.9724633e-01f, -2.0331408e-01f,  1.5799192e-01f,
    2.1505298e-01f,  7.7696525e-02f,  -9.7412266e-02f,  3.6594602e-01f,
    3.023963e-01f,   -1.7494562e-01f, -4.3673042e-02f,  1.5162109e-01f,
    -1.2060541e-01f, -1.3212295e-01f, 1.2358412e-01f,   -2.300613e-02f,
    -1.0584106e-01f, 1.5552329e-01f,  1.1044465e-02f,   -2.4704532e-01f,
    -5.9464913e-02f, 2.6297697e-01f,  8.118061e-02f,    -1.4422086e-01f,
    -2.8849453e-01f, -1.5892804e-01f, 1.5217163e-02f,   2.2951059e-01f,
    1.8784218e-01f,  3.175206e-01f,   8.8232115e-02f,   2.5662893e-01f,
    1.8799223e-01f,  1.2692298e-01f,  6.945567e-02f,    1.8399367e-02f,
    1.5782669e-01f,  2.6719594e-01f,  1.54212415e-02f,  -1.5852617e-03f,
    4.831686e-02f,   6.777093e-02f,   -5.60194e-02f,    2.5391954e-01f,
    -1.5084228e-01f, 2.5774565e-01f,  1.2589905e-01f,   1.8454076e-01f,
    2.2719651e-02f,  2.846496e-01f,   -1.32112e-01f,    -2.0109926e-01f,
    -1.2971687e-01f, 9.829797e-02f,   -2.328907e-01f,   -1.5586212e-01f,
    1.3002706e-01f,  -1.5055887e-01f, -1.9920394e-01f,  -3.4350908e-01f,
    -2.7823198e-01f, -2.0776613e-01f, -1.7556079e-01f,  -4.2645833e-03f,
    6.270182e-02f,   -5.207318e-02f,  -2.1748526e-01f,  6.743788e-02f};
static float b_4[4] = {4.3321926e-02f, -5.0904965e-03f, 1.0738377e-02f,
                       3.3423916e-02f};
static float w_3[3][3][4][8] = {
    -1.9694413e-01f,  -8.6371206e-02f,  1.4371174e-02f,   -1.5859495e-01f,
    1.7029466e-01f,   2.6871705e-02f,   -2.2139923e-01f,  1.8933018e-01f,
    2.0829219e-01f,   -1.135379e-01f,   -9.66658e-02f,    -6.823307e-02f,
    3.083787e-02f,    -1.22018315e-01f, 2.4132771e-02f,   6.0133018e-02f,
    1.0613597e-01f,   -7.7946626e-02f,  -1.3675441e-01f,  2.1354248e-01f,
    1.0408576e-01f,   -1.5175766e-02f,  5.3628407e-02f,   -1.8916266e-02f,
    6.551862e-02f,    8.470626e-04f,    -2.8761455e-01f,  7.7244125e-02f,
    -2.0518208e-01f,  -9.542872e-03f,   -8.262955e-02f,   1.50542e-01f,
    -8.615547e-03f,   -1.3850978e-01f,  -1.0471628e-01f,  7.6456144e-02f,
    1.4174958e-01f,   -3.9344117e-01f,  3.837295e-02f,    2.7099827e-01f,
    -1.7274708e-02f,  -1.233658e-01f,   -3.663601e-02f,   -7.0686e-03f,
    -2.2999705e-01f,  -4.8370976e-02f,  6.216265e-02f,    -3.7920505e-02f,
    2.263547e-01f,    -7.032872e-02f,   -1.5034783e-01f,  -1.2857032e-01f,
    -4.155314e-02f,   -1.6484695e-02f,  9.342187e-03f,    -2.7353337e-01f,
    -1.4607686e-01f,  1.8401593e-01f,   -1.6807498e-01f,  -8.637329e-02f,
    1.6680874e-01f,   -2.8301476e-02f,  5.877627e-03f,    1.2397202e-01f,
    -1.7990287e-01f,  -7.655734e-03f,   -3.5658635e-03f,  2.506333e-01f,
    -2.6802253e-02f,  6.2412675e-02f,   1.1020152e-01f,   8.701307e-02f,
    1.1359906e-01f,   2.2193347e-01f,   -1.8305771e-01f,  7.588282e-02f,
    1.4733042e-01f,   1.16315104e-01f,  -1.5801844e-01f,  -2.0666271e-01f,
    2.3333552e-01f,   -2.1962054e-01f,  -8.111358e-03f,   -1.7383486e-01f,
    -1.4184773e-01f,  9.143742e-02f,    -9.141965e-02f,   -5.676519e-02f,
    1.8139973e-01f,   -2.3838434e-02f,  -6.450601e-02f,   9.0411514e-02f,
    2.3312544e-02f,   -7.258072e-02f,   7.340472e-02f,    1.7036037e-01f,
    -1.8515268e-01f,  -1.0264037e-01f,  1.7149948e-01f,   -2.7515417e-01f,
    -5.4024022e-02f,  1.6621542e-01f,   3.887137e-01f,    2.5505054e-01f,
    -1.4808898e-01f,  7.9552114e-02f,   1.7871322e-01f,   1.3079023e-01f,
    -1.2795496e-01f,  1.4422399e-01f,   6.295589e-02f,    -2.1486133e-01f,
    -1.501547e-01f,   4.0057164e-02f,   -1.9756232e-01f,  1.3151634e-01f,
    -1.2081082e-01f,  9.243572e-02f,    4.231263e-02f,    4.2519975e-02f,
    -4.8231993e-02f,  -5.999338e-02f,   -1.5718156e-01f,  5.2529834e-03f,
    -3.3253785e-03f,  -3.2205086e-02f,  1.8860923e-01f,   1.2585336e-01f,
    1.2359058e-01f,   -1.8163233e-01f,  -1.7466065e-01f,  -2.0395708e-01f,
    -2.508547e-01f,   -2.1173374e-01f,  -1.1364118e-01f,  1.2354282e-01f,
    -8.243798e-02f,   9.280684e-03f,    -2.8398713e-01f,  2.3526432e-02f,
    -2.2374213e-01f,  -1.715786e-01f,   1.766142e-01f,    1.560249e-01f,
    2.053103e-01f,    -7.797862e-02f,   -4.5324764e-01f,  -7.881514e-02f,
    8.88533e-02f,     -1.4162116e-01f,  -2.6132607e-01f,  5.5333745e-02f,
    -1.16675064e-01f, -2.0615853e-01f,  1.7659871e-01f,   -2.0835628e-01f,
    2.2310199e-01f,   2.4952762e-01f,   1.3628614e-01f,   -1.6242534e-01f,
    -2.3066096e-01f,  -1.7241623e-01f,  -1.419261e-01f,   -1.184275e-01f,
    2.3545109e-01f,   2.7515078e-01f,   -1.2168292e-01f,  -8.1345364e-02f,
    7.924654e-02f,    3.1990204e-02f,   -1.4999728e-01f,  2.0572413e-02f,
    -1.9867755e-01f,  -8.721497e-02f,   6.0676146e-02f,   -1.1778911e-01f,
    -2.1541803e-01f,  -1.9374776e-01f,  2.4531644e-02f,   -5.673839e-02f,
    -1.3168302e-01f,  3.5382252e-02f,   -3.7347645e-02f,  -2.3119797e-01f,
    1.6324052e-01f,   -1.29156e-01f,    2.5902744e-02f,   -4.2307265e-02f,
    -1.679405e-02f,   8.405462e-02f,    2.4932528e-01f,   -5.0031666e-02f,
    6.1866865e-02f,   1.819773e-01f,    2.3182862e-01f,   -9.088609e-02f,
    3.3727497e-01f,   6.481381e-02f,    1.686502e-01f,    2.3255665e-02f,
    2.102108e-01f,    -1.0943688e-02f,  7.71131e-02f,     -1.2888703e-01f,
    1.9806096e-01f,   -1.024197e-02f,   -2.5851095e-01f,  -1.6948989e-01f,
    3.8797364e-02f,   1.4070572e-01f,   -1.832523e-01f,   -1.139423e-01f,
    1.9732013e-01f,   6.83104e-02f,     1.6215192e-01f,   2.1296452e-01f,
    1.821285e-01f,    -7.892322e-02f,   -2.5944862e-01f,  -3.1543046e-02f,
    1.7137076e-01f,   -1.7915577e-01f,  -2.2299966e-01f,  -1.0437324e-01f,
    -1.2905242e-01f,  3.0611243e-02f,   -7.85548e-02f,    1.9971322e-01f,
    1.0212863e-02f,   1.3501453e-01f,   -5.280543e-02f,   -1.9745871e-01f,
    1.7002031e-01f,   1.01389945e-01f,  -2.1363467e-01f,  9.002889e-02f,
    -2.2764756e-01f,  8.8253096e-02f,   -1.73651e-02f,    -1.3398328e-01f,
    1.3034756e-01f,   -3.0728003e-01f,  -1.9361106e-01f,  -2.9442242e-01f,
    -2.0156823e-01f,  2.1293175e-01f,   -1.12852976e-01f, -1.7236856e-01f,
    2.0577653e-01f,   1.6745839e-01f,   -2.0097028e-01f,  -1.7759223e-01f,
    -1.3145387e-01f,  2.0150806e-01f,   -4.9520716e-02f,  -4.033367e-02f,
    1.0257503e-01f,   -1.8753433e-01f,  -2.711216e-01f,   -3.3493225e-02f,
    -1.4466268e-01f,  2.2853972e-01f,   -4.7773667e-02f,  -1.3090107e-01f,
    3.2410435e-02f,   1.9546232e-01f,   6.0954392e-02f,   -2.2312336e-01f,
    -2.3347814e-01f,  5.613028e-02f,    -2.1995331e-01f,  3.651641e-02f,
    -1.7333585e-01f,  -1.4562887e-01f,  -1.07626945e-01f, -1.6567956e-01f,
    1.4996146e-01f,   1.7746864e-01f,   -6.8210782e-03f,  -2.9209737e-02f,
    3.099086e-02f,    -1.0618828e-01f,  1.857183e-01f,    9.980562e-02f,
    8.814736e-02f,    -1.7435986e-01f,  -9.029198e-02f,   -1.7901294e-01f};
static float b_3[8] = {3.7199024e-02f,  5.57548e-02f,  1.8008316e-02f,
                       5.6610473e-02f,  5.063354e-02f, -4.779289e-02f,
                       -2.9721934e-02f, 4.1821655e-02f};
static float w_2[3][3][8][8] = {
    1.06698684e-01f,  -1.4356418e-01f,  -8.049534e-02f,   7.470584e-03f,
    4.815412e-02f,    -9.47076e-02f,    1.14018515e-01f,  -1.01305105e-01f,
    -1.2738441e-01f,  8.228263e-03f,    -8.517608e-02f,   1.360063e-01f,
    1.5950899e-01f,   -1.323975e-01f,   -8.451154e-02f,   9.46128e-02f,
    1.3715139e-01f,   -1.4571097e-01f,  4.0090993e-02f,   -3.474723e-02f,
    -2.6914993e-01f,  -2.4185151e-01f,  2.1610902e-01f,   1.7334977e-01f,
    -1.12514935e-01f, 2.4301587e-01f,   1.8191803e-02f,   1.7891501e-01f,
    -6.530486e-02f,   -1.7944041e-01f,  -1.6371547e-01f,  2.09982e-01f,
    1.5784952e-01f,   2.6505604e-01f,   1.0169781e-01f,   -4.7498625e-02f,
    -1.3784316e-01f,  -1.286197e-01f,   9.831374e-02f,    4.733842e-02f,
    4.565102e-02f,    -9.140573e-02f,   -1.4073715e-01f,  -1.3770881e-01f,
    2.0067772e-01f,   -2.5060257e-01f,  -1.4572461e-01f,  6.4545413e-03f,
    9.2959434e-02f,   -9.354443e-02f,   -2.5102332e-01f,  -5.474187e-02f,
    -1.605526e-01f,   -3.3879563e-01f,  1.9900717e-01f,   9.8949246e-02f,
    2.3281974e-01f,   1.9861217e-01f,   -2.2088322e-03f,  1.1915335e-01f,
    1.6154706e-02f,   -2.8971812e-01f,  1.6453457e-01f,   1.8470956e-02f,
    7.2284766e-02f,   5.736851e-02f,    1.0062732e-02f,   3.3418972e-02f,
    1.934042e-01f,    6.1932743e-02f,   5.9472624e-02f,   -8.02506e-02f,
    1.9840607e-01f,   -2.8655943e-02f,  -1.4274338e-01f,  2.1385977e-02f,
    -1.7623526e-01f,  -2.5865084e-02f,  -1.2866741e-01f,  -8.4077254e-02f,
    2.684255e-01f,    1.16984226e-01f,  -8.9252755e-02f,  1.120759e-01f,
    -2.9214926e-02f,  -2.5346184e-02f,  2.5320703e-01f,   5.5995334e-02f,
    1.1514185e-01f,   2.286199e-01f,    -8.737085e-02f,   -2.9901087e-01f,
    -3.0691817e-01f,  -4.5970982e-01f,  8.5314885e-02f,   -3.3836223e-02f,
    6.563855e-02f,    1.4863692e-01f,   1.3571253e-02f,   -4.209622e-02f,
    1.5812753e-01f,   1.10191666e-01f,  -1.7671789e-01f,  1.397954e-01f,
    -2.2974604e-01f,  1.0275432e-01f,   -4.3600038e-02f,  7.002558e-05f,
    1.4393575e-01f,   -9.019525e-02f,   1.22512415e-01f,  -1.0497721e-03f,
    -6.365836e-02f,   2.4131444e-01f,   -1.3120298e-01f,  -1.4413296e-01f,
    -8.2889594e-02f,  -2.7695504e-01f,  1.8374416e-01f,   3.7297845e-02f,
    -3.0739387e-02f,  3.8717773e-02f,   -1.8877812e-02f,  1.8364249e-01f,
    3.6366977e-02f,   -3.062348e-01f,   1.0950873e-01f,   5.0960913e-02f,
    2.252122e-02f,    -1.0022011e-01f,  -1.8283596e-02f,  -1.998073e-01f,
    -3.292755e-02f,   -8.543625e-02f,   -6.404662e-02f,   1.6707343e-01f,
    2.4994859e-01f,   -1.3850228e-02f,  1.971108e-01f,    -8.805628e-02f,
    -9.49295e-02f,    9.82485e-02f,     -4.0633168e-02f,  8.410006e-02f,
    -1.5467839e-01f,  -6.53901e-02f,    -9.497568e-03f,   -1.3366903e-01f,
    1.3619963e-03f,   -1.8592294e-01f,  2.1538799e-01f,   -1.8908316e-02f,
    -8.537254e-03f,   -7.846014e-02f,   1.612715e-01f,    7.967948e-02f,
    -2.4429288e-02f,  -3.801653e-02f,   9.0248816e-02f,   1.5063438e-01f,
    1.3445005e-02f,   2.0861436e-01f,   2.4071425e-02f,   1.2642694e-01f,
    -6.5105716e-03f,  1.6345702e-02f,   -7.955736e-02f,   -1.3268946e-01f,
    -2.2079803e-01f,  -2.9281092e-01f,  4.6880946e-02f,   1.6450183e-01f,
    1.22878745e-01f,  4.5029774e-02f,   -2.154677e-01f,   7.608224e-02f,
    -2.5850298e-02f,  -5.5888392e-02f,  -1.8736541e-01f,  -2.216537e-03f,
    6.882234e-02f,    -1.6321388e-01f,  3.6769703e-02f,   8.590047e-02f,
    -6.961657e-02f,   -8.520401e-02f,   1.7264913e-01f,   -7.919849e-02f,
    1.1259032e-01f,   -2.2182073e-01f,  -1.6015159e-01f,  1.8467073e-01f,
    1.355922e-01f,    1.6223757e-01f,   -9.2474315e-03f,  -2.6998427e-02f,
    -6.679773e-02f,   -2.6844854e-02f,  1.4628567e-01f,   -1.4162609e-01f,
    6.857128e-02f,    -7.241649e-02f,   -8.896979e-02f,   5.225842e-02f,
    7.202414e-02f,    2.03373e-02f,     -1.2717233e-03f,  1.869498e-01f,
    1.4738074e-02f,   -1.1418778e-01f,  1.421531e-01f,    -2.2057755e-01f,
    -2.837935e-01f,   -7.151777e-02f,   2.324576e-02f,    -3.513739e-02f,
    1.16344586e-01f,  2.5501952e-01f,   1.9482476e-01f,   1.0015335e-01f,
    -2.1718228e-01f,  -2.605501e-01f,   -1.3705766e-01f,  -3.9261308e-02f,
    -4.6004537e-02f,  2.4754632e-01f,   -8.0793925e-02f,  -1.5829456e-01f,
    -8.5578775e-03f,  -2.5175044e-01f,  -2.7702478e-01f,  1.8186678e-01f,
    -1.24110244e-01f, -1.22438364e-01f, -1.6423593e-03f,  -1.929836e-01f,
    -2.1438776e-01f,  -1.4264582e-01f,  -5.9334766e-02f,  6.839837e-02f,
    -2.5115642e-01f,  2.0731452e-01f,   8.1273906e-02f,   -7.5391434e-02f,
    7.659811e-02f,    -3.462482e-01f,   3.2384567e-02f,   -3.0148016e-02f,
    -2.4483126e-01f,  -2.660713e-02f,   1.4312595e-01f,   -3.1518695e-01f,
    -1.9526194e-01f,  -2.688205e-01f,   -7.1349144e-02f,  -5.0014313e-03f,
    5.522921e-02f,    -1.745519e-01f,   8.7813646e-02f,   1.8019308e-01f,
    -3.0700631e-02f,  1.6703562e-01f,   1.9720593e-02f,   -9.751154e-02f,
    9.181217e-02f,    -9.33501e-02f,    1.8615845e-01f,   1.1453523e-01f,
    -1.2608813e-02f,  -3.048219e-02f,   1.04798324e-01f,  -1.0657423e-01f,
    -3.7327893e-02f,  1.9015934e-01f,   -1.600911e-01f,   1.11010365e-01f,
    -3.8942438e-02f,  -3.1132692e-01f,  1.7019464e-01f,   1.49506135e-02f,
    1.8455778e-01f,   -6.989441e-02f,   -7.8780815e-02f,  -2.2374958e-01f,
    1.1611384e-01f,   -3.854857e-01f,   1.8513282e-01f,   1.3323733e-01f,
    -9.400369e-02f,   1.4875285e-01f,   1.07277215e-01f,  -6.8598636e-03f,
    1.9426402e-02f,   5.2629665e-02f,   -1.18860535e-01f, 1.8746653e-01f,
    -3.521307e-01f,   3.3344008e-02f,   -6.3907236e-02f,  9.193581e-02f,
    -1.5543288e-02f,  2.0162778e-01f,   4.2552684e-02f,   1.3079232e-02f,
    2.1113172e-02f,   -8.648401e-02f,   1.808036e-01f,    8.365546e-02f,
    -7.102179e-02f,   -1.5685762e-01f,  -1.3794579e-01f,  -5.0162878e-02f,
    -3.4300584e-01f,  2.7753574e-01f,   1.3872497e-01f,   1.2732705e-01f,
    7.583397e-02f,    -1.7477524e-01f,  2.550875e-01f,    1.6645561e-01f,
    -1.2804831e-02f,  -7.168005e-02f,   6.3239984e-02f,   1.5248129e-01f,
    1.2793659e-01f,   2.3659822e-01f,   1.5997002e-01f,   1.12180166e-01f,
    -3.4093782e-02f,  2.9266747e-02f,   -1.3947186e-01f,  3.021497e-03f,
    -1.6247198e-01f,  -2.2648747e-01f,  -2.3548973e-01f,  1.9547391e-01f,
    -5.940304e-03f,   1.8606981e-02f,   -6.2325045e-02f,  -2.3892835e-01f,
    1.9338181e-02f,   -2.6665974e-02f,  3.6207446e-01f,   9.668138e-02f,
    9.426613e-03f,    -1.3593422e-01f,  6.426415e-02f,    -5.5821296e-03f,
    -1.7671683e-01f,  -1.4223488e-01f,  1.5111206e-01f,   -4.2203147e-02f,
    1.14869826e-01f,  5.412544e-02f,    -9.4066605e-02f,  -5.8105435e-02f,
    -2.4966928e-04f,  1.9689393e-01f,   1.2554823e-01f,   1.6455425e-02f,
    -2.7314082e-01f,  1.7695029e-01f,   -1.4702734e-01f,  1.6332749e-01f,
    -6.403598e-02f,   -8.500515e-02f,   2.1367629e-01f,   -9.899573e-02f,
    -1.5526481e-01f,  6.4452924e-02f,   -7.4094065e-02f,  -2.8087977e-01f,
    -1.1208421e-01f,  9.612717e-02f,    1.2699533e-02f,   -7.685503e-02f,
    -3.1877123e-02f,  -6.912714e-02f,   1.7569195e-01f,   1.3818355e-01f,
    2.0501614e-01f,   -7.000995e-02f,   1.610981e-01f,    2.036434e-01f,
    -1.2372061e-01f,  5.9932254e-02f,   -5.4379597e-02f,  1.2130369e-01f,
    -5.6733046e-02f,  6.515247e-02f,    -9.2837915e-02f,  -9.035092e-02f,
    1.3365641e-01f,   7.960657e-02f,    -1.21359706e-01f, 1.7627577e-01f,
    -2.1410134e-01f,  1.1597635e-01f,   1.1101854e-03f,   -3.8039435e-02f,
    3.73379e-02f,     -4.8502322e-02f,  2.0432661e-01f,   5.287339e-02f,
    -1.392457e-01f,   -2.199341e-01f,   1.4107641e-02f,   -9.355118e-02f,
    -1.3826434e-01f,  8.9715324e-02f,   1.2877285e-01f,   1.9804068e-01f,
    -1.05033435e-01f, -2.0054552e-01f,  -2.9282328e-02f,  1.1205612e-01f,
    -6.1997943e-02f,  -3.1499818e-04f,  2.3666365e-01f,   1.5948014e-01f,
    -4.677045e-03f,   -4.362273e-02f,   -2.0660633e-01f,  1.2475368e-01f,
    -2.4221967e-01f,  2.118797e-01f,    1.9627084e-01f,   -1.5417963e-01f,
    -3.791532e-01f,   -9.5082335e-03f,  1.9008746e-02f,   -3.790849e-02f,
    7.0490025e-02f,   -8.428195e-02f,   2.6623896e-01f,   -7.200693e-02f,
    -1.6189696e-01f,  8.924479e-02f,    -3.615982e-01f,   2.5912614e-03f,
    -1.0869493e-01f,  5.1820967e-03f,   2.896254e-01f,    -2.75387e-02f,
    -2.4776253e-01f,  -7.891289e-02f,   -2.3978293e-01f,  2.522222e-01f,
    4.3795567e-02f,   -7.65953e-02f,    -5.435612e-02f,   1.06895484e-01f,
    -5.841304e-02f,   1.2579582e-02f,   8.9281656e-02f,   -6.373014e-02f,
    5.304535e-02f,    -2.1963855e-02f,  8.0969624e-02f,   1.4203544e-02f,
    5.162555e-02f,    -8.711025e-03f,   1.6545673e-01f,   2.0037697e-01f,
    1.2652287e-01f,   2.0190018e-01f,   1.3504216e-02f,   -2.1110866e-02f,
    -2.5801337e-01f,  -2.2895333e-01f,  -2.35452e-01f,    -6.0578965e-02f,
    1.1030223e-01f,   3.0383125e-02f,   2.6888248e-01f,   -1.0154645e-02f,
    -1.4952804e-01f,  -2.0765643e-01f,  9.6361585e-02f,   2.4770235e-01f,
    -1.11622676e-01f, -2.1954753e-02f,  -2.395473e-02f,   7.696852e-02f,
    -8.266707e-02f,   1.4992529e-01f,   1.5850557e-02f,   -1.8692324e-01f,
    4.5759276e-02f,   1.258652e-01f,    8.629308e-02f,    -5.9652008e-02f,
    1.3347459e-01f,   -3.2943595e-02f,  1.3624988e-01f,   1.4474931e-01f,
    -1.06004596e-01f, 5.2330602e-02f,   -1.2042178e-02f,  3.0079655e-02f,
    -2.1027373e-01f,  6.922237e-02f,    -3.0490816e-01f,  -8.603264e-02f,
    -1.5115726e-01f,  9.2167646e-02f,   2.4079256e-01f,   -2.0314033e-01f,
    9.8706335e-02f,   8.2628205e-02f,   -9.473017e-02f,   7.8419335e-02f,
    1.03527434e-01f,  -7.808523e-02f,   6.642892e-02f,    3.5382174e-02f,
    1.6980278e-01f,   -3.4477737e-02f,  -1.1393474e-01f,  -2.1686737e-01f,
    -1.0875476e-01f,  2.804367e-01f,    3.2505944e-02f,   1.6498034e-01f,
    1.4375538e-01f,   2.2792599e-01f,   2.6445013e-02f,   1.8076268e-01f,
    1.4292684e-01f,   2.9205032e-02f,   2.0038292e-01f,   -1.0081136e-01f,
    -2.2255617e-01f,  -9.4927944e-02f,  -5.4789744e-02f,  -2.0956464e-02f,
    1.27194e-01f,     1.0117127e-01f,   -2.2137366e-02f,  -2.2269657e-01f,
    4.205229e-02f,    -2.0934789e-01f,  -2.0889279e-01f,  2.5521317e-01f,
    1.3905296e-01f,   -6.213763e-02f,   -6.295214e-02f,   -1.924282e-02f,
    -1.707047e-01f,   -5.731669e-02f,   -3.2931822e-03f,  1.2801544e-01f,
    -1.1033072e-01f,  -1.7619343e-01f,  -9.9204436e-02f,  -1.4301535e-01f,
    -1.22904286e-01f, -3.2099597e-02f,  2.1874169e-01f,   -1.3177495e-01f,
    -8.788793e-02f,   6.805393e-02f,    -2.019318e-01f,   -1.8139338e-01f,
    -1.4155318e-01f,  2.4565414e-01f,   -7.325056e-02f,   -5.0388005e-02f,
    9.162536e-02f,    9.748947e-02f,    3.679033e-02f,    -1.6028176e-01f,
    4.7727954e-02f,   -7.003255e-02f,   7.5010635e-02f,   -3.730492e-02f};
static float b_2[8] = {7.855029e-02f,  6.266263e-02f,   3.9417714e-02f,
                       4.321382e-02f,  -3.4556177e-02f, 4.0291667e-02f,
                       8.4703766e-02f, 4.0457264e-02f};
static float w_1[1][1][8][8] = {
    -3.9686757e-01f, -3.6839163e-03f, 4.6619537e-01f,   3.9307728e-01f,
    3.896325e-01f,   -3.4319082e-01f, 4.8200813e-01f,   -2.1917292e-01f,
    -3.9722475e-01f, 3.5208613e-01f,  3.929559e-01f,    -5.5431944e-01f,
    1.5820265e-01f,  -3.9492166e-01f, -1.7605287e-01f,  -4.0439833e-02f,
    -3.69945e-01f,   4.936993e-01f,   -3.0775708e-01f,  -3.7970144e-01f,
    -5.251538e-01f,  5.466826e-01f,   -1.1684818e-01f,  -3.684711e-01f,
    3.120374e-01f,   1.3245617e-01f,  3.7730715e-01f,   -4.6865355e-02f,
    -5.8330077e-01f, 2.0175365e-01f,  4.2657906e-01f,   5.933486e-01f,
    3.6458932e-02f,  3.4655795e-02f,  -1.11395404e-01f, 5.012862e-01f,
    3.5704267e-01f,  -6.321567e-01f,  -1.4922105e-01f,  1.8840978e-01f,
    1.13436125e-01f, -3.3509618e-01f, -6.1814916e-01f,  4.772337e-01f,
    -1.2657772e-01f, 4.618032e-02f,   2.364053e-01f,    -4.6601507e-01f,
    3.295676e-01f,   -2.4423729e-01f, -4.0805686e-01f,  1.2229763e-04f,
    5.5605644e-01f,  4.379526e-01f,   2.761159e-01f,    -2.3980385e-01f,
    -3.6076552e-01f, 4.7702563e-01f,  -1.9390963e-01f,  -4.5706713e-01f,
    4.7547567e-01f,  6.0219973e-01f,  -4.648854e-01f,   -2.7085299e-02f};
static float b_1[8] = {-3.2008167e-02f, 3.5450086e-02f, -2.1008128e-02f,
                       -3.6590986e-02f, 4.528422e-02f,  3.5831597e-02f,
                       4.845063e-02f,   4.4903982e-02f};
static float w_0[128][4] = {
    -2.2524235e-01f,  -1.8721551e-03f, -2.802955e-01f,   -1.4877513e-01f,
    -9.953835e-02f,   -1.0101023e-01f, -1.4860442e-01f,  -4.344599e-02f,
    9.374371e-02f,    6.087641e-02f,   -1.7790057e-01f,  3.234879e-02f,
    -9.958511e-02f,   -7.7998884e-02f, -2.1590896e-02f,  -1.4062203e-01f,
    1.05827324e-01f,  -9.387212e-02f,  1.3274902e-01f,   1.832128e-02f,
    -9.411645e-02f,   1.4844456e-01f,  1.8783798e-02f,   -7.329292e-02f,
    1.5537427e-01f,   -8.595917e-02f,  2.014866e-01f,    -1.360017e-01f,
    -1.5167792e-01f,  1.9751383e-01f,  1.8018413e-01f,   -2.5156789e-02f,
    -1.1213561e-02f,  6.8038516e-02f,  -3.1391915e-02f,  -2.5153282e-01f,
    -1.5950604e-01f,  1.9624849e-01f,  6.4806394e-02f,   -7.0248246e-02f,
    -3.871615e-02f,   -1.1057087e-01f, 1.6571444e-01f,   5.234806e-02f,
    1.1638158e-01f,   1.838936e-02f,   1.1486895e-01f,   4.8933733e-02f,
    -1.4335905e-01f,  4.5037802e-02f,  1.5962882e-01f,   -1.0450775e-01f,
    -6.500675e-02f,   -3.8598023e-02f, -2.656032e-02f,   -8.793009e-02f,
    -2.0950395e-01f,  1.9851308e-01f,  2.1595334e-01f,   -2.4455734e-02f,
    5.9416093e-02f,   -1.5897976e-01f, 1.5336356e-01f,   -2.8823065e-02f,
    -2.0140472e-01f,  -1.0749528e-01f, 1.3759081e-01f,   -3.2441223e-01f,
    1.1552486e-01f,   -1.545712e-01f,  7.845977e-02f,    2.2984345e-01f,
    1.2764165e-01f,   1.1845716e-02f,  1.0332131e-03f,   1.8738689e-01f,
    -1.477619e-01f,   -4.6359014e-02f, -8.397008e-02f,   -8.574342e-02f,
    -1.23317346e-01f, 6.607309e-03f,   -1.7152666e-01f,  -5.4231495e-02f,
    1.4502625e-01f,   -9.716843e-02f,  -9.732716e-02f,   -9.51879e-02f,
    1.4966312e-01f,   3.168882e-02f,   2.9878078e-02f,   1.5144685e-01f,
    -2.2648327e-02f,  1.8422385e-01f,  2.0368148e-03f,   1.61441e-01f,
    -1.8538053e-01f,  -4.2930968e-02f, 7.2455846e-02f,   -2.1925122e-01f,
    1.0521636e-01f,   6.2535524e-02f,  -6.804983e-02f,   -1.0358686e-01f,
    -1.536915e-01f,   -1.5932307e-01f, -9.9996276e-02f,  -6.6174395e-02f,
    3.7692934e-02f,   -1.8627004e-01f, -2.202431e-01f,   -1.7098837e-01f,
    -1.2832743e-01f,  8.644373e-02f,   -1.0061996e-01f,  1.08760126e-01f,
    1.0509504e-01f,   1.9079743e-01f,  -1.6718434e-02f,  -9.153199e-03f,
    -2.079812e-01f,   -9.385204e-02f,  2.5433424e-01f,   1.05075665e-01f,
    2.0916004e-01f,   -9.989174e-02f,  9.280986e-02f,    1.4174893e-01f,
    -8.8135295e-02f,  -1.3077709e-01f, 1.296678e-02f,    -1.2690267e-02f,
    -9.365381e-02f,   1.3024674e-01f,  1.9672349e-01f,   -1.12336256e-01f,
    6.625667e-02f,    -2.1948482e-01f, 6.289495e-02f,    -9.752157e-02f,
    -9.81885e-02f,    -2.888807e-02f,  -1.3377915e-01f,  1.952306e-02f,
    1.9705963e-01f,   1.5914905e-01f,  -2.1427978e-02f,  3.4435987e-01f,
    1.4340629e-01f,   -1.1639962e-01f, 6.030733e-02f,    1.3944906e-01f,
    -5.178598e-02f,   9.796908e-02f,   5.7863686e-02f,   -8.502626e-02f,
    6.1508674e-02f,   1.3785703e-01f,  -1.1432856e-01f,  -1.9145836e-01f,
    1.488475e-01f,    3.824408e-02f,   1.6455935e-01f,   -1.5258607e-01f,
    1.1751681e-02f,   -6.194547e-02f,  1.9042708e-01f,   2.8138834e-01f,
    1.1090667e-01f,   1.8333092e-01f,  -9.966561e-02f,   -2.1374771e-01f,
    -2.833514e-01f,   2.6502872e-01f,  1.680016e-01f,    -1.18884025e-02f,
    -1.9186434e-01f,  -1.2140681e-01f, 7.306955e-02f,    -1.6455197e-01f,
    4.115785e-02f,    1.1830452e-01f,  1.6047627e-01f,   7.6741636e-02f,
    -2.2213832e-01f,  1.759411e-01f,   1.7207263e-02f,   8.145359e-02f,
    -1.980123e-01f,   -6.755735e-02f,  -4.2702906e-02f,  -6.019685e-03f,
    -5.2970756e-02f,  -1.568986e-01f,  -1.2300805e-01f,  -1.8290247e-01f,
    -3.4454163e-02f,  2.2002222e-02f,  -2.2947047e-02f,  2.1268658e-01f,
    -1.03959896e-01f, 5.2658964e-02f,  7.547102e-02f,    -4.9276307e-02f,
    -6.549348e-02f,   1.7176573e-01f,  1.8915266e-01f,   -3.918776e-01f,
    -1.29173e-01f,    1.3243121e-01f,  8.6454146e-02f,   -2.2331825e-01f,
    2.3415227e-01f,   1.7790958e-01f,  -9.855542e-03f,   1.5902218e-01f,
    -2.0571193e-01f,  1.1701737e-01f,  5.190217e-02f,    -1.8490821e-01f,
    -2.0134419e-01f,  -1.6466402e-01f, 5.222719e-02f,    -2.8827873e-01f,
    -1.6600639e-01f,  4.8488893e-02f,  -2.2670785e-02f,  -3.5467863e-01f,
    2.4927926e-01f,   1.6191825e-01f,  -8.772316e-03f,   2.4509132e-01f,
    -8.788171e-02f,   8.0911726e-02f,  -1.02150664e-01f, 1.7815663e-01f,
    9.317342e-02f,    -8.710685e-02f,  -4.299818e-02f,   -2.5264463e-01f,
    -1.11899815e-01f, -7.504954e-02f,  -1.19768694e-01f, -1.669832e-01f,
    6.751193e-02f,    1.2464977e-01f,  1.6191497e-01f,   4.4180967e-02f,
    -4.001502e-02f,   -1.1125894e-01f, 2.8993912e-02f,   1.3783903e-01f,
    1.5886955e-01f,   1.2518732e-01f,  5.46722e-02f,     5.205248e-02f,
    1.6310844e-01f,   -1.6833154e-02f, 1.6214019e-02f,   -5.692075e-02f,
    1.17489696e-01f,  -9.888399e-02f,  -1.6417935e-01f,  1.4688318e-02f,
    -7.272157e-02f,   -9.9793196e-02f, 4.511027e-02f,    -9.849709e-02f,
    -3.935168e-03f,   -1.2249062e-01f, -1.2503439e-01f,  -3.4560657e-01f,
    7.332903e-02f,    4.0076226e-02f,  -3.445519e-02f,   9.393622e-02f,
    2.4121095e-01f,   -4.196884e-03f,  2.0935012e-01f,   1.0356221e-01f,
    -1.8145496e-01f,  9.8292775e-02f,  6.98803e-02f,     -3.3915097e-01f,
    -6.273974e-02f,   1.8263742e-01f,  -1.763308e-01f,   2.74106e-01f,
    -1.8250085e-01f,  -1.6823281e-01f, -1.4011444e-01f,  -2.4280758e-01f,
    1.7962143e-01f,   -5.0689556e-02f, 1.2027767e-01f,   1.8926954e-01f,
    -1.5770055e-02f,  1.6377415e-01f,  1.249475e-01f,    1.1937057e-01f,
    -2.1559204e-01f,  1.171473e-01f,   7.109487e-02f,    -3.12794e-01f,
    -9.0233445e-02f,  2.798633e-02f,   -1.524013e-01f,   1.7707889e-01f,
    -1.506009e-01f,   -1.1464533e-01f, 2.0273312e-04f,   2.3346101e-01f,
    1.6990986e-01f,   1.0100084e-01f,  -1.0540036e-01f,  5.7782356e-02f,
    -1.5539241e-02f,  -6.909055e-02f,  2.0470506e-01f,   1.6596147e-01f,
    9.3474716e-02f,   -1.7722378e-02f, 1.09305695e-01f,  9.6795164e-02f,
    2.7635112e-01f,   -8.0625616e-02f, -1.2578812e-01f,  2.1858543e-01f,
    1.251072e-01f,    5.3576715e-02f,  9.038956e-02f,    3.151962e-01f,
    8.773856e-03f,    9.930655e-02f,   -7.4646585e-02f,  -3.7104708e-01f,
    -7.114495e-03f,   -9.5008455e-02f, 1.6057059e-01f,   2.9783058e-01f,
    -4.0966477e-02f,  7.525039e-02f,   1.94178e-01f,     -2.2204867e-01f,
    9.919984e-02f,    2.0941538e-01f,  5.6150877e-03f,   -2.2389817e-01f,
    1.954737e-01f,    -1.1544451e-02f, -3.4503352e-02f,  2.4629971e-01f,
    -1.1079294e-02f,  1.2785713e-01f,  1.2619784e-01f,   -1.8783039e-01f,
    -1.18236095e-02f, -9.771411e-02f,  -1.0634836e-01f,  -6.858308e-02f,
    6.765822e-02f,    -1.3116641e-02f, 1.5871387e-02f,   1.23621985e-01f,
    -9.052095e-02f,   -5.12271e-02f,   -2.4506864e-01f,  2.3605555e-02f,
    1.5454291e-01f,   5.252268e-02f,   -1.519484e-01f,   2.5795168e-01f,
    1.6859217e-01f,   1.4983352e-01f,  -8.338837e-02f,   -1.5861978e-01f,
    -9.590354e-02f,   -5.785938e-03f,  2.0074119e-01f,   1.8350868e-01f,
    -2.3258208e-01f,  1.7496979e-01f,  -9.393191e-02f,   -2.6586577e-01f,
    -1.1715506e-01f,  -4.7437184e-02f, -1.9761425e-01f,  -1.1347573e-01f,
    -1.1833003e-01f,  1.461867e-01f,   -5.580398e-02f,   -5.174842e-02f,
    -8.613473e-03f,   -1.3149911e-01f, -1.9182584e-01f,  -1.6380742e-02f,
    -4.1921847e-02f,  -1.5037736e-01f, 9.646863e-02f,    3.7133251e-03f,
    3.008538e-02f,    -1.0967086e-01f, 2.2272933e-02f,   9.8784985e-03f,
    1.496873e-01f,    3.1674236e-02f,  1.11868575e-01f,  1.05919056e-01f,
    -1.3811517e-01f,  -3.780342e-02f,  -1.1628136e-02f,  -1.7139573e-01f,
    -2.2699703e-02f,  -1.5572208e-01f, 1.0105842e-01f,   2.4958998e-01f,
    -1.654273e-01f,   -7.4930675e-02f, 1.937437e-01f,    7.335771e-02f,
    -1.6584757e-01f,  1.4970195e-01f,  1.1560484e-01f,   9.4308056e-02f,
    6.840454e-05f,    -1.708566e-01f,  -1.2285995e-01f,  -2.376937e-02f,
    3.2083545e-02f,   8.595064e-03f,   -1.8074885e-01f,  -1.2401573e-02f,
    -1.5339677e-02f,  1.6895917e-01f,  1.4658864e-01f,   2.178109e-01f,
    -4.971319e-02f,   2.6567062e-02f,  -1.531375e-01f,   -1.8380642e-01f,
    -1.0683515e-02f,  -9.7325794e-02f, -9.835851e-02f,   -2.4607062e-02f,
    -1.4949094e-01f,  -9.590367e-02f,  5.313229e-02f,    -4.8703823e-02f,
    1.4742258e-01f,   -8.3067365e-02f, -1.8762347e-01f,  -9.956972e-02f,
    1.0756416e-01f,   1.2823346e-01f,  1.6644506e-01f,   1.2583892e-01f,
    2.0783903e-01f,   -2.9813772e-01f, -1.3823864e-01f,  1.0961448e-01f,
    3.178603e-03f,    2.3121655e-02f,  -1.6433477e-01f,  9.805396e-02f,
    1.8142049e-01f,   -3.5151623e-02f, 9.78199e-02f,     1.3623765e-01f,
    1.6777432e-01f,   1.422267e-01f,   -5.3356323e-02f,  1.12848446e-01f,
    -5.243807e-03f,   -1.0560257e-01f, 8.095526e-02f,    2.4933177e-01f,
    -1.7291797e-02f,  8.893123e-02f,   -6.646883e-03f,   2.2843601e-02f,
    3.231569e-02f,    -1.4444292e-01f, -1.1451766e-01f,  4.8788674e-02f,
    3.8308665e-02f,   2.0266841e-01f,  1.8872589e-01f,   -5.4321587e-03f,
    -3.6215127e-02f,  7.647184e-02f,   -1.5972053e-01f,  9.9455655e-02f,
    1.1071227e-01f,   -4.1440483e-02f, -3.10123e-02f,    1.2060733e-01f,
    -1.0080193e-01f,  1.071493e-01f,   1.8791033e-01f,   1.9487992e-02f,
    -1.3642803e-01f,  1.5850396e-01f,  1.3998897e-01f,   1.8150592e-01f,
    1.9810179e-01f,   1.445143e-01f,   1.4929113e-01f,   1.3754769e-01f,
    1.155031e-01f,    -5.197697e-02f,  1.3036744e-01f,   -1.7285077e-01f};
static float b_0[4] = {1.6660282e-03f, 3.4522448e-02f, 3.720612e-02f,
                       2.6852129e-02f};

void fy_1500_old_tk03_combined_detection_nncg::cnn(float x_0[16][16][1]) {
    static float x_1[18][18][1] = {0};
    static float x_2 alignas(16)[18][18][4] = {0};
    static float x_3 alignas(16)[16][16][4] = {0};
    static float x_4[10][10][4] = {0};
    static float x_5 alignas(16)[8][8][8] = {0};
    static float x_6[6][6][8] = {0};
    static float x_7 alignas(16)[4][4][8] = {0};
    static float x_8 alignas(16)[4][4][8] = {0};
    static float x_10[4] = {0};
    float* x_9;
    for (int i_61 = 0; i_61 < 16; i_61 += 1) {
        for (int i_60 = 0; i_60 < 16; i_60 += 1) {
            for (int i_59 = 0; i_59 < 1; i_59 += 1) {
                x_1[i_61 + 1][i_60 + 1][i_59 + 0] =
                    x_0[i_61 + 0][i_60 + 0][i_59 + 0] - 99;
            }
        }
    }
    for (int i_50 = 0; i_50 < 16; i_50 += 1) {
        for (int i_51 = 0; i_51 < 16; i_51 += 1) {
            for (int i_52 = 0; i_52 < 4; i_52 += 1) {
                x_2[i_50 + 1][i_51 + 1][i_52 + 0] = b_5[i_52 + 0];
            }
        }
    }
    for (int i_53 = 0; i_53 < 16; i_53 += 1) {
        for (int i_54 = 0; i_54 < 16; i_54 += 1) {
            for (int i_55 = 0; i_55 < 3; i_55 += 1) {
                for (int i_56 = 0; i_56 < 3; i_56 += 1) {
                    for (int i_57 = 0; i_57 < 1; i_57 += 1) {
                        for (int i_58 = 0; i_58 < 4; i_58 += 4) {
                            {
                                __m128 w, x, y;
                                w = _mm_load_ps(
                                    (float*)&w_5[i_55][i_56][i_57][i_58]);
                                x = _mm_load_ps1(
                                    &x_1[i_53 + i_55][i_54 + i_56][i_57]);
                                y = _mm_mul_ps(w, x);
                                x = _mm_load_ps(
                                    (float*)&x_2[i_53 / 1 + 1][i_54 / 1 + 1]
                                                [i_58 + 0]);
                                x = _mm_add_ps(x, y);
                                _mm_store_ps(
                                    (float*)&x_2[i_53 / 1 + 1][i_54 / 1 + 1]
                                                [i_58 + 0],
                                    x);
                            }
                        }
                    }
                }
            }
        }
    }
    for (int i_41 = 0; i_41 < 16; i_41 += 1) {
        for (int i_42 = 0; i_42 < 16; i_42 += 1) {
            for (int i_43 = 0; i_43 < 4; i_43 += 1) {
                x_3[i_41 + 0][i_42 + 0][i_43 + 0] = b_4[i_43 + 0];
            }
        }
    }
    for (int i_44 = 0; i_44 < 16; i_44 += 1) {
        for (int i_45 = 0; i_45 < 16; i_45 += 1) {
            for (int i_46 = 0; i_46 < 3; i_46 += 1) {
                for (int i_47 = 0; i_47 < 3; i_47 += 1) {
                    for (int i_48 = 0; i_48 < 4; i_48 += 1) {
                        for (int i_49 = 0; i_49 < 4; i_49 += 4) {
                            {
                                __m128 w, x, y;
                                w = _mm_load_ps(
                                    (float*)&w_4[i_46][i_47][i_48][i_49]);
                                x = _mm_load_ps1(
                                    &x_2[i_44 + i_46][i_45 + i_47][i_48]);
                                y = _mm_mul_ps(w, x);
                                x = _mm_load_ps(
                                    (float*)&x_3[i_44 / 1 + 0][i_45 / 1 + 0]
                                                [i_49 + 0]);
                                x = _mm_add_ps(x, y);
                                _mm_store_ps(
                                    (float*)&x_3[i_44 / 1 + 0][i_45 / 1 + 0]
                                                [i_49 + 0],
                                    x);
                            }
                        }
                    }
                }
            }
        }
    }
    for (int i_36 = 0; i_36 < 15; i_36 += 2) {
        for (int i_37 = 0; i_37 < 15; i_37 += 2) {
            for (int i_38 = 0; i_38 < 4; i_38 += 1) {
                x_4[i_36 / 2 + 1][i_37 / 2 + 1][i_38 + 0] =
                    x_3[i_36][i_37][i_38];
                for (int i_39 = 0; i_39 < 2; i_39 += 1) {
                    for (int i_40 = 0; i_40 < 2; i_40 += 1) {
                        x_4[i_36 / 2 + 1][i_37 / 2 + 1][i_38 + 0] =
                            x_3[i_36 + i_39][i_37 + i_40][i_38] >
                                    x_4[i_36 / 2 + 1][i_37 / 2 + 1][i_38 + 0]
                                ? x_3[i_36 + i_39][i_37 + i_40][i_38]
                                : x_4[i_36 / 2 + 1][i_37 / 2 + 1][i_38 + 0];
                    }
                }
            }
        }
    }
    for (int i_27 = 0; i_27 < 8; i_27 += 1) {
        for (int i_28 = 0; i_28 < 8; i_28 += 1) {
            for (int i_29 = 0; i_29 < 8; i_29 += 1) {
                x_5[i_27 + 0][i_28 + 0][i_29 + 0] = b_3[i_29 + 0];
            }
        }
    }
    for (int i_30 = 0; i_30 < 8; i_30 += 1) {
        for (int i_31 = 0; i_31 < 8; i_31 += 1) {
            for (int i_32 = 0; i_32 < 3; i_32 += 1) {
                for (int i_33 = 0; i_33 < 3; i_33 += 1) {
                    for (int i_34 = 0; i_34 < 4; i_34 += 1) {
                        for (int i_35 = 0; i_35 < 8; i_35 += 4) {
                            {
                                __m128 w, x, y;
                                w = _mm_load_ps(
                                    (float*)&w_3[i_32][i_33][i_34][i_35]);
                                x = _mm_load_ps1(
                                    &x_4[i_30 + i_32][i_31 + i_33][i_34]);
                                y = _mm_mul_ps(w, x);
                                x = _mm_load_ps(
                                    (float*)&x_5[i_30 / 1 + 0][i_31 / 1 + 0]
                                                [i_35 + 0]);
                                x = _mm_add_ps(x, y);
                                _mm_store_ps(
                                    (float*)&x_5[i_30 / 1 + 0][i_31 / 1 + 0]
                                                [i_35 + 0],
                                    x);
                            }
                        }
                    }
                }
            }
        }
    }
    for (int i_22 = 0; i_22 < 7; i_22 += 2) {
        for (int i_23 = 0; i_23 < 7; i_23 += 2) {
            for (int i_24 = 0; i_24 < 8; i_24 += 1) {
                x_6[i_22 / 2 + 1][i_23 / 2 + 1][i_24 + 0] =
                    x_5[i_22][i_23][i_24];
                for (int i_25 = 0; i_25 < 2; i_25 += 1) {
                    for (int i_26 = 0; i_26 < 2; i_26 += 1) {
                        x_6[i_22 / 2 + 1][i_23 / 2 + 1][i_24 + 0] =
                            x_5[i_22 + i_25][i_23 + i_26][i_24] >
                                    x_6[i_22 / 2 + 1][i_23 / 2 + 1][i_24 + 0]
                                ? x_5[i_22 + i_25][i_23 + i_26][i_24]
                                : x_6[i_22 / 2 + 1][i_23 / 2 + 1][i_24 + 0];
                    }
                }
            }
        }
    }
    for (int i_13 = 0; i_13 < 4; i_13 += 1) {
        for (int i_14 = 0; i_14 < 4; i_14 += 1) {
            for (int i_15 = 0; i_15 < 8; i_15 += 1) {
                x_7[i_13 + 0][i_14 + 0][i_15 + 0] = b_2[i_15 + 0];
            }
        }
    }
    for (int i_16 = 0; i_16 < 4; i_16 += 1) {
        for (int i_17 = 0; i_17 < 4; i_17 += 1) {
            for (int i_18 = 0; i_18 < 3; i_18 += 1) {
                for (int i_19 = 0; i_19 < 3; i_19 += 1) {
                    for (int i_20 = 0; i_20 < 8; i_20 += 1) {
                        for (int i_21 = 0; i_21 < 8; i_21 += 4) {
                            {
                                __m128 w, x, y;
                                w = _mm_load_ps(
                                    (float*)&w_2[i_18][i_19][i_20][i_21]);
                                x = _mm_load_ps1(
                                    &x_6[i_16 + i_18][i_17 + i_19][i_20]);
                                y = _mm_mul_ps(w, x);
                                x = _mm_load_ps(
                                    (float*)&x_7[i_16 / 1 + 0][i_17 / 1 + 0]
                                                [i_21 + 0]);
                                x = _mm_add_ps(x, y);
                                _mm_store_ps(
                                    (float*)&x_7[i_16 / 1 + 0][i_17 / 1 + 0]
                                                [i_21 + 0],
                                    x);
                            }
                        }
                    }
                }
            }
        }
    }
    for (int i_4 = 0; i_4 < 4; i_4 += 1) {
        for (int i_5 = 0; i_5 < 4; i_5 += 1) {
            for (int i_6 = 0; i_6 < 8; i_6 += 1) {
                x_8[i_4 + 0][i_5 + 0][i_6 + 0] = b_1[i_6 + 0];
            }
        }
    }
    for (int i_7 = 0; i_7 < 4; i_7 += 1) {
        for (int i_8 = 0; i_8 < 4; i_8 += 1) {
            for (int i_9 = 0; i_9 < 1; i_9 += 1) {
                for (int i_10 = 0; i_10 < 1; i_10 += 1) {
                    for (int i_11 = 0; i_11 < 8; i_11 += 1) {
                        for (int i_12 = 0; i_12 < 8; i_12 += 4) {
                            {
                                __m128 w, x, y;
                                w = _mm_load_ps(
                                    (float*)&w_1[i_9][i_10][i_11][i_12]);
                                x = _mm_load_ps1(
                                    &x_7[i_7 + i_9][i_8 + i_10][i_11]);
                                y = _mm_mul_ps(w, x);
                                x = _mm_load_ps(
                                    (float*)&x_8[i_7 / 1 + 0][i_8 / 1 + 0]
                                                [i_12 + 0]);
                                x = _mm_add_ps(x, y);
                                _mm_store_ps(
                                    (float*)&x_8[i_7 / 1 + 0][i_8 / 1 + 0]
                                                [i_12 + 0],
                                    x);
                            }
                        }
                    }
                }
            }
        }
    }
    x_9 = (float*)x_8;
    for (int i_1 = 0; i_1 < 4; i_1 += 1) {
        x_10[i_1 + 0] = b_0[i_1 + 0];
    }
    for (int i_2 = 0; i_2 < 128; i_2 += 1) {
        for (int i_3 = 0; i_3 < 4; i_3 += 4) {
            x_10[i_3 + 0] += x_9[i_2] * w_0[i_2][i_3];
            x_10[(i_3 + 1) + 0] += x_9[i_2] * w_0[i_2][(i_3 + 1)];
            x_10[(i_3 + 2) + 0] += x_9[i_2] * w_0[i_2][(i_3 + 2)];
            x_10[(i_3 + 3) + 0] += x_9[i_2] * w_0[i_2][(i_3 + 3)];
        }
    }
    for (int i_0 = 0; i_0 < 4; i_0 += 1) {
        scores[i_0 + 0] = x_10[i_0 + 0] < 0 ? 0 : x_10[i_0 + 0];
    }
}

void fy_1500_old_tk03_combined_detection_nncg::predict(
    const BallCandidates::PatchYUVClassified& patch,
    double meanBrightnessOffset) {
    ASSERT(patch.size() == 16);

    for (size_t x = 0; x < patch.size(); x++) {
        for (size_t y = 0; y < patch.size(); y++) {
            // TODO: check
            // .pixel.y accesses the brightness channel of the pixel
            // subtract the mean brightness calculated on the dataset and the
            // offset from the module parameters
            float value = (static_cast<float>(
                               (patch.data[patch.size() * x + y].pixel.y)) /
                           255.0f) -
                          -0.000000f - static_cast<float>(meanBrightnessOffset);
            in_step[y][x][0] = value;
        }
    }
    cnn(in_step);
}

double fy_1500_old_tk03_combined_detection_nncg::getRadius() {
    return scores[0];
}

Vector2d fy_1500_old_tk03_combined_detection_nncg::getCenter() {
    return Vector2d(scores[1], scores[2]);
}

double fy_1500_old_tk03_combined_detection_nncg::getBallConfidence() {
    return scores[3];
}
