option decide_game_state 
{  
  common decision {
    if (game.state == _initial_)
      goto _initial;
    else if (game.state == ready)
      goto ready;
    else if (game.state == set)
      goto set;
    else if (game.state == penalized)
      goto penalized;
    else if (game.state == finished)
      goto _initial;
    else if(game.state == playing)
      goto playing;
    else if(game.state == unknown)
      goto dont_know_what_to_do;
  }
    
  initial state _initial {
    action
    {
      game.current_mode = init;
      motion.type = init;
      arm.control_mode = normal;
      head.control_mode = stay_as_forced;
      situationStatusOwnHalf = true;
      last_state_was_penalized = false;
    }
  }
  
  state ready {
    action
    {
      game.current_mode = ready;
      motion.type = stand;
      arm.control_mode = back;
      head.control_mode = stay_as_forced;
      treat_lifted();
      fall_down_and_stand_up();
      last_state_was_penalized = false;
      situationStatusOwnHalf = (game.msecsRemaining >= 540000);
    }
  }
  
  state set {
    action
    {
      game.current_mode = set;
      motion.type = stand;
      arm.control_mode = back;
      head.control_mode = stay_as_forced;
      treat_lifted();
      situationStatusOwnHalf = true;
      last_state_was_penalized = false;
    }
  }
  
  
  state playing {
    action 
    {
      game.current_mode = playing;
      motion.type = stand;
      arm.control_mode = back;
      head.control_mode = stay_as_forced;
      treat_lifted();
      fall_down_and_stand_up();
      //achtung: don't set false
      //last_state_was_penalized = false;
    }
  }
  
  state penalized {
    action
    {
      game.current_mode = penalized;
      motion.type = stand;
      arm.control_mode = normal;
      head.control_mode = (state_time < 2000) ? look_straight_ahead : stay_as_forced;
      situationStatusOwnHalf = true;
      last_state_was_penalized = true;
    }
  }
  
  state finished {
    action
    {
      game.current_mode = finished;
      motion.type = stand;
      arm.control_mode = normal;
      head.control_mode = stay_as_forced;
      last_state_was_penalized = false;
    }
  }

  state dont_know_what_to_do {
    action
    {
      game.current_mode = unknown;
      motion.type = stand;
      arm.control_mode = normal;
      head.control_mode = stay_as_forced;
      last_state_was_penalized = false;
    }
  }
}
