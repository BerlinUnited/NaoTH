// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TeamMessage.proto

#ifndef PROTOBUF_TeamMessage_2eproto__INCLUDED
#define PROTOBUF_TeamMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommonTypes.pb.h"
#include "Framework-Representations.pb.h"
// @@protoc_insertion_point(includes)
namespace naothmessages {
class BUUserTeamMessage;
class BUUserTeamMessageDefaultTypeInternal;
extern BUUserTeamMessageDefaultTypeInternal _BUUserTeamMessage_default_instance_;
class Drops;
class DropsDefaultTypeInternal;
extern DropsDefaultTypeInternal _Drops_default_instance_;
class Ntp;
class NtpDefaultTypeInternal;
extern NtpDefaultTypeInternal _Ntp_default_instance_;
class Opponent;
class OpponentDefaultTypeInternal;
extern OpponentDefaultTypeInternal _Opponent_default_instance_;
class RobotRole;
class RobotRoleDefaultTypeInternal;
extern RobotRoleDefaultTypeInternal _RobotRole_default_instance_;
class TeamMessage;
class TeamMessageDefaultTypeInternal;
extern TeamMessageDefaultTypeInternal _TeamMessage_default_instance_;
class TeamMessage_Data;
class TeamMessage_DataDefaultTypeInternal;
extern TeamMessage_DataDefaultTypeInternal _TeamMessage_Data_default_instance_;
class TeamState;
class TeamStateDefaultTypeInternal;
extern TeamStateDefaultTypeInternal _TeamState_default_instance_;
class TeamState_Player;
class TeamState_PlayerDefaultTypeInternal;
extern TeamState_PlayerDefaultTypeInternal _TeamState_Player_default_instance_;
}  // namespace naothmessages

namespace naothmessages {

namespace protobuf_TeamMessage_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_TeamMessage_2eproto

enum TeamColor {
  blueTeam = 0,
  redTeam = 1,
  yellowTeam = 2,
  blackTeam = 3,
  whiteTeam = 4,
  greenTeam = 5,
  orangeTeam = 6,
  purpleTeam = 7,
  brownTeam = 8,
  grayTeam = 9,
  invalidTeam = 255
};
bool TeamColor_IsValid(int value);
const TeamColor TeamColor_MIN = blueTeam;
const TeamColor TeamColor_MAX = invalidTeam;
const int TeamColor_ARRAYSIZE = TeamColor_MAX + 1;

const ::google::protobuf::EnumDescriptor* TeamColor_descriptor();
inline const ::std::string& TeamColor_Name(TeamColor value) {
  return ::google::protobuf::internal::NameOfEnum(
    TeamColor_descriptor(), value);
}
inline bool TeamColor_Parse(
    const ::std::string& name, TeamColor* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TeamColor>(
    TeamColor_descriptor(), name, value);
}
enum RobotState {
  initial = 0,
  ready = 1,
  set = 2,
  playing = 3,
  finished = 4,
  penalized = 5,
  unstiff = 6
};
bool RobotState_IsValid(int value);
const RobotState RobotState_MIN = initial;
const RobotState RobotState_MAX = unstiff;
const int RobotState_ARRAYSIZE = RobotState_MAX + 1;

const ::google::protobuf::EnumDescriptor* RobotState_descriptor();
inline const ::std::string& RobotState_Name(RobotState value) {
  return ::google::protobuf::internal::NameOfEnum(
    RobotState_descriptor(), value);
}
inline bool RobotState_Parse(
    const ::std::string& name, RobotState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RobotState>(
    RobotState_descriptor(), name, value);
}
enum RobotRoleStatic {
  role_defender_left = 0,
  role_defender_center = 1,
  role_defender_right = 2,
  role_midfielder_left = 3,
  role_midfielder_center = 4,
  role_midfielder_right = 5,
  role_forward_left = 6,
  role_forward_center = 7,
  role_forward_right = 8,
  role_goalie = 9,
  role_unknown = 10
};
bool RobotRoleStatic_IsValid(int value);
const RobotRoleStatic RobotRoleStatic_MIN = role_defender_left;
const RobotRoleStatic RobotRoleStatic_MAX = role_unknown;
const int RobotRoleStatic_ARRAYSIZE = RobotRoleStatic_MAX + 1;

const ::google::protobuf::EnumDescriptor* RobotRoleStatic_descriptor();
inline const ::std::string& RobotRoleStatic_Name(RobotRoleStatic value) {
  return ::google::protobuf::internal::NameOfEnum(
    RobotRoleStatic_descriptor(), value);
}
inline bool RobotRoleStatic_Parse(
    const ::std::string& name, RobotRoleStatic* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RobotRoleStatic>(
    RobotRoleStatic_descriptor(), name, value);
}
enum RobotRoleDynamic {
  role_none = 0,
  role_supporter = 1,
  role_goalie_supporter = 2,
  role_striker = 3
};
bool RobotRoleDynamic_IsValid(int value);
const RobotRoleDynamic RobotRoleDynamic_MIN = role_none;
const RobotRoleDynamic RobotRoleDynamic_MAX = role_striker;
const int RobotRoleDynamic_ARRAYSIZE = RobotRoleDynamic_MAX + 1;

const ::google::protobuf::EnumDescriptor* RobotRoleDynamic_descriptor();
inline const ::std::string& RobotRoleDynamic_Name(RobotRoleDynamic value) {
  return ::google::protobuf::internal::NameOfEnum(
    RobotRoleDynamic_descriptor(), value);
}
inline bool RobotRoleDynamic_Parse(
    const ::std::string& name, RobotRoleDynamic* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RobotRoleDynamic>(
    RobotRoleDynamic_descriptor(), name, value);
}
// ===================================================================

class RobotRole : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.RobotRole) */ {
 public:
  RobotRole();
  virtual ~RobotRole();

  RobotRole(const RobotRole& from);

  inline RobotRole& operator=(const RobotRole& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RobotRole(RobotRole&& from) noexcept
    : RobotRole() {
    *this = ::std::move(from);
  }

  inline RobotRole& operator=(RobotRole&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotRole& default_instance();

  static inline const RobotRole* internal_default_instance() {
    return reinterpret_cast<const RobotRole*>(
               &_RobotRole_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RobotRole* other);
  friend void swap(RobotRole& a, RobotRole& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RobotRole* New() const PROTOBUF_FINAL { return New(NULL); }

  RobotRole* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RobotRole& from);
  void MergeFrom(const RobotRole& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RobotRole* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .naothmessages.RobotRoleDynamic role_dynamic = 2 [default = role_none];
  bool has_role_dynamic() const;
  void clear_role_dynamic();
  static const int kRoleDynamicFieldNumber = 2;
  ::naothmessages::RobotRoleDynamic role_dynamic() const;
  void set_role_dynamic(::naothmessages::RobotRoleDynamic value);

  // required .naothmessages.RobotRoleStatic role_static = 1 [default = role_unknown];
  bool has_role_static() const;
  void clear_role_static();
  static const int kRoleStaticFieldNumber = 1;
  ::naothmessages::RobotRoleStatic role_static() const;
  void set_role_static(::naothmessages::RobotRoleStatic value);

  // @@protoc_insertion_point(class_scope:naothmessages.RobotRole)
 private:
  void set_has_role_static();
  void clear_has_role_static();
  void set_has_role_dynamic();
  void clear_has_role_dynamic();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int role_dynamic_;
  int role_static_;
  friend struct protobuf_TeamMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Opponent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.Opponent) */ {
 public:
  Opponent();
  virtual ~Opponent();

  Opponent(const Opponent& from);

  inline Opponent& operator=(const Opponent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Opponent(Opponent&& from) noexcept
    : Opponent() {
    *this = ::std::move(from);
  }

  inline Opponent& operator=(Opponent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Opponent& default_instance();

  static inline const Opponent* internal_default_instance() {
    return reinterpret_cast<const Opponent*>(
               &_Opponent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Opponent* other);
  friend void swap(Opponent& a, Opponent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Opponent* New() const PROTOBUF_FINAL { return New(NULL); }

  Opponent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Opponent& from);
  void MergeFrom(const Opponent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Opponent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .naothmessages.Pose2D poseOnField = 2;
  bool has_poseonfield() const;
  void clear_poseonfield();
  static const int kPoseOnFieldFieldNumber = 2;
  const ::naothmessages::Pose2D& poseonfield() const;
  ::naothmessages::Pose2D* mutable_poseonfield();
  ::naothmessages::Pose2D* release_poseonfield();
  void set_allocated_poseonfield(::naothmessages::Pose2D* poseonfield);

  // required int32 playerNum = 1 [default = 0];
  bool has_playernum() const;
  void clear_playernum();
  static const int kPlayerNumFieldNumber = 1;
  ::google::protobuf::int32 playernum() const;
  void set_playernum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:naothmessages.Opponent)
 private:
  void set_has_playernum();
  void clear_has_playernum();
  void set_has_poseonfield();
  void clear_has_poseonfield();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::naothmessages::Pose2D* poseonfield_;
  ::google::protobuf::int32 playernum_;
  friend struct protobuf_TeamMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ntp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.Ntp) */ {
 public:
  Ntp();
  virtual ~Ntp();

  Ntp(const Ntp& from);

  inline Ntp& operator=(const Ntp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ntp(Ntp&& from) noexcept
    : Ntp() {
    *this = ::std::move(from);
  }

  inline Ntp& operator=(Ntp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ntp& default_instance();

  static inline const Ntp* internal_default_instance() {
    return reinterpret_cast<const Ntp*>(
               &_Ntp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Ntp* other);
  friend void swap(Ntp& a, Ntp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ntp* New() const PROTOBUF_FINAL { return New(NULL); }

  Ntp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ntp& from);
  void MergeFrom(const Ntp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ntp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 sent = 2 [default = 0];
  bool has_sent() const;
  void clear_sent();
  static const int kSentFieldNumber = 2;
  ::google::protobuf::uint64 sent() const;
  void set_sent(::google::protobuf::uint64 value);

  // optional uint64 received = 3 [default = 0];
  bool has_received() const;
  void clear_received();
  static const int kReceivedFieldNumber = 3;
  ::google::protobuf::uint64 received() const;
  void set_received(::google::protobuf::uint64 value);

  // required int32 playerNum = 1 [default = 0];
  bool has_playernum() const;
  void clear_playernum();
  static const int kPlayerNumFieldNumber = 1;
  ::google::protobuf::int32 playernum() const;
  void set_playernum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:naothmessages.Ntp)
 private:
  void set_has_playernum();
  void clear_has_playernum();
  void set_has_sent();
  void clear_has_sent();
  void set_has_received();
  void clear_has_received();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 sent_;
  ::google::protobuf::uint64 received_;
  ::google::protobuf::int32 playernum_;
  friend struct protobuf_TeamMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Drops : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.Drops) */ {
 public:
  Drops();
  virtual ~Drops();

  Drops(const Drops& from);

  inline Drops& operator=(const Drops& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Drops(Drops&& from) noexcept
    : Drops() {
    *this = ::std::move(from);
  }

  inline Drops& operator=(Drops&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Drops& default_instance();

  static inline const Drops* internal_default_instance() {
    return reinterpret_cast<const Drops*>(
               &_Drops_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Drops* other);
  friend void swap(Drops& a, Drops& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Drops* New() const PROTOBUF_FINAL { return New(NULL); }

  Drops* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Drops& from);
  void MergeFrom(const Drops& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Drops* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 dropNoSplMessage = 1 [default = 0];
  bool has_dropnosplmessage() const;
  void clear_dropnosplmessage();
  static const int kDropNoSplMessageFieldNumber = 1;
  ::google::protobuf::uint32 dropnosplmessage() const;
  void set_dropnosplmessage(::google::protobuf::uint32 value);

  // optional uint32 dropNotOurTeam = 2 [default = 0];
  bool has_dropnotourteam() const;
  void clear_dropnotourteam();
  static const int kDropNotOurTeamFieldNumber = 2;
  ::google::protobuf::uint32 dropnotourteam() const;
  void set_dropnotourteam(::google::protobuf::uint32 value);

  // optional uint32 dropNotParseable = 3 [default = 0];
  bool has_dropnotparseable() const;
  void clear_dropnotparseable();
  static const int kDropNotParseableFieldNumber = 3;
  ::google::protobuf::uint32 dropnotparseable() const;
  void set_dropnotparseable(::google::protobuf::uint32 value);

  // optional uint32 dropKeyFail = 4 [default = 0];
  bool has_dropkeyfail() const;
  void clear_dropkeyfail();
  static const int kDropKeyFailFieldNumber = 4;
  ::google::protobuf::uint32 dropkeyfail() const;
  void set_dropkeyfail(::google::protobuf::uint32 value);

  // optional uint32 dropMonotonic = 5 [default = 0];
  bool has_dropmonotonic() const;
  void clear_dropmonotonic();
  static const int kDropMonotonicFieldNumber = 5;
  ::google::protobuf::uint32 dropmonotonic() const;
  void set_dropmonotonic(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:naothmessages.Drops)
 private:
  void set_has_dropnosplmessage();
  void clear_has_dropnosplmessage();
  void set_has_dropnotourteam();
  void clear_has_dropnotourteam();
  void set_has_dropnotparseable();
  void clear_has_dropnotparseable();
  void set_has_dropkeyfail();
  void clear_has_dropkeyfail();
  void set_has_dropmonotonic();
  void clear_has_dropmonotonic();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 dropnosplmessage_;
  ::google::protobuf::uint32 dropnotourteam_;
  ::google::protobuf::uint32 dropnotparseable_;
  ::google::protobuf::uint32 dropkeyfail_;
  ::google::protobuf::uint32 dropmonotonic_;
  friend struct protobuf_TeamMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BUUserTeamMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.BUUserTeamMessage) */ {
 public:
  BUUserTeamMessage();
  virtual ~BUUserTeamMessage();

  BUUserTeamMessage(const BUUserTeamMessage& from);

  inline BUUserTeamMessage& operator=(const BUUserTeamMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BUUserTeamMessage(BUUserTeamMessage&& from) noexcept
    : BUUserTeamMessage() {
    *this = ::std::move(from);
  }

  inline BUUserTeamMessage& operator=(BUUserTeamMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BUUserTeamMessage& default_instance();

  static inline const BUUserTeamMessage* internal_default_instance() {
    return reinterpret_cast<const BUUserTeamMessage*>(
               &_BUUserTeamMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(BUUserTeamMessage* other);
  friend void swap(BUUserTeamMessage& a, BUUserTeamMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BUUserTeamMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  BUUserTeamMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BUUserTeamMessage& from);
  void MergeFrom(const BUUserTeamMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BUUserTeamMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .naothmessages.Opponent opponents = 5;
  int opponents_size() const;
  void clear_opponents();
  static const int kOpponentsFieldNumber = 5;
  const ::naothmessages::Opponent& opponents(int index) const;
  ::naothmessages::Opponent* mutable_opponents(int index);
  ::naothmessages::Opponent* add_opponents();
  ::google::protobuf::RepeatedPtrField< ::naothmessages::Opponent >*
      mutable_opponents();
  const ::google::protobuf::RepeatedPtrField< ::naothmessages::Opponent >&
      opponents() const;

  // repeated .naothmessages.Ntp ntpRequest = 15;
  int ntprequest_size() const;
  void clear_ntprequest();
  static const int kNtpRequestFieldNumber = 15;
  const ::naothmessages::Ntp& ntprequest(int index) const;
  ::naothmessages::Ntp* mutable_ntprequest(int index);
  ::naothmessages::Ntp* add_ntprequest();
  ::google::protobuf::RepeatedPtrField< ::naothmessages::Ntp >*
      mutable_ntprequest();
  const ::google::protobuf::RepeatedPtrField< ::naothmessages::Ntp >&
      ntprequest() const;

  // optional string bodyID = 1 [default = "unknown"];
  bool has_bodyid() const;
  void clear_bodyid();
  static const int kBodyIDFieldNumber = 1;
  const ::std::string& bodyid() const;
  void set_bodyid(const ::std::string& value);
  #if LANG_CXX11
  void set_bodyid(::std::string&& value);
  #endif
  void set_bodyid(const char* value);
  void set_bodyid(const char* value, size_t size);
  ::std::string* mutable_bodyid();
  ::std::string* release_bodyid();
  void set_allocated_bodyid(::std::string* bodyid);

  // optional string key = 100 [default = "none"];
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 100;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional .naothmessages.DoubleVector2 teamBall = 14;
  bool has_teamball() const;
  void clear_teamball();
  static const int kTeamBallFieldNumber = 14;
  const ::naothmessages::DoubleVector2& teamball() const;
  ::naothmessages::DoubleVector2* mutable_teamball();
  ::naothmessages::DoubleVector2* release_teamball();
  void set_allocated_teamball(::naothmessages::DoubleVector2* teamball);

  // optional .naothmessages.DoubleVector2 ballVelocity = 16;
  bool has_ballvelocity() const;
  void clear_ballvelocity();
  static const int kBallVelocityFieldNumber = 16;
  const ::naothmessages::DoubleVector2& ballvelocity() const;
  ::naothmessages::DoubleVector2* mutable_ballvelocity();
  ::naothmessages::DoubleVector2* release_ballvelocity();
  void set_allocated_ballvelocity(::naothmessages::DoubleVector2* ballvelocity);

  // optional .naothmessages.RobotRole robotRole = 18;
  bool has_robotrole() const;
  void clear_robotrole();
  static const int kRobotRoleFieldNumber = 18;
  const ::naothmessages::RobotRole& robotrole() const;
  ::naothmessages::RobotRole* mutable_robotrole();
  ::naothmessages::RobotRole* release_robotrole();
  void set_allocated_robotrole(::naothmessages::RobotRole* robotrole);

  // optional uint32 timeToBall = 2;
  bool has_timetoball() const;
  void clear_timetoball();
  static const int kTimeToBallFieldNumber = 2;
  ::google::protobuf::uint32 timetoball() const;
  void set_timetoball(::google::protobuf::uint32 value);

  // optional uint32 teamNumber = 6 [default = 0, deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_teamnumber() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_teamnumber();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kTeamNumberFieldNumber = 6;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::uint32 teamnumber() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_teamnumber(::google::protobuf::uint32 value);

  // optional bool wasStriker = 3 [default = false];
  bool has_wasstriker() const;
  void clear_wasstriker();
  static const int kWasStrikerFieldNumber = 3;
  bool wasstriker() const;
  void set_wasstriker(bool value);

  // optional bool isPenalized = 4 [default = false, deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_ispenalized() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_ispenalized();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kIsPenalizedFieldNumber = 4;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool ispenalized() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_ispenalized(bool value);

  // optional bool wantsToBeStriker = 10 [default = false];
  bool has_wantstobestriker() const;
  void clear_wantstobestriker();
  static const int kWantsToBeStrikerFieldNumber = 10;
  bool wantstobestriker() const;
  void set_wantstobestriker(bool value);

  // optional bool whistleDetected = 12 [default = false];
  bool has_whistledetected() const;
  void clear_whistledetected();
  static const int kWhistleDetectedFieldNumber = 12;
  bool whistledetected() const;
  void set_whistledetected(bool value);

  // optional float temperature = 8 [default = 0];
  bool has_temperature() const;
  void clear_temperature();
  static const int kTemperatureFieldNumber = 8;
  float temperature() const;
  void set_temperature(float value);

  // optional uint64 timestamp = 9 [default = 0];
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 9;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // optional float cpuTemperature = 11 [default = 0];
  bool has_cputemperature() const;
  void clear_cputemperature();
  static const int kCpuTemperatureFieldNumber = 11;
  float cputemperature() const;
  void set_cputemperature(float value);

  // optional int32 whistleCount = 13 [default = 0];
  bool has_whistlecount() const;
  void clear_whistlecount();
  static const int kWhistleCountFieldNumber = 13;
  ::google::protobuf::int32 whistlecount() const;
  void set_whistlecount(::google::protobuf::int32 value);

  // optional .naothmessages.RobotState robotState = 17 [default = initial];
  bool has_robotstate() const;
  void clear_robotstate();
  static const int kRobotStateFieldNumber = 17;
  ::naothmessages::RobotState robotstate() const;
  void set_robotstate(::naothmessages::RobotState value);

  // optional bool readyToWalk = 19;
  bool has_readytowalk() const;
  void clear_readytowalk();
  static const int kReadyToWalkFieldNumber = 19;
  bool readytowalk() const;
  void set_readytowalk(bool value);

  // optional float batteryCharge = 7 [default = 1];
  bool has_batterycharge() const;
  void clear_batterycharge();
  static const int kBatteryChargeFieldNumber = 7;
  float batterycharge() const;
  void set_batterycharge(float value);

  // @@protoc_insertion_point(class_scope:naothmessages.BUUserTeamMessage)
 private:
  void set_has_bodyid();
  void clear_has_bodyid();
  void set_has_timetoball();
  void clear_has_timetoball();
  void set_has_wasstriker();
  void clear_has_wasstriker();
  void set_has_ispenalized();
  void clear_has_ispenalized();
  void set_has_teamnumber();
  void clear_has_teamnumber();
  void set_has_batterycharge();
  void clear_has_batterycharge();
  void set_has_temperature();
  void clear_has_temperature();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_wantstobestriker();
  void clear_has_wantstobestriker();
  void set_has_cputemperature();
  void clear_has_cputemperature();
  void set_has_whistledetected();
  void clear_has_whistledetected();
  void set_has_whistlecount();
  void clear_has_whistlecount();
  void set_has_teamball();
  void clear_has_teamball();
  void set_has_ballvelocity();
  void clear_has_ballvelocity();
  void set_has_robotstate();
  void clear_has_robotstate();
  void set_has_robotrole();
  void clear_has_robotrole();
  void set_has_readytowalk();
  void clear_has_readytowalk();
  void set_has_key();
  void clear_has_key();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::naothmessages::Opponent > opponents_;
  ::google::protobuf::RepeatedPtrField< ::naothmessages::Ntp > ntprequest_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_bodyid_;
  ::google::protobuf::internal::ArenaStringPtr bodyid_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_key_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::naothmessages::DoubleVector2* teamball_;
  ::naothmessages::DoubleVector2* ballvelocity_;
  ::naothmessages::RobotRole* robotrole_;
  ::google::protobuf::uint32 timetoball_;
  ::google::protobuf::uint32 teamnumber_;
  bool wasstriker_;
  bool ispenalized_;
  bool wantstobestriker_;
  bool whistledetected_;
  float temperature_;
  ::google::protobuf::uint64 timestamp_;
  float cputemperature_;
  ::google::protobuf::int32 whistlecount_;
  int robotstate_;
  bool readytowalk_;
  float batterycharge_;
  friend struct protobuf_TeamMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamMessage_Data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.TeamMessage.Data) */ {
 public:
  TeamMessage_Data();
  virtual ~TeamMessage_Data();

  TeamMessage_Data(const TeamMessage_Data& from);

  inline TeamMessage_Data& operator=(const TeamMessage_Data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamMessage_Data(TeamMessage_Data&& from) noexcept
    : TeamMessage_Data() {
    *this = ::std::move(from);
  }

  inline TeamMessage_Data& operator=(TeamMessage_Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamMessage_Data& default_instance();

  static inline const TeamMessage_Data* internal_default_instance() {
    return reinterpret_cast<const TeamMessage_Data*>(
               &_TeamMessage_Data_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(TeamMessage_Data* other);
  friend void swap(TeamMessage_Data& a, TeamMessage_Data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamMessage_Data* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamMessage_Data* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamMessage_Data& from);
  void MergeFrom(const TeamMessage_Data& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamMessage_Data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .naothmessages.Pose2D pose = 3;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 3;
  const ::naothmessages::Pose2D& pose() const;
  ::naothmessages::Pose2D* mutable_pose();
  ::naothmessages::Pose2D* release_pose();
  void set_allocated_pose(::naothmessages::Pose2D* pose);

  // optional .naothmessages.DoubleVector2 ballPosition = 5;
  bool has_ballposition() const;
  void clear_ballposition();
  static const int kBallPositionFieldNumber = 5;
  const ::naothmessages::DoubleVector2& ballposition() const;
  ::naothmessages::DoubleVector2* mutable_ballposition();
  ::naothmessages::DoubleVector2* release_ballposition();
  void set_allocated_ballposition(::naothmessages::DoubleVector2* ballposition);

  // optional .naothmessages.DoubleVector2 ballVelocity = 6;
  bool has_ballvelocity() const;
  void clear_ballvelocity();
  static const int kBallVelocityFieldNumber = 6;
  const ::naothmessages::DoubleVector2& ballvelocity() const;
  ::naothmessages::DoubleVector2* mutable_ballvelocity();
  ::naothmessages::DoubleVector2* release_ballvelocity();
  void set_allocated_ballvelocity(::naothmessages::DoubleVector2* ballvelocity);

  // optional .naothmessages.BUUserTeamMessage user = 8;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 8;
  const ::naothmessages::BUUserTeamMessage& user() const;
  ::naothmessages::BUUserTeamMessage* mutable_user();
  ::naothmessages::BUUserTeamMessage* release_user();
  void set_allocated_user(::naothmessages::BUUserTeamMessage* user);

  // optional .naothmessages.FrameInfo frameInfo = 9;
  bool has_frameinfo() const;
  void clear_frameinfo();
  static const int kFrameInfoFieldNumber = 9;
  const ::naothmessages::FrameInfo& frameinfo() const;
  ::naothmessages::FrameInfo* mutable_frameinfo();
  ::naothmessages::FrameInfo* release_frameinfo();
  void set_allocated_frameinfo(::naothmessages::FrameInfo* frameinfo);

  // optional uint32 playerNum = 1 [default = 0];
  bool has_playernum() const;
  void clear_playernum();
  static const int kPlayerNumFieldNumber = 1;
  ::google::protobuf::uint32 playernum() const;
  void set_playernum(::google::protobuf::uint32 value);

  // optional bool fallen = 10 [default = false];
  bool has_fallen() const;
  void clear_fallen();
  static const int kFallenFieldNumber = 10;
  bool fallen() const;
  void set_fallen(bool value);

  // optional .naothmessages.TeamColor teamColor = 11 [default = blueTeam, deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_teamcolor() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_teamcolor();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kTeamColorFieldNumber = 11;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::naothmessages::TeamColor teamcolor() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_teamcolor(::naothmessages::TeamColor value);

  // optional uint32 teamNumber = 12 [default = 0];
  bool has_teamnumber() const;
  void clear_teamnumber();
  static const int kTeamNumberFieldNumber = 12;
  ::google::protobuf::uint32 teamnumber() const;
  void set_teamnumber(::google::protobuf::uint32 value);

  // optional int32 ballAge = 4 [default = -1];
  bool has_ballage() const;
  void clear_ballage();
  static const int kBallAgeFieldNumber = 4;
  ::google::protobuf::int32 ballage() const;
  void set_ballage(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:naothmessages.TeamMessage.Data)
 private:
  void set_has_playernum();
  void clear_has_playernum();
  void set_has_teamcolor();
  void clear_has_teamcolor();
  void set_has_pose();
  void clear_has_pose();
  void set_has_ballage();
  void clear_has_ballage();
  void set_has_ballposition();
  void clear_has_ballposition();
  void set_has_ballvelocity();
  void clear_has_ballvelocity();
  void set_has_fallen();
  void clear_has_fallen();
  void set_has_user();
  void clear_has_user();
  void set_has_frameinfo();
  void clear_has_frameinfo();
  void set_has_teamnumber();
  void clear_has_teamnumber();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::naothmessages::Pose2D* pose_;
  ::naothmessages::DoubleVector2* ballposition_;
  ::naothmessages::DoubleVector2* ballvelocity_;
  ::naothmessages::BUUserTeamMessage* user_;
  ::naothmessages::FrameInfo* frameinfo_;
  ::google::protobuf::uint32 playernum_;
  bool fallen_;
  int teamcolor_;
  ::google::protobuf::uint32 teamnumber_;
  ::google::protobuf::int32 ballage_;
  friend struct protobuf_TeamMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.TeamMessage) */ {
 public:
  TeamMessage();
  virtual ~TeamMessage();

  TeamMessage(const TeamMessage& from);

  inline TeamMessage& operator=(const TeamMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamMessage(TeamMessage&& from) noexcept
    : TeamMessage() {
    *this = ::std::move(from);
  }

  inline TeamMessage& operator=(TeamMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamMessage& default_instance();

  static inline const TeamMessage* internal_default_instance() {
    return reinterpret_cast<const TeamMessage*>(
               &_TeamMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(TeamMessage* other);
  friend void swap(TeamMessage& a, TeamMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamMessage& from);
  void MergeFrom(const TeamMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TeamMessage_Data Data;

  // accessors -------------------------------------------------------

  // repeated .naothmessages.TeamMessage.Data data = 1;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::naothmessages::TeamMessage_Data& data(int index) const;
  ::naothmessages::TeamMessage_Data* mutable_data(int index);
  ::naothmessages::TeamMessage_Data* add_data();
  ::google::protobuf::RepeatedPtrField< ::naothmessages::TeamMessage_Data >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::naothmessages::TeamMessage_Data >&
      data() const;

  // optional .naothmessages.Drops messageDrop = 2;
  bool has_messagedrop() const;
  void clear_messagedrop();
  static const int kMessageDropFieldNumber = 2;
  const ::naothmessages::Drops& messagedrop() const;
  ::naothmessages::Drops* mutable_messagedrop();
  ::naothmessages::Drops* release_messagedrop();
  void set_allocated_messagedrop(::naothmessages::Drops* messagedrop);

  // @@protoc_insertion_point(class_scope:naothmessages.TeamMessage)
 private:
  void set_has_messagedrop();
  void clear_has_messagedrop();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::naothmessages::TeamMessage_Data > data_;
  ::naothmessages::Drops* messagedrop_;
  friend struct protobuf_TeamMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamState_Player : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.TeamState.Player) */ {
 public:
  TeamState_Player();
  virtual ~TeamState_Player();

  TeamState_Player(const TeamState_Player& from);

  inline TeamState_Player& operator=(const TeamState_Player& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamState_Player(TeamState_Player&& from) noexcept
    : TeamState_Player() {
    *this = ::std::move(from);
  }

  inline TeamState_Player& operator=(TeamState_Player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamState_Player& default_instance();

  static inline const TeamState_Player* internal_default_instance() {
    return reinterpret_cast<const TeamState_Player*>(
               &_TeamState_Player_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(TeamState_Player* other);
  friend void swap(TeamState_Player& a, TeamState_Player& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamState_Player* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamState_Player* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamState_Player& from);
  void MergeFrom(const TeamState_Player& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamState_Player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .naothmessages.Ntp ntpRequest = 5;
  int ntprequest_size() const;
  void clear_ntprequest();
  static const int kNtpRequestFieldNumber = 5;
  const ::naothmessages::Ntp& ntprequest(int index) const;
  ::naothmessages::Ntp* mutable_ntprequest(int index);
  ::naothmessages::Ntp* add_ntprequest();
  ::google::protobuf::RepeatedPtrField< ::naothmessages::Ntp >*
      mutable_ntprequest();
  const ::google::protobuf::RepeatedPtrField< ::naothmessages::Ntp >&
      ntprequest() const;

  // optional .naothmessages.FrameInfo messageFrameInfo = 2;
  bool has_messageframeinfo() const;
  void clear_messageframeinfo();
  static const int kMessageFrameInfoFieldNumber = 2;
  const ::naothmessages::FrameInfo& messageframeinfo() const;
  ::naothmessages::FrameInfo* mutable_messageframeinfo();
  ::naothmessages::FrameInfo* release_messageframeinfo();
  void set_allocated_messageframeinfo(::naothmessages::FrameInfo* messageframeinfo);

  // optional .naothmessages.Pose2D pose = 13;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 13;
  const ::naothmessages::Pose2D& pose() const;
  ::naothmessages::Pose2D* mutable_pose();
  ::naothmessages::Pose2D* release_pose();
  void set_allocated_pose(::naothmessages::Pose2D* pose);

  // optional .naothmessages.DoubleVector2 ballPosition = 17;
  bool has_ballposition() const;
  void clear_ballposition();
  static const int kBallPositionFieldNumber = 17;
  const ::naothmessages::DoubleVector2& ballposition() const;
  ::naothmessages::DoubleVector2* mutable_ballposition();
  ::naothmessages::DoubleVector2* release_ballposition();
  void set_allocated_ballposition(::naothmessages::DoubleVector2* ballposition);

  // optional .naothmessages.RobotRole robotRole = 25;
  bool has_robotrole() const;
  void clear_robotrole();
  static const int kRobotRoleFieldNumber = 25;
  const ::naothmessages::RobotRole& robotrole() const;
  ::naothmessages::RobotRole* mutable_robotrole();
  ::naothmessages::RobotRole* release_robotrole();
  void set_allocated_robotrole(::naothmessages::RobotRole* robotrole);

  // optional uint64 messageParsed = 3;
  bool has_messageparsed() const;
  void clear_messageparsed();
  static const int kMessageParsedFieldNumber = 3;
  ::google::protobuf::uint64 messageparsed() const;
  void set_messageparsed(::google::protobuf::uint64 value);

  // optional uint64 messageTimestamp = 4;
  bool has_messagetimestamp() const;
  void clear_messagetimestamp();
  static const int kMessageTimestampFieldNumber = 4;
  ::google::protobuf::uint64 messagetimestamp() const;
  void set_messagetimestamp(::google::protobuf::uint64 value);

  // optional uint32 number = 1 [default = 0];
  bool has_number() const;
  void clear_number();
  static const int kNumberFieldNumber = 1;
  ::google::protobuf::uint32 number() const;
  void set_number(::google::protobuf::uint32 value);

  // optional .naothmessages.RobotState robotState = 7 [default = initial];
  bool has_robotstate() const;
  void clear_robotstate();
  static const int kRobotStateFieldNumber = 7;
  ::naothmessages::RobotState robotstate() const;
  void set_robotstate(::naothmessages::RobotState value);

  // optional uint64 ntpRequestUpdate = 6;
  bool has_ntprequestupdate() const;
  void clear_ntprequestupdate();
  static const int kNtpRequestUpdateFieldNumber = 6;
  ::google::protobuf::uint64 ntprequestupdate() const;
  void set_ntprequestupdate(::google::protobuf::uint64 value);

  // optional uint64 robotStateUpdate = 8;
  bool has_robotstateupdate() const;
  void clear_robotstateupdate();
  static const int kRobotStateUpdateFieldNumber = 8;
  ::google::protobuf::uint64 robotstateupdate() const;
  void set_robotstateupdate(::google::protobuf::uint64 value);

  // optional uint64 fallenUpdate = 10;
  bool has_fallenupdate() const;
  void clear_fallenupdate();
  static const int kFallenUpdateFieldNumber = 10;
  ::google::protobuf::uint64 fallenupdate() const;
  void set_fallenupdate(::google::protobuf::uint64 value);

  // optional uint64 readyToWalkUpdate = 12;
  bool has_readytowalkupdate() const;
  void clear_readytowalkupdate();
  static const int kReadyToWalkUpdateFieldNumber = 12;
  ::google::protobuf::uint64 readytowalkupdate() const;
  void set_readytowalkupdate(::google::protobuf::uint64 value);

  // optional uint64 poseUpdate = 14;
  bool has_poseupdate() const;
  void clear_poseupdate();
  static const int kPoseUpdateFieldNumber = 14;
  ::google::protobuf::uint64 poseupdate() const;
  void set_poseupdate(::google::protobuf::uint64 value);

  // optional uint64 ballAgeUpdate = 16;
  bool has_ballageupdate() const;
  void clear_ballageupdate();
  static const int kBallAgeUpdateFieldNumber = 16;
  ::google::protobuf::uint64 ballageupdate() const;
  void set_ballageupdate(::google::protobuf::uint64 value);

  // optional bool fallen = 9 [default = false];
  bool has_fallen() const;
  void clear_fallen();
  static const int kFallenFieldNumber = 9;
  bool fallen() const;
  void set_fallen(bool value);

  // optional bool readyToWalk = 11;
  bool has_readytowalk() const;
  void clear_readytowalk();
  static const int kReadyToWalkFieldNumber = 11;
  bool readytowalk() const;
  void set_readytowalk(bool value);

  // optional bool wantsToBeStriker = 21 [default = false];
  bool has_wantstobestriker() const;
  void clear_wantstobestriker();
  static const int kWantsToBeStrikerFieldNumber = 21;
  bool wantstobestriker() const;
  void set_wantstobestriker(bool value);

  // optional bool wasStriker = 23 [default = false];
  bool has_wasstriker() const;
  void clear_wasstriker();
  static const int kWasStrikerFieldNumber = 23;
  bool wasstriker() const;
  void set_wasstriker(bool value);

  // optional uint32 timeToBall = 19;
  bool has_timetoball() const;
  void clear_timetoball();
  static const int kTimeToBallFieldNumber = 19;
  ::google::protobuf::uint32 timetoball() const;
  void set_timetoball(::google::protobuf::uint32 value);

  // optional uint64 ballPositionUpdate = 18;
  bool has_ballpositionupdate() const;
  void clear_ballpositionupdate();
  static const int kBallPositionUpdateFieldNumber = 18;
  ::google::protobuf::uint64 ballpositionupdate() const;
  void set_ballpositionupdate(::google::protobuf::uint64 value);

  // optional uint64 timeToBallUpdate = 20;
  bool has_timetoballupdate() const;
  void clear_timetoballupdate();
  static const int kTimeToBallUpdateFieldNumber = 20;
  ::google::protobuf::uint64 timetoballupdate() const;
  void set_timetoballupdate(::google::protobuf::uint64 value);

  // optional uint64 wantsToBeStrikerUpdate = 22;
  bool has_wantstobestrikerupdate() const;
  void clear_wantstobestrikerupdate();
  static const int kWantsToBeStrikerUpdateFieldNumber = 22;
  ::google::protobuf::uint64 wantstobestrikerupdate() const;
  void set_wantstobestrikerupdate(::google::protobuf::uint64 value);

  // optional uint64 wasStrikerUpdate = 24;
  bool has_wasstrikerupdate() const;
  void clear_wasstrikerupdate();
  static const int kWasStrikerUpdateFieldNumber = 24;
  ::google::protobuf::uint64 wasstrikerupdate() const;
  void set_wasstrikerupdate(::google::protobuf::uint64 value);

  // optional uint64 robotRoleUpdate = 26;
  bool has_robotroleupdate() const;
  void clear_robotroleupdate();
  static const int kRobotRoleUpdateFieldNumber = 26;
  ::google::protobuf::uint64 robotroleupdate() const;
  void set_robotroleupdate(::google::protobuf::uint64 value);

  // optional int32 ballAge = 15 [default = -1];
  bool has_ballage() const;
  void clear_ballage();
  static const int kBallAgeFieldNumber = 15;
  ::google::protobuf::int32 ballage() const;
  void set_ballage(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:naothmessages.TeamState.Player)
 private:
  void set_has_number();
  void clear_has_number();
  void set_has_messageframeinfo();
  void clear_has_messageframeinfo();
  void set_has_messageparsed();
  void clear_has_messageparsed();
  void set_has_messagetimestamp();
  void clear_has_messagetimestamp();
  void set_has_ntprequestupdate();
  void clear_has_ntprequestupdate();
  void set_has_robotstate();
  void clear_has_robotstate();
  void set_has_robotstateupdate();
  void clear_has_robotstateupdate();
  void set_has_fallen();
  void clear_has_fallen();
  void set_has_fallenupdate();
  void clear_has_fallenupdate();
  void set_has_readytowalk();
  void clear_has_readytowalk();
  void set_has_readytowalkupdate();
  void clear_has_readytowalkupdate();
  void set_has_pose();
  void clear_has_pose();
  void set_has_poseupdate();
  void clear_has_poseupdate();
  void set_has_ballage();
  void clear_has_ballage();
  void set_has_ballageupdate();
  void clear_has_ballageupdate();
  void set_has_ballposition();
  void clear_has_ballposition();
  void set_has_ballpositionupdate();
  void clear_has_ballpositionupdate();
  void set_has_timetoball();
  void clear_has_timetoball();
  void set_has_timetoballupdate();
  void clear_has_timetoballupdate();
  void set_has_wantstobestriker();
  void clear_has_wantstobestriker();
  void set_has_wantstobestrikerupdate();
  void clear_has_wantstobestrikerupdate();
  void set_has_wasstriker();
  void clear_has_wasstriker();
  void set_has_wasstrikerupdate();
  void clear_has_wasstrikerupdate();
  void set_has_robotrole();
  void clear_has_robotrole();
  void set_has_robotroleupdate();
  void clear_has_robotroleupdate();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::naothmessages::Ntp > ntprequest_;
  ::naothmessages::FrameInfo* messageframeinfo_;
  ::naothmessages::Pose2D* pose_;
  ::naothmessages::DoubleVector2* ballposition_;
  ::naothmessages::RobotRole* robotrole_;
  ::google::protobuf::uint64 messageparsed_;
  ::google::protobuf::uint64 messagetimestamp_;
  ::google::protobuf::uint32 number_;
  int robotstate_;
  ::google::protobuf::uint64 ntprequestupdate_;
  ::google::protobuf::uint64 robotstateupdate_;
  ::google::protobuf::uint64 fallenupdate_;
  ::google::protobuf::uint64 readytowalkupdate_;
  ::google::protobuf::uint64 poseupdate_;
  ::google::protobuf::uint64 ballageupdate_;
  bool fallen_;
  bool readytowalk_;
  bool wantstobestriker_;
  bool wasstriker_;
  ::google::protobuf::uint32 timetoball_;
  ::google::protobuf::uint64 ballpositionupdate_;
  ::google::protobuf::uint64 timetoballupdate_;
  ::google::protobuf::uint64 wantstobestrikerupdate_;
  ::google::protobuf::uint64 wasstrikerupdate_;
  ::google::protobuf::uint64 robotroleupdate_;
  ::google::protobuf::int32 ballage_;
  friend struct protobuf_TeamMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.TeamState) */ {
 public:
  TeamState();
  virtual ~TeamState();

  TeamState(const TeamState& from);

  inline TeamState& operator=(const TeamState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamState(TeamState&& from) noexcept
    : TeamState() {
    *this = ::std::move(from);
  }

  inline TeamState& operator=(TeamState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamState& default_instance();

  static inline const TeamState* internal_default_instance() {
    return reinterpret_cast<const TeamState*>(
               &_TeamState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(TeamState* other);
  friend void swap(TeamState& a, TeamState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamState* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamState& from);
  void MergeFrom(const TeamState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TeamState_Player Player;

  // accessors -------------------------------------------------------

  // repeated .naothmessages.TeamState.Player players = 1;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 1;
  const ::naothmessages::TeamState_Player& players(int index) const;
  ::naothmessages::TeamState_Player* mutable_players(int index);
  ::naothmessages::TeamState_Player* add_players();
  ::google::protobuf::RepeatedPtrField< ::naothmessages::TeamState_Player >*
      mutable_players();
  const ::google::protobuf::RepeatedPtrField< ::naothmessages::TeamState_Player >&
      players() const;

  // @@protoc_insertion_point(class_scope:naothmessages.TeamState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::naothmessages::TeamState_Player > players_;
  friend struct protobuf_TeamMessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RobotRole

// required .naothmessages.RobotRoleStatic role_static = 1 [default = role_unknown];
inline bool RobotRole::has_role_static() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotRole::set_has_role_static() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotRole::clear_has_role_static() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobotRole::clear_role_static() {
  role_static_ = 10;
  clear_has_role_static();
}
inline ::naothmessages::RobotRoleStatic RobotRole::role_static() const {
  // @@protoc_insertion_point(field_get:naothmessages.RobotRole.role_static)
  return static_cast< ::naothmessages::RobotRoleStatic >(role_static_);
}
inline void RobotRole::set_role_static(::naothmessages::RobotRoleStatic value) {
  assert(::naothmessages::RobotRoleStatic_IsValid(value));
  set_has_role_static();
  role_static_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.RobotRole.role_static)
}

// required .naothmessages.RobotRoleDynamic role_dynamic = 2 [default = role_none];
inline bool RobotRole::has_role_dynamic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotRole::set_has_role_dynamic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotRole::clear_has_role_dynamic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotRole::clear_role_dynamic() {
  role_dynamic_ = 0;
  clear_has_role_dynamic();
}
inline ::naothmessages::RobotRoleDynamic RobotRole::role_dynamic() const {
  // @@protoc_insertion_point(field_get:naothmessages.RobotRole.role_dynamic)
  return static_cast< ::naothmessages::RobotRoleDynamic >(role_dynamic_);
}
inline void RobotRole::set_role_dynamic(::naothmessages::RobotRoleDynamic value) {
  assert(::naothmessages::RobotRoleDynamic_IsValid(value));
  set_has_role_dynamic();
  role_dynamic_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.RobotRole.role_dynamic)
}

// -------------------------------------------------------------------

// Opponent

// required int32 playerNum = 1 [default = 0];
inline bool Opponent::has_playernum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Opponent::set_has_playernum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Opponent::clear_has_playernum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Opponent::clear_playernum() {
  playernum_ = 0;
  clear_has_playernum();
}
inline ::google::protobuf::int32 Opponent::playernum() const {
  // @@protoc_insertion_point(field_get:naothmessages.Opponent.playerNum)
  return playernum_;
}
inline void Opponent::set_playernum(::google::protobuf::int32 value) {
  set_has_playernum();
  playernum_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.Opponent.playerNum)
}

// optional .naothmessages.Pose2D poseOnField = 2;
inline bool Opponent::has_poseonfield() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Opponent::set_has_poseonfield() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Opponent::clear_has_poseonfield() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Opponent::clear_poseonfield() {
  if (poseonfield_ != NULL) poseonfield_->::naothmessages::Pose2D::Clear();
  clear_has_poseonfield();
}
inline const ::naothmessages::Pose2D& Opponent::poseonfield() const {
  const ::naothmessages::Pose2D* p = poseonfield_;
  // @@protoc_insertion_point(field_get:naothmessages.Opponent.poseOnField)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::Pose2D*>(
      &::naothmessages::_Pose2D_default_instance_);
}
inline ::naothmessages::Pose2D* Opponent::mutable_poseonfield() {
  set_has_poseonfield();
  if (poseonfield_ == NULL) {
    poseonfield_ = new ::naothmessages::Pose2D;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.Opponent.poseOnField)
  return poseonfield_;
}
inline ::naothmessages::Pose2D* Opponent::release_poseonfield() {
  // @@protoc_insertion_point(field_release:naothmessages.Opponent.poseOnField)
  clear_has_poseonfield();
  ::naothmessages::Pose2D* temp = poseonfield_;
  poseonfield_ = NULL;
  return temp;
}
inline void Opponent::set_allocated_poseonfield(::naothmessages::Pose2D* poseonfield) {
  delete poseonfield_;
  poseonfield_ = poseonfield;
  if (poseonfield) {
    set_has_poseonfield();
  } else {
    clear_has_poseonfield();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.Opponent.poseOnField)
}

// -------------------------------------------------------------------

// Ntp

// required int32 playerNum = 1 [default = 0];
inline bool Ntp::has_playernum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ntp::set_has_playernum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ntp::clear_has_playernum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ntp::clear_playernum() {
  playernum_ = 0;
  clear_has_playernum();
}
inline ::google::protobuf::int32 Ntp::playernum() const {
  // @@protoc_insertion_point(field_get:naothmessages.Ntp.playerNum)
  return playernum_;
}
inline void Ntp::set_playernum(::google::protobuf::int32 value) {
  set_has_playernum();
  playernum_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.Ntp.playerNum)
}

// optional uint64 sent = 2 [default = 0];
inline bool Ntp::has_sent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ntp::set_has_sent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ntp::clear_has_sent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ntp::clear_sent() {
  sent_ = GOOGLE_ULONGLONG(0);
  clear_has_sent();
}
inline ::google::protobuf::uint64 Ntp::sent() const {
  // @@protoc_insertion_point(field_get:naothmessages.Ntp.sent)
  return sent_;
}
inline void Ntp::set_sent(::google::protobuf::uint64 value) {
  set_has_sent();
  sent_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.Ntp.sent)
}

// optional uint64 received = 3 [default = 0];
inline bool Ntp::has_received() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ntp::set_has_received() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ntp::clear_has_received() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ntp::clear_received() {
  received_ = GOOGLE_ULONGLONG(0);
  clear_has_received();
}
inline ::google::protobuf::uint64 Ntp::received() const {
  // @@protoc_insertion_point(field_get:naothmessages.Ntp.received)
  return received_;
}
inline void Ntp::set_received(::google::protobuf::uint64 value) {
  set_has_received();
  received_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.Ntp.received)
}

// -------------------------------------------------------------------

// Drops

// optional uint32 dropNoSplMessage = 1 [default = 0];
inline bool Drops::has_dropnosplmessage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Drops::set_has_dropnosplmessage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Drops::clear_has_dropnosplmessage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Drops::clear_dropnosplmessage() {
  dropnosplmessage_ = 0u;
  clear_has_dropnosplmessage();
}
inline ::google::protobuf::uint32 Drops::dropnosplmessage() const {
  // @@protoc_insertion_point(field_get:naothmessages.Drops.dropNoSplMessage)
  return dropnosplmessage_;
}
inline void Drops::set_dropnosplmessage(::google::protobuf::uint32 value) {
  set_has_dropnosplmessage();
  dropnosplmessage_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.Drops.dropNoSplMessage)
}

// optional uint32 dropNotOurTeam = 2 [default = 0];
inline bool Drops::has_dropnotourteam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Drops::set_has_dropnotourteam() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Drops::clear_has_dropnotourteam() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Drops::clear_dropnotourteam() {
  dropnotourteam_ = 0u;
  clear_has_dropnotourteam();
}
inline ::google::protobuf::uint32 Drops::dropnotourteam() const {
  // @@protoc_insertion_point(field_get:naothmessages.Drops.dropNotOurTeam)
  return dropnotourteam_;
}
inline void Drops::set_dropnotourteam(::google::protobuf::uint32 value) {
  set_has_dropnotourteam();
  dropnotourteam_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.Drops.dropNotOurTeam)
}

// optional uint32 dropNotParseable = 3 [default = 0];
inline bool Drops::has_dropnotparseable() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Drops::set_has_dropnotparseable() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Drops::clear_has_dropnotparseable() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Drops::clear_dropnotparseable() {
  dropnotparseable_ = 0u;
  clear_has_dropnotparseable();
}
inline ::google::protobuf::uint32 Drops::dropnotparseable() const {
  // @@protoc_insertion_point(field_get:naothmessages.Drops.dropNotParseable)
  return dropnotparseable_;
}
inline void Drops::set_dropnotparseable(::google::protobuf::uint32 value) {
  set_has_dropnotparseable();
  dropnotparseable_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.Drops.dropNotParseable)
}

// optional uint32 dropKeyFail = 4 [default = 0];
inline bool Drops::has_dropkeyfail() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Drops::set_has_dropkeyfail() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Drops::clear_has_dropkeyfail() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Drops::clear_dropkeyfail() {
  dropkeyfail_ = 0u;
  clear_has_dropkeyfail();
}
inline ::google::protobuf::uint32 Drops::dropkeyfail() const {
  // @@protoc_insertion_point(field_get:naothmessages.Drops.dropKeyFail)
  return dropkeyfail_;
}
inline void Drops::set_dropkeyfail(::google::protobuf::uint32 value) {
  set_has_dropkeyfail();
  dropkeyfail_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.Drops.dropKeyFail)
}

// optional uint32 dropMonotonic = 5 [default = 0];
inline bool Drops::has_dropmonotonic() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Drops::set_has_dropmonotonic() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Drops::clear_has_dropmonotonic() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Drops::clear_dropmonotonic() {
  dropmonotonic_ = 0u;
  clear_has_dropmonotonic();
}
inline ::google::protobuf::uint32 Drops::dropmonotonic() const {
  // @@protoc_insertion_point(field_get:naothmessages.Drops.dropMonotonic)
  return dropmonotonic_;
}
inline void Drops::set_dropmonotonic(::google::protobuf::uint32 value) {
  set_has_dropmonotonic();
  dropmonotonic_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.Drops.dropMonotonic)
}

// -------------------------------------------------------------------

// BUUserTeamMessage

// optional string bodyID = 1 [default = "unknown"];
inline bool BUUserTeamMessage::has_bodyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BUUserTeamMessage::set_has_bodyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BUUserTeamMessage::clear_has_bodyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BUUserTeamMessage::clear_bodyid() {
  bodyid_.ClearToDefaultNoArena(&BUUserTeamMessage::_default_bodyid_.get());
  clear_has_bodyid();
}
inline const ::std::string& BUUserTeamMessage::bodyid() const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.bodyID)
  return bodyid_.GetNoArena();
}
inline void BUUserTeamMessage::set_bodyid(const ::std::string& value) {
  set_has_bodyid();
  bodyid_.SetNoArena(&BUUserTeamMessage::_default_bodyid_.get(), value);
  // @@protoc_insertion_point(field_set:naothmessages.BUUserTeamMessage.bodyID)
}
#if LANG_CXX11
inline void BUUserTeamMessage::set_bodyid(::std::string&& value) {
  set_has_bodyid();
  bodyid_.SetNoArena(
    &BUUserTeamMessage::_default_bodyid_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:naothmessages.BUUserTeamMessage.bodyID)
}
#endif
inline void BUUserTeamMessage::set_bodyid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bodyid();
  bodyid_.SetNoArena(&BUUserTeamMessage::_default_bodyid_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naothmessages.BUUserTeamMessage.bodyID)
}
inline void BUUserTeamMessage::set_bodyid(const char* value, size_t size) {
  set_has_bodyid();
  bodyid_.SetNoArena(&BUUserTeamMessage::_default_bodyid_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naothmessages.BUUserTeamMessage.bodyID)
}
inline ::std::string* BUUserTeamMessage::mutable_bodyid() {
  set_has_bodyid();
  // @@protoc_insertion_point(field_mutable:naothmessages.BUUserTeamMessage.bodyID)
  return bodyid_.MutableNoArena(&BUUserTeamMessage::_default_bodyid_.get());
}
inline ::std::string* BUUserTeamMessage::release_bodyid() {
  // @@protoc_insertion_point(field_release:naothmessages.BUUserTeamMessage.bodyID)
  clear_has_bodyid();
  return bodyid_.ReleaseNoArena(&BUUserTeamMessage::_default_bodyid_.get());
}
inline void BUUserTeamMessage::set_allocated_bodyid(::std::string* bodyid) {
  if (bodyid != NULL) {
    set_has_bodyid();
  } else {
    clear_has_bodyid();
  }
  bodyid_.SetAllocatedNoArena(&BUUserTeamMessage::_default_bodyid_.get(), bodyid);
  // @@protoc_insertion_point(field_set_allocated:naothmessages.BUUserTeamMessage.bodyID)
}

// optional uint32 timeToBall = 2;
inline bool BUUserTeamMessage::has_timetoball() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BUUserTeamMessage::set_has_timetoball() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BUUserTeamMessage::clear_has_timetoball() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BUUserTeamMessage::clear_timetoball() {
  timetoball_ = 0u;
  clear_has_timetoball();
}
inline ::google::protobuf::uint32 BUUserTeamMessage::timetoball() const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.timeToBall)
  return timetoball_;
}
inline void BUUserTeamMessage::set_timetoball(::google::protobuf::uint32 value) {
  set_has_timetoball();
  timetoball_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BUUserTeamMessage.timeToBall)
}

// optional bool wasStriker = 3 [default = false];
inline bool BUUserTeamMessage::has_wasstriker() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BUUserTeamMessage::set_has_wasstriker() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BUUserTeamMessage::clear_has_wasstriker() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BUUserTeamMessage::clear_wasstriker() {
  wasstriker_ = false;
  clear_has_wasstriker();
}
inline bool BUUserTeamMessage::wasstriker() const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.wasStriker)
  return wasstriker_;
}
inline void BUUserTeamMessage::set_wasstriker(bool value) {
  set_has_wasstriker();
  wasstriker_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BUUserTeamMessage.wasStriker)
}

// optional bool isPenalized = 4 [default = false, deprecated = true];
inline bool BUUserTeamMessage::has_ispenalized() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BUUserTeamMessage::set_has_ispenalized() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BUUserTeamMessage::clear_has_ispenalized() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BUUserTeamMessage::clear_ispenalized() {
  ispenalized_ = false;
  clear_has_ispenalized();
}
inline bool BUUserTeamMessage::ispenalized() const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.isPenalized)
  return ispenalized_;
}
inline void BUUserTeamMessage::set_ispenalized(bool value) {
  set_has_ispenalized();
  ispenalized_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BUUserTeamMessage.isPenalized)
}

// repeated .naothmessages.Opponent opponents = 5;
inline int BUUserTeamMessage::opponents_size() const {
  return opponents_.size();
}
inline void BUUserTeamMessage::clear_opponents() {
  opponents_.Clear();
}
inline const ::naothmessages::Opponent& BUUserTeamMessage::opponents(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.opponents)
  return opponents_.Get(index);
}
inline ::naothmessages::Opponent* BUUserTeamMessage::mutable_opponents(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.BUUserTeamMessage.opponents)
  return opponents_.Mutable(index);
}
inline ::naothmessages::Opponent* BUUserTeamMessage::add_opponents() {
  // @@protoc_insertion_point(field_add:naothmessages.BUUserTeamMessage.opponents)
  return opponents_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::naothmessages::Opponent >*
BUUserTeamMessage::mutable_opponents() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.BUUserTeamMessage.opponents)
  return &opponents_;
}
inline const ::google::protobuf::RepeatedPtrField< ::naothmessages::Opponent >&
BUUserTeamMessage::opponents() const {
  // @@protoc_insertion_point(field_list:naothmessages.BUUserTeamMessage.opponents)
  return opponents_;
}

// optional uint32 teamNumber = 6 [default = 0, deprecated = true];
inline bool BUUserTeamMessage::has_teamnumber() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BUUserTeamMessage::set_has_teamnumber() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BUUserTeamMessage::clear_has_teamnumber() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BUUserTeamMessage::clear_teamnumber() {
  teamnumber_ = 0u;
  clear_has_teamnumber();
}
inline ::google::protobuf::uint32 BUUserTeamMessage::teamnumber() const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.teamNumber)
  return teamnumber_;
}
inline void BUUserTeamMessage::set_teamnumber(::google::protobuf::uint32 value) {
  set_has_teamnumber();
  teamnumber_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BUUserTeamMessage.teamNumber)
}

// optional float batteryCharge = 7 [default = 1];
inline bool BUUserTeamMessage::has_batterycharge() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BUUserTeamMessage::set_has_batterycharge() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BUUserTeamMessage::clear_has_batterycharge() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BUUserTeamMessage::clear_batterycharge() {
  batterycharge_ = 1;
  clear_has_batterycharge();
}
inline float BUUserTeamMessage::batterycharge() const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.batteryCharge)
  return batterycharge_;
}
inline void BUUserTeamMessage::set_batterycharge(float value) {
  set_has_batterycharge();
  batterycharge_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BUUserTeamMessage.batteryCharge)
}

// optional float temperature = 8 [default = 0];
inline bool BUUserTeamMessage::has_temperature() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BUUserTeamMessage::set_has_temperature() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BUUserTeamMessage::clear_has_temperature() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BUUserTeamMessage::clear_temperature() {
  temperature_ = 0;
  clear_has_temperature();
}
inline float BUUserTeamMessage::temperature() const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.temperature)
  return temperature_;
}
inline void BUUserTeamMessage::set_temperature(float value) {
  set_has_temperature();
  temperature_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BUUserTeamMessage.temperature)
}

// optional uint64 timestamp = 9 [default = 0];
inline bool BUUserTeamMessage::has_timestamp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BUUserTeamMessage::set_has_timestamp() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BUUserTeamMessage::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BUUserTeamMessage::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 BUUserTeamMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.timestamp)
  return timestamp_;
}
inline void BUUserTeamMessage::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BUUserTeamMessage.timestamp)
}

// optional bool wantsToBeStriker = 10 [default = false];
inline bool BUUserTeamMessage::has_wantstobestriker() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BUUserTeamMessage::set_has_wantstobestriker() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BUUserTeamMessage::clear_has_wantstobestriker() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BUUserTeamMessage::clear_wantstobestriker() {
  wantstobestriker_ = false;
  clear_has_wantstobestriker();
}
inline bool BUUserTeamMessage::wantstobestriker() const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.wantsToBeStriker)
  return wantstobestriker_;
}
inline void BUUserTeamMessage::set_wantstobestriker(bool value) {
  set_has_wantstobestriker();
  wantstobestriker_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BUUserTeamMessage.wantsToBeStriker)
}

// optional float cpuTemperature = 11 [default = 0];
inline bool BUUserTeamMessage::has_cputemperature() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BUUserTeamMessage::set_has_cputemperature() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BUUserTeamMessage::clear_has_cputemperature() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BUUserTeamMessage::clear_cputemperature() {
  cputemperature_ = 0;
  clear_has_cputemperature();
}
inline float BUUserTeamMessage::cputemperature() const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.cpuTemperature)
  return cputemperature_;
}
inline void BUUserTeamMessage::set_cputemperature(float value) {
  set_has_cputemperature();
  cputemperature_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BUUserTeamMessage.cpuTemperature)
}

// optional bool whistleDetected = 12 [default = false];
inline bool BUUserTeamMessage::has_whistledetected() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BUUserTeamMessage::set_has_whistledetected() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BUUserTeamMessage::clear_has_whistledetected() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BUUserTeamMessage::clear_whistledetected() {
  whistledetected_ = false;
  clear_has_whistledetected();
}
inline bool BUUserTeamMessage::whistledetected() const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.whistleDetected)
  return whistledetected_;
}
inline void BUUserTeamMessage::set_whistledetected(bool value) {
  set_has_whistledetected();
  whistledetected_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BUUserTeamMessage.whistleDetected)
}

// optional int32 whistleCount = 13 [default = 0];
inline bool BUUserTeamMessage::has_whistlecount() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BUUserTeamMessage::set_has_whistlecount() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BUUserTeamMessage::clear_has_whistlecount() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BUUserTeamMessage::clear_whistlecount() {
  whistlecount_ = 0;
  clear_has_whistlecount();
}
inline ::google::protobuf::int32 BUUserTeamMessage::whistlecount() const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.whistleCount)
  return whistlecount_;
}
inline void BUUserTeamMessage::set_whistlecount(::google::protobuf::int32 value) {
  set_has_whistlecount();
  whistlecount_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BUUserTeamMessage.whistleCount)
}

// optional .naothmessages.DoubleVector2 teamBall = 14;
inline bool BUUserTeamMessage::has_teamball() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BUUserTeamMessage::set_has_teamball() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BUUserTeamMessage::clear_has_teamball() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BUUserTeamMessage::clear_teamball() {
  if (teamball_ != NULL) teamball_->::naothmessages::DoubleVector2::Clear();
  clear_has_teamball();
}
inline const ::naothmessages::DoubleVector2& BUUserTeamMessage::teamball() const {
  const ::naothmessages::DoubleVector2* p = teamball_;
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.teamBall)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
inline ::naothmessages::DoubleVector2* BUUserTeamMessage::mutable_teamball() {
  set_has_teamball();
  if (teamball_ == NULL) {
    teamball_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.BUUserTeamMessage.teamBall)
  return teamball_;
}
inline ::naothmessages::DoubleVector2* BUUserTeamMessage::release_teamball() {
  // @@protoc_insertion_point(field_release:naothmessages.BUUserTeamMessage.teamBall)
  clear_has_teamball();
  ::naothmessages::DoubleVector2* temp = teamball_;
  teamball_ = NULL;
  return temp;
}
inline void BUUserTeamMessage::set_allocated_teamball(::naothmessages::DoubleVector2* teamball) {
  delete teamball_;
  teamball_ = teamball;
  if (teamball) {
    set_has_teamball();
  } else {
    clear_has_teamball();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.BUUserTeamMessage.teamBall)
}

// repeated .naothmessages.Ntp ntpRequest = 15;
inline int BUUserTeamMessage::ntprequest_size() const {
  return ntprequest_.size();
}
inline void BUUserTeamMessage::clear_ntprequest() {
  ntprequest_.Clear();
}
inline const ::naothmessages::Ntp& BUUserTeamMessage::ntprequest(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.ntpRequest)
  return ntprequest_.Get(index);
}
inline ::naothmessages::Ntp* BUUserTeamMessage::mutable_ntprequest(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.BUUserTeamMessage.ntpRequest)
  return ntprequest_.Mutable(index);
}
inline ::naothmessages::Ntp* BUUserTeamMessage::add_ntprequest() {
  // @@protoc_insertion_point(field_add:naothmessages.BUUserTeamMessage.ntpRequest)
  return ntprequest_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::naothmessages::Ntp >*
BUUserTeamMessage::mutable_ntprequest() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.BUUserTeamMessage.ntpRequest)
  return &ntprequest_;
}
inline const ::google::protobuf::RepeatedPtrField< ::naothmessages::Ntp >&
BUUserTeamMessage::ntprequest() const {
  // @@protoc_insertion_point(field_list:naothmessages.BUUserTeamMessage.ntpRequest)
  return ntprequest_;
}

// optional .naothmessages.DoubleVector2 ballVelocity = 16;
inline bool BUUserTeamMessage::has_ballvelocity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BUUserTeamMessage::set_has_ballvelocity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BUUserTeamMessage::clear_has_ballvelocity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BUUserTeamMessage::clear_ballvelocity() {
  if (ballvelocity_ != NULL) ballvelocity_->::naothmessages::DoubleVector2::Clear();
  clear_has_ballvelocity();
}
inline const ::naothmessages::DoubleVector2& BUUserTeamMessage::ballvelocity() const {
  const ::naothmessages::DoubleVector2* p = ballvelocity_;
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.ballVelocity)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
inline ::naothmessages::DoubleVector2* BUUserTeamMessage::mutable_ballvelocity() {
  set_has_ballvelocity();
  if (ballvelocity_ == NULL) {
    ballvelocity_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.BUUserTeamMessage.ballVelocity)
  return ballvelocity_;
}
inline ::naothmessages::DoubleVector2* BUUserTeamMessage::release_ballvelocity() {
  // @@protoc_insertion_point(field_release:naothmessages.BUUserTeamMessage.ballVelocity)
  clear_has_ballvelocity();
  ::naothmessages::DoubleVector2* temp = ballvelocity_;
  ballvelocity_ = NULL;
  return temp;
}
inline void BUUserTeamMessage::set_allocated_ballvelocity(::naothmessages::DoubleVector2* ballvelocity) {
  delete ballvelocity_;
  ballvelocity_ = ballvelocity;
  if (ballvelocity) {
    set_has_ballvelocity();
  } else {
    clear_has_ballvelocity();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.BUUserTeamMessage.ballVelocity)
}

// optional .naothmessages.RobotState robotState = 17 [default = initial];
inline bool BUUserTeamMessage::has_robotstate() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BUUserTeamMessage::set_has_robotstate() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BUUserTeamMessage::clear_has_robotstate() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BUUserTeamMessage::clear_robotstate() {
  robotstate_ = 0;
  clear_has_robotstate();
}
inline ::naothmessages::RobotState BUUserTeamMessage::robotstate() const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.robotState)
  return static_cast< ::naothmessages::RobotState >(robotstate_);
}
inline void BUUserTeamMessage::set_robotstate(::naothmessages::RobotState value) {
  assert(::naothmessages::RobotState_IsValid(value));
  set_has_robotstate();
  robotstate_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BUUserTeamMessage.robotState)
}

// optional .naothmessages.RobotRole robotRole = 18;
inline bool BUUserTeamMessage::has_robotrole() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BUUserTeamMessage::set_has_robotrole() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BUUserTeamMessage::clear_has_robotrole() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BUUserTeamMessage::clear_robotrole() {
  if (robotrole_ != NULL) robotrole_->::naothmessages::RobotRole::Clear();
  clear_has_robotrole();
}
inline const ::naothmessages::RobotRole& BUUserTeamMessage::robotrole() const {
  const ::naothmessages::RobotRole* p = robotrole_;
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.robotRole)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::RobotRole*>(
      &::naothmessages::_RobotRole_default_instance_);
}
inline ::naothmessages::RobotRole* BUUserTeamMessage::mutable_robotrole() {
  set_has_robotrole();
  if (robotrole_ == NULL) {
    robotrole_ = new ::naothmessages::RobotRole;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.BUUserTeamMessage.robotRole)
  return robotrole_;
}
inline ::naothmessages::RobotRole* BUUserTeamMessage::release_robotrole() {
  // @@protoc_insertion_point(field_release:naothmessages.BUUserTeamMessage.robotRole)
  clear_has_robotrole();
  ::naothmessages::RobotRole* temp = robotrole_;
  robotrole_ = NULL;
  return temp;
}
inline void BUUserTeamMessage::set_allocated_robotrole(::naothmessages::RobotRole* robotrole) {
  delete robotrole_;
  robotrole_ = robotrole;
  if (robotrole) {
    set_has_robotrole();
  } else {
    clear_has_robotrole();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.BUUserTeamMessage.robotRole)
}

// optional bool readyToWalk = 19;
inline bool BUUserTeamMessage::has_readytowalk() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BUUserTeamMessage::set_has_readytowalk() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BUUserTeamMessage::clear_has_readytowalk() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BUUserTeamMessage::clear_readytowalk() {
  readytowalk_ = false;
  clear_has_readytowalk();
}
inline bool BUUserTeamMessage::readytowalk() const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.readyToWalk)
  return readytowalk_;
}
inline void BUUserTeamMessage::set_readytowalk(bool value) {
  set_has_readytowalk();
  readytowalk_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BUUserTeamMessage.readyToWalk)
}

// optional string key = 100 [default = "none"];
inline bool BUUserTeamMessage::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BUUserTeamMessage::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BUUserTeamMessage::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BUUserTeamMessage::clear_key() {
  key_.ClearToDefaultNoArena(&BUUserTeamMessage::_default_key_.get());
  clear_has_key();
}
inline const ::std::string& BUUserTeamMessage::key() const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.key)
  return key_.GetNoArena();
}
inline void BUUserTeamMessage::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&BUUserTeamMessage::_default_key_.get(), value);
  // @@protoc_insertion_point(field_set:naothmessages.BUUserTeamMessage.key)
}
#if LANG_CXX11
inline void BUUserTeamMessage::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &BUUserTeamMessage::_default_key_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:naothmessages.BUUserTeamMessage.key)
}
#endif
inline void BUUserTeamMessage::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&BUUserTeamMessage::_default_key_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naothmessages.BUUserTeamMessage.key)
}
inline void BUUserTeamMessage::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&BUUserTeamMessage::_default_key_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naothmessages.BUUserTeamMessage.key)
}
inline ::std::string* BUUserTeamMessage::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:naothmessages.BUUserTeamMessage.key)
  return key_.MutableNoArena(&BUUserTeamMessage::_default_key_.get());
}
inline ::std::string* BUUserTeamMessage::release_key() {
  // @@protoc_insertion_point(field_release:naothmessages.BUUserTeamMessage.key)
  clear_has_key();
  return key_.ReleaseNoArena(&BUUserTeamMessage::_default_key_.get());
}
inline void BUUserTeamMessage::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&BUUserTeamMessage::_default_key_.get(), key);
  // @@protoc_insertion_point(field_set_allocated:naothmessages.BUUserTeamMessage.key)
}

// -------------------------------------------------------------------

// TeamMessage_Data

// optional uint32 playerNum = 1 [default = 0];
inline bool TeamMessage_Data::has_playernum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TeamMessage_Data::set_has_playernum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TeamMessage_Data::clear_has_playernum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TeamMessage_Data::clear_playernum() {
  playernum_ = 0u;
  clear_has_playernum();
}
inline ::google::protobuf::uint32 TeamMessage_Data::playernum() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamMessage.Data.playerNum)
  return playernum_;
}
inline void TeamMessage_Data::set_playernum(::google::protobuf::uint32 value) {
  set_has_playernum();
  playernum_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamMessage.Data.playerNum)
}

// optional .naothmessages.TeamColor teamColor = 11 [default = blueTeam, deprecated = true];
inline bool TeamMessage_Data::has_teamcolor() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TeamMessage_Data::set_has_teamcolor() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TeamMessage_Data::clear_has_teamcolor() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TeamMessage_Data::clear_teamcolor() {
  teamcolor_ = 0;
  clear_has_teamcolor();
}
inline ::naothmessages::TeamColor TeamMessage_Data::teamcolor() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamMessage.Data.teamColor)
  return static_cast< ::naothmessages::TeamColor >(teamcolor_);
}
inline void TeamMessage_Data::set_teamcolor(::naothmessages::TeamColor value) {
  assert(::naothmessages::TeamColor_IsValid(value));
  set_has_teamcolor();
  teamcolor_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamMessage.Data.teamColor)
}

// optional .naothmessages.Pose2D pose = 3;
inline bool TeamMessage_Data::has_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamMessage_Data::set_has_pose() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamMessage_Data::clear_has_pose() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamMessage_Data::clear_pose() {
  if (pose_ != NULL) pose_->::naothmessages::Pose2D::Clear();
  clear_has_pose();
}
inline const ::naothmessages::Pose2D& TeamMessage_Data::pose() const {
  const ::naothmessages::Pose2D* p = pose_;
  // @@protoc_insertion_point(field_get:naothmessages.TeamMessage.Data.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::Pose2D*>(
      &::naothmessages::_Pose2D_default_instance_);
}
inline ::naothmessages::Pose2D* TeamMessage_Data::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::naothmessages::Pose2D;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.TeamMessage.Data.pose)
  return pose_;
}
inline ::naothmessages::Pose2D* TeamMessage_Data::release_pose() {
  // @@protoc_insertion_point(field_release:naothmessages.TeamMessage.Data.pose)
  clear_has_pose();
  ::naothmessages::Pose2D* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void TeamMessage_Data::set_allocated_pose(::naothmessages::Pose2D* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.TeamMessage.Data.pose)
}

// optional int32 ballAge = 4 [default = -1];
inline bool TeamMessage_Data::has_ballage() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TeamMessage_Data::set_has_ballage() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TeamMessage_Data::clear_has_ballage() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TeamMessage_Data::clear_ballage() {
  ballage_ = -1;
  clear_has_ballage();
}
inline ::google::protobuf::int32 TeamMessage_Data::ballage() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamMessage.Data.ballAge)
  return ballage_;
}
inline void TeamMessage_Data::set_ballage(::google::protobuf::int32 value) {
  set_has_ballage();
  ballage_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamMessage.Data.ballAge)
}

// optional .naothmessages.DoubleVector2 ballPosition = 5;
inline bool TeamMessage_Data::has_ballposition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamMessage_Data::set_has_ballposition() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamMessage_Data::clear_has_ballposition() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamMessage_Data::clear_ballposition() {
  if (ballposition_ != NULL) ballposition_->::naothmessages::DoubleVector2::Clear();
  clear_has_ballposition();
}
inline const ::naothmessages::DoubleVector2& TeamMessage_Data::ballposition() const {
  const ::naothmessages::DoubleVector2* p = ballposition_;
  // @@protoc_insertion_point(field_get:naothmessages.TeamMessage.Data.ballPosition)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
inline ::naothmessages::DoubleVector2* TeamMessage_Data::mutable_ballposition() {
  set_has_ballposition();
  if (ballposition_ == NULL) {
    ballposition_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.TeamMessage.Data.ballPosition)
  return ballposition_;
}
inline ::naothmessages::DoubleVector2* TeamMessage_Data::release_ballposition() {
  // @@protoc_insertion_point(field_release:naothmessages.TeamMessage.Data.ballPosition)
  clear_has_ballposition();
  ::naothmessages::DoubleVector2* temp = ballposition_;
  ballposition_ = NULL;
  return temp;
}
inline void TeamMessage_Data::set_allocated_ballposition(::naothmessages::DoubleVector2* ballposition) {
  delete ballposition_;
  ballposition_ = ballposition;
  if (ballposition) {
    set_has_ballposition();
  } else {
    clear_has_ballposition();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.TeamMessage.Data.ballPosition)
}

// optional .naothmessages.DoubleVector2 ballVelocity = 6;
inline bool TeamMessage_Data::has_ballvelocity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamMessage_Data::set_has_ballvelocity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamMessage_Data::clear_has_ballvelocity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamMessage_Data::clear_ballvelocity() {
  if (ballvelocity_ != NULL) ballvelocity_->::naothmessages::DoubleVector2::Clear();
  clear_has_ballvelocity();
}
inline const ::naothmessages::DoubleVector2& TeamMessage_Data::ballvelocity() const {
  const ::naothmessages::DoubleVector2* p = ballvelocity_;
  // @@protoc_insertion_point(field_get:naothmessages.TeamMessage.Data.ballVelocity)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
inline ::naothmessages::DoubleVector2* TeamMessage_Data::mutable_ballvelocity() {
  set_has_ballvelocity();
  if (ballvelocity_ == NULL) {
    ballvelocity_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.TeamMessage.Data.ballVelocity)
  return ballvelocity_;
}
inline ::naothmessages::DoubleVector2* TeamMessage_Data::release_ballvelocity() {
  // @@protoc_insertion_point(field_release:naothmessages.TeamMessage.Data.ballVelocity)
  clear_has_ballvelocity();
  ::naothmessages::DoubleVector2* temp = ballvelocity_;
  ballvelocity_ = NULL;
  return temp;
}
inline void TeamMessage_Data::set_allocated_ballvelocity(::naothmessages::DoubleVector2* ballvelocity) {
  delete ballvelocity_;
  ballvelocity_ = ballvelocity;
  if (ballvelocity) {
    set_has_ballvelocity();
  } else {
    clear_has_ballvelocity();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.TeamMessage.Data.ballVelocity)
}

// optional bool fallen = 10 [default = false];
inline bool TeamMessage_Data::has_fallen() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TeamMessage_Data::set_has_fallen() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TeamMessage_Data::clear_has_fallen() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TeamMessage_Data::clear_fallen() {
  fallen_ = false;
  clear_has_fallen();
}
inline bool TeamMessage_Data::fallen() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamMessage.Data.fallen)
  return fallen_;
}
inline void TeamMessage_Data::set_fallen(bool value) {
  set_has_fallen();
  fallen_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamMessage.Data.fallen)
}

// optional .naothmessages.BUUserTeamMessage user = 8;
inline bool TeamMessage_Data::has_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamMessage_Data::set_has_user() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamMessage_Data::clear_has_user() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamMessage_Data::clear_user() {
  if (user_ != NULL) user_->::naothmessages::BUUserTeamMessage::Clear();
  clear_has_user();
}
inline const ::naothmessages::BUUserTeamMessage& TeamMessage_Data::user() const {
  const ::naothmessages::BUUserTeamMessage* p = user_;
  // @@protoc_insertion_point(field_get:naothmessages.TeamMessage.Data.user)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::BUUserTeamMessage*>(
      &::naothmessages::_BUUserTeamMessage_default_instance_);
}
inline ::naothmessages::BUUserTeamMessage* TeamMessage_Data::mutable_user() {
  set_has_user();
  if (user_ == NULL) {
    user_ = new ::naothmessages::BUUserTeamMessage;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.TeamMessage.Data.user)
  return user_;
}
inline ::naothmessages::BUUserTeamMessage* TeamMessage_Data::release_user() {
  // @@protoc_insertion_point(field_release:naothmessages.TeamMessage.Data.user)
  clear_has_user();
  ::naothmessages::BUUserTeamMessage* temp = user_;
  user_ = NULL;
  return temp;
}
inline void TeamMessage_Data::set_allocated_user(::naothmessages::BUUserTeamMessage* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.TeamMessage.Data.user)
}

// optional .naothmessages.FrameInfo frameInfo = 9;
inline bool TeamMessage_Data::has_frameinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeamMessage_Data::set_has_frameinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeamMessage_Data::clear_has_frameinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TeamMessage_Data::clear_frameinfo() {
  if (frameinfo_ != NULL) frameinfo_->::naothmessages::FrameInfo::Clear();
  clear_has_frameinfo();
}
inline const ::naothmessages::FrameInfo& TeamMessage_Data::frameinfo() const {
  const ::naothmessages::FrameInfo* p = frameinfo_;
  // @@protoc_insertion_point(field_get:naothmessages.TeamMessage.Data.frameInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::FrameInfo*>(
      &::naothmessages::_FrameInfo_default_instance_);
}
inline ::naothmessages::FrameInfo* TeamMessage_Data::mutable_frameinfo() {
  set_has_frameinfo();
  if (frameinfo_ == NULL) {
    frameinfo_ = new ::naothmessages::FrameInfo;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.TeamMessage.Data.frameInfo)
  return frameinfo_;
}
inline ::naothmessages::FrameInfo* TeamMessage_Data::release_frameinfo() {
  // @@protoc_insertion_point(field_release:naothmessages.TeamMessage.Data.frameInfo)
  clear_has_frameinfo();
  ::naothmessages::FrameInfo* temp = frameinfo_;
  frameinfo_ = NULL;
  return temp;
}
inline void TeamMessage_Data::set_allocated_frameinfo(::naothmessages::FrameInfo* frameinfo) {
  delete frameinfo_;
  frameinfo_ = frameinfo;
  if (frameinfo) {
    set_has_frameinfo();
  } else {
    clear_has_frameinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.TeamMessage.Data.frameInfo)
}

// optional uint32 teamNumber = 12 [default = 0];
inline bool TeamMessage_Data::has_teamnumber() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TeamMessage_Data::set_has_teamnumber() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TeamMessage_Data::clear_has_teamnumber() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TeamMessage_Data::clear_teamnumber() {
  teamnumber_ = 0u;
  clear_has_teamnumber();
}
inline ::google::protobuf::uint32 TeamMessage_Data::teamnumber() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamMessage.Data.teamNumber)
  return teamnumber_;
}
inline void TeamMessage_Data::set_teamnumber(::google::protobuf::uint32 value) {
  set_has_teamnumber();
  teamnumber_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamMessage.Data.teamNumber)
}

// -------------------------------------------------------------------

// TeamMessage

// repeated .naothmessages.TeamMessage.Data data = 1;
inline int TeamMessage::data_size() const {
  return data_.size();
}
inline void TeamMessage::clear_data() {
  data_.Clear();
}
inline const ::naothmessages::TeamMessage_Data& TeamMessage::data(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamMessage.data)
  return data_.Get(index);
}
inline ::naothmessages::TeamMessage_Data* TeamMessage::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.TeamMessage.data)
  return data_.Mutable(index);
}
inline ::naothmessages::TeamMessage_Data* TeamMessage::add_data() {
  // @@protoc_insertion_point(field_add:naothmessages.TeamMessage.data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::naothmessages::TeamMessage_Data >*
TeamMessage::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.TeamMessage.data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::naothmessages::TeamMessage_Data >&
TeamMessage::data() const {
  // @@protoc_insertion_point(field_list:naothmessages.TeamMessage.data)
  return data_;
}

// optional .naothmessages.Drops messageDrop = 2;
inline bool TeamMessage::has_messagedrop() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamMessage::set_has_messagedrop() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamMessage::clear_has_messagedrop() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamMessage::clear_messagedrop() {
  if (messagedrop_ != NULL) messagedrop_->::naothmessages::Drops::Clear();
  clear_has_messagedrop();
}
inline const ::naothmessages::Drops& TeamMessage::messagedrop() const {
  const ::naothmessages::Drops* p = messagedrop_;
  // @@protoc_insertion_point(field_get:naothmessages.TeamMessage.messageDrop)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::Drops*>(
      &::naothmessages::_Drops_default_instance_);
}
inline ::naothmessages::Drops* TeamMessage::mutable_messagedrop() {
  set_has_messagedrop();
  if (messagedrop_ == NULL) {
    messagedrop_ = new ::naothmessages::Drops;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.TeamMessage.messageDrop)
  return messagedrop_;
}
inline ::naothmessages::Drops* TeamMessage::release_messagedrop() {
  // @@protoc_insertion_point(field_release:naothmessages.TeamMessage.messageDrop)
  clear_has_messagedrop();
  ::naothmessages::Drops* temp = messagedrop_;
  messagedrop_ = NULL;
  return temp;
}
inline void TeamMessage::set_allocated_messagedrop(::naothmessages::Drops* messagedrop) {
  delete messagedrop_;
  messagedrop_ = messagedrop;
  if (messagedrop) {
    set_has_messagedrop();
  } else {
    clear_has_messagedrop();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.TeamMessage.messageDrop)
}

// -------------------------------------------------------------------

// TeamState_Player

// optional uint32 number = 1 [default = 0];
inline bool TeamState_Player::has_number() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TeamState_Player::set_has_number() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TeamState_Player::clear_has_number() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TeamState_Player::clear_number() {
  number_ = 0u;
  clear_has_number();
}
inline ::google::protobuf::uint32 TeamState_Player::number() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamState.Player.number)
  return number_;
}
inline void TeamState_Player::set_number(::google::protobuf::uint32 value) {
  set_has_number();
  number_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamState.Player.number)
}

// optional .naothmessages.FrameInfo messageFrameInfo = 2;
inline bool TeamState_Player::has_messageframeinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamState_Player::set_has_messageframeinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamState_Player::clear_has_messageframeinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamState_Player::clear_messageframeinfo() {
  if (messageframeinfo_ != NULL) messageframeinfo_->::naothmessages::FrameInfo::Clear();
  clear_has_messageframeinfo();
}
inline const ::naothmessages::FrameInfo& TeamState_Player::messageframeinfo() const {
  const ::naothmessages::FrameInfo* p = messageframeinfo_;
  // @@protoc_insertion_point(field_get:naothmessages.TeamState.Player.messageFrameInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::FrameInfo*>(
      &::naothmessages::_FrameInfo_default_instance_);
}
inline ::naothmessages::FrameInfo* TeamState_Player::mutable_messageframeinfo() {
  set_has_messageframeinfo();
  if (messageframeinfo_ == NULL) {
    messageframeinfo_ = new ::naothmessages::FrameInfo;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.TeamState.Player.messageFrameInfo)
  return messageframeinfo_;
}
inline ::naothmessages::FrameInfo* TeamState_Player::release_messageframeinfo() {
  // @@protoc_insertion_point(field_release:naothmessages.TeamState.Player.messageFrameInfo)
  clear_has_messageframeinfo();
  ::naothmessages::FrameInfo* temp = messageframeinfo_;
  messageframeinfo_ = NULL;
  return temp;
}
inline void TeamState_Player::set_allocated_messageframeinfo(::naothmessages::FrameInfo* messageframeinfo) {
  delete messageframeinfo_;
  messageframeinfo_ = messageframeinfo;
  if (messageframeinfo) {
    set_has_messageframeinfo();
  } else {
    clear_has_messageframeinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.TeamState.Player.messageFrameInfo)
}

// optional uint64 messageParsed = 3;
inline bool TeamState_Player::has_messageparsed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeamState_Player::set_has_messageparsed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeamState_Player::clear_has_messageparsed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TeamState_Player::clear_messageparsed() {
  messageparsed_ = GOOGLE_ULONGLONG(0);
  clear_has_messageparsed();
}
inline ::google::protobuf::uint64 TeamState_Player::messageparsed() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamState.Player.messageParsed)
  return messageparsed_;
}
inline void TeamState_Player::set_messageparsed(::google::protobuf::uint64 value) {
  set_has_messageparsed();
  messageparsed_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamState.Player.messageParsed)
}

// optional uint64 messageTimestamp = 4;
inline bool TeamState_Player::has_messagetimestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TeamState_Player::set_has_messagetimestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TeamState_Player::clear_has_messagetimestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TeamState_Player::clear_messagetimestamp() {
  messagetimestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_messagetimestamp();
}
inline ::google::protobuf::uint64 TeamState_Player::messagetimestamp() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamState.Player.messageTimestamp)
  return messagetimestamp_;
}
inline void TeamState_Player::set_messagetimestamp(::google::protobuf::uint64 value) {
  set_has_messagetimestamp();
  messagetimestamp_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamState.Player.messageTimestamp)
}

// repeated .naothmessages.Ntp ntpRequest = 5;
inline int TeamState_Player::ntprequest_size() const {
  return ntprequest_.size();
}
inline void TeamState_Player::clear_ntprequest() {
  ntprequest_.Clear();
}
inline const ::naothmessages::Ntp& TeamState_Player::ntprequest(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamState.Player.ntpRequest)
  return ntprequest_.Get(index);
}
inline ::naothmessages::Ntp* TeamState_Player::mutable_ntprequest(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.TeamState.Player.ntpRequest)
  return ntprequest_.Mutable(index);
}
inline ::naothmessages::Ntp* TeamState_Player::add_ntprequest() {
  // @@protoc_insertion_point(field_add:naothmessages.TeamState.Player.ntpRequest)
  return ntprequest_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::naothmessages::Ntp >*
TeamState_Player::mutable_ntprequest() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.TeamState.Player.ntpRequest)
  return &ntprequest_;
}
inline const ::google::protobuf::RepeatedPtrField< ::naothmessages::Ntp >&
TeamState_Player::ntprequest() const {
  // @@protoc_insertion_point(field_list:naothmessages.TeamState.Player.ntpRequest)
  return ntprequest_;
}

// optional uint64 ntpRequestUpdate = 6;
inline bool TeamState_Player::has_ntprequestupdate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TeamState_Player::set_has_ntprequestupdate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TeamState_Player::clear_has_ntprequestupdate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TeamState_Player::clear_ntprequestupdate() {
  ntprequestupdate_ = GOOGLE_ULONGLONG(0);
  clear_has_ntprequestupdate();
}
inline ::google::protobuf::uint64 TeamState_Player::ntprequestupdate() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamState.Player.ntpRequestUpdate)
  return ntprequestupdate_;
}
inline void TeamState_Player::set_ntprequestupdate(::google::protobuf::uint64 value) {
  set_has_ntprequestupdate();
  ntprequestupdate_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamState.Player.ntpRequestUpdate)
}

// optional .naothmessages.RobotState robotState = 7 [default = initial];
inline bool TeamState_Player::has_robotstate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TeamState_Player::set_has_robotstate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TeamState_Player::clear_has_robotstate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TeamState_Player::clear_robotstate() {
  robotstate_ = 0;
  clear_has_robotstate();
}
inline ::naothmessages::RobotState TeamState_Player::robotstate() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamState.Player.robotState)
  return static_cast< ::naothmessages::RobotState >(robotstate_);
}
inline void TeamState_Player::set_robotstate(::naothmessages::RobotState value) {
  assert(::naothmessages::RobotState_IsValid(value));
  set_has_robotstate();
  robotstate_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamState.Player.robotState)
}

// optional uint64 robotStateUpdate = 8;
inline bool TeamState_Player::has_robotstateupdate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TeamState_Player::set_has_robotstateupdate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TeamState_Player::clear_has_robotstateupdate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TeamState_Player::clear_robotstateupdate() {
  robotstateupdate_ = GOOGLE_ULONGLONG(0);
  clear_has_robotstateupdate();
}
inline ::google::protobuf::uint64 TeamState_Player::robotstateupdate() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamState.Player.robotStateUpdate)
  return robotstateupdate_;
}
inline void TeamState_Player::set_robotstateupdate(::google::protobuf::uint64 value) {
  set_has_robotstateupdate();
  robotstateupdate_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamState.Player.robotStateUpdate)
}

// optional bool fallen = 9 [default = false];
inline bool TeamState_Player::has_fallen() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TeamState_Player::set_has_fallen() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TeamState_Player::clear_has_fallen() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TeamState_Player::clear_fallen() {
  fallen_ = false;
  clear_has_fallen();
}
inline bool TeamState_Player::fallen() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamState.Player.fallen)
  return fallen_;
}
inline void TeamState_Player::set_fallen(bool value) {
  set_has_fallen();
  fallen_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamState.Player.fallen)
}

// optional uint64 fallenUpdate = 10;
inline bool TeamState_Player::has_fallenupdate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TeamState_Player::set_has_fallenupdate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TeamState_Player::clear_has_fallenupdate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TeamState_Player::clear_fallenupdate() {
  fallenupdate_ = GOOGLE_ULONGLONG(0);
  clear_has_fallenupdate();
}
inline ::google::protobuf::uint64 TeamState_Player::fallenupdate() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamState.Player.fallenUpdate)
  return fallenupdate_;
}
inline void TeamState_Player::set_fallenupdate(::google::protobuf::uint64 value) {
  set_has_fallenupdate();
  fallenupdate_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamState.Player.fallenUpdate)
}

// optional bool readyToWalk = 11;
inline bool TeamState_Player::has_readytowalk() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TeamState_Player::set_has_readytowalk() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TeamState_Player::clear_has_readytowalk() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TeamState_Player::clear_readytowalk() {
  readytowalk_ = false;
  clear_has_readytowalk();
}
inline bool TeamState_Player::readytowalk() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamState.Player.readyToWalk)
  return readytowalk_;
}
inline void TeamState_Player::set_readytowalk(bool value) {
  set_has_readytowalk();
  readytowalk_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamState.Player.readyToWalk)
}

// optional uint64 readyToWalkUpdate = 12;
inline bool TeamState_Player::has_readytowalkupdate() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TeamState_Player::set_has_readytowalkupdate() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TeamState_Player::clear_has_readytowalkupdate() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TeamState_Player::clear_readytowalkupdate() {
  readytowalkupdate_ = GOOGLE_ULONGLONG(0);
  clear_has_readytowalkupdate();
}
inline ::google::protobuf::uint64 TeamState_Player::readytowalkupdate() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamState.Player.readyToWalkUpdate)
  return readytowalkupdate_;
}
inline void TeamState_Player::set_readytowalkupdate(::google::protobuf::uint64 value) {
  set_has_readytowalkupdate();
  readytowalkupdate_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamState.Player.readyToWalkUpdate)
}

// optional .naothmessages.Pose2D pose = 13;
inline bool TeamState_Player::has_pose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamState_Player::set_has_pose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamState_Player::clear_has_pose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamState_Player::clear_pose() {
  if (pose_ != NULL) pose_->::naothmessages::Pose2D::Clear();
  clear_has_pose();
}
inline const ::naothmessages::Pose2D& TeamState_Player::pose() const {
  const ::naothmessages::Pose2D* p = pose_;
  // @@protoc_insertion_point(field_get:naothmessages.TeamState.Player.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::Pose2D*>(
      &::naothmessages::_Pose2D_default_instance_);
}
inline ::naothmessages::Pose2D* TeamState_Player::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::naothmessages::Pose2D;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.TeamState.Player.pose)
  return pose_;
}
inline ::naothmessages::Pose2D* TeamState_Player::release_pose() {
  // @@protoc_insertion_point(field_release:naothmessages.TeamState.Player.pose)
  clear_has_pose();
  ::naothmessages::Pose2D* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void TeamState_Player::set_allocated_pose(::naothmessages::Pose2D* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.TeamState.Player.pose)
}

// optional uint64 poseUpdate = 14;
inline bool TeamState_Player::has_poseupdate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TeamState_Player::set_has_poseupdate() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TeamState_Player::clear_has_poseupdate() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TeamState_Player::clear_poseupdate() {
  poseupdate_ = GOOGLE_ULONGLONG(0);
  clear_has_poseupdate();
}
inline ::google::protobuf::uint64 TeamState_Player::poseupdate() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamState.Player.poseUpdate)
  return poseupdate_;
}
inline void TeamState_Player::set_poseupdate(::google::protobuf::uint64 value) {
  set_has_poseupdate();
  poseupdate_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamState.Player.poseUpdate)
}

// optional int32 ballAge = 15 [default = -1];
inline bool TeamState_Player::has_ballage() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void TeamState_Player::set_has_ballage() {
  _has_bits_[0] |= 0x01000000u;
}
inline void TeamState_Player::clear_has_ballage() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void TeamState_Player::clear_ballage() {
  ballage_ = -1;
  clear_has_ballage();
}
inline ::google::protobuf::int32 TeamState_Player::ballage() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamState.Player.ballAge)
  return ballage_;
}
inline void TeamState_Player::set_ballage(::google::protobuf::int32 value) {
  set_has_ballage();
  ballage_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamState.Player.ballAge)
}

// optional uint64 ballAgeUpdate = 16;
inline bool TeamState_Player::has_ballageupdate() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TeamState_Player::set_has_ballageupdate() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TeamState_Player::clear_has_ballageupdate() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TeamState_Player::clear_ballageupdate() {
  ballageupdate_ = GOOGLE_ULONGLONG(0);
  clear_has_ballageupdate();
}
inline ::google::protobuf::uint64 TeamState_Player::ballageupdate() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamState.Player.ballAgeUpdate)
  return ballageupdate_;
}
inline void TeamState_Player::set_ballageupdate(::google::protobuf::uint64 value) {
  set_has_ballageupdate();
  ballageupdate_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamState.Player.ballAgeUpdate)
}

// optional .naothmessages.DoubleVector2 ballPosition = 17;
inline bool TeamState_Player::has_ballposition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamState_Player::set_has_ballposition() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamState_Player::clear_has_ballposition() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamState_Player::clear_ballposition() {
  if (ballposition_ != NULL) ballposition_->::naothmessages::DoubleVector2::Clear();
  clear_has_ballposition();
}
inline const ::naothmessages::DoubleVector2& TeamState_Player::ballposition() const {
  const ::naothmessages::DoubleVector2* p = ballposition_;
  // @@protoc_insertion_point(field_get:naothmessages.TeamState.Player.ballPosition)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
inline ::naothmessages::DoubleVector2* TeamState_Player::mutable_ballposition() {
  set_has_ballposition();
  if (ballposition_ == NULL) {
    ballposition_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.TeamState.Player.ballPosition)
  return ballposition_;
}
inline ::naothmessages::DoubleVector2* TeamState_Player::release_ballposition() {
  // @@protoc_insertion_point(field_release:naothmessages.TeamState.Player.ballPosition)
  clear_has_ballposition();
  ::naothmessages::DoubleVector2* temp = ballposition_;
  ballposition_ = NULL;
  return temp;
}
inline void TeamState_Player::set_allocated_ballposition(::naothmessages::DoubleVector2* ballposition) {
  delete ballposition_;
  ballposition_ = ballposition;
  if (ballposition) {
    set_has_ballposition();
  } else {
    clear_has_ballposition();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.TeamState.Player.ballPosition)
}

// optional uint64 ballPositionUpdate = 18;
inline bool TeamState_Player::has_ballpositionupdate() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void TeamState_Player::set_has_ballpositionupdate() {
  _has_bits_[0] |= 0x00080000u;
}
inline void TeamState_Player::clear_has_ballpositionupdate() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void TeamState_Player::clear_ballpositionupdate() {
  ballpositionupdate_ = GOOGLE_ULONGLONG(0);
  clear_has_ballpositionupdate();
}
inline ::google::protobuf::uint64 TeamState_Player::ballpositionupdate() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamState.Player.ballPositionUpdate)
  return ballpositionupdate_;
}
inline void TeamState_Player::set_ballpositionupdate(::google::protobuf::uint64 value) {
  set_has_ballpositionupdate();
  ballpositionupdate_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamState.Player.ballPositionUpdate)
}

// optional uint32 timeToBall = 19;
inline bool TeamState_Player::has_timetoball() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TeamState_Player::set_has_timetoball() {
  _has_bits_[0] |= 0x00040000u;
}
inline void TeamState_Player::clear_has_timetoball() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void TeamState_Player::clear_timetoball() {
  timetoball_ = 0u;
  clear_has_timetoball();
}
inline ::google::protobuf::uint32 TeamState_Player::timetoball() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamState.Player.timeToBall)
  return timetoball_;
}
inline void TeamState_Player::set_timetoball(::google::protobuf::uint32 value) {
  set_has_timetoball();
  timetoball_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamState.Player.timeToBall)
}

// optional uint64 timeToBallUpdate = 20;
inline bool TeamState_Player::has_timetoballupdate() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void TeamState_Player::set_has_timetoballupdate() {
  _has_bits_[0] |= 0x00100000u;
}
inline void TeamState_Player::clear_has_timetoballupdate() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void TeamState_Player::clear_timetoballupdate() {
  timetoballupdate_ = GOOGLE_ULONGLONG(0);
  clear_has_timetoballupdate();
}
inline ::google::protobuf::uint64 TeamState_Player::timetoballupdate() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamState.Player.timeToBallUpdate)
  return timetoballupdate_;
}
inline void TeamState_Player::set_timetoballupdate(::google::protobuf::uint64 value) {
  set_has_timetoballupdate();
  timetoballupdate_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamState.Player.timeToBallUpdate)
}

// optional bool wantsToBeStriker = 21 [default = false];
inline bool TeamState_Player::has_wantstobestriker() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TeamState_Player::set_has_wantstobestriker() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TeamState_Player::clear_has_wantstobestriker() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TeamState_Player::clear_wantstobestriker() {
  wantstobestriker_ = false;
  clear_has_wantstobestriker();
}
inline bool TeamState_Player::wantstobestriker() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamState.Player.wantsToBeStriker)
  return wantstobestriker_;
}
inline void TeamState_Player::set_wantstobestriker(bool value) {
  set_has_wantstobestriker();
  wantstobestriker_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamState.Player.wantsToBeStriker)
}

// optional uint64 wantsToBeStrikerUpdate = 22;
inline bool TeamState_Player::has_wantstobestrikerupdate() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void TeamState_Player::set_has_wantstobestrikerupdate() {
  _has_bits_[0] |= 0x00200000u;
}
inline void TeamState_Player::clear_has_wantstobestrikerupdate() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void TeamState_Player::clear_wantstobestrikerupdate() {
  wantstobestrikerupdate_ = GOOGLE_ULONGLONG(0);
  clear_has_wantstobestrikerupdate();
}
inline ::google::protobuf::uint64 TeamState_Player::wantstobestrikerupdate() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamState.Player.wantsToBeStrikerUpdate)
  return wantstobestrikerupdate_;
}
inline void TeamState_Player::set_wantstobestrikerupdate(::google::protobuf::uint64 value) {
  set_has_wantstobestrikerupdate();
  wantstobestrikerupdate_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamState.Player.wantsToBeStrikerUpdate)
}

// optional bool wasStriker = 23 [default = false];
inline bool TeamState_Player::has_wasstriker() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TeamState_Player::set_has_wasstriker() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TeamState_Player::clear_has_wasstriker() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TeamState_Player::clear_wasstriker() {
  wasstriker_ = false;
  clear_has_wasstriker();
}
inline bool TeamState_Player::wasstriker() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamState.Player.wasStriker)
  return wasstriker_;
}
inline void TeamState_Player::set_wasstriker(bool value) {
  set_has_wasstriker();
  wasstriker_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamState.Player.wasStriker)
}

// optional uint64 wasStrikerUpdate = 24;
inline bool TeamState_Player::has_wasstrikerupdate() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void TeamState_Player::set_has_wasstrikerupdate() {
  _has_bits_[0] |= 0x00400000u;
}
inline void TeamState_Player::clear_has_wasstrikerupdate() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void TeamState_Player::clear_wasstrikerupdate() {
  wasstrikerupdate_ = GOOGLE_ULONGLONG(0);
  clear_has_wasstrikerupdate();
}
inline ::google::protobuf::uint64 TeamState_Player::wasstrikerupdate() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamState.Player.wasStrikerUpdate)
  return wasstrikerupdate_;
}
inline void TeamState_Player::set_wasstrikerupdate(::google::protobuf::uint64 value) {
  set_has_wasstrikerupdate();
  wasstrikerupdate_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamState.Player.wasStrikerUpdate)
}

// optional .naothmessages.RobotRole robotRole = 25;
inline bool TeamState_Player::has_robotrole() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamState_Player::set_has_robotrole() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamState_Player::clear_has_robotrole() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamState_Player::clear_robotrole() {
  if (robotrole_ != NULL) robotrole_->::naothmessages::RobotRole::Clear();
  clear_has_robotrole();
}
inline const ::naothmessages::RobotRole& TeamState_Player::robotrole() const {
  const ::naothmessages::RobotRole* p = robotrole_;
  // @@protoc_insertion_point(field_get:naothmessages.TeamState.Player.robotRole)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::RobotRole*>(
      &::naothmessages::_RobotRole_default_instance_);
}
inline ::naothmessages::RobotRole* TeamState_Player::mutable_robotrole() {
  set_has_robotrole();
  if (robotrole_ == NULL) {
    robotrole_ = new ::naothmessages::RobotRole;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.TeamState.Player.robotRole)
  return robotrole_;
}
inline ::naothmessages::RobotRole* TeamState_Player::release_robotrole() {
  // @@protoc_insertion_point(field_release:naothmessages.TeamState.Player.robotRole)
  clear_has_robotrole();
  ::naothmessages::RobotRole* temp = robotrole_;
  robotrole_ = NULL;
  return temp;
}
inline void TeamState_Player::set_allocated_robotrole(::naothmessages::RobotRole* robotrole) {
  delete robotrole_;
  robotrole_ = robotrole;
  if (robotrole) {
    set_has_robotrole();
  } else {
    clear_has_robotrole();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.TeamState.Player.robotRole)
}

// optional uint64 robotRoleUpdate = 26;
inline bool TeamState_Player::has_robotroleupdate() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void TeamState_Player::set_has_robotroleupdate() {
  _has_bits_[0] |= 0x00800000u;
}
inline void TeamState_Player::clear_has_robotroleupdate() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void TeamState_Player::clear_robotroleupdate() {
  robotroleupdate_ = GOOGLE_ULONGLONG(0);
  clear_has_robotroleupdate();
}
inline ::google::protobuf::uint64 TeamState_Player::robotroleupdate() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamState.Player.robotRoleUpdate)
  return robotroleupdate_;
}
inline void TeamState_Player::set_robotroleupdate(::google::protobuf::uint64 value) {
  set_has_robotroleupdate();
  robotroleupdate_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamState.Player.robotRoleUpdate)
}

// -------------------------------------------------------------------

// TeamState

// repeated .naothmessages.TeamState.Player players = 1;
inline int TeamState::players_size() const {
  return players_.size();
}
inline void TeamState::clear_players() {
  players_.Clear();
}
inline const ::naothmessages::TeamState_Player& TeamState::players(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamState.players)
  return players_.Get(index);
}
inline ::naothmessages::TeamState_Player* TeamState::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.TeamState.players)
  return players_.Mutable(index);
}
inline ::naothmessages::TeamState_Player* TeamState::add_players() {
  // @@protoc_insertion_point(field_add:naothmessages.TeamState.players)
  return players_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::naothmessages::TeamState_Player >*
TeamState::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.TeamState.players)
  return &players_;
}
inline const ::google::protobuf::RepeatedPtrField< ::naothmessages::TeamState_Player >&
TeamState::players() const {
  // @@protoc_insertion_point(field_list:naothmessages.TeamState.players)
  return players_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace naothmessages

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::naothmessages::TeamColor> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::naothmessages::TeamColor>() {
  return ::naothmessages::TeamColor_descriptor();
}
template <> struct is_proto_enum< ::naothmessages::RobotState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::naothmessages::RobotState>() {
  return ::naothmessages::RobotState_descriptor();
}
template <> struct is_proto_enum< ::naothmessages::RobotRoleStatic> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::naothmessages::RobotRoleStatic>() {
  return ::naothmessages::RobotRoleStatic_descriptor();
}
template <> struct is_proto_enum< ::naothmessages::RobotRoleDynamic> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::naothmessages::RobotRoleDynamic>() {
  return ::naothmessages::RobotRoleDynamic_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TeamMessage_2eproto__INCLUDED
