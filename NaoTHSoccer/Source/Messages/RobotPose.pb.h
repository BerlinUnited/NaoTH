// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RobotPose.proto

#ifndef PROTOBUF_RobotPose_2eproto__INCLUDED
#define PROTOBUF_RobotPose_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "CommonTypes.pb.h"
// @@protoc_insertion_point(includes)
namespace naothmessages {
class RobotPose;
class RobotPoseDefaultTypeInternal;
extern RobotPoseDefaultTypeInternal _RobotPose_default_instance_;
}  // namespace naothmessages

namespace naothmessages {

namespace protobuf_RobotPose_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_RobotPose_2eproto

// ===================================================================

class RobotPose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.RobotPose) */ {
 public:
  RobotPose();
  virtual ~RobotPose();

  RobotPose(const RobotPose& from);

  inline RobotPose& operator=(const RobotPose& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RobotPose(RobotPose&& from) noexcept
    : RobotPose() {
    *this = ::std::move(from);
  }

  inline RobotPose& operator=(RobotPose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotPose& default_instance();

  static inline const RobotPose* internal_default_instance() {
    return reinterpret_cast<const RobotPose*>(
               &_RobotPose_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RobotPose* other);
  friend void swap(RobotPose& a, RobotPose& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RobotPose* New() const PROTOBUF_FINAL { return New(NULL); }

  RobotPose* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RobotPose& from);
  void MergeFrom(const RobotPose& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RobotPose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .naothmessages.Pose2D pose = 1;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 1;
  const ::naothmessages::Pose2D& pose() const;
  ::naothmessages::Pose2D* mutable_pose();
  ::naothmessages::Pose2D* release_pose();
  void set_allocated_pose(::naothmessages::Pose2D* pose);

  // optional .naothmessages.DoubleVector2 principleAxisMajor = 3;
  bool has_principleaxismajor() const;
  void clear_principleaxismajor();
  static const int kPrincipleAxisMajorFieldNumber = 3;
  const ::naothmessages::DoubleVector2& principleaxismajor() const;
  ::naothmessages::DoubleVector2* mutable_principleaxismajor();
  ::naothmessages::DoubleVector2* release_principleaxismajor();
  void set_allocated_principleaxismajor(::naothmessages::DoubleVector2* principleaxismajor);

  // optional .naothmessages.DoubleVector2 principleAxisMinor = 4;
  bool has_principleaxisminor() const;
  void clear_principleaxisminor();
  static const int kPrincipleAxisMinorFieldNumber = 4;
  const ::naothmessages::DoubleVector2& principleaxisminor() const;
  ::naothmessages::DoubleVector2* mutable_principleaxisminor();
  ::naothmessages::DoubleVector2* release_principleaxisminor();
  void set_allocated_principleaxisminor(::naothmessages::DoubleVector2* principleaxisminor);

  // optional bool isValid = 2;
  bool has_isvalid() const;
  void clear_isvalid();
  static const int kIsValidFieldNumber = 2;
  bool isvalid() const;
  void set_isvalid(bool value);

  // @@protoc_insertion_point(class_scope:naothmessages.RobotPose)
 private:
  void set_has_pose();
  void clear_has_pose();
  void set_has_isvalid();
  void clear_has_isvalid();
  void set_has_principleaxismajor();
  void clear_has_principleaxismajor();
  void set_has_principleaxisminor();
  void clear_has_principleaxisminor();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::naothmessages::Pose2D* pose_;
  ::naothmessages::DoubleVector2* principleaxismajor_;
  ::naothmessages::DoubleVector2* principleaxisminor_;
  bool isvalid_;
  friend struct protobuf_RobotPose_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RobotPose

// required .naothmessages.Pose2D pose = 1;
inline bool RobotPose::has_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotPose::set_has_pose() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotPose::clear_has_pose() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotPose::clear_pose() {
  if (pose_ != NULL) pose_->::naothmessages::Pose2D::Clear();
  clear_has_pose();
}
inline const ::naothmessages::Pose2D& RobotPose::pose() const {
  const ::naothmessages::Pose2D* p = pose_;
  // @@protoc_insertion_point(field_get:naothmessages.RobotPose.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::Pose2D*>(
      &::naothmessages::_Pose2D_default_instance_);
}
inline ::naothmessages::Pose2D* RobotPose::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::naothmessages::Pose2D;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.RobotPose.pose)
  return pose_;
}
inline ::naothmessages::Pose2D* RobotPose::release_pose() {
  // @@protoc_insertion_point(field_release:naothmessages.RobotPose.pose)
  clear_has_pose();
  ::naothmessages::Pose2D* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void RobotPose::set_allocated_pose(::naothmessages::Pose2D* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.RobotPose.pose)
}

// optional bool isValid = 2;
inline bool RobotPose::has_isvalid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RobotPose::set_has_isvalid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RobotPose::clear_has_isvalid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RobotPose::clear_isvalid() {
  isvalid_ = false;
  clear_has_isvalid();
}
inline bool RobotPose::isvalid() const {
  // @@protoc_insertion_point(field_get:naothmessages.RobotPose.isValid)
  return isvalid_;
}
inline void RobotPose::set_isvalid(bool value) {
  set_has_isvalid();
  isvalid_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.RobotPose.isValid)
}

// optional .naothmessages.DoubleVector2 principleAxisMajor = 3;
inline bool RobotPose::has_principleaxismajor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotPose::set_has_principleaxismajor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotPose::clear_has_principleaxismajor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobotPose::clear_principleaxismajor() {
  if (principleaxismajor_ != NULL) principleaxismajor_->::naothmessages::DoubleVector2::Clear();
  clear_has_principleaxismajor();
}
inline const ::naothmessages::DoubleVector2& RobotPose::principleaxismajor() const {
  const ::naothmessages::DoubleVector2* p = principleaxismajor_;
  // @@protoc_insertion_point(field_get:naothmessages.RobotPose.principleAxisMajor)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
inline ::naothmessages::DoubleVector2* RobotPose::mutable_principleaxismajor() {
  set_has_principleaxismajor();
  if (principleaxismajor_ == NULL) {
    principleaxismajor_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.RobotPose.principleAxisMajor)
  return principleaxismajor_;
}
inline ::naothmessages::DoubleVector2* RobotPose::release_principleaxismajor() {
  // @@protoc_insertion_point(field_release:naothmessages.RobotPose.principleAxisMajor)
  clear_has_principleaxismajor();
  ::naothmessages::DoubleVector2* temp = principleaxismajor_;
  principleaxismajor_ = NULL;
  return temp;
}
inline void RobotPose::set_allocated_principleaxismajor(::naothmessages::DoubleVector2* principleaxismajor) {
  delete principleaxismajor_;
  principleaxismajor_ = principleaxismajor;
  if (principleaxismajor) {
    set_has_principleaxismajor();
  } else {
    clear_has_principleaxismajor();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.RobotPose.principleAxisMajor)
}

// optional .naothmessages.DoubleVector2 principleAxisMinor = 4;
inline bool RobotPose::has_principleaxisminor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RobotPose::set_has_principleaxisminor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RobotPose::clear_has_principleaxisminor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RobotPose::clear_principleaxisminor() {
  if (principleaxisminor_ != NULL) principleaxisminor_->::naothmessages::DoubleVector2::Clear();
  clear_has_principleaxisminor();
}
inline const ::naothmessages::DoubleVector2& RobotPose::principleaxisminor() const {
  const ::naothmessages::DoubleVector2* p = principleaxisminor_;
  // @@protoc_insertion_point(field_get:naothmessages.RobotPose.principleAxisMinor)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
inline ::naothmessages::DoubleVector2* RobotPose::mutable_principleaxisminor() {
  set_has_principleaxisminor();
  if (principleaxisminor_ == NULL) {
    principleaxisminor_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.RobotPose.principleAxisMinor)
  return principleaxisminor_;
}
inline ::naothmessages::DoubleVector2* RobotPose::release_principleaxisminor() {
  // @@protoc_insertion_point(field_release:naothmessages.RobotPose.principleAxisMinor)
  clear_has_principleaxisminor();
  ::naothmessages::DoubleVector2* temp = principleaxisminor_;
  principleaxisminor_ = NULL;
  return temp;
}
inline void RobotPose::set_allocated_principleaxisminor(::naothmessages::DoubleVector2* principleaxisminor) {
  delete principleaxisminor_;
  principleaxisminor_ = principleaxisminor;
  if (principleaxisminor) {
    set_has_principleaxisminor();
  } else {
    clear_has_principleaxisminor();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.RobotPose.principleAxisMinor)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace naothmessages

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RobotPose_2eproto__INCLUDED
