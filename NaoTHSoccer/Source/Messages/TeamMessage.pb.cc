// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TeamMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TeamMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace naothmessages {
class RobotRoleDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RobotRole>
     _instance;
} _RobotRole_default_instance_;
class OpponentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Opponent>
     _instance;
} _Opponent_default_instance_;
class NtpDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Ntp>
     _instance;
} _Ntp_default_instance_;
class DropsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Drops>
     _instance;
} _Drops_default_instance_;
class BUUserTeamMessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BUUserTeamMessage>
     _instance;
} _BUUserTeamMessage_default_instance_;
class TeamMessage_DataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamMessage_Data>
     _instance;
} _TeamMessage_Data_default_instance_;
class TeamMessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamMessage>
     _instance;
} _TeamMessage_default_instance_;
class TeamMessageEventDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamMessageEvent>
     _instance;
} _TeamMessageEvent_default_instance_;

namespace protobuf_TeamMessage_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotRole, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotRole, role_static_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotRole, role_dynamic_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Opponent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Opponent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Opponent, playernum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Opponent, poseonfield_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ntp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ntp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ntp, playernum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ntp, sent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ntp, received_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drops, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drops, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drops, dropnosplmessage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drops, dropnotourteam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drops, dropnotparseable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drops, dropkeyfail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drops, dropmonotonic_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUUserTeamMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUUserTeamMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUUserTeamMessage, bodyid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUUserTeamMessage, timetoball_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUUserTeamMessage, wasstriker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUUserTeamMessage, ispenalized_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUUserTeamMessage, opponents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUUserTeamMessage, teamnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUUserTeamMessage, batterycharge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUUserTeamMessage, temperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUUserTeamMessage, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUUserTeamMessage, wantstobestriker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUUserTeamMessage, cputemperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUUserTeamMessage, whistledetected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUUserTeamMessage, whistlecount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUUserTeamMessage, teamball_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUUserTeamMessage, ntprequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUUserTeamMessage, ballvelocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUUserTeamMessage, robotstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUUserTeamMessage, robotrole_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUUserTeamMessage, readytowalk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUUserTeamMessage, key_),
  0,
  5,
  7,
  8,
  ~0u,
  6,
  17,
  11,
  12,
  9,
  13,
  10,
  14,
  2,
  ~0u,
  3,
  15,
  4,
  16,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMessage_Data, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMessage_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMessage_Data, playernum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMessage_Data, teamcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMessage_Data, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMessage_Data, ballage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMessage_Data, ballposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMessage_Data, ballvelocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMessage_Data, fallen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMessage_Data, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMessage_Data, frameinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMessage_Data, teamnumber_),
  5,
  7,
  0,
  9,
  1,
  2,
  6,
  3,
  4,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMessage, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMessage, messagedrop_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMessageEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMessageEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMessageEvent, playernum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMessageEvent, details_),
  0,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(RobotRole)},
  { 9, 16, sizeof(Opponent)},
  { 18, 26, sizeof(Ntp)},
  { 29, 39, sizeof(Drops)},
  { 44, 69, sizeof(BUUserTeamMessage)},
  { 89, 104, sizeof(TeamMessage_Data)},
  { 114, 121, sizeof(TeamMessage)},
  { 123, 130, sizeof(TeamMessageEvent)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RobotRole_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Opponent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ntp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Drops_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BUUserTeamMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamMessage_Data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamMessageEvent_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "TeamMessage.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::naothmessages::protobuf_CommonTypes_2eproto::InitDefaults();
  ::naothmessages::protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fany_2eproto::InitDefaults();
  _RobotRole_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RobotRole_default_instance_);_Opponent_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Opponent_default_instance_);_Ntp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Ntp_default_instance_);_Drops_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Drops_default_instance_);BUUserTeamMessage::_default_bodyid_.DefaultConstruct();
  *BUUserTeamMessage::_default_bodyid_.get_mutable() = ::std::string("unknown", 7);
  ::google::protobuf::internal::OnShutdownDestroyString(
      BUUserTeamMessage::_default_bodyid_.get_mutable());
  BUUserTeamMessage::_default_key_.DefaultConstruct();
  *BUUserTeamMessage::_default_key_.get_mutable() = ::std::string("none", 4);
  ::google::protobuf::internal::OnShutdownDestroyString(
      BUUserTeamMessage::_default_key_.get_mutable());
  _BUUserTeamMessage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BUUserTeamMessage_default_instance_);_TeamMessage_Data_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamMessage_Data_default_instance_);_TeamMessage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamMessage_default_instance_);_TeamMessageEvent_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamMessageEvent_default_instance_);_Opponent_default_instance_._instance.get_mutable()->poseonfield_ = const_cast< ::naothmessages::Pose2D*>(
      ::naothmessages::Pose2D::internal_default_instance());
  _BUUserTeamMessage_default_instance_._instance.get_mutable()->teamball_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _BUUserTeamMessage_default_instance_._instance.get_mutable()->ballvelocity_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _BUUserTeamMessage_default_instance_._instance.get_mutable()->robotrole_ = const_cast< ::naothmessages::RobotRole*>(
      ::naothmessages::RobotRole::internal_default_instance());
  _TeamMessage_Data_default_instance_._instance.get_mutable()->pose_ = const_cast< ::naothmessages::Pose2D*>(
      ::naothmessages::Pose2D::internal_default_instance());
  _TeamMessage_Data_default_instance_._instance.get_mutable()->ballposition_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _TeamMessage_Data_default_instance_._instance.get_mutable()->ballvelocity_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _TeamMessage_Data_default_instance_._instance.get_mutable()->user_ = const_cast< ::naothmessages::BUUserTeamMessage*>(
      ::naothmessages::BUUserTeamMessage::internal_default_instance());
  _TeamMessage_Data_default_instance_._instance.get_mutable()->frameinfo_ = const_cast< ::naothmessages::FrameInfo*>(
      ::naothmessages::FrameInfo::internal_default_instance());
  _TeamMessage_default_instance_._instance.get_mutable()->messagedrop_ = const_cast< ::naothmessages::Drops*>(
      ::naothmessages::Drops::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021TeamMessage.proto\022\rnaothmessages\032\021Comm"
      "onTypes.proto\032\037Framework-Representations"
      ".proto\032\031google/protobuf/any.proto\"\220\001\n\tRo"
      "botRole\022A\n\013role_static\030\001 \002(\0162\036.naothmess"
      "ages.RobotRoleStatic:\014role_unknown\022@\n\014ro"
      "le_dynamic\030\002 \002(\0162\037.naothmessages.RobotRo"
      "leDynamic:\trole_none\"L\n\010Opponent\022\024\n\tplay"
      "erNum\030\001 \002(\005:\0010\022*\n\013poseOnField\030\002 \001(\0132\025.na"
      "othmessages.Pose2D\"A\n\003Ntp\022\024\n\tplayerNum\030\001"
      " \002(\005:\0010\022\017\n\004sent\030\002 \001(\004:\0010\022\023\n\010received\030\003 \001"
      "(\004:\0010\"\216\001\n\005Drops\022\033\n\020dropNoSplMessage\030\001 \001("
      "\r:\0010\022\031\n\016dropNotOurTeam\030\002 \001(\r:\0010\022\033\n\020dropN"
      "otParseable\030\003 \001(\r:\0010\022\026\n\013dropKeyFail\030\004 \001("
      "\r:\0010\022\030\n\rdropMonotonic\030\005 \001(\r:\0010\"\230\005\n\021BUUse"
      "rTeamMessage\022\027\n\006bodyID\030\001 \001(\t:\007unknown\022\022\n"
      "\ntimeToBall\030\002 \001(\r\022\031\n\nwasStriker\030\003 \001(\010:\005f"
      "alse\022\036\n\013isPenalized\030\004 \001(\010:\005falseB\002\030\001\022*\n\t"
      "opponents\030\005 \003(\0132\027.naothmessages.Opponent"
      "\022\031\n\nteamNumber\030\006 \001(\r:\0010B\002\030\001\022\030\n\rbatteryCh"
      "arge\030\007 \001(\002:\0011\022\026\n\013temperature\030\010 \001(\002:\0010\022\024\n"
      "\ttimestamp\030\t \001(\004:\0010\022\037\n\020wantsToBeStriker\030"
      "\n \001(\010:\005false\022\031\n\016cpuTemperature\030\013 \001(\002:\0010\022"
      "\036\n\017whistleDetected\030\014 \001(\010:\005false\022\027\n\014whist"
      "leCount\030\r \001(\005:\0010\022.\n\010teamBall\030\016 \001(\0132\034.nao"
      "thmessages.DoubleVector2\022&\n\nntpRequest\030\017"
      " \003(\0132\022.naothmessages.Ntp\0222\n\014ballVelocity"
      "\030\020 \001(\0132\034.naothmessages.DoubleVector2\0226\n\n"
      "robotState\030\021 \001(\0162\031.naothmessages.RobotSt"
      "ate:\007initial\022+\n\trobotRole\030\022 \001(\0132\030.naothm"
      "essages.RobotRole\022\023\n\013readyToWalk\030\023 \001(\010\022\021"
      "\n\003key\030d \001(\t:\004none\"\356\003\n\013TeamMessage\022-\n\004dat"
      "a\030\001 \003(\0132\037.naothmessages.TeamMessage.Data"
      "\022)\n\013messageDrop\030\002 \001(\0132\024.naothmessages.Dr"
      "ops\032\204\003\n\004Data\022\024\n\tplayerNum\030\001 \001(\r:\0010\0229\n\tte"
      "amColor\030\013 \001(\0162\030.naothmessages.TeamColor:"
      "\010blueTeamB\002\030\001\022#\n\004pose\030\003 \001(\0132\025.naothmessa"
      "ges.Pose2D\022\023\n\007ballAge\030\004 \001(\005:\002-1\0222\n\014ballP"
      "osition\030\005 \001(\0132\034.naothmessages.DoubleVect"
      "or2\0222\n\014ballVelocity\030\006 \001(\0132\034.naothmessage"
      "s.DoubleVector2\022\025\n\006fallen\030\n \001(\010:\005false\022."
      "\n\004user\030\010 \001(\0132 .naothmessages.BUUserTeamM"
      "essage\022+\n\tframeInfo\030\t \001(\0132\030.naothmessage"
      "s.FrameInfo\022\025\n\nteamNumber\030\014 \001(\r:\0010\"O\n\020Te"
      "amMessageEvent\022\024\n\tplayerNum\030\001 \001(\r:\0010\022%\n\007"
      "details\030\002 \003(\0132\024.google.protobuf.Any*\262\001\n\t"
      "TeamColor\022\014\n\010blueTeam\020\000\022\013\n\007redTeam\020\001\022\016\n\n"
      "yellowTeam\020\002\022\r\n\tblackTeam\020\003\022\r\n\twhiteTeam"
      "\020\004\022\r\n\tgreenTeam\020\005\022\016\n\norangeTeam\020\006\022\016\n\npur"
      "pleTeam\020\007\022\r\n\tbrownTeam\020\010\022\014\n\010grayTeam\020\t\022\020"
      "\n\013invalidTeam\020\377\001*d\n\nRobotState\022\013\n\007initia"
      "l\020\000\022\t\n\005ready\020\001\022\007\n\003set\020\002\022\013\n\007playing\020\003\022\014\n\010"
      "finished\020\004\022\r\n\tpenalized\020\005\022\013\n\007unstiff\020\006*\230"
      "\002\n\017RobotRoleStatic\022\026\n\022role_defender_left"
      "\020\000\022\030\n\024role_defender_center\020\001\022\027\n\023role_def"
      "ender_right\020\002\022\030\n\024role_midfielder_left\020\003\022"
      "\032\n\026role_midfielder_center\020\004\022\031\n\025role_midf"
      "ielder_right\020\005\022\025\n\021role_forward_left\020\006\022\027\n"
      "\023role_forward_center\020\007\022\026\n\022role_forward_r"
      "ight\020\010\022\017\n\013role_goalie\020\t\022\020\n\014role_unknown\020"
      "\n*b\n\020RobotRoleDynamic\022\r\n\trole_none\020\000\022\022\n\016"
      "role_supporter\020\001\022\031\n\025role_goalie_supporte"
      "r\020\002\022\020\n\014role_striker\020\003B\033\n\031de.naoth.rc.cor"
      "e.messages"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2490);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TeamMessage.proto", &protobuf_RegisterTypes);
  ::naothmessages::protobuf_CommonTypes_2eproto::AddDescriptors();
  ::naothmessages::protobuf_Framework_2dRepresentations_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fany_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_TeamMessage_2eproto

const ::google::protobuf::EnumDescriptor* TeamColor_descriptor() {
  protobuf_TeamMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamMessage_2eproto::file_level_enum_descriptors[0];
}
bool TeamColor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 255:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RobotState_descriptor() {
  protobuf_TeamMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamMessage_2eproto::file_level_enum_descriptors[1];
}
bool RobotState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RobotRoleStatic_descriptor() {
  protobuf_TeamMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamMessage_2eproto::file_level_enum_descriptors[2];
}
bool RobotRoleStatic_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RobotRoleDynamic_descriptor() {
  protobuf_TeamMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamMessage_2eproto::file_level_enum_descriptors[3];
}
bool RobotRoleDynamic_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotRole::kRoleStaticFieldNumber;
const int RobotRole::kRoleDynamicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotRole::RobotRole()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.RobotRole)
}
RobotRole::RobotRole(const RobotRole& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&role_dynamic_, &from.role_dynamic_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_static_) -
    reinterpret_cast<char*>(&role_dynamic_)) + sizeof(role_static_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.RobotRole)
}

void RobotRole::SharedCtor() {
  _cached_size_ = 0;
  role_dynamic_ = 0;
  role_static_ = 10;
}

RobotRole::~RobotRole() {
  // @@protoc_insertion_point(destructor:naothmessages.RobotRole)
  SharedDtor();
}

void RobotRole::SharedDtor() {
}

void RobotRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotRole::descriptor() {
  protobuf_TeamMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RobotRole& RobotRole::default_instance() {
  protobuf_TeamMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

RobotRole* RobotRole::New(::google::protobuf::Arena* arena) const {
  RobotRole* n = new RobotRole;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RobotRole::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.RobotRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    role_dynamic_ = 0;
    role_static_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RobotRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.RobotRole)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .naothmessages.RobotRoleStatic role_static = 1 [default = role_unknown];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::naothmessages::RobotRoleStatic_IsValid(value)) {
            set_role_static(static_cast< ::naothmessages::RobotRoleStatic >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .naothmessages.RobotRoleDynamic role_dynamic = 2 [default = role_none];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::naothmessages::RobotRoleDynamic_IsValid(value)) {
            set_role_dynamic(static_cast< ::naothmessages::RobotRoleDynamic >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.RobotRole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.RobotRole)
  return false;
#undef DO_
}

void RobotRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.RobotRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.RobotRoleStatic role_static = 1 [default = role_unknown];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->role_static(), output);
  }

  // required .naothmessages.RobotRoleDynamic role_dynamic = 2 [default = role_none];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->role_dynamic(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.RobotRole)
}

::google::protobuf::uint8* RobotRole::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.RobotRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.RobotRoleStatic role_static = 1 [default = role_unknown];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->role_static(), target);
  }

  // required .naothmessages.RobotRoleDynamic role_dynamic = 2 [default = role_none];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->role_dynamic(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.RobotRole)
  return target;
}

size_t RobotRole::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:naothmessages.RobotRole)
  size_t total_size = 0;

  if (has_role_dynamic()) {
    // required .naothmessages.RobotRoleDynamic role_dynamic = 2 [default = role_none];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->role_dynamic());
  }

  if (has_role_static()) {
    // required .naothmessages.RobotRoleStatic role_static = 1 [default = role_unknown];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->role_static());
  }

  return total_size;
}
size_t RobotRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.RobotRole)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .naothmessages.RobotRoleDynamic role_dynamic = 2 [default = role_none];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->role_dynamic());

    // required .naothmessages.RobotRoleStatic role_static = 1 [default = role_unknown];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->role_static());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotRole::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.RobotRole)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotRole* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RobotRole>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.RobotRole)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.RobotRole)
    MergeFrom(*source);
  }
}

void RobotRole::MergeFrom(const RobotRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.RobotRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      role_dynamic_ = from.role_dynamic_;
    }
    if (cached_has_bits & 0x00000002u) {
      role_static_ = from.role_static_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RobotRole::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.RobotRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotRole::CopyFrom(const RobotRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.RobotRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotRole::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void RobotRole::Swap(RobotRole* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotRole::InternalSwap(RobotRole* other) {
  using std::swap;
  swap(role_dynamic_, other->role_dynamic_);
  swap(role_static_, other->role_static_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RobotRole::GetMetadata() const {
  protobuf_TeamMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RobotRole

// required .naothmessages.RobotRoleStatic role_static = 1 [default = role_unknown];
bool RobotRole::has_role_static() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RobotRole::set_has_role_static() {
  _has_bits_[0] |= 0x00000002u;
}
void RobotRole::clear_has_role_static() {
  _has_bits_[0] &= ~0x00000002u;
}
void RobotRole::clear_role_static() {
  role_static_ = 10;
  clear_has_role_static();
}
::naothmessages::RobotRoleStatic RobotRole::role_static() const {
  // @@protoc_insertion_point(field_get:naothmessages.RobotRole.role_static)
  return static_cast< ::naothmessages::RobotRoleStatic >(role_static_);
}
void RobotRole::set_role_static(::naothmessages::RobotRoleStatic value) {
  assert(::naothmessages::RobotRoleStatic_IsValid(value));
  set_has_role_static();
  role_static_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.RobotRole.role_static)
}

// required .naothmessages.RobotRoleDynamic role_dynamic = 2 [default = role_none];
bool RobotRole::has_role_dynamic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RobotRole::set_has_role_dynamic() {
  _has_bits_[0] |= 0x00000001u;
}
void RobotRole::clear_has_role_dynamic() {
  _has_bits_[0] &= ~0x00000001u;
}
void RobotRole::clear_role_dynamic() {
  role_dynamic_ = 0;
  clear_has_role_dynamic();
}
::naothmessages::RobotRoleDynamic RobotRole::role_dynamic() const {
  // @@protoc_insertion_point(field_get:naothmessages.RobotRole.role_dynamic)
  return static_cast< ::naothmessages::RobotRoleDynamic >(role_dynamic_);
}
void RobotRole::set_role_dynamic(::naothmessages::RobotRoleDynamic value) {
  assert(::naothmessages::RobotRoleDynamic_IsValid(value));
  set_has_role_dynamic();
  role_dynamic_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.RobotRole.role_dynamic)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Opponent::kPlayerNumFieldNumber;
const int Opponent::kPoseOnFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Opponent::Opponent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.Opponent)
}
Opponent::Opponent(const Opponent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_poseonfield()) {
    poseonfield_ = new ::naothmessages::Pose2D(*from.poseonfield_);
  } else {
    poseonfield_ = NULL;
  }
  playernum_ = from.playernum_;
  // @@protoc_insertion_point(copy_constructor:naothmessages.Opponent)
}

void Opponent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&poseonfield_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playernum_) -
      reinterpret_cast<char*>(&poseonfield_)) + sizeof(playernum_));
}

Opponent::~Opponent() {
  // @@protoc_insertion_point(destructor:naothmessages.Opponent)
  SharedDtor();
}

void Opponent::SharedDtor() {
  if (this != internal_default_instance()) delete poseonfield_;
}

void Opponent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Opponent::descriptor() {
  protobuf_TeamMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Opponent& Opponent::default_instance() {
  protobuf_TeamMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Opponent* Opponent::New(::google::protobuf::Arena* arena) const {
  Opponent* n = new Opponent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Opponent::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.Opponent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_poseonfield()) {
    GOOGLE_DCHECK(poseonfield_ != NULL);
    poseonfield_->::naothmessages::Pose2D::Clear();
  }
  playernum_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Opponent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.Opponent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 playerNum = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_playernum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playernum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.Pose2D poseOnField = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_poseonfield()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.Opponent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.Opponent)
  return false;
#undef DO_
}

void Opponent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.Opponent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 playerNum = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playernum(), output);
  }

  // optional .naothmessages.Pose2D poseOnField = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->poseonfield_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.Opponent)
}

::google::protobuf::uint8* Opponent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.Opponent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 playerNum = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playernum(), target);
  }

  // optional .naothmessages.Pose2D poseOnField = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->poseonfield_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.Opponent)
  return target;
}

size_t Opponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.Opponent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 playerNum = 1 [default = 0];
  if (has_playernum()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playernum());
  }
  // optional .naothmessages.Pose2D poseOnField = 2;
  if (has_poseonfield()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->poseonfield_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Opponent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.Opponent)
  GOOGLE_DCHECK_NE(&from, this);
  const Opponent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Opponent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.Opponent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.Opponent)
    MergeFrom(*source);
  }
}

void Opponent::MergeFrom(const Opponent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.Opponent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_poseonfield()->::naothmessages::Pose2D::MergeFrom(from.poseonfield());
    }
    if (cached_has_bits & 0x00000002u) {
      playernum_ = from.playernum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Opponent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.Opponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Opponent::CopyFrom(const Opponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.Opponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Opponent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_poseonfield()) {
    if (!this->poseonfield_->IsInitialized()) return false;
  }
  return true;
}

void Opponent::Swap(Opponent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Opponent::InternalSwap(Opponent* other) {
  using std::swap;
  swap(poseonfield_, other->poseonfield_);
  swap(playernum_, other->playernum_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Opponent::GetMetadata() const {
  protobuf_TeamMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Opponent

// required int32 playerNum = 1 [default = 0];
bool Opponent::has_playernum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Opponent::set_has_playernum() {
  _has_bits_[0] |= 0x00000002u;
}
void Opponent::clear_has_playernum() {
  _has_bits_[0] &= ~0x00000002u;
}
void Opponent::clear_playernum() {
  playernum_ = 0;
  clear_has_playernum();
}
::google::protobuf::int32 Opponent::playernum() const {
  // @@protoc_insertion_point(field_get:naothmessages.Opponent.playerNum)
  return playernum_;
}
void Opponent::set_playernum(::google::protobuf::int32 value) {
  set_has_playernum();
  playernum_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.Opponent.playerNum)
}

// optional .naothmessages.Pose2D poseOnField = 2;
bool Opponent::has_poseonfield() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Opponent::set_has_poseonfield() {
  _has_bits_[0] |= 0x00000001u;
}
void Opponent::clear_has_poseonfield() {
  _has_bits_[0] &= ~0x00000001u;
}
void Opponent::clear_poseonfield() {
  if (poseonfield_ != NULL) poseonfield_->::naothmessages::Pose2D::Clear();
  clear_has_poseonfield();
}
const ::naothmessages::Pose2D& Opponent::poseonfield() const {
  const ::naothmessages::Pose2D* p = poseonfield_;
  // @@protoc_insertion_point(field_get:naothmessages.Opponent.poseOnField)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::Pose2D*>(
      &::naothmessages::_Pose2D_default_instance_);
}
::naothmessages::Pose2D* Opponent::mutable_poseonfield() {
  set_has_poseonfield();
  if (poseonfield_ == NULL) {
    poseonfield_ = new ::naothmessages::Pose2D;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.Opponent.poseOnField)
  return poseonfield_;
}
::naothmessages::Pose2D* Opponent::release_poseonfield() {
  // @@protoc_insertion_point(field_release:naothmessages.Opponent.poseOnField)
  clear_has_poseonfield();
  ::naothmessages::Pose2D* temp = poseonfield_;
  poseonfield_ = NULL;
  return temp;
}
void Opponent::set_allocated_poseonfield(::naothmessages::Pose2D* poseonfield) {
  delete poseonfield_;
  poseonfield_ = poseonfield;
  if (poseonfield) {
    set_has_poseonfield();
  } else {
    clear_has_poseonfield();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.Opponent.poseOnField)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ntp::kPlayerNumFieldNumber;
const int Ntp::kSentFieldNumber;
const int Ntp::kReceivedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ntp::Ntp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.Ntp)
}
Ntp::Ntp(const Ntp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sent_, &from.sent_,
    static_cast<size_t>(reinterpret_cast<char*>(&playernum_) -
    reinterpret_cast<char*>(&sent_)) + sizeof(playernum_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.Ntp)
}

void Ntp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playernum_) -
      reinterpret_cast<char*>(&sent_)) + sizeof(playernum_));
}

Ntp::~Ntp() {
  // @@protoc_insertion_point(destructor:naothmessages.Ntp)
  SharedDtor();
}

void Ntp::SharedDtor() {
}

void Ntp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ntp::descriptor() {
  protobuf_TeamMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ntp& Ntp::default_instance() {
  protobuf_TeamMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ntp* Ntp::New(::google::protobuf::Arena* arena) const {
  Ntp* n = new Ntp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ntp::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.Ntp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&sent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playernum_) -
        reinterpret_cast<char*>(&sent_)) + sizeof(playernum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ntp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.Ntp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 playerNum = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_playernum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playernum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sent = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_sent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 received = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_received();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &received_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.Ntp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.Ntp)
  return false;
#undef DO_
}

void Ntp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.Ntp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 playerNum = 1 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playernum(), output);
  }

  // optional uint64 sent = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sent(), output);
  }

  // optional uint64 received = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->received(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.Ntp)
}

::google::protobuf::uint8* Ntp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.Ntp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 playerNum = 1 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playernum(), target);
  }

  // optional uint64 sent = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sent(), target);
  }

  // optional uint64 received = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->received(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.Ntp)
  return target;
}

size_t Ntp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.Ntp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 playerNum = 1 [default = 0];
  if (has_playernum()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playernum());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 sent = 2 [default = 0];
    if (has_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sent());
    }

    // optional uint64 received = 3 [default = 0];
    if (has_received()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->received());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ntp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.Ntp)
  GOOGLE_DCHECK_NE(&from, this);
  const Ntp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ntp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.Ntp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.Ntp)
    MergeFrom(*source);
  }
}

void Ntp::MergeFrom(const Ntp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.Ntp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      sent_ = from.sent_;
    }
    if (cached_has_bits & 0x00000002u) {
      received_ = from.received_;
    }
    if (cached_has_bits & 0x00000004u) {
      playernum_ = from.playernum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ntp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.Ntp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ntp::CopyFrom(const Ntp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.Ntp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ntp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void Ntp::Swap(Ntp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ntp::InternalSwap(Ntp* other) {
  using std::swap;
  swap(sent_, other->sent_);
  swap(received_, other->received_);
  swap(playernum_, other->playernum_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ntp::GetMetadata() const {
  protobuf_TeamMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ntp

// required int32 playerNum = 1 [default = 0];
bool Ntp::has_playernum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Ntp::set_has_playernum() {
  _has_bits_[0] |= 0x00000004u;
}
void Ntp::clear_has_playernum() {
  _has_bits_[0] &= ~0x00000004u;
}
void Ntp::clear_playernum() {
  playernum_ = 0;
  clear_has_playernum();
}
::google::protobuf::int32 Ntp::playernum() const {
  // @@protoc_insertion_point(field_get:naothmessages.Ntp.playerNum)
  return playernum_;
}
void Ntp::set_playernum(::google::protobuf::int32 value) {
  set_has_playernum();
  playernum_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.Ntp.playerNum)
}

// optional uint64 sent = 2 [default = 0];
bool Ntp::has_sent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ntp::set_has_sent() {
  _has_bits_[0] |= 0x00000001u;
}
void Ntp::clear_has_sent() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ntp::clear_sent() {
  sent_ = GOOGLE_ULONGLONG(0);
  clear_has_sent();
}
::google::protobuf::uint64 Ntp::sent() const {
  // @@protoc_insertion_point(field_get:naothmessages.Ntp.sent)
  return sent_;
}
void Ntp::set_sent(::google::protobuf::uint64 value) {
  set_has_sent();
  sent_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.Ntp.sent)
}

// optional uint64 received = 3 [default = 0];
bool Ntp::has_received() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ntp::set_has_received() {
  _has_bits_[0] |= 0x00000002u;
}
void Ntp::clear_has_received() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ntp::clear_received() {
  received_ = GOOGLE_ULONGLONG(0);
  clear_has_received();
}
::google::protobuf::uint64 Ntp::received() const {
  // @@protoc_insertion_point(field_get:naothmessages.Ntp.received)
  return received_;
}
void Ntp::set_received(::google::protobuf::uint64 value) {
  set_has_received();
  received_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.Ntp.received)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Drops::kDropNoSplMessageFieldNumber;
const int Drops::kDropNotOurTeamFieldNumber;
const int Drops::kDropNotParseableFieldNumber;
const int Drops::kDropKeyFailFieldNumber;
const int Drops::kDropMonotonicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Drops::Drops()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.Drops)
}
Drops::Drops(const Drops& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dropnosplmessage_, &from.dropnosplmessage_,
    static_cast<size_t>(reinterpret_cast<char*>(&dropmonotonic_) -
    reinterpret_cast<char*>(&dropnosplmessage_)) + sizeof(dropmonotonic_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.Drops)
}

void Drops::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&dropnosplmessage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dropmonotonic_) -
      reinterpret_cast<char*>(&dropnosplmessage_)) + sizeof(dropmonotonic_));
}

Drops::~Drops() {
  // @@protoc_insertion_point(destructor:naothmessages.Drops)
  SharedDtor();
}

void Drops::SharedDtor() {
}

void Drops::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Drops::descriptor() {
  protobuf_TeamMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Drops& Drops::default_instance() {
  protobuf_TeamMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Drops* Drops::New(::google::protobuf::Arena* arena) const {
  Drops* n = new Drops;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Drops::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.Drops)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&dropnosplmessage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dropmonotonic_) -
        reinterpret_cast<char*>(&dropnosplmessage_)) + sizeof(dropmonotonic_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Drops::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.Drops)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dropNoSplMessage = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_dropnosplmessage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropnosplmessage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dropNotOurTeam = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_dropnotourteam();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropnotourteam_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dropNotParseable = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_dropnotparseable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropnotparseable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dropKeyFail = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_dropkeyfail();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropkeyfail_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dropMonotonic = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_dropmonotonic();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropmonotonic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.Drops)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.Drops)
  return false;
#undef DO_
}

void Drops::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.Drops)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dropNoSplMessage = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dropnosplmessage(), output);
  }

  // optional uint32 dropNotOurTeam = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dropnotourteam(), output);
  }

  // optional uint32 dropNotParseable = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dropnotparseable(), output);
  }

  // optional uint32 dropKeyFail = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dropkeyfail(), output);
  }

  // optional uint32 dropMonotonic = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dropmonotonic(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.Drops)
}

::google::protobuf::uint8* Drops::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.Drops)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dropNoSplMessage = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dropnosplmessage(), target);
  }

  // optional uint32 dropNotOurTeam = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dropnotourteam(), target);
  }

  // optional uint32 dropNotParseable = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dropnotparseable(), target);
  }

  // optional uint32 dropKeyFail = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dropkeyfail(), target);
  }

  // optional uint32 dropMonotonic = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dropmonotonic(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.Drops)
  return target;
}

size_t Drops::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.Drops)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 dropNoSplMessage = 1 [default = 0];
    if (has_dropnosplmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropnosplmessage());
    }

    // optional uint32 dropNotOurTeam = 2 [default = 0];
    if (has_dropnotourteam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropnotourteam());
    }

    // optional uint32 dropNotParseable = 3 [default = 0];
    if (has_dropnotparseable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropnotparseable());
    }

    // optional uint32 dropKeyFail = 4 [default = 0];
    if (has_dropkeyfail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropkeyfail());
    }

    // optional uint32 dropMonotonic = 5 [default = 0];
    if (has_dropmonotonic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropmonotonic());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Drops::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.Drops)
  GOOGLE_DCHECK_NE(&from, this);
  const Drops* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Drops>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.Drops)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.Drops)
    MergeFrom(*source);
  }
}

void Drops::MergeFrom(const Drops& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.Drops)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      dropnosplmessage_ = from.dropnosplmessage_;
    }
    if (cached_has_bits & 0x00000002u) {
      dropnotourteam_ = from.dropnotourteam_;
    }
    if (cached_has_bits & 0x00000004u) {
      dropnotparseable_ = from.dropnotparseable_;
    }
    if (cached_has_bits & 0x00000008u) {
      dropkeyfail_ = from.dropkeyfail_;
    }
    if (cached_has_bits & 0x00000010u) {
      dropmonotonic_ = from.dropmonotonic_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Drops::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.Drops)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Drops::CopyFrom(const Drops& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.Drops)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Drops::IsInitialized() const {
  return true;
}

void Drops::Swap(Drops* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Drops::InternalSwap(Drops* other) {
  using std::swap;
  swap(dropnosplmessage_, other->dropnosplmessage_);
  swap(dropnotourteam_, other->dropnotourteam_);
  swap(dropnotparseable_, other->dropnotparseable_);
  swap(dropkeyfail_, other->dropkeyfail_);
  swap(dropmonotonic_, other->dropmonotonic_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Drops::GetMetadata() const {
  protobuf_TeamMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Drops

// optional uint32 dropNoSplMessage = 1 [default = 0];
bool Drops::has_dropnosplmessage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Drops::set_has_dropnosplmessage() {
  _has_bits_[0] |= 0x00000001u;
}
void Drops::clear_has_dropnosplmessage() {
  _has_bits_[0] &= ~0x00000001u;
}
void Drops::clear_dropnosplmessage() {
  dropnosplmessage_ = 0u;
  clear_has_dropnosplmessage();
}
::google::protobuf::uint32 Drops::dropnosplmessage() const {
  // @@protoc_insertion_point(field_get:naothmessages.Drops.dropNoSplMessage)
  return dropnosplmessage_;
}
void Drops::set_dropnosplmessage(::google::protobuf::uint32 value) {
  set_has_dropnosplmessage();
  dropnosplmessage_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.Drops.dropNoSplMessage)
}

// optional uint32 dropNotOurTeam = 2 [default = 0];
bool Drops::has_dropnotourteam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Drops::set_has_dropnotourteam() {
  _has_bits_[0] |= 0x00000002u;
}
void Drops::clear_has_dropnotourteam() {
  _has_bits_[0] &= ~0x00000002u;
}
void Drops::clear_dropnotourteam() {
  dropnotourteam_ = 0u;
  clear_has_dropnotourteam();
}
::google::protobuf::uint32 Drops::dropnotourteam() const {
  // @@protoc_insertion_point(field_get:naothmessages.Drops.dropNotOurTeam)
  return dropnotourteam_;
}
void Drops::set_dropnotourteam(::google::protobuf::uint32 value) {
  set_has_dropnotourteam();
  dropnotourteam_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.Drops.dropNotOurTeam)
}

// optional uint32 dropNotParseable = 3 [default = 0];
bool Drops::has_dropnotparseable() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Drops::set_has_dropnotparseable() {
  _has_bits_[0] |= 0x00000004u;
}
void Drops::clear_has_dropnotparseable() {
  _has_bits_[0] &= ~0x00000004u;
}
void Drops::clear_dropnotparseable() {
  dropnotparseable_ = 0u;
  clear_has_dropnotparseable();
}
::google::protobuf::uint32 Drops::dropnotparseable() const {
  // @@protoc_insertion_point(field_get:naothmessages.Drops.dropNotParseable)
  return dropnotparseable_;
}
void Drops::set_dropnotparseable(::google::protobuf::uint32 value) {
  set_has_dropnotparseable();
  dropnotparseable_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.Drops.dropNotParseable)
}

// optional uint32 dropKeyFail = 4 [default = 0];
bool Drops::has_dropkeyfail() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Drops::set_has_dropkeyfail() {
  _has_bits_[0] |= 0x00000008u;
}
void Drops::clear_has_dropkeyfail() {
  _has_bits_[0] &= ~0x00000008u;
}
void Drops::clear_dropkeyfail() {
  dropkeyfail_ = 0u;
  clear_has_dropkeyfail();
}
::google::protobuf::uint32 Drops::dropkeyfail() const {
  // @@protoc_insertion_point(field_get:naothmessages.Drops.dropKeyFail)
  return dropkeyfail_;
}
void Drops::set_dropkeyfail(::google::protobuf::uint32 value) {
  set_has_dropkeyfail();
  dropkeyfail_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.Drops.dropKeyFail)
}

// optional uint32 dropMonotonic = 5 [default = 0];
bool Drops::has_dropmonotonic() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Drops::set_has_dropmonotonic() {
  _has_bits_[0] |= 0x00000010u;
}
void Drops::clear_has_dropmonotonic() {
  _has_bits_[0] &= ~0x00000010u;
}
void Drops::clear_dropmonotonic() {
  dropmonotonic_ = 0u;
  clear_has_dropmonotonic();
}
::google::protobuf::uint32 Drops::dropmonotonic() const {
  // @@protoc_insertion_point(field_get:naothmessages.Drops.dropMonotonic)
  return dropmonotonic_;
}
void Drops::set_dropmonotonic(::google::protobuf::uint32 value) {
  set_has_dropmonotonic();
  dropmonotonic_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.Drops.dropMonotonic)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> BUUserTeamMessage::_default_bodyid_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> BUUserTeamMessage::_default_key_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BUUserTeamMessage::kBodyIDFieldNumber;
const int BUUserTeamMessage::kTimeToBallFieldNumber;
const int BUUserTeamMessage::kWasStrikerFieldNumber;
const int BUUserTeamMessage::kIsPenalizedFieldNumber;
const int BUUserTeamMessage::kOpponentsFieldNumber;
const int BUUserTeamMessage::kTeamNumberFieldNumber;
const int BUUserTeamMessage::kBatteryChargeFieldNumber;
const int BUUserTeamMessage::kTemperatureFieldNumber;
const int BUUserTeamMessage::kTimestampFieldNumber;
const int BUUserTeamMessage::kWantsToBeStrikerFieldNumber;
const int BUUserTeamMessage::kCpuTemperatureFieldNumber;
const int BUUserTeamMessage::kWhistleDetectedFieldNumber;
const int BUUserTeamMessage::kWhistleCountFieldNumber;
const int BUUserTeamMessage::kTeamBallFieldNumber;
const int BUUserTeamMessage::kNtpRequestFieldNumber;
const int BUUserTeamMessage::kBallVelocityFieldNumber;
const int BUUserTeamMessage::kRobotStateFieldNumber;
const int BUUserTeamMessage::kRobotRoleFieldNumber;
const int BUUserTeamMessage::kReadyToWalkFieldNumber;
const int BUUserTeamMessage::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BUUserTeamMessage::BUUserTeamMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.BUUserTeamMessage)
}
BUUserTeamMessage::BUUserTeamMessage(const BUUserTeamMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      opponents_(from.opponents_),
      ntprequest_(from.ntprequest_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bodyid_.UnsafeSetDefault(&BUUserTeamMessage::_default_bodyid_.get());
  if (from.has_bodyid()) {
    bodyid_.AssignWithDefault(&BUUserTeamMessage::_default_bodyid_.get(), from.bodyid_);
  }
  key_.UnsafeSetDefault(&BUUserTeamMessage::_default_key_.get());
  if (from.has_key()) {
    key_.AssignWithDefault(&BUUserTeamMessage::_default_key_.get(), from.key_);
  }
  if (from.has_teamball()) {
    teamball_ = new ::naothmessages::DoubleVector2(*from.teamball_);
  } else {
    teamball_ = NULL;
  }
  if (from.has_ballvelocity()) {
    ballvelocity_ = new ::naothmessages::DoubleVector2(*from.ballvelocity_);
  } else {
    ballvelocity_ = NULL;
  }
  if (from.has_robotrole()) {
    robotrole_ = new ::naothmessages::RobotRole(*from.robotrole_);
  } else {
    robotrole_ = NULL;
  }
  ::memcpy(&timetoball_, &from.timetoball_,
    static_cast<size_t>(reinterpret_cast<char*>(&batterycharge_) -
    reinterpret_cast<char*>(&timetoball_)) + sizeof(batterycharge_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.BUUserTeamMessage)
}

void BUUserTeamMessage::SharedCtor() {
  _cached_size_ = 0;
  bodyid_.UnsafeSetDefault(&BUUserTeamMessage::_default_bodyid_.get());
  key_.UnsafeSetDefault(&BUUserTeamMessage::_default_key_.get());
  ::memset(&teamball_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&readytowalk_) -
      reinterpret_cast<char*>(&teamball_)) + sizeof(readytowalk_));
  batterycharge_ = 1;
}

BUUserTeamMessage::~BUUserTeamMessage() {
  // @@protoc_insertion_point(destructor:naothmessages.BUUserTeamMessage)
  SharedDtor();
}

void BUUserTeamMessage::SharedDtor() {
  bodyid_.DestroyNoArena(&BUUserTeamMessage::_default_bodyid_.get());
  key_.DestroyNoArena(&BUUserTeamMessage::_default_key_.get());
  if (this != internal_default_instance()) delete teamball_;
  if (this != internal_default_instance()) delete ballvelocity_;
  if (this != internal_default_instance()) delete robotrole_;
}

void BUUserTeamMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BUUserTeamMessage::descriptor() {
  protobuf_TeamMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BUUserTeamMessage& BUUserTeamMessage::default_instance() {
  protobuf_TeamMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

BUUserTeamMessage* BUUserTeamMessage::New(::google::protobuf::Arena* arena) const {
  BUUserTeamMessage* n = new BUUserTeamMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BUUserTeamMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.BUUserTeamMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  opponents_.Clear();
  ntprequest_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!bodyid_.IsDefault(&BUUserTeamMessage::_default_bodyid_.get()));
      (*bodyid_.UnsafeRawStringPointer())->assign(*&BUUserTeamMessage::_default_bodyid_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!key_.IsDefault(&BUUserTeamMessage::_default_key_.get()));
      (*key_.UnsafeRawStringPointer())->assign(*&BUUserTeamMessage::_default_key_.get());
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(teamball_ != NULL);
      teamball_->::naothmessages::DoubleVector2::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ballvelocity_ != NULL);
      ballvelocity_->::naothmessages::DoubleVector2::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(robotrole_ != NULL);
      robotrole_->::naothmessages::RobotRole::Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&timetoball_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wasstriker_) -
        reinterpret_cast<char*>(&timetoball_)) + sizeof(wasstriker_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&ispenalized_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&robotstate_) -
        reinterpret_cast<char*>(&ispenalized_)) + sizeof(robotstate_));
  }
  if (cached_has_bits & 196608u) {
    readytowalk_ = false;
    batterycharge_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BUUserTeamMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.BUUserTeamMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bodyID = 1 [default = "unknown"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bodyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bodyid().data(), static_cast<int>(this->bodyid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "naothmessages.BUUserTeamMessage.bodyID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timeToBall = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_timetoball();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timetoball_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool wasStriker = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_wasstriker();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wasstriker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isPenalized = 4 [default = false, deprecated = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_ispenalized();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispenalized_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .naothmessages.Opponent opponents = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_opponents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 teamNumber = 6 [default = 0, deprecated = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_teamnumber();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float batteryCharge = 7 [default = 1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_batterycharge();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &batterycharge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float temperature = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_temperature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool wantsToBeStriker = 10 [default = false];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_wantstobestriker();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wantstobestriker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cpuTemperature = 11 [default = 0];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_cputemperature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cputemperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool whistleDetected = 12 [default = false];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_whistledetected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &whistledetected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 whistleCount = 13 [default = 0];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_whistlecount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &whistlecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector2 teamBall = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teamball()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .naothmessages.Ntp ntpRequest = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ntprequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector2 ballVelocity = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ballvelocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.RobotState robotState = 17 [default = initial];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::naothmessages::RobotState_IsValid(value)) {
            set_robotstate(static_cast< ::naothmessages::RobotState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                17, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.RobotRole robotRole = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_robotrole()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool readyToWalk = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_readytowalk();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &readytowalk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string key = 100 [default = "none"];
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "naothmessages.BUUserTeamMessage.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.BUUserTeamMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.BUUserTeamMessage)
  return false;
#undef DO_
}

void BUUserTeamMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.BUUserTeamMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string bodyID = 1 [default = "unknown"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bodyid().data(), static_cast<int>(this->bodyid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "naothmessages.BUUserTeamMessage.bodyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bodyid(), output);
  }

  // optional uint32 timeToBall = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timetoball(), output);
  }

  // optional bool wasStriker = 3 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->wasstriker(), output);
  }

  // optional bool isPenalized = 4 [default = false, deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ispenalized(), output);
  }

  // repeated .naothmessages.Opponent opponents = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->opponents_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->opponents(static_cast<int>(i)), output);
  }

  // optional uint32 teamNumber = 6 [default = 0, deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->teamnumber(), output);
  }

  // optional float batteryCharge = 7 [default = 1];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->batterycharge(), output);
  }

  // optional float temperature = 8 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->temperature(), output);
  }

  // optional uint64 timestamp = 9 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->timestamp(), output);
  }

  // optional bool wantsToBeStriker = 10 [default = false];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->wantstobestriker(), output);
  }

  // optional float cpuTemperature = 11 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->cputemperature(), output);
  }

  // optional bool whistleDetected = 12 [default = false];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->whistledetected(), output);
  }

  // optional int32 whistleCount = 13 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->whistlecount(), output);
  }

  // optional .naothmessages.DoubleVector2 teamBall = 14;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->teamball_, output);
  }

  // repeated .naothmessages.Ntp ntpRequest = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ntprequest_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->ntprequest(static_cast<int>(i)), output);
  }

  // optional .naothmessages.DoubleVector2 ballVelocity = 16;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->ballvelocity_, output);
  }

  // optional .naothmessages.RobotState robotState = 17 [default = initial];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->robotstate(), output);
  }

  // optional .naothmessages.RobotRole robotRole = 18;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->robotrole_, output);
  }

  // optional bool readyToWalk = 19;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->readytowalk(), output);
  }

  // optional string key = 100 [default = "none"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "naothmessages.BUUserTeamMessage.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.BUUserTeamMessage)
}

::google::protobuf::uint8* BUUserTeamMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.BUUserTeamMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string bodyID = 1 [default = "unknown"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bodyid().data(), static_cast<int>(this->bodyid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "naothmessages.BUUserTeamMessage.bodyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bodyid(), target);
  }

  // optional uint32 timeToBall = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timetoball(), target);
  }

  // optional bool wasStriker = 3 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->wasstriker(), target);
  }

  // optional bool isPenalized = 4 [default = false, deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ispenalized(), target);
  }

  // repeated .naothmessages.Opponent opponents = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->opponents_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->opponents(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 teamNumber = 6 [default = 0, deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->teamnumber(), target);
  }

  // optional float batteryCharge = 7 [default = 1];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->batterycharge(), target);
  }

  // optional float temperature = 8 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->temperature(), target);
  }

  // optional uint64 timestamp = 9 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->timestamp(), target);
  }

  // optional bool wantsToBeStriker = 10 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->wantstobestriker(), target);
  }

  // optional float cpuTemperature = 11 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->cputemperature(), target);
  }

  // optional bool whistleDetected = 12 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->whistledetected(), target);
  }

  // optional int32 whistleCount = 13 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->whistlecount(), target);
  }

  // optional .naothmessages.DoubleVector2 teamBall = 14;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->teamball_, deterministic, target);
  }

  // repeated .naothmessages.Ntp ntpRequest = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ntprequest_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->ntprequest(static_cast<int>(i)), deterministic, target);
  }

  // optional .naothmessages.DoubleVector2 ballVelocity = 16;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->ballvelocity_, deterministic, target);
  }

  // optional .naothmessages.RobotState robotState = 17 [default = initial];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->robotstate(), target);
  }

  // optional .naothmessages.RobotRole robotRole = 18;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->robotrole_, deterministic, target);
  }

  // optional bool readyToWalk = 19;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->readytowalk(), target);
  }

  // optional string key = 100 [default = "none"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "naothmessages.BUUserTeamMessage.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.BUUserTeamMessage)
  return target;
}

size_t BUUserTeamMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.BUUserTeamMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .naothmessages.Opponent opponents = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->opponents_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opponents(static_cast<int>(i)));
    }
  }

  // repeated .naothmessages.Ntp ntpRequest = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->ntprequest_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ntprequest(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string bodyID = 1 [default = "unknown"];
    if (has_bodyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bodyid());
    }

    // optional string key = 100 [default = "none"];
    if (has_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional .naothmessages.DoubleVector2 teamBall = 14;
    if (has_teamball()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->teamball_);
    }

    // optional .naothmessages.DoubleVector2 ballVelocity = 16;
    if (has_ballvelocity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ballvelocity_);
    }

    // optional .naothmessages.RobotRole robotRole = 18;
    if (has_robotrole()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->robotrole_);
    }

    // optional uint32 timeToBall = 2;
    if (has_timetoball()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timetoball());
    }

    // optional uint32 teamNumber = 6 [default = 0, deprecated = true];
    if (has_teamnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamnumber());
    }

    // optional bool wasStriker = 3 [default = false];
    if (has_wasstriker()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool isPenalized = 4 [default = false, deprecated = true];
    if (has_ispenalized()) {
      total_size += 1 + 1;
    }

    // optional bool wantsToBeStriker = 10 [default = false];
    if (has_wantstobestriker()) {
      total_size += 1 + 1;
    }

    // optional bool whistleDetected = 12 [default = false];
    if (has_whistledetected()) {
      total_size += 1 + 1;
    }

    // optional float temperature = 8 [default = 0];
    if (has_temperature()) {
      total_size += 1 + 4;
    }

    // optional uint64 timestamp = 9 [default = 0];
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional float cpuTemperature = 11 [default = 0];
    if (has_cputemperature()) {
      total_size += 1 + 4;
    }

    // optional int32 whistleCount = 13 [default = 0];
    if (has_whistlecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->whistlecount());
    }

    // optional .naothmessages.RobotState robotState = 17 [default = initial];
    if (has_robotstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->robotstate());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional bool readyToWalk = 19;
    if (has_readytowalk()) {
      total_size += 2 + 1;
    }

    // optional float batteryCharge = 7 [default = 1];
    if (has_batterycharge()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BUUserTeamMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.BUUserTeamMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const BUUserTeamMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BUUserTeamMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.BUUserTeamMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.BUUserTeamMessage)
    MergeFrom(*source);
  }
}

void BUUserTeamMessage::MergeFrom(const BUUserTeamMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.BUUserTeamMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  opponents_.MergeFrom(from.opponents_);
  ntprequest_.MergeFrom(from.ntprequest_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_bodyid();
      bodyid_.AssignWithDefault(&BUUserTeamMessage::_default_bodyid_.get(), from.bodyid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_key();
      key_.AssignWithDefault(&BUUserTeamMessage::_default_key_.get(), from.key_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_teamball()->::naothmessages::DoubleVector2::MergeFrom(from.teamball());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_ballvelocity()->::naothmessages::DoubleVector2::MergeFrom(from.ballvelocity());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_robotrole()->::naothmessages::RobotRole::MergeFrom(from.robotrole());
    }
    if (cached_has_bits & 0x00000020u) {
      timetoball_ = from.timetoball_;
    }
    if (cached_has_bits & 0x00000040u) {
      teamnumber_ = from.teamnumber_;
    }
    if (cached_has_bits & 0x00000080u) {
      wasstriker_ = from.wasstriker_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      ispenalized_ = from.ispenalized_;
    }
    if (cached_has_bits & 0x00000200u) {
      wantstobestriker_ = from.wantstobestriker_;
    }
    if (cached_has_bits & 0x00000400u) {
      whistledetected_ = from.whistledetected_;
    }
    if (cached_has_bits & 0x00000800u) {
      temperature_ = from.temperature_;
    }
    if (cached_has_bits & 0x00001000u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00002000u) {
      cputemperature_ = from.cputemperature_;
    }
    if (cached_has_bits & 0x00004000u) {
      whistlecount_ = from.whistlecount_;
    }
    if (cached_has_bits & 0x00008000u) {
      robotstate_ = from.robotstate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      readytowalk_ = from.readytowalk_;
    }
    if (cached_has_bits & 0x00020000u) {
      batterycharge_ = from.batterycharge_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BUUserTeamMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.BUUserTeamMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BUUserTeamMessage::CopyFrom(const BUUserTeamMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.BUUserTeamMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BUUserTeamMessage::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->opponents())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ntprequest())) return false;
  if (has_teamball()) {
    if (!this->teamball_->IsInitialized()) return false;
  }
  if (has_ballvelocity()) {
    if (!this->ballvelocity_->IsInitialized()) return false;
  }
  if (has_robotrole()) {
    if (!this->robotrole_->IsInitialized()) return false;
  }
  return true;
}

void BUUserTeamMessage::Swap(BUUserTeamMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BUUserTeamMessage::InternalSwap(BUUserTeamMessage* other) {
  using std::swap;
  opponents_.InternalSwap(&other->opponents_);
  ntprequest_.InternalSwap(&other->ntprequest_);
  bodyid_.Swap(&other->bodyid_);
  key_.Swap(&other->key_);
  swap(teamball_, other->teamball_);
  swap(ballvelocity_, other->ballvelocity_);
  swap(robotrole_, other->robotrole_);
  swap(timetoball_, other->timetoball_);
  swap(teamnumber_, other->teamnumber_);
  swap(wasstriker_, other->wasstriker_);
  swap(ispenalized_, other->ispenalized_);
  swap(wantstobestriker_, other->wantstobestriker_);
  swap(whistledetected_, other->whistledetected_);
  swap(temperature_, other->temperature_);
  swap(timestamp_, other->timestamp_);
  swap(cputemperature_, other->cputemperature_);
  swap(whistlecount_, other->whistlecount_);
  swap(robotstate_, other->robotstate_);
  swap(readytowalk_, other->readytowalk_);
  swap(batterycharge_, other->batterycharge_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BUUserTeamMessage::GetMetadata() const {
  protobuf_TeamMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BUUserTeamMessage

// optional string bodyID = 1 [default = "unknown"];
bool BUUserTeamMessage::has_bodyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BUUserTeamMessage::set_has_bodyid() {
  _has_bits_[0] |= 0x00000001u;
}
void BUUserTeamMessage::clear_has_bodyid() {
  _has_bits_[0] &= ~0x00000001u;
}
void BUUserTeamMessage::clear_bodyid() {
  bodyid_.ClearToDefaultNoArena(&BUUserTeamMessage::_default_bodyid_.get());
  clear_has_bodyid();
}
const ::std::string& BUUserTeamMessage::bodyid() const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.bodyID)
  return bodyid_.GetNoArena();
}
void BUUserTeamMessage::set_bodyid(const ::std::string& value) {
  set_has_bodyid();
  bodyid_.SetNoArena(&BUUserTeamMessage::_default_bodyid_.get(), value);
  // @@protoc_insertion_point(field_set:naothmessages.BUUserTeamMessage.bodyID)
}
#if LANG_CXX11
void BUUserTeamMessage::set_bodyid(::std::string&& value) {
  set_has_bodyid();
  bodyid_.SetNoArena(
    &BUUserTeamMessage::_default_bodyid_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:naothmessages.BUUserTeamMessage.bodyID)
}
#endif
void BUUserTeamMessage::set_bodyid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bodyid();
  bodyid_.SetNoArena(&BUUserTeamMessage::_default_bodyid_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naothmessages.BUUserTeamMessage.bodyID)
}
void BUUserTeamMessage::set_bodyid(const char* value, size_t size) {
  set_has_bodyid();
  bodyid_.SetNoArena(&BUUserTeamMessage::_default_bodyid_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naothmessages.BUUserTeamMessage.bodyID)
}
::std::string* BUUserTeamMessage::mutable_bodyid() {
  set_has_bodyid();
  // @@protoc_insertion_point(field_mutable:naothmessages.BUUserTeamMessage.bodyID)
  return bodyid_.MutableNoArena(&BUUserTeamMessage::_default_bodyid_.get());
}
::std::string* BUUserTeamMessage::release_bodyid() {
  // @@protoc_insertion_point(field_release:naothmessages.BUUserTeamMessage.bodyID)
  clear_has_bodyid();
  return bodyid_.ReleaseNoArena(&BUUserTeamMessage::_default_bodyid_.get());
}
void BUUserTeamMessage::set_allocated_bodyid(::std::string* bodyid) {
  if (bodyid != NULL) {
    set_has_bodyid();
  } else {
    clear_has_bodyid();
  }
  bodyid_.SetAllocatedNoArena(&BUUserTeamMessage::_default_bodyid_.get(), bodyid);
  // @@protoc_insertion_point(field_set_allocated:naothmessages.BUUserTeamMessage.bodyID)
}

// optional uint32 timeToBall = 2;
bool BUUserTeamMessage::has_timetoball() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BUUserTeamMessage::set_has_timetoball() {
  _has_bits_[0] |= 0x00000020u;
}
void BUUserTeamMessage::clear_has_timetoball() {
  _has_bits_[0] &= ~0x00000020u;
}
void BUUserTeamMessage::clear_timetoball() {
  timetoball_ = 0u;
  clear_has_timetoball();
}
::google::protobuf::uint32 BUUserTeamMessage::timetoball() const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.timeToBall)
  return timetoball_;
}
void BUUserTeamMessage::set_timetoball(::google::protobuf::uint32 value) {
  set_has_timetoball();
  timetoball_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BUUserTeamMessage.timeToBall)
}

// optional bool wasStriker = 3 [default = false];
bool BUUserTeamMessage::has_wasstriker() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BUUserTeamMessage::set_has_wasstriker() {
  _has_bits_[0] |= 0x00000080u;
}
void BUUserTeamMessage::clear_has_wasstriker() {
  _has_bits_[0] &= ~0x00000080u;
}
void BUUserTeamMessage::clear_wasstriker() {
  wasstriker_ = false;
  clear_has_wasstriker();
}
bool BUUserTeamMessage::wasstriker() const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.wasStriker)
  return wasstriker_;
}
void BUUserTeamMessage::set_wasstriker(bool value) {
  set_has_wasstriker();
  wasstriker_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BUUserTeamMessage.wasStriker)
}

// optional bool isPenalized = 4 [default = false, deprecated = true];
bool BUUserTeamMessage::has_ispenalized() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BUUserTeamMessage::set_has_ispenalized() {
  _has_bits_[0] |= 0x00000100u;
}
void BUUserTeamMessage::clear_has_ispenalized() {
  _has_bits_[0] &= ~0x00000100u;
}
void BUUserTeamMessage::clear_ispenalized() {
  ispenalized_ = false;
  clear_has_ispenalized();
}
bool BUUserTeamMessage::ispenalized() const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.isPenalized)
  return ispenalized_;
}
void BUUserTeamMessage::set_ispenalized(bool value) {
  set_has_ispenalized();
  ispenalized_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BUUserTeamMessage.isPenalized)
}

// repeated .naothmessages.Opponent opponents = 5;
int BUUserTeamMessage::opponents_size() const {
  return opponents_.size();
}
void BUUserTeamMessage::clear_opponents() {
  opponents_.Clear();
}
const ::naothmessages::Opponent& BUUserTeamMessage::opponents(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.opponents)
  return opponents_.Get(index);
}
::naothmessages::Opponent* BUUserTeamMessage::mutable_opponents(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.BUUserTeamMessage.opponents)
  return opponents_.Mutable(index);
}
::naothmessages::Opponent* BUUserTeamMessage::add_opponents() {
  // @@protoc_insertion_point(field_add:naothmessages.BUUserTeamMessage.opponents)
  return opponents_.Add();
}
::google::protobuf::RepeatedPtrField< ::naothmessages::Opponent >*
BUUserTeamMessage::mutable_opponents() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.BUUserTeamMessage.opponents)
  return &opponents_;
}
const ::google::protobuf::RepeatedPtrField< ::naothmessages::Opponent >&
BUUserTeamMessage::opponents() const {
  // @@protoc_insertion_point(field_list:naothmessages.BUUserTeamMessage.opponents)
  return opponents_;
}

// optional uint32 teamNumber = 6 [default = 0, deprecated = true];
bool BUUserTeamMessage::has_teamnumber() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BUUserTeamMessage::set_has_teamnumber() {
  _has_bits_[0] |= 0x00000040u;
}
void BUUserTeamMessage::clear_has_teamnumber() {
  _has_bits_[0] &= ~0x00000040u;
}
void BUUserTeamMessage::clear_teamnumber() {
  teamnumber_ = 0u;
  clear_has_teamnumber();
}
::google::protobuf::uint32 BUUserTeamMessage::teamnumber() const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.teamNumber)
  return teamnumber_;
}
void BUUserTeamMessage::set_teamnumber(::google::protobuf::uint32 value) {
  set_has_teamnumber();
  teamnumber_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BUUserTeamMessage.teamNumber)
}

// optional float batteryCharge = 7 [default = 1];
bool BUUserTeamMessage::has_batterycharge() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void BUUserTeamMessage::set_has_batterycharge() {
  _has_bits_[0] |= 0x00020000u;
}
void BUUserTeamMessage::clear_has_batterycharge() {
  _has_bits_[0] &= ~0x00020000u;
}
void BUUserTeamMessage::clear_batterycharge() {
  batterycharge_ = 1;
  clear_has_batterycharge();
}
float BUUserTeamMessage::batterycharge() const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.batteryCharge)
  return batterycharge_;
}
void BUUserTeamMessage::set_batterycharge(float value) {
  set_has_batterycharge();
  batterycharge_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BUUserTeamMessage.batteryCharge)
}

// optional float temperature = 8 [default = 0];
bool BUUserTeamMessage::has_temperature() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void BUUserTeamMessage::set_has_temperature() {
  _has_bits_[0] |= 0x00000800u;
}
void BUUserTeamMessage::clear_has_temperature() {
  _has_bits_[0] &= ~0x00000800u;
}
void BUUserTeamMessage::clear_temperature() {
  temperature_ = 0;
  clear_has_temperature();
}
float BUUserTeamMessage::temperature() const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.temperature)
  return temperature_;
}
void BUUserTeamMessage::set_temperature(float value) {
  set_has_temperature();
  temperature_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BUUserTeamMessage.temperature)
}

// optional uint64 timestamp = 9 [default = 0];
bool BUUserTeamMessage::has_timestamp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void BUUserTeamMessage::set_has_timestamp() {
  _has_bits_[0] |= 0x00001000u;
}
void BUUserTeamMessage::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00001000u;
}
void BUUserTeamMessage::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 BUUserTeamMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.timestamp)
  return timestamp_;
}
void BUUserTeamMessage::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BUUserTeamMessage.timestamp)
}

// optional bool wantsToBeStriker = 10 [default = false];
bool BUUserTeamMessage::has_wantstobestriker() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BUUserTeamMessage::set_has_wantstobestriker() {
  _has_bits_[0] |= 0x00000200u;
}
void BUUserTeamMessage::clear_has_wantstobestriker() {
  _has_bits_[0] &= ~0x00000200u;
}
void BUUserTeamMessage::clear_wantstobestriker() {
  wantstobestriker_ = false;
  clear_has_wantstobestriker();
}
bool BUUserTeamMessage::wantstobestriker() const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.wantsToBeStriker)
  return wantstobestriker_;
}
void BUUserTeamMessage::set_wantstobestriker(bool value) {
  set_has_wantstobestriker();
  wantstobestriker_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BUUserTeamMessage.wantsToBeStriker)
}

// optional float cpuTemperature = 11 [default = 0];
bool BUUserTeamMessage::has_cputemperature() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void BUUserTeamMessage::set_has_cputemperature() {
  _has_bits_[0] |= 0x00002000u;
}
void BUUserTeamMessage::clear_has_cputemperature() {
  _has_bits_[0] &= ~0x00002000u;
}
void BUUserTeamMessage::clear_cputemperature() {
  cputemperature_ = 0;
  clear_has_cputemperature();
}
float BUUserTeamMessage::cputemperature() const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.cpuTemperature)
  return cputemperature_;
}
void BUUserTeamMessage::set_cputemperature(float value) {
  set_has_cputemperature();
  cputemperature_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BUUserTeamMessage.cpuTemperature)
}

// optional bool whistleDetected = 12 [default = false];
bool BUUserTeamMessage::has_whistledetected() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void BUUserTeamMessage::set_has_whistledetected() {
  _has_bits_[0] |= 0x00000400u;
}
void BUUserTeamMessage::clear_has_whistledetected() {
  _has_bits_[0] &= ~0x00000400u;
}
void BUUserTeamMessage::clear_whistledetected() {
  whistledetected_ = false;
  clear_has_whistledetected();
}
bool BUUserTeamMessage::whistledetected() const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.whistleDetected)
  return whistledetected_;
}
void BUUserTeamMessage::set_whistledetected(bool value) {
  set_has_whistledetected();
  whistledetected_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BUUserTeamMessage.whistleDetected)
}

// optional int32 whistleCount = 13 [default = 0];
bool BUUserTeamMessage::has_whistlecount() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void BUUserTeamMessage::set_has_whistlecount() {
  _has_bits_[0] |= 0x00004000u;
}
void BUUserTeamMessage::clear_has_whistlecount() {
  _has_bits_[0] &= ~0x00004000u;
}
void BUUserTeamMessage::clear_whistlecount() {
  whistlecount_ = 0;
  clear_has_whistlecount();
}
::google::protobuf::int32 BUUserTeamMessage::whistlecount() const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.whistleCount)
  return whistlecount_;
}
void BUUserTeamMessage::set_whistlecount(::google::protobuf::int32 value) {
  set_has_whistlecount();
  whistlecount_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BUUserTeamMessage.whistleCount)
}

// optional .naothmessages.DoubleVector2 teamBall = 14;
bool BUUserTeamMessage::has_teamball() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BUUserTeamMessage::set_has_teamball() {
  _has_bits_[0] |= 0x00000004u;
}
void BUUserTeamMessage::clear_has_teamball() {
  _has_bits_[0] &= ~0x00000004u;
}
void BUUserTeamMessage::clear_teamball() {
  if (teamball_ != NULL) teamball_->::naothmessages::DoubleVector2::Clear();
  clear_has_teamball();
}
const ::naothmessages::DoubleVector2& BUUserTeamMessage::teamball() const {
  const ::naothmessages::DoubleVector2* p = teamball_;
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.teamBall)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* BUUserTeamMessage::mutable_teamball() {
  set_has_teamball();
  if (teamball_ == NULL) {
    teamball_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.BUUserTeamMessage.teamBall)
  return teamball_;
}
::naothmessages::DoubleVector2* BUUserTeamMessage::release_teamball() {
  // @@protoc_insertion_point(field_release:naothmessages.BUUserTeamMessage.teamBall)
  clear_has_teamball();
  ::naothmessages::DoubleVector2* temp = teamball_;
  teamball_ = NULL;
  return temp;
}
void BUUserTeamMessage::set_allocated_teamball(::naothmessages::DoubleVector2* teamball) {
  delete teamball_;
  teamball_ = teamball;
  if (teamball) {
    set_has_teamball();
  } else {
    clear_has_teamball();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.BUUserTeamMessage.teamBall)
}

// repeated .naothmessages.Ntp ntpRequest = 15;
int BUUserTeamMessage::ntprequest_size() const {
  return ntprequest_.size();
}
void BUUserTeamMessage::clear_ntprequest() {
  ntprequest_.Clear();
}
const ::naothmessages::Ntp& BUUserTeamMessage::ntprequest(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.ntpRequest)
  return ntprequest_.Get(index);
}
::naothmessages::Ntp* BUUserTeamMessage::mutable_ntprequest(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.BUUserTeamMessage.ntpRequest)
  return ntprequest_.Mutable(index);
}
::naothmessages::Ntp* BUUserTeamMessage::add_ntprequest() {
  // @@protoc_insertion_point(field_add:naothmessages.BUUserTeamMessage.ntpRequest)
  return ntprequest_.Add();
}
::google::protobuf::RepeatedPtrField< ::naothmessages::Ntp >*
BUUserTeamMessage::mutable_ntprequest() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.BUUserTeamMessage.ntpRequest)
  return &ntprequest_;
}
const ::google::protobuf::RepeatedPtrField< ::naothmessages::Ntp >&
BUUserTeamMessage::ntprequest() const {
  // @@protoc_insertion_point(field_list:naothmessages.BUUserTeamMessage.ntpRequest)
  return ntprequest_;
}

// optional .naothmessages.DoubleVector2 ballVelocity = 16;
bool BUUserTeamMessage::has_ballvelocity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BUUserTeamMessage::set_has_ballvelocity() {
  _has_bits_[0] |= 0x00000008u;
}
void BUUserTeamMessage::clear_has_ballvelocity() {
  _has_bits_[0] &= ~0x00000008u;
}
void BUUserTeamMessage::clear_ballvelocity() {
  if (ballvelocity_ != NULL) ballvelocity_->::naothmessages::DoubleVector2::Clear();
  clear_has_ballvelocity();
}
const ::naothmessages::DoubleVector2& BUUserTeamMessage::ballvelocity() const {
  const ::naothmessages::DoubleVector2* p = ballvelocity_;
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.ballVelocity)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* BUUserTeamMessage::mutable_ballvelocity() {
  set_has_ballvelocity();
  if (ballvelocity_ == NULL) {
    ballvelocity_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.BUUserTeamMessage.ballVelocity)
  return ballvelocity_;
}
::naothmessages::DoubleVector2* BUUserTeamMessage::release_ballvelocity() {
  // @@protoc_insertion_point(field_release:naothmessages.BUUserTeamMessage.ballVelocity)
  clear_has_ballvelocity();
  ::naothmessages::DoubleVector2* temp = ballvelocity_;
  ballvelocity_ = NULL;
  return temp;
}
void BUUserTeamMessage::set_allocated_ballvelocity(::naothmessages::DoubleVector2* ballvelocity) {
  delete ballvelocity_;
  ballvelocity_ = ballvelocity;
  if (ballvelocity) {
    set_has_ballvelocity();
  } else {
    clear_has_ballvelocity();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.BUUserTeamMessage.ballVelocity)
}

// optional .naothmessages.RobotState robotState = 17 [default = initial];
bool BUUserTeamMessage::has_robotstate() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void BUUserTeamMessage::set_has_robotstate() {
  _has_bits_[0] |= 0x00008000u;
}
void BUUserTeamMessage::clear_has_robotstate() {
  _has_bits_[0] &= ~0x00008000u;
}
void BUUserTeamMessage::clear_robotstate() {
  robotstate_ = 0;
  clear_has_robotstate();
}
::naothmessages::RobotState BUUserTeamMessage::robotstate() const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.robotState)
  return static_cast< ::naothmessages::RobotState >(robotstate_);
}
void BUUserTeamMessage::set_robotstate(::naothmessages::RobotState value) {
  assert(::naothmessages::RobotState_IsValid(value));
  set_has_robotstate();
  robotstate_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BUUserTeamMessage.robotState)
}

// optional .naothmessages.RobotRole robotRole = 18;
bool BUUserTeamMessage::has_robotrole() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BUUserTeamMessage::set_has_robotrole() {
  _has_bits_[0] |= 0x00000010u;
}
void BUUserTeamMessage::clear_has_robotrole() {
  _has_bits_[0] &= ~0x00000010u;
}
void BUUserTeamMessage::clear_robotrole() {
  if (robotrole_ != NULL) robotrole_->::naothmessages::RobotRole::Clear();
  clear_has_robotrole();
}
const ::naothmessages::RobotRole& BUUserTeamMessage::robotrole() const {
  const ::naothmessages::RobotRole* p = robotrole_;
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.robotRole)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::RobotRole*>(
      &::naothmessages::_RobotRole_default_instance_);
}
::naothmessages::RobotRole* BUUserTeamMessage::mutable_robotrole() {
  set_has_robotrole();
  if (robotrole_ == NULL) {
    robotrole_ = new ::naothmessages::RobotRole;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.BUUserTeamMessage.robotRole)
  return robotrole_;
}
::naothmessages::RobotRole* BUUserTeamMessage::release_robotrole() {
  // @@protoc_insertion_point(field_release:naothmessages.BUUserTeamMessage.robotRole)
  clear_has_robotrole();
  ::naothmessages::RobotRole* temp = robotrole_;
  robotrole_ = NULL;
  return temp;
}
void BUUserTeamMessage::set_allocated_robotrole(::naothmessages::RobotRole* robotrole) {
  delete robotrole_;
  robotrole_ = robotrole;
  if (robotrole) {
    set_has_robotrole();
  } else {
    clear_has_robotrole();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.BUUserTeamMessage.robotRole)
}

// optional bool readyToWalk = 19;
bool BUUserTeamMessage::has_readytowalk() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void BUUserTeamMessage::set_has_readytowalk() {
  _has_bits_[0] |= 0x00010000u;
}
void BUUserTeamMessage::clear_has_readytowalk() {
  _has_bits_[0] &= ~0x00010000u;
}
void BUUserTeamMessage::clear_readytowalk() {
  readytowalk_ = false;
  clear_has_readytowalk();
}
bool BUUserTeamMessage::readytowalk() const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.readyToWalk)
  return readytowalk_;
}
void BUUserTeamMessage::set_readytowalk(bool value) {
  set_has_readytowalk();
  readytowalk_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BUUserTeamMessage.readyToWalk)
}

// optional string key = 100 [default = "none"];
bool BUUserTeamMessage::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BUUserTeamMessage::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
void BUUserTeamMessage::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void BUUserTeamMessage::clear_key() {
  key_.ClearToDefaultNoArena(&BUUserTeamMessage::_default_key_.get());
  clear_has_key();
}
const ::std::string& BUUserTeamMessage::key() const {
  // @@protoc_insertion_point(field_get:naothmessages.BUUserTeamMessage.key)
  return key_.GetNoArena();
}
void BUUserTeamMessage::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&BUUserTeamMessage::_default_key_.get(), value);
  // @@protoc_insertion_point(field_set:naothmessages.BUUserTeamMessage.key)
}
#if LANG_CXX11
void BUUserTeamMessage::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &BUUserTeamMessage::_default_key_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:naothmessages.BUUserTeamMessage.key)
}
#endif
void BUUserTeamMessage::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&BUUserTeamMessage::_default_key_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naothmessages.BUUserTeamMessage.key)
}
void BUUserTeamMessage::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&BUUserTeamMessage::_default_key_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naothmessages.BUUserTeamMessage.key)
}
::std::string* BUUserTeamMessage::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:naothmessages.BUUserTeamMessage.key)
  return key_.MutableNoArena(&BUUserTeamMessage::_default_key_.get());
}
::std::string* BUUserTeamMessage::release_key() {
  // @@protoc_insertion_point(field_release:naothmessages.BUUserTeamMessage.key)
  clear_has_key();
  return key_.ReleaseNoArena(&BUUserTeamMessage::_default_key_.get());
}
void BUUserTeamMessage::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&BUUserTeamMessage::_default_key_.get(), key);
  // @@protoc_insertion_point(field_set_allocated:naothmessages.BUUserTeamMessage.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamMessage_Data::kPlayerNumFieldNumber;
const int TeamMessage_Data::kTeamColorFieldNumber;
const int TeamMessage_Data::kPoseFieldNumber;
const int TeamMessage_Data::kBallAgeFieldNumber;
const int TeamMessage_Data::kBallPositionFieldNumber;
const int TeamMessage_Data::kBallVelocityFieldNumber;
const int TeamMessage_Data::kFallenFieldNumber;
const int TeamMessage_Data::kUserFieldNumber;
const int TeamMessage_Data::kFrameInfoFieldNumber;
const int TeamMessage_Data::kTeamNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamMessage_Data::TeamMessage_Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.TeamMessage.Data)
}
TeamMessage_Data::TeamMessage_Data(const TeamMessage_Data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pose()) {
    pose_ = new ::naothmessages::Pose2D(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_ballposition()) {
    ballposition_ = new ::naothmessages::DoubleVector2(*from.ballposition_);
  } else {
    ballposition_ = NULL;
  }
  if (from.has_ballvelocity()) {
    ballvelocity_ = new ::naothmessages::DoubleVector2(*from.ballvelocity_);
  } else {
    ballvelocity_ = NULL;
  }
  if (from.has_user()) {
    user_ = new ::naothmessages::BUUserTeamMessage(*from.user_);
  } else {
    user_ = NULL;
  }
  if (from.has_frameinfo()) {
    frameinfo_ = new ::naothmessages::FrameInfo(*from.frameinfo_);
  } else {
    frameinfo_ = NULL;
  }
  ::memcpy(&playernum_, &from.playernum_,
    static_cast<size_t>(reinterpret_cast<char*>(&ballage_) -
    reinterpret_cast<char*>(&playernum_)) + sizeof(ballage_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.TeamMessage.Data)
}

void TeamMessage_Data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&teamnumber_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(teamnumber_));
  ballage_ = -1;
}

TeamMessage_Data::~TeamMessage_Data() {
  // @@protoc_insertion_point(destructor:naothmessages.TeamMessage.Data)
  SharedDtor();
}

void TeamMessage_Data::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete ballposition_;
  if (this != internal_default_instance()) delete ballvelocity_;
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete frameinfo_;
}

void TeamMessage_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamMessage_Data::descriptor() {
  protobuf_TeamMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamMessage_Data& TeamMessage_Data::default_instance() {
  protobuf_TeamMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamMessage_Data* TeamMessage_Data::New(::google::protobuf::Arena* arena) const {
  TeamMessage_Data* n = new TeamMessage_Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamMessage_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.TeamMessage.Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pose_ != NULL);
      pose_->::naothmessages::Pose2D::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ballposition_ != NULL);
      ballposition_->::naothmessages::DoubleVector2::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ballvelocity_ != NULL);
      ballvelocity_->::naothmessages::DoubleVector2::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(user_ != NULL);
      user_->::naothmessages::BUUserTeamMessage::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(frameinfo_ != NULL);
      frameinfo_->::naothmessages::FrameInfo::Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&playernum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&teamcolor_) -
        reinterpret_cast<char*>(&playernum_)) + sizeof(teamcolor_));
  }
  if (cached_has_bits & 768u) {
    teamnumber_ = 0u;
    ballage_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamMessage_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.TeamMessage.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerNum = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_playernum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playernum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.Pose2D pose = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ballAge = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_ballage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ballage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector2 ballPosition = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ballposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector2 ballVelocity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ballvelocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.BUUserTeamMessage user = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.FrameInfo frameInfo = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frameinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fallen = 10 [default = false];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_fallen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fallen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.TeamColor teamColor = 11 [default = blueTeam, deprecated = true];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::naothmessages::TeamColor_IsValid(value)) {
            set_teamcolor(static_cast< ::naothmessages::TeamColor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 teamNumber = 12 [default = 0];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_teamnumber();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.TeamMessage.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.TeamMessage.Data)
  return false;
#undef DO_
}

void TeamMessage_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.TeamMessage.Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 playerNum = 1 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playernum(), output);
  }

  // optional .naothmessages.Pose2D pose = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pose_, output);
  }

  // optional int32 ballAge = 4 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ballage(), output);
  }

  // optional .naothmessages.DoubleVector2 ballPosition = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->ballposition_, output);
  }

  // optional .naothmessages.DoubleVector2 ballVelocity = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->ballvelocity_, output);
  }

  // optional .naothmessages.BUUserTeamMessage user = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->user_, output);
  }

  // optional .naothmessages.FrameInfo frameInfo = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->frameinfo_, output);
  }

  // optional bool fallen = 10 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->fallen(), output);
  }

  // optional .naothmessages.TeamColor teamColor = 11 [default = blueTeam, deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->teamcolor(), output);
  }

  // optional uint32 teamNumber = 12 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->teamnumber(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.TeamMessage.Data)
}

::google::protobuf::uint8* TeamMessage_Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.TeamMessage.Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 playerNum = 1 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playernum(), target);
  }

  // optional .naothmessages.Pose2D pose = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pose_, deterministic, target);
  }

  // optional int32 ballAge = 4 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ballage(), target);
  }

  // optional .naothmessages.DoubleVector2 ballPosition = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->ballposition_, deterministic, target);
  }

  // optional .naothmessages.DoubleVector2 ballVelocity = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->ballvelocity_, deterministic, target);
  }

  // optional .naothmessages.BUUserTeamMessage user = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->user_, deterministic, target);
  }

  // optional .naothmessages.FrameInfo frameInfo = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->frameinfo_, deterministic, target);
  }

  // optional bool fallen = 10 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->fallen(), target);
  }

  // optional .naothmessages.TeamColor teamColor = 11 [default = blueTeam, deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->teamcolor(), target);
  }

  // optional uint32 teamNumber = 12 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->teamnumber(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.TeamMessage.Data)
  return target;
}

size_t TeamMessage_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.TeamMessage.Data)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .naothmessages.Pose2D pose = 3;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pose_);
    }

    // optional .naothmessages.DoubleVector2 ballPosition = 5;
    if (has_ballposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ballposition_);
    }

    // optional .naothmessages.DoubleVector2 ballVelocity = 6;
    if (has_ballvelocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ballvelocity_);
    }

    // optional .naothmessages.BUUserTeamMessage user = 8;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_);
    }

    // optional .naothmessages.FrameInfo frameInfo = 9;
    if (has_frameinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->frameinfo_);
    }

    // optional uint32 playerNum = 1 [default = 0];
    if (has_playernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playernum());
    }

    // optional bool fallen = 10 [default = false];
    if (has_fallen()) {
      total_size += 1 + 1;
    }

    // optional .naothmessages.TeamColor teamColor = 11 [default = blueTeam, deprecated = true];
    if (has_teamcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->teamcolor());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 teamNumber = 12 [default = 0];
    if (has_teamnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamnumber());
    }

    // optional int32 ballAge = 4 [default = -1];
    if (has_ballage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ballage());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamMessage_Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.TeamMessage.Data)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamMessage_Data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamMessage_Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.TeamMessage.Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.TeamMessage.Data)
    MergeFrom(*source);
  }
}

void TeamMessage_Data::MergeFrom(const TeamMessage_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.TeamMessage.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pose()->::naothmessages::Pose2D::MergeFrom(from.pose());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ballposition()->::naothmessages::DoubleVector2::MergeFrom(from.ballposition());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ballvelocity()->::naothmessages::DoubleVector2::MergeFrom(from.ballvelocity());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_user()->::naothmessages::BUUserTeamMessage::MergeFrom(from.user());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_frameinfo()->::naothmessages::FrameInfo::MergeFrom(from.frameinfo());
    }
    if (cached_has_bits & 0x00000020u) {
      playernum_ = from.playernum_;
    }
    if (cached_has_bits & 0x00000040u) {
      fallen_ = from.fallen_;
    }
    if (cached_has_bits & 0x00000080u) {
      teamcolor_ = from.teamcolor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      teamnumber_ = from.teamnumber_;
    }
    if (cached_has_bits & 0x00000200u) {
      ballage_ = from.ballage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TeamMessage_Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.TeamMessage.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamMessage_Data::CopyFrom(const TeamMessage_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.TeamMessage.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMessage_Data::IsInitialized() const {
  if (has_pose()) {
    if (!this->pose_->IsInitialized()) return false;
  }
  if (has_ballposition()) {
    if (!this->ballposition_->IsInitialized()) return false;
  }
  if (has_ballvelocity()) {
    if (!this->ballvelocity_->IsInitialized()) return false;
  }
  if (has_user()) {
    if (!this->user_->IsInitialized()) return false;
  }
  if (has_frameinfo()) {
    if (!this->frameinfo_->IsInitialized()) return false;
  }
  return true;
}

void TeamMessage_Data::Swap(TeamMessage_Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamMessage_Data::InternalSwap(TeamMessage_Data* other) {
  using std::swap;
  swap(pose_, other->pose_);
  swap(ballposition_, other->ballposition_);
  swap(ballvelocity_, other->ballvelocity_);
  swap(user_, other->user_);
  swap(frameinfo_, other->frameinfo_);
  swap(playernum_, other->playernum_);
  swap(fallen_, other->fallen_);
  swap(teamcolor_, other->teamcolor_);
  swap(teamnumber_, other->teamnumber_);
  swap(ballage_, other->ballage_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamMessage_Data::GetMetadata() const {
  protobuf_TeamMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamMessage_Data

// optional uint32 playerNum = 1 [default = 0];
bool TeamMessage_Data::has_playernum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TeamMessage_Data::set_has_playernum() {
  _has_bits_[0] |= 0x00000020u;
}
void TeamMessage_Data::clear_has_playernum() {
  _has_bits_[0] &= ~0x00000020u;
}
void TeamMessage_Data::clear_playernum() {
  playernum_ = 0u;
  clear_has_playernum();
}
::google::protobuf::uint32 TeamMessage_Data::playernum() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamMessage.Data.playerNum)
  return playernum_;
}
void TeamMessage_Data::set_playernum(::google::protobuf::uint32 value) {
  set_has_playernum();
  playernum_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamMessage.Data.playerNum)
}

// optional .naothmessages.TeamColor teamColor = 11 [default = blueTeam, deprecated = true];
bool TeamMessage_Data::has_teamcolor() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TeamMessage_Data::set_has_teamcolor() {
  _has_bits_[0] |= 0x00000080u;
}
void TeamMessage_Data::clear_has_teamcolor() {
  _has_bits_[0] &= ~0x00000080u;
}
void TeamMessage_Data::clear_teamcolor() {
  teamcolor_ = 0;
  clear_has_teamcolor();
}
::naothmessages::TeamColor TeamMessage_Data::teamcolor() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamMessage.Data.teamColor)
  return static_cast< ::naothmessages::TeamColor >(teamcolor_);
}
void TeamMessage_Data::set_teamcolor(::naothmessages::TeamColor value) {
  assert(::naothmessages::TeamColor_IsValid(value));
  set_has_teamcolor();
  teamcolor_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamMessage.Data.teamColor)
}

// optional .naothmessages.Pose2D pose = 3;
bool TeamMessage_Data::has_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamMessage_Data::set_has_pose() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamMessage_Data::clear_has_pose() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamMessage_Data::clear_pose() {
  if (pose_ != NULL) pose_->::naothmessages::Pose2D::Clear();
  clear_has_pose();
}
const ::naothmessages::Pose2D& TeamMessage_Data::pose() const {
  const ::naothmessages::Pose2D* p = pose_;
  // @@protoc_insertion_point(field_get:naothmessages.TeamMessage.Data.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::Pose2D*>(
      &::naothmessages::_Pose2D_default_instance_);
}
::naothmessages::Pose2D* TeamMessage_Data::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::naothmessages::Pose2D;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.TeamMessage.Data.pose)
  return pose_;
}
::naothmessages::Pose2D* TeamMessage_Data::release_pose() {
  // @@protoc_insertion_point(field_release:naothmessages.TeamMessage.Data.pose)
  clear_has_pose();
  ::naothmessages::Pose2D* temp = pose_;
  pose_ = NULL;
  return temp;
}
void TeamMessage_Data::set_allocated_pose(::naothmessages::Pose2D* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.TeamMessage.Data.pose)
}

// optional int32 ballAge = 4 [default = -1];
bool TeamMessage_Data::has_ballage() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TeamMessage_Data::set_has_ballage() {
  _has_bits_[0] |= 0x00000200u;
}
void TeamMessage_Data::clear_has_ballage() {
  _has_bits_[0] &= ~0x00000200u;
}
void TeamMessage_Data::clear_ballage() {
  ballage_ = -1;
  clear_has_ballage();
}
::google::protobuf::int32 TeamMessage_Data::ballage() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamMessage.Data.ballAge)
  return ballage_;
}
void TeamMessage_Data::set_ballage(::google::protobuf::int32 value) {
  set_has_ballage();
  ballage_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamMessage.Data.ballAge)
}

// optional .naothmessages.DoubleVector2 ballPosition = 5;
bool TeamMessage_Data::has_ballposition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TeamMessage_Data::set_has_ballposition() {
  _has_bits_[0] |= 0x00000002u;
}
void TeamMessage_Data::clear_has_ballposition() {
  _has_bits_[0] &= ~0x00000002u;
}
void TeamMessage_Data::clear_ballposition() {
  if (ballposition_ != NULL) ballposition_->::naothmessages::DoubleVector2::Clear();
  clear_has_ballposition();
}
const ::naothmessages::DoubleVector2& TeamMessage_Data::ballposition() const {
  const ::naothmessages::DoubleVector2* p = ballposition_;
  // @@protoc_insertion_point(field_get:naothmessages.TeamMessage.Data.ballPosition)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* TeamMessage_Data::mutable_ballposition() {
  set_has_ballposition();
  if (ballposition_ == NULL) {
    ballposition_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.TeamMessage.Data.ballPosition)
  return ballposition_;
}
::naothmessages::DoubleVector2* TeamMessage_Data::release_ballposition() {
  // @@protoc_insertion_point(field_release:naothmessages.TeamMessage.Data.ballPosition)
  clear_has_ballposition();
  ::naothmessages::DoubleVector2* temp = ballposition_;
  ballposition_ = NULL;
  return temp;
}
void TeamMessage_Data::set_allocated_ballposition(::naothmessages::DoubleVector2* ballposition) {
  delete ballposition_;
  ballposition_ = ballposition;
  if (ballposition) {
    set_has_ballposition();
  } else {
    clear_has_ballposition();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.TeamMessage.Data.ballPosition)
}

// optional .naothmessages.DoubleVector2 ballVelocity = 6;
bool TeamMessage_Data::has_ballvelocity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TeamMessage_Data::set_has_ballvelocity() {
  _has_bits_[0] |= 0x00000004u;
}
void TeamMessage_Data::clear_has_ballvelocity() {
  _has_bits_[0] &= ~0x00000004u;
}
void TeamMessage_Data::clear_ballvelocity() {
  if (ballvelocity_ != NULL) ballvelocity_->::naothmessages::DoubleVector2::Clear();
  clear_has_ballvelocity();
}
const ::naothmessages::DoubleVector2& TeamMessage_Data::ballvelocity() const {
  const ::naothmessages::DoubleVector2* p = ballvelocity_;
  // @@protoc_insertion_point(field_get:naothmessages.TeamMessage.Data.ballVelocity)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* TeamMessage_Data::mutable_ballvelocity() {
  set_has_ballvelocity();
  if (ballvelocity_ == NULL) {
    ballvelocity_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.TeamMessage.Data.ballVelocity)
  return ballvelocity_;
}
::naothmessages::DoubleVector2* TeamMessage_Data::release_ballvelocity() {
  // @@protoc_insertion_point(field_release:naothmessages.TeamMessage.Data.ballVelocity)
  clear_has_ballvelocity();
  ::naothmessages::DoubleVector2* temp = ballvelocity_;
  ballvelocity_ = NULL;
  return temp;
}
void TeamMessage_Data::set_allocated_ballvelocity(::naothmessages::DoubleVector2* ballvelocity) {
  delete ballvelocity_;
  ballvelocity_ = ballvelocity;
  if (ballvelocity) {
    set_has_ballvelocity();
  } else {
    clear_has_ballvelocity();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.TeamMessage.Data.ballVelocity)
}

// optional bool fallen = 10 [default = false];
bool TeamMessage_Data::has_fallen() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TeamMessage_Data::set_has_fallen() {
  _has_bits_[0] |= 0x00000040u;
}
void TeamMessage_Data::clear_has_fallen() {
  _has_bits_[0] &= ~0x00000040u;
}
void TeamMessage_Data::clear_fallen() {
  fallen_ = false;
  clear_has_fallen();
}
bool TeamMessage_Data::fallen() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamMessage.Data.fallen)
  return fallen_;
}
void TeamMessage_Data::set_fallen(bool value) {
  set_has_fallen();
  fallen_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamMessage.Data.fallen)
}

// optional .naothmessages.BUUserTeamMessage user = 8;
bool TeamMessage_Data::has_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TeamMessage_Data::set_has_user() {
  _has_bits_[0] |= 0x00000008u;
}
void TeamMessage_Data::clear_has_user() {
  _has_bits_[0] &= ~0x00000008u;
}
void TeamMessage_Data::clear_user() {
  if (user_ != NULL) user_->::naothmessages::BUUserTeamMessage::Clear();
  clear_has_user();
}
const ::naothmessages::BUUserTeamMessage& TeamMessage_Data::user() const {
  const ::naothmessages::BUUserTeamMessage* p = user_;
  // @@protoc_insertion_point(field_get:naothmessages.TeamMessage.Data.user)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::BUUserTeamMessage*>(
      &::naothmessages::_BUUserTeamMessage_default_instance_);
}
::naothmessages::BUUserTeamMessage* TeamMessage_Data::mutable_user() {
  set_has_user();
  if (user_ == NULL) {
    user_ = new ::naothmessages::BUUserTeamMessage;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.TeamMessage.Data.user)
  return user_;
}
::naothmessages::BUUserTeamMessage* TeamMessage_Data::release_user() {
  // @@protoc_insertion_point(field_release:naothmessages.TeamMessage.Data.user)
  clear_has_user();
  ::naothmessages::BUUserTeamMessage* temp = user_;
  user_ = NULL;
  return temp;
}
void TeamMessage_Data::set_allocated_user(::naothmessages::BUUserTeamMessage* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.TeamMessage.Data.user)
}

// optional .naothmessages.FrameInfo frameInfo = 9;
bool TeamMessage_Data::has_frameinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TeamMessage_Data::set_has_frameinfo() {
  _has_bits_[0] |= 0x00000010u;
}
void TeamMessage_Data::clear_has_frameinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
void TeamMessage_Data::clear_frameinfo() {
  if (frameinfo_ != NULL) frameinfo_->::naothmessages::FrameInfo::Clear();
  clear_has_frameinfo();
}
const ::naothmessages::FrameInfo& TeamMessage_Data::frameinfo() const {
  const ::naothmessages::FrameInfo* p = frameinfo_;
  // @@protoc_insertion_point(field_get:naothmessages.TeamMessage.Data.frameInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::FrameInfo*>(
      &::naothmessages::_FrameInfo_default_instance_);
}
::naothmessages::FrameInfo* TeamMessage_Data::mutable_frameinfo() {
  set_has_frameinfo();
  if (frameinfo_ == NULL) {
    frameinfo_ = new ::naothmessages::FrameInfo;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.TeamMessage.Data.frameInfo)
  return frameinfo_;
}
::naothmessages::FrameInfo* TeamMessage_Data::release_frameinfo() {
  // @@protoc_insertion_point(field_release:naothmessages.TeamMessage.Data.frameInfo)
  clear_has_frameinfo();
  ::naothmessages::FrameInfo* temp = frameinfo_;
  frameinfo_ = NULL;
  return temp;
}
void TeamMessage_Data::set_allocated_frameinfo(::naothmessages::FrameInfo* frameinfo) {
  delete frameinfo_;
  frameinfo_ = frameinfo;
  if (frameinfo) {
    set_has_frameinfo();
  } else {
    clear_has_frameinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.TeamMessage.Data.frameInfo)
}

// optional uint32 teamNumber = 12 [default = 0];
bool TeamMessage_Data::has_teamnumber() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TeamMessage_Data::set_has_teamnumber() {
  _has_bits_[0] |= 0x00000100u;
}
void TeamMessage_Data::clear_has_teamnumber() {
  _has_bits_[0] &= ~0x00000100u;
}
void TeamMessage_Data::clear_teamnumber() {
  teamnumber_ = 0u;
  clear_has_teamnumber();
}
::google::protobuf::uint32 TeamMessage_Data::teamnumber() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamMessage.Data.teamNumber)
  return teamnumber_;
}
void TeamMessage_Data::set_teamnumber(::google::protobuf::uint32 value) {
  set_has_teamnumber();
  teamnumber_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamMessage.Data.teamNumber)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamMessage::kDataFieldNumber;
const int TeamMessage::kMessageDropFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamMessage::TeamMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.TeamMessage)
}
TeamMessage::TeamMessage(const TeamMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_messagedrop()) {
    messagedrop_ = new ::naothmessages::Drops(*from.messagedrop_);
  } else {
    messagedrop_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:naothmessages.TeamMessage)
}

void TeamMessage::SharedCtor() {
  _cached_size_ = 0;
  messagedrop_ = NULL;
}

TeamMessage::~TeamMessage() {
  // @@protoc_insertion_point(destructor:naothmessages.TeamMessage)
  SharedDtor();
}

void TeamMessage::SharedDtor() {
  if (this != internal_default_instance()) delete messagedrop_;
}

void TeamMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamMessage::descriptor() {
  protobuf_TeamMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamMessage& TeamMessage::default_instance() {
  protobuf_TeamMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamMessage* TeamMessage::New(::google::protobuf::Arena* arena) const {
  TeamMessage* n = new TeamMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.TeamMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  if (has_messagedrop()) {
    GOOGLE_DCHECK(messagedrop_ != NULL);
    messagedrop_->::naothmessages::Drops::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.TeamMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .naothmessages.TeamMessage.Data data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.Drops messageDrop = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_messagedrop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.TeamMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.TeamMessage)
  return false;
#undef DO_
}

void TeamMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.TeamMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .naothmessages.TeamMessage.Data data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.Drops messageDrop = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->messagedrop_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.TeamMessage)
}

::google::protobuf::uint8* TeamMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.TeamMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .naothmessages.TeamMessage.Data data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->data(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.Drops messageDrop = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->messagedrop_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.TeamMessage)
  return target;
}

size_t TeamMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.TeamMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .naothmessages.TeamMessage.Data data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data(static_cast<int>(i)));
    }
  }

  // optional .naothmessages.Drops messageDrop = 2;
  if (has_messagedrop()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->messagedrop_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.TeamMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.TeamMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.TeamMessage)
    MergeFrom(*source);
  }
}

void TeamMessage::MergeFrom(const TeamMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.TeamMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.has_messagedrop()) {
    mutable_messagedrop()->::naothmessages::Drops::MergeFrom(from.messagedrop());
  }
}

void TeamMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.TeamMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamMessage::CopyFrom(const TeamMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.TeamMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMessage::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void TeamMessage::Swap(TeamMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamMessage::InternalSwap(TeamMessage* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  swap(messagedrop_, other->messagedrop_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamMessage::GetMetadata() const {
  protobuf_TeamMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamMessage

// repeated .naothmessages.TeamMessage.Data data = 1;
int TeamMessage::data_size() const {
  return data_.size();
}
void TeamMessage::clear_data() {
  data_.Clear();
}
const ::naothmessages::TeamMessage_Data& TeamMessage::data(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamMessage.data)
  return data_.Get(index);
}
::naothmessages::TeamMessage_Data* TeamMessage::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.TeamMessage.data)
  return data_.Mutable(index);
}
::naothmessages::TeamMessage_Data* TeamMessage::add_data() {
  // @@protoc_insertion_point(field_add:naothmessages.TeamMessage.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::naothmessages::TeamMessage_Data >*
TeamMessage::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.TeamMessage.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::naothmessages::TeamMessage_Data >&
TeamMessage::data() const {
  // @@protoc_insertion_point(field_list:naothmessages.TeamMessage.data)
  return data_;
}

// optional .naothmessages.Drops messageDrop = 2;
bool TeamMessage::has_messagedrop() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamMessage::set_has_messagedrop() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamMessage::clear_has_messagedrop() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamMessage::clear_messagedrop() {
  if (messagedrop_ != NULL) messagedrop_->::naothmessages::Drops::Clear();
  clear_has_messagedrop();
}
const ::naothmessages::Drops& TeamMessage::messagedrop() const {
  const ::naothmessages::Drops* p = messagedrop_;
  // @@protoc_insertion_point(field_get:naothmessages.TeamMessage.messageDrop)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::Drops*>(
      &::naothmessages::_Drops_default_instance_);
}
::naothmessages::Drops* TeamMessage::mutable_messagedrop() {
  set_has_messagedrop();
  if (messagedrop_ == NULL) {
    messagedrop_ = new ::naothmessages::Drops;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.TeamMessage.messageDrop)
  return messagedrop_;
}
::naothmessages::Drops* TeamMessage::release_messagedrop() {
  // @@protoc_insertion_point(field_release:naothmessages.TeamMessage.messageDrop)
  clear_has_messagedrop();
  ::naothmessages::Drops* temp = messagedrop_;
  messagedrop_ = NULL;
  return temp;
}
void TeamMessage::set_allocated_messagedrop(::naothmessages::Drops* messagedrop) {
  delete messagedrop_;
  messagedrop_ = messagedrop;
  if (messagedrop) {
    set_has_messagedrop();
  } else {
    clear_has_messagedrop();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.TeamMessage.messageDrop)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamMessageEvent::kPlayerNumFieldNumber;
const int TeamMessageEvent::kDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamMessageEvent::TeamMessageEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.TeamMessageEvent)
}
TeamMessageEvent::TeamMessageEvent(const TeamMessageEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      details_(from.details_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playernum_ = from.playernum_;
  // @@protoc_insertion_point(copy_constructor:naothmessages.TeamMessageEvent)
}

void TeamMessageEvent::SharedCtor() {
  _cached_size_ = 0;
  playernum_ = 0u;
}

TeamMessageEvent::~TeamMessageEvent() {
  // @@protoc_insertion_point(destructor:naothmessages.TeamMessageEvent)
  SharedDtor();
}

void TeamMessageEvent::SharedDtor() {
}

void TeamMessageEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamMessageEvent::descriptor() {
  protobuf_TeamMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamMessageEvent& TeamMessageEvent::default_instance() {
  protobuf_TeamMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamMessageEvent* TeamMessageEvent::New(::google::protobuf::Arena* arena) const {
  TeamMessageEvent* n = new TeamMessageEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamMessageEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.TeamMessageEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  details_.Clear();
  playernum_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamMessageEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.TeamMessageEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerNum = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_playernum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playernum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.Any details = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.TeamMessageEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.TeamMessageEvent)
  return false;
#undef DO_
}

void TeamMessageEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.TeamMessageEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 playerNum = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playernum(), output);
  }

  // repeated .google.protobuf.Any details = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->details_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->details(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.TeamMessageEvent)
}

::google::protobuf::uint8* TeamMessageEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.TeamMessageEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 playerNum = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playernum(), target);
  }

  // repeated .google.protobuf.Any details = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->details_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->details(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.TeamMessageEvent)
  return target;
}

size_t TeamMessageEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.TeamMessageEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .google.protobuf.Any details = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->details_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->details(static_cast<int>(i)));
    }
  }

  // optional uint32 playerNum = 1 [default = 0];
  if (has_playernum()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playernum());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamMessageEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.TeamMessageEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamMessageEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamMessageEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.TeamMessageEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.TeamMessageEvent)
    MergeFrom(*source);
  }
}

void TeamMessageEvent::MergeFrom(const TeamMessageEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.TeamMessageEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  details_.MergeFrom(from.details_);
  if (from.has_playernum()) {
    set_playernum(from.playernum());
  }
}

void TeamMessageEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.TeamMessageEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamMessageEvent::CopyFrom(const TeamMessageEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.TeamMessageEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMessageEvent::IsInitialized() const {
  return true;
}

void TeamMessageEvent::Swap(TeamMessageEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamMessageEvent::InternalSwap(TeamMessageEvent* other) {
  using std::swap;
  details_.InternalSwap(&other->details_);
  swap(playernum_, other->playernum_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamMessageEvent::GetMetadata() const {
  protobuf_TeamMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamMessageEvent

// optional uint32 playerNum = 1 [default = 0];
bool TeamMessageEvent::has_playernum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamMessageEvent::set_has_playernum() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamMessageEvent::clear_has_playernum() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamMessageEvent::clear_playernum() {
  playernum_ = 0u;
  clear_has_playernum();
}
::google::protobuf::uint32 TeamMessageEvent::playernum() const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamMessageEvent.playerNum)
  return playernum_;
}
void TeamMessageEvent::set_playernum(::google::protobuf::uint32 value) {
  set_has_playernum();
  playernum_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.TeamMessageEvent.playerNum)
}

// repeated .google.protobuf.Any details = 2;
int TeamMessageEvent::details_size() const {
  return details_.size();
}
void TeamMessageEvent::clear_details() {
  details_.Clear();
}
const ::google::protobuf::Any& TeamMessageEvent::details(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.TeamMessageEvent.details)
  return details_.Get(index);
}
::google::protobuf::Any* TeamMessageEvent::mutable_details(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.TeamMessageEvent.details)
  return details_.Mutable(index);
}
::google::protobuf::Any* TeamMessageEvent::add_details() {
  // @@protoc_insertion_point(field_add:naothmessages.TeamMessageEvent.details)
  return details_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
TeamMessageEvent::mutable_details() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.TeamMessageEvent.details)
  return &details_;
}
const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
TeamMessageEvent::details() const {
  // @@protoc_insertion_point(field_list:naothmessages.TeamMessageEvent.details)
  return details_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace naothmessages

// @@protoc_insertion_point(global_scope)
