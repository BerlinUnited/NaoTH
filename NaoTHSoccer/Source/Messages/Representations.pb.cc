// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Representations.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Representations.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace naothmessages {
class CameraMatrixDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CameraMatrix>
     _instance;
} _CameraMatrix_default_instance_;
class BallPerceptDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BallPercept>
     _instance;
} _BallPercept_default_instance_;
class MultiBallPercept_BallPerceptDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MultiBallPercept_BallPercept>
     _instance;
} _MultiBallPercept_BallPercept_default_instance_;
class MultiBallPerceptDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MultiBallPercept>
     _instance;
} _MultiBallPercept_default_instance_;
class BallModelDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BallModel>
     _instance;
} _BallModel_default_instance_;
class GoalPercept_GoalPostDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GoalPercept_GoalPost>
     _instance;
} _GoalPercept_GoalPost_default_instance_;
class GoalPerceptDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GoalPercept>
     _instance;
} _GoalPercept_default_instance_;
class HeadMotionRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HeadMotionRequest>
     _instance;
} _HeadMotionRequest_default_instance_;
class StepControlRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StepControlRequest>
     _instance;
} _StepControlRequest_default_instance_;
class WalkRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WalkRequest>
     _instance;
} _WalkRequest_default_instance_;
class KickRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KickRequest>
     _instance;
} _KickRequest_default_instance_;
class GraspRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GraspRequest>
     _instance;
} _GraspRequest_default_instance_;
class ArmMotionRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ArmMotionRequest>
     _instance;
} _ArmMotionRequest_default_instance_;
class MotionRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MotionRequest>
     _instance;
} _MotionRequest_default_instance_;
class LinePercept_IntersectionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LinePercept_Intersection>
     _instance;
} _LinePercept_Intersection_default_instance_;
class LinePercept_FieldLineSegmentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LinePercept_FieldLineSegment>
     _instance;
} _LinePercept_FieldLineSegment_default_instance_;
class LinePerceptDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LinePercept>
     _instance;
} _LinePercept_default_instance_;
class ShortLinePerceptDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ShortLinePercept>
     _instance;
} _ShortLinePercept_default_instance_;
class PolygonDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Polygon>
     _instance;
} _Polygon_default_instance_;
class FieldPerceptDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FieldPercept>
     _instance;
} _FieldPercept_default_instance_;
class RansacLinePerceptDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RansacLinePercept>
     _instance;
} _RansacLinePercept_default_instance_;
class RansacCirclePercept2018DefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RansacCirclePercept2018>
     _instance;
} _RansacCirclePercept2018_default_instance_;
class ScanLineEndPointDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScanLineEndPoint>
     _instance;
} _ScanLineEndPoint_default_instance_;
class DoubleEdgelDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DoubleEdgel>
     _instance;
} _DoubleEdgel_default_instance_;
class EdgelDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Edgel>
     _instance;
} _Edgel_default_instance_;
class EdgelPairDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EdgelPair>
     _instance;
} _EdgelPair_default_instance_;
class ScanLineEdgelPerceptDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScanLineEdgelPercept>
     _instance;
} _ScanLineEdgelPercept_default_instance_;
class LineGraphPerceptDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LineGraphPercept>
     _instance;
} _LineGraphPercept_default_instance_;
class StepControlStatusDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StepControlStatus>
     _instance;
} _StepControlStatus_default_instance_;
class MotionStatusDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MotionStatus>
     _instance;
} _MotionStatus_default_instance_;
class OdometryDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OdometryData>
     _instance;
} _OdometryData_default_instance_;
class BodyStateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BodyState>
     _instance;
} _BodyState_default_instance_;
class BodyStatusDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BodyStatus>
     _instance;
} _BodyStatus_default_instance_;
class CalibrationDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CalibrationData>
     _instance;
} _CalibrationData_default_instance_;
class InertialModelDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InertialModel>
     _instance;
} _InertialModel_default_instance_;
class CameraMatrixCalibrationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CameraMatrixCalibration>
     _instance;
} _CameraMatrixCalibration_default_instance_;
class BallCandidates_PatchDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BallCandidates_Patch>
     _instance;
} _BallCandidates_Patch_default_instance_;
class BallCandidatesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BallCandidates>
     _instance;
} _BallCandidates_default_instance_;
class RemoteControlCommandDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RemoteControlCommand>
     _instance;
} _RemoteControlCommand_default_instance_;
class GroundContactModelDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GroundContactModel>
     _instance;
} _GroundContactModel_default_instance_;
class CollisionPerceptDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CollisionPercept>
     _instance;
} _CollisionPercept_default_instance_;
class IMUDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IMUData>
     _instance;
} _IMUData_default_instance_;
class CentreOfPressureDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CentreOfPressure>
     _instance;
} _CentreOfPressure_default_instance_;
class CalibrationDataCMC_CalibrationDataSampleV3DefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CalibrationDataCMC_CalibrationDataSampleV3>
     _instance;
} _CalibrationDataCMC_CalibrationDataSampleV3_default_instance_;
class CalibrationDataCMCDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CalibrationDataCMC>
     _instance;
} _CalibrationDataCMC_default_instance_;
class WhistlePercept_WhistleDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WhistlePercept_Whistle>
     _instance;
} _WhistlePercept_Whistle_default_instance_;
class WhistlePerceptDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WhistlePercept>
     _instance;
} _WhistlePercept_default_instance_;
class DebugModify_ModifyValueDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DebugModify_ModifyValue>
     _instance;
} _DebugModify_ModifyValue_default_instance_;
class DebugModifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DebugModify>
     _instance;
} _DebugModify_default_instance_;
class StepBufferDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StepBuffer>
     _instance;
} _StepBuffer_default_instance_;
class bodyAwarenessDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<bodyAwareness>
     _instance;
} _bodyAwareness_default_instance_;

namespace protobuf_Representations_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[51];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[9];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMatrix, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMatrix, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMatrix, cameraid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMatrix, valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMatrix, timestamp_),
  0,
  3,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPercept, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPercept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPercept, ballwasseen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPercept, centerinimage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPercept, radiusinimage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPercept, ballcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPercept, bearingbasedoffsetonfield_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPercept, frameinfowhenballwasseen_),
  3,
  0,
  5,
  4,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiBallPercept_BallPercept, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiBallPercept_BallPercept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiBallPercept_BallPercept, centerinimage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiBallPercept_BallPercept, radiusinimage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiBallPercept_BallPercept, positiononfield_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiBallPercept_BallPercept, cameraid_),
  0,
  2,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiBallPercept, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiBallPercept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiBallPercept, frameinfowhenballwasseen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiBallPercept, percepts_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallModel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallModel, valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallModel, knows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallModel, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallModel, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallModel, positionpreview_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallModel, positionpreviewinlfoot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallModel, positionpreviewinrfoot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallModel, futureposition_),
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalPercept_GoalPost, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalPercept_GoalPost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalPercept_GoalPost, basepoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalPercept_GoalPost, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalPercept_GoalPost, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalPercept_GoalPost, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalPercept_GoalPost, positionreliable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalPercept_GoalPost, seenheight_),
  0,
  1,
  2,
  3,
  5,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalPercept, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalPercept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalPercept, angletoseengoal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalPercept, goalcentroid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalPercept, numberofseenposts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalPercept, post_),
  1,
  0,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMotionRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMotionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMotionRequest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMotionRequest, cameraid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMotionRequest, targetjointposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMotionRequest, targetpointinimage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMotionRequest, targetpointintheworld_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMotionRequest, searchcenter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMotionRequest, searchsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMotionRequest, searchdirection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMotionRequest, targetpointontheground_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMotionRequest, coordinate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMotionRequest, velocity_),
  6,
  7,
  0,
  1,
  2,
  3,
  4,
  8,
  5,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepControlRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepControlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepControlRequest, stepid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepControlRequest, moveleftfoot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepControlRequest, target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepControlRequest, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepControlRequest, speeddirection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepControlRequest, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepControlRequest, steptype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepControlRequest, restriction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepControlRequest, isprotected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepControlRequest, steprequestid_),
  1,
  5,
  0,
  2,
  3,
  4,
  7,
  8,
  6,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WalkRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WalkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WalkRequest, coordinate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WalkRequest, character_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WalkRequest, target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WalkRequest, stepcontrol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WalkRequest, offset_),
  4,
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickRequest, kickpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickRequest, kickdirection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickRequest, kickfoot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickRequest, finishkick_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraspRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraspRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraspRequest, graspingpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraspRequest, graspingstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraspRequest, graspdiststate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraspRequest, graspstiffstate_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmMotionRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmMotionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmMotionRequest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmMotionRequest, lshoulderposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmMotionRequest, lshoulderstiffness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmMotionRequest, lelbowposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmMotionRequest, lelbowstiffness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmMotionRequest, rshoulderposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmMotionRequest, rshoulderstiffness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmMotionRequest, relbowposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmMotionRequest, relbowstiffness_),
  8,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionRequest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionRequest, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionRequest, forced_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionRequest, walkrequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionRequest, starndardstand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionRequest, kickrequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionRequest, standheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionRequest, calibratefoottouchdetector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionRequest, cognitionframenumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionRequest, grasprequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionRequest, armmotionrequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionRequest, disable_relaxed_stand_),
  4,
  5,
  7,
  0,
  8,
  1,
  6,
  9,
  11,
  2,
  3,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePercept_Intersection, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePercept_Intersection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePercept_Intersection, posinimage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePercept_Intersection, posonfield_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePercept_Intersection, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePercept_Intersection, segmentoneindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePercept_Intersection, segmenttwoindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePercept_Intersection, segmentonedistance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePercept_Intersection, segmenttwodistance_),
  0,
  1,
  2,
  3,
  5,
  4,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePercept_FieldLineSegment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePercept_FieldLineSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePercept_FieldLineSegment, lineinimage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePercept_FieldLineSegment, lineonfield_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePercept_FieldLineSegment, beginextendcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePercept_FieldLineSegment, endextendcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePercept_FieldLineSegment, thickness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePercept_FieldLineSegment, slope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePercept_FieldLineSegment, angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePercept_FieldLineSegment, valid_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePercept, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePercept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePercept, lines_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePercept, intersections_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePercept, middlecirclecenter_),
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortLinePercept, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortLinePercept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortLinePercept, fieldlinesegments_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, points_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldPercept, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldPercept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldPercept, fieldpoly_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RansacLinePercept, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RansacLinePercept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RansacLinePercept, fieldlinesegments_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RansacCirclePercept2018, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RansacCirclePercept2018, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RansacCirclePercept2018, wasseen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RansacCirclePercept2018, middlecirclecenter_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLineEndPoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLineEndPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLineEndPoint, posinimage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLineEndPoint, posonfield_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLineEndPoint, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLineEndPoint, scanlineid_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleEdgel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleEdgel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleEdgel, point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleEdgel, direction_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edgel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edgel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edgel, point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edgel, direction_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgelPair, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgelPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgelPair, begin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgelPair, end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgelPair, id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLineEdgelPercept, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLineEdgelPercept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLineEdgelPercept, edgels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLineEdgelPercept, pairs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLineEdgelPercept, endpoints_),
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineGraphPercept, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineGraphPercept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineGraphPercept, edgelsonfield_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineGraphPercept, edgelsinimagetop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineGraphPercept, edgelsinimage_),
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepControlStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepControlStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepControlStatus, stepid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepControlStatus, moveablefoot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepControlStatus, steprequestid_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, lastmotion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, currentmotion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, headmotion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, currentmotionstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, plannedmotionleftfoot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, plannedmotionrightfoot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, plannedmotionhip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, stepcontrolstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, target_reached_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, head_target_reached_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, head_got_stuck_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, walk_emergency_stop_),
  4,
  5,
  6,
  7,
  8,
  0,
  1,
  2,
  3,
  9,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryData, pose_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyState, isliftedup_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyStatus, currentsum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyStatus, timestamp_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationData, inertialsensoroffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationData, gyrosensoroffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationData, accsensoroffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationData, calibrated_),
  0,
  2,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InertialModel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InertialModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InertialModel, orientation_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMatrixCalibration, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMatrixCalibration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMatrixCalibration, correctionoffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMatrixCalibration, correctionoffsetbody_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMatrixCalibration, correctionoffsethead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMatrixCalibration, correctionoffsetcam_),
  ~0u,
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallCandidates_Patch, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallCandidates_Patch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallCandidates_Patch, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallCandidates_Patch, max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallCandidates_Patch, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallCandidates_Patch, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallCandidates_Patch, value_),
  1,
  2,
  4,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallCandidates, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallCandidates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallCandidates, patches_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControlCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControlCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControlCommand, controlmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControlCommand, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControlCommand, second_action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControlCommand, target_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundContactModel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundContactModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundContactModel, leftgroundcontact_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundContactModel, rightgroundcontact_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundContactModel, supportfoot_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionPercept, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionPercept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionPercept, timecollisionarmleft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionPercept, timecollisionarmright_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionPercept, iscollisionleftbumper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionPercept, iscollisionrightbumper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionPercept, lastcomputedcollisionleft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionPercept, lastcomputedcollisionright_),
  0,
  1,
  4,
  5,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUData, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUData, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUData, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUData, acceleration_sensor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUData, rotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUData, rotational_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUData, rotational_velocity_sensor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUData, orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUData, orientation_rotvec_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CentreOfPressure, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CentreOfPressure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CentreOfPressure, in_and_only_left_foot_cop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CentreOfPressure, in_and_only_left_foot_magnitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CentreOfPressure, in_and_only_left_foot_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CentreOfPressure, in_and_only_right_foot_cop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CentreOfPressure, in_and_only_right_foot_magnitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CentreOfPressure, in_and_only_right_foot_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CentreOfPressure, in_kinematic_chain_origin_cop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CentreOfPressure, in_kinematic_chain_origin_magnitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CentreOfPressure, in_kinematic_chain_origin_valid_),
  0,
  3,
  6,
  1,
  4,
  7,
  2,
  5,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationDataCMC_CalibrationDataSampleV3, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationDataCMC_CalibrationDataSampleV3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationDataCMC_CalibrationDataSampleV3, chestpose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationDataCMC_CalibrationDataSampleV3, edgelsinimage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationDataCMC_CalibrationDataSampleV3, edgelsinimagetop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationDataCMC_CalibrationDataSampleV3, orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationDataCMC_CalibrationDataSampleV3, headyaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationDataCMC_CalibrationDataSampleV3, headpitch_),
  0,
  ~0u,
  ~0u,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationDataCMC, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationDataCMC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationDataCMC, calibrationdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationDataCMC, numberofresudials_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhistlePercept_Whistle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhistlePercept_Whistle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhistlePercept_Whistle, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhistlePercept_Whistle, positionincapture_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhistlePercept_Whistle, responsevalue_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhistlePercept, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhistlePercept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhistlePercept, framewhenwhistledetected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhistlePercept, capturefile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhistlePercept, recognizedwhistles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhistlePercept, whistledetected_),
  1,
  0,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugModify_ModifyValue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugModify_ModifyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugModify_ModifyValue, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugModify_ModifyValue, modify_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugModify_ModifyValue, value_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugModify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugModify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugModify, valuemap_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepBuffer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepBuffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepBuffer, support_foot_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bodyAwareness, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bodyAwareness, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bodyAwareness, islifted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bodyAwareness, calculatedcom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bodyAwareness, currentcomerror_),
  2,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(CameraMatrix)},
  { 13, 24, sizeof(BallPercept)},
  { 30, 39, sizeof(MultiBallPercept_BallPercept)},
  { 43, 50, sizeof(MultiBallPercept)},
  { 52, 65, sizeof(BallModel)},
  { 73, 84, sizeof(GoalPercept_GoalPost)},
  { 90, 99, sizeof(GoalPercept)},
  { 103, 119, sizeof(HeadMotionRequest)},
  { 130, 145, sizeof(StepControlRequest)},
  { 155, 165, sizeof(WalkRequest)},
  { 170, 179, sizeof(KickRequest)},
  { 183, 192, sizeof(GraspRequest)},
  { 196, 210, sizeof(ArmMotionRequest)},
  { 219, 236, sizeof(MotionRequest)},
  { 248, 260, sizeof(LinePercept_Intersection)},
  { 267, 280, sizeof(LinePercept_FieldLineSegment)},
  { 288, 296, sizeof(LinePercept)},
  { 299, 305, sizeof(ShortLinePercept)},
  { 306, 312, sizeof(Polygon)},
  { 313, 319, sizeof(FieldPercept)},
  { 320, 326, sizeof(RansacLinePercept)},
  { 327, 334, sizeof(RansacCirclePercept2018)},
  { 336, 345, sizeof(ScanLineEndPoint)},
  { 349, 356, sizeof(DoubleEdgel)},
  { 358, 365, sizeof(Edgel)},
  { 367, 375, sizeof(EdgelPair)},
  { 378, 386, sizeof(ScanLineEdgelPercept)},
  { 389, 397, sizeof(LineGraphPercept)},
  { 400, 408, sizeof(StepControlStatus)},
  { 411, 429, sizeof(MotionStatus)},
  { 442, 448, sizeof(OdometryData)},
  { 449, 455, sizeof(BodyState)},
  { 456, 463, sizeof(BodyStatus)},
  { 465, 474, sizeof(CalibrationData)},
  { 478, 484, sizeof(InertialModel)},
  { 485, 494, sizeof(CameraMatrixCalibration)},
  { 498, 508, sizeof(BallCandidates_Patch)},
  { 513, 519, sizeof(BallCandidates)},
  { 520, 529, sizeof(RemoteControlCommand)},
  { 533, 541, sizeof(GroundContactModel)},
  { 544, 555, sizeof(CollisionPercept)},
  { 561, 575, sizeof(IMUData)},
  { 584, 598, sizeof(CentreOfPressure)},
  { 607, 618, sizeof(CalibrationDataCMC_CalibrationDataSampleV3)},
  { 624, 631, sizeof(CalibrationDataCMC)},
  { 633, 641, sizeof(WhistlePercept_Whistle)},
  { 644, 653, sizeof(WhistlePercept)},
  { 657, 665, sizeof(DebugModify_ModifyValue)},
  { 668, 674, sizeof(DebugModify)},
  { 675, 681, sizeof(StepBuffer)},
  { 682, 690, sizeof(bodyAwareness)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CameraMatrix_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BallPercept_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MultiBallPercept_BallPercept_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MultiBallPercept_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BallModel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GoalPercept_GoalPost_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GoalPercept_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HeadMotionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StepControlRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WalkRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KickRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GraspRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ArmMotionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MotionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinePercept_Intersection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinePercept_FieldLineSegment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinePercept_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShortLinePercept_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Polygon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FieldPercept_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RansacLinePercept_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RansacCirclePercept2018_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScanLineEndPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DoubleEdgel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Edgel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EdgelPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScanLineEdgelPercept_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LineGraphPercept_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StepControlStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MotionStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OdometryData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BodyState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BodyStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CalibrationData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InertialModel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CameraMatrixCalibration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BallCandidates_Patch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BallCandidates_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RemoteControlCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GroundContactModel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CollisionPercept_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IMUData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CentreOfPressure_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CalibrationDataCMC_CalibrationDataSampleV3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CalibrationDataCMC_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WhistlePercept_Whistle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WhistlePercept_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DebugModify_ModifyValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DebugModify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StepBuffer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_bodyAwareness_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Representations.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 51);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::naothmessages::protobuf_CommonTypes_2eproto::InitDefaults();
  ::naothmessages::protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  _CameraMatrix_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CameraMatrix_default_instance_);_BallPercept_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BallPercept_default_instance_);_MultiBallPercept_BallPercept_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MultiBallPercept_BallPercept_default_instance_);_MultiBallPercept_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MultiBallPercept_default_instance_);_BallModel_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BallModel_default_instance_);_GoalPercept_GoalPost_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GoalPercept_GoalPost_default_instance_);_GoalPercept_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GoalPercept_default_instance_);_HeadMotionRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HeadMotionRequest_default_instance_);_StepControlRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StepControlRequest_default_instance_);_WalkRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WalkRequest_default_instance_);_KickRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KickRequest_default_instance_);_GraspRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GraspRequest_default_instance_);_ArmMotionRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ArmMotionRequest_default_instance_);_MotionRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MotionRequest_default_instance_);_LinePercept_Intersection_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LinePercept_Intersection_default_instance_);_LinePercept_FieldLineSegment_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LinePercept_FieldLineSegment_default_instance_);_LinePercept_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LinePercept_default_instance_);_ShortLinePercept_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ShortLinePercept_default_instance_);_Polygon_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Polygon_default_instance_);_FieldPercept_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FieldPercept_default_instance_);_RansacLinePercept_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RansacLinePercept_default_instance_);_RansacCirclePercept2018_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RansacCirclePercept2018_default_instance_);_ScanLineEndPoint_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScanLineEndPoint_default_instance_);_DoubleEdgel_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DoubleEdgel_default_instance_);_Edgel_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Edgel_default_instance_);_EdgelPair_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EdgelPair_default_instance_);_ScanLineEdgelPercept_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScanLineEdgelPercept_default_instance_);_LineGraphPercept_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LineGraphPercept_default_instance_);_StepControlStatus_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StepControlStatus_default_instance_);_MotionStatus_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MotionStatus_default_instance_);_OdometryData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OdometryData_default_instance_);_BodyState_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BodyState_default_instance_);_BodyStatus_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BodyStatus_default_instance_);_CalibrationData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CalibrationData_default_instance_);_InertialModel_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InertialModel_default_instance_);_CameraMatrixCalibration_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CameraMatrixCalibration_default_instance_);_BallCandidates_Patch_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BallCandidates_Patch_default_instance_);_BallCandidates_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BallCandidates_default_instance_);_RemoteControlCommand_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RemoteControlCommand_default_instance_);_GroundContactModel_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GroundContactModel_default_instance_);_CollisionPercept_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CollisionPercept_default_instance_);_IMUData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IMUData_default_instance_);_CentreOfPressure_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CentreOfPressure_default_instance_);_CalibrationDataCMC_CalibrationDataSampleV3_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CalibrationDataCMC_CalibrationDataSampleV3_default_instance_);_CalibrationDataCMC_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CalibrationDataCMC_default_instance_);_WhistlePercept_Whistle_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WhistlePercept_Whistle_default_instance_);_WhistlePercept_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WhistlePercept_default_instance_);_DebugModify_ModifyValue_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DebugModify_ModifyValue_default_instance_);_DebugModify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DebugModify_default_instance_);_StepBuffer_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StepBuffer_default_instance_);_bodyAwareness_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_bodyAwareness_default_instance_);_CameraMatrix_default_instance_._instance.get_mutable()->pose_ = const_cast< ::naothmessages::Pose3D*>(
      ::naothmessages::Pose3D::internal_default_instance());
  _BallPercept_default_instance_._instance.get_mutable()->centerinimage_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _BallPercept_default_instance_._instance.get_mutable()->bearingbasedoffsetonfield_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _BallPercept_default_instance_._instance.get_mutable()->frameinfowhenballwasseen_ = const_cast< ::naothmessages::FrameInfo*>(
      ::naothmessages::FrameInfo::internal_default_instance());
  _MultiBallPercept_BallPercept_default_instance_._instance.get_mutable()->centerinimage_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _MultiBallPercept_BallPercept_default_instance_._instance.get_mutable()->positiononfield_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _MultiBallPercept_default_instance_._instance.get_mutable()->frameinfowhenballwasseen_ = const_cast< ::naothmessages::FrameInfo*>(
      ::naothmessages::FrameInfo::internal_default_instance());
  _BallModel_default_instance_._instance.get_mutable()->position_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _BallModel_default_instance_._instance.get_mutable()->speed_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _BallModel_default_instance_._instance.get_mutable()->positionpreview_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _BallModel_default_instance_._instance.get_mutable()->positionpreviewinlfoot_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _BallModel_default_instance_._instance.get_mutable()->positionpreviewinrfoot_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _GoalPercept_GoalPost_default_instance_._instance.get_mutable()->basepoint_ = const_cast< ::naothmessages::IntVector2*>(
      ::naothmessages::IntVector2::internal_default_instance());
  _GoalPercept_GoalPost_default_instance_._instance.get_mutable()->position_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _GoalPercept_default_instance_._instance.get_mutable()->goalcentroid_ = const_cast< ::naothmessages::DoubleVector3*>(
      ::naothmessages::DoubleVector3::internal_default_instance());
  _HeadMotionRequest_default_instance_._instance.get_mutable()->targetjointposition_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _HeadMotionRequest_default_instance_._instance.get_mutable()->targetpointinimage_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _HeadMotionRequest_default_instance_._instance.get_mutable()->targetpointintheworld_ = const_cast< ::naothmessages::DoubleVector3*>(
      ::naothmessages::DoubleVector3::internal_default_instance());
  _HeadMotionRequest_default_instance_._instance.get_mutable()->searchcenter_ = const_cast< ::naothmessages::DoubleVector3*>(
      ::naothmessages::DoubleVector3::internal_default_instance());
  _HeadMotionRequest_default_instance_._instance.get_mutable()->searchsize_ = const_cast< ::naothmessages::DoubleVector3*>(
      ::naothmessages::DoubleVector3::internal_default_instance());
  _HeadMotionRequest_default_instance_._instance.get_mutable()->targetpointontheground_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _StepControlRequest_default_instance_._instance.get_mutable()->target_ = const_cast< ::naothmessages::Pose2D*>(
      ::naothmessages::Pose2D::internal_default_instance());
  _WalkRequest_default_instance_._instance.get_mutable()->target_ = const_cast< ::naothmessages::Pose2D*>(
      ::naothmessages::Pose2D::internal_default_instance());
  _WalkRequest_default_instance_._instance.get_mutable()->stepcontrol_ = const_cast< ::naothmessages::StepControlRequest*>(
      ::naothmessages::StepControlRequest::internal_default_instance());
  _WalkRequest_default_instance_._instance.get_mutable()->offset_ = const_cast< ::naothmessages::Pose2D*>(
      ::naothmessages::Pose2D::internal_default_instance());
  _KickRequest_default_instance_._instance.get_mutable()->kickpoint_ = const_cast< ::naothmessages::DoubleVector3*>(
      ::naothmessages::DoubleVector3::internal_default_instance());
  _GraspRequest_default_instance_._instance.get_mutable()->graspingpoint_ = const_cast< ::naothmessages::DoubleVector3*>(
      ::naothmessages::DoubleVector3::internal_default_instance());
  _ArmMotionRequest_default_instance_._instance.get_mutable()->lshoulderposition_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _ArmMotionRequest_default_instance_._instance.get_mutable()->lshoulderstiffness_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _ArmMotionRequest_default_instance_._instance.get_mutable()->lelbowposition_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _ArmMotionRequest_default_instance_._instance.get_mutable()->lelbowstiffness_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _ArmMotionRequest_default_instance_._instance.get_mutable()->rshoulderposition_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _ArmMotionRequest_default_instance_._instance.get_mutable()->rshoulderstiffness_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _ArmMotionRequest_default_instance_._instance.get_mutable()->relbowposition_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _ArmMotionRequest_default_instance_._instance.get_mutable()->relbowstiffness_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _MotionRequest_default_instance_._instance.get_mutable()->walkrequest_ = const_cast< ::naothmessages::WalkRequest*>(
      ::naothmessages::WalkRequest::internal_default_instance());
  _MotionRequest_default_instance_._instance.get_mutable()->kickrequest_ = const_cast< ::naothmessages::KickRequest*>(
      ::naothmessages::KickRequest::internal_default_instance());
  _MotionRequest_default_instance_._instance.get_mutable()->grasprequest_ = const_cast< ::naothmessages::GraspRequest*>(
      ::naothmessages::GraspRequest::internal_default_instance());
  _MotionRequest_default_instance_._instance.get_mutable()->armmotionrequest_ = const_cast< ::naothmessages::ArmMotionRequest*>(
      ::naothmessages::ArmMotionRequest::internal_default_instance());
  _LinePercept_Intersection_default_instance_._instance.get_mutable()->posinimage_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _LinePercept_Intersection_default_instance_._instance.get_mutable()->posonfield_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _LinePercept_FieldLineSegment_default_instance_._instance.get_mutable()->lineinimage_ = const_cast< ::naothmessages::LineSegment*>(
      ::naothmessages::LineSegment::internal_default_instance());
  _LinePercept_FieldLineSegment_default_instance_._instance.get_mutable()->lineonfield_ = const_cast< ::naothmessages::LineSegment*>(
      ::naothmessages::LineSegment::internal_default_instance());
  _LinePercept_default_instance_._instance.get_mutable()->middlecirclecenter_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _FieldPercept_default_instance_._instance.get_mutable()->fieldpoly_ = const_cast< ::naothmessages::Polygon*>(
      ::naothmessages::Polygon::internal_default_instance());
  _RansacCirclePercept2018_default_instance_._instance.get_mutable()->middlecirclecenter_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _ScanLineEndPoint_default_instance_._instance.get_mutable()->posinimage_ = const_cast< ::naothmessages::IntVector2*>(
      ::naothmessages::IntVector2::internal_default_instance());
  _ScanLineEndPoint_default_instance_._instance.get_mutable()->posonfield_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _DoubleEdgel_default_instance_._instance.get_mutable()->point_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _DoubleEdgel_default_instance_._instance.get_mutable()->direction_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _Edgel_default_instance_._instance.get_mutable()->point_ = const_cast< ::naothmessages::IntVector2*>(
      ::naothmessages::IntVector2::internal_default_instance());
  _Edgel_default_instance_._instance.get_mutable()->direction_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _MotionStatus_default_instance_._instance.get_mutable()->plannedmotionleftfoot_ = const_cast< ::naothmessages::Pose2D*>(
      ::naothmessages::Pose2D::internal_default_instance());
  _MotionStatus_default_instance_._instance.get_mutable()->plannedmotionrightfoot_ = const_cast< ::naothmessages::Pose2D*>(
      ::naothmessages::Pose2D::internal_default_instance());
  _MotionStatus_default_instance_._instance.get_mutable()->plannedmotionhip_ = const_cast< ::naothmessages::Pose2D*>(
      ::naothmessages::Pose2D::internal_default_instance());
  _MotionStatus_default_instance_._instance.get_mutable()->stepcontrolstatus_ = const_cast< ::naothmessages::StepControlStatus*>(
      ::naothmessages::StepControlStatus::internal_default_instance());
  _OdometryData_default_instance_._instance.get_mutable()->pose_ = const_cast< ::naothmessages::Pose2D*>(
      ::naothmessages::Pose2D::internal_default_instance());
  _CalibrationData_default_instance_._instance.get_mutable()->inertialsensoroffset_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _CalibrationData_default_instance_._instance.get_mutable()->gyrosensoroffset_ = const_cast< ::naothmessages::DoubleVector3*>(
      ::naothmessages::DoubleVector3::internal_default_instance());
  _CalibrationData_default_instance_._instance.get_mutable()->accsensoroffset_ = const_cast< ::naothmessages::DoubleVector3*>(
      ::naothmessages::DoubleVector3::internal_default_instance());
  _InertialModel_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _CameraMatrixCalibration_default_instance_._instance.get_mutable()->correctionoffsetbody_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _CameraMatrixCalibration_default_instance_._instance.get_mutable()->correctionoffsethead_ = const_cast< ::naothmessages::DoubleVector3*>(
      ::naothmessages::DoubleVector3::internal_default_instance());
  _BallCandidates_Patch_default_instance_._instance.get_mutable()->min_ = const_cast< ::naothmessages::IntVector2*>(
      ::naothmessages::IntVector2::internal_default_instance());
  _BallCandidates_Patch_default_instance_._instance.get_mutable()->max_ = const_cast< ::naothmessages::IntVector2*>(
      ::naothmessages::IntVector2::internal_default_instance());
  _RemoteControlCommand_default_instance_._instance.get_mutable()->target_ = const_cast< ::naothmessages::Pose2D*>(
      ::naothmessages::Pose2D::internal_default_instance());
  _IMUData_default_instance_._instance.get_mutable()->location_ = const_cast< ::naothmessages::DoubleVector3*>(
      ::naothmessages::DoubleVector3::internal_default_instance());
  _IMUData_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::naothmessages::DoubleVector3*>(
      ::naothmessages::DoubleVector3::internal_default_instance());
  _IMUData_default_instance_._instance.get_mutable()->acceleration_ = const_cast< ::naothmessages::DoubleVector3*>(
      ::naothmessages::DoubleVector3::internal_default_instance());
  _IMUData_default_instance_._instance.get_mutable()->acceleration_sensor_ = const_cast< ::naothmessages::DoubleVector3*>(
      ::naothmessages::DoubleVector3::internal_default_instance());
  _IMUData_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::naothmessages::DoubleVector3*>(
      ::naothmessages::DoubleVector3::internal_default_instance());
  _IMUData_default_instance_._instance.get_mutable()->rotational_velocity_ = const_cast< ::naothmessages::DoubleVector3*>(
      ::naothmessages::DoubleVector3::internal_default_instance());
  _IMUData_default_instance_._instance.get_mutable()->rotational_velocity_sensor_ = const_cast< ::naothmessages::DoubleVector3*>(
      ::naothmessages::DoubleVector3::internal_default_instance());
  _IMUData_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _IMUData_default_instance_._instance.get_mutable()->orientation_rotvec_ = const_cast< ::naothmessages::DoubleVector3*>(
      ::naothmessages::DoubleVector3::internal_default_instance());
  _CentreOfPressure_default_instance_._instance.get_mutable()->in_and_only_left_foot_cop_ = const_cast< ::naothmessages::DoubleVector3*>(
      ::naothmessages::DoubleVector3::internal_default_instance());
  _CentreOfPressure_default_instance_._instance.get_mutable()->in_and_only_right_foot_cop_ = const_cast< ::naothmessages::DoubleVector3*>(
      ::naothmessages::DoubleVector3::internal_default_instance());
  _CentreOfPressure_default_instance_._instance.get_mutable()->in_kinematic_chain_origin_cop_ = const_cast< ::naothmessages::DoubleVector3*>(
      ::naothmessages::DoubleVector3::internal_default_instance());
  _CalibrationDataCMC_CalibrationDataSampleV3_default_instance_._instance.get_mutable()->chestpose_ = const_cast< ::naothmessages::Pose3D*>(
      ::naothmessages::Pose3D::internal_default_instance());
  _CalibrationDataCMC_CalibrationDataSampleV3_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _StepBuffer_default_instance_._instance.get_mutable()->support_foot_ = const_cast< ::naothmessages::Pose3D*>(
      ::naothmessages::Pose3D::internal_default_instance());
  _bodyAwareness_default_instance_._instance.get_mutable()->calculatedcom_ = const_cast< ::naothmessages::DoubleVector3*>(
      ::naothmessages::DoubleVector3::internal_default_instance());
  _bodyAwareness_default_instance_._instance.get_mutable()->currentcomerror_ = const_cast< ::naothmessages::DoubleVector3*>(
      ::naothmessages::DoubleVector3::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025Representations.proto\022\rnaothmessages\032\021"
      "CommonTypes.proto\032\037Framework-Representat"
      "ions.proto\"\210\001\n\014CameraMatrix\022#\n\004pose\030\001 \002("
      "\0132\025.naothmessages.Pose3D\0221\n\010cameraID\030\002 \001"
      "(\0162\027.naothmessages.CameraID:\006bottom\022\r\n\005v"
      "alid\030\003 \001(\010\022\021\n\ttimestamp\030\004 \001(\r\"\224\002\n\013BallPe"
      "rcept\022\023\n\013ballWasSeen\030\001 \001(\010\0223\n\rcenterInIm"
      "age\030\002 \001(\0132\034.naothmessages.DoubleVector2\022"
      "\025\n\rradiusInImage\030\003 \001(\001\022\'\n\tballColor\030\004 \001("
      "\0162\024.naothmessages.Color\022\?\n\031bearingBasedO"
      "ffsetOnField\030\005 \001(\0132\034.naothmessages.Doubl"
      "eVector2\022:\n\030frameInfoWhenBallWasSeen\030\006 \001"
      "(\0132\030.naothmessages.FrameInfo\"\313\002\n\020MultiBa"
      "llPercept\022:\n\030frameInfoWhenBallWasSeen\030\001 "
      "\001(\0132\030.naothmessages.FrameInfo\022=\n\010percept"
      "s\030\002 \003(\0132+.naothmessages.MultiBallPercept"
      ".BallPercept\032\273\001\n\013BallPercept\0223\n\rcenterIn"
      "Image\030\001 \001(\0132\034.naothmessages.DoubleVector"
      "2\022\025\n\rradiusInImage\030\002 \001(\001\0225\n\017positionOnFi"
      "eld\030\003 \001(\0132\034.naothmessages.DoubleVector2\022"
      ")\n\010cameraId\030\004 \001(\0162\027.naothmessages.Camera"
      "ID\"\363\002\n\tBallModel\022\r\n\005valid\030\001 \001(\010\022\r\n\005knows"
      "\030\002 \001(\010\022.\n\010position\030\003 \001(\0132\034.naothmessages"
      ".DoubleVector2\022+\n\005speed\030\004 \001(\0132\034.naothmes"
      "sages.DoubleVector2\0225\n\017positionPreview\030\005"
      " \001(\0132\034.naothmessages.DoubleVector2\022<\n\026po"
      "sitionPreviewInLFoot\030\006 \001(\0132\034.naothmessag"
      "es.DoubleVector2\022<\n\026positionPreviewInRFo"
      "ot\030\007 \001(\0132\034.naothmessages.DoubleVector2\0228"
      "\n\016futurePosition\030\010 \003(\0132\034.naothmessages.D"
      "oubleVector2B\002\030\001\"\334\003\n\013GoalPercept\022\027\n\017angl"
      "eToSeenGoal\030\001 \001(\001\0222\n\014goalCentroid\030\002 \001(\0132"
      "\034.naothmessages.DoubleVector3\022\031\n\021numberO"
      "fSeenPosts\030\003 \001(\005\0221\n\004post\030\004 \003(\0132#.naothme"
      "ssages.GoalPercept.GoalPost\032\261\002\n\010GoalPost"
      "\022,\n\tbasePoint\030\001 \001(\0132\031.naothmessages.IntV"
      "ector2\022.\n\010position\030\002 \001(\0132\034.naothmessages"
      ".DoubleVector2\022#\n\005color\030\003 \001(\0162\024.naothmes"
      "sages.Color\022:\n\004type\030\004 \001(\0162,.naothmessage"
      "s.GoalPercept.GoalPost.PostType\022\030\n\020posit"
      "ionReliable\030\005 \001(\010\022\022\n\nseenHeight\030\006 \001(\001\"8\n"
      "\010PostType\022\r\n\trightPost\020\000\022\014\n\010leftPost\020\001\022\017"
      "\n\013unknownPost\020\002\"\306\003\n\021HeadMotionRequest\022\n\n"
      "\002id\030\001 \002(\r\022\020\n\010cameraID\030\002 \002(\r\0229\n\023targetJoi"
      "ntPosition\030\003 \001(\0132\034.naothmessages.DoubleV"
      "ector2\0228\n\022targetPointInImage\030\004 \001(\0132\034.nao"
      "thmessages.DoubleVector2\022;\n\025targetPointI"
      "nTheWorld\030\005 \001(\0132\034.naothmessages.DoubleVe"
      "ctor3\0222\n\014searchCenter\030\006 \001(\0132\034.naothmessa"
      "ges.DoubleVector3\0220\n\nsearchSize\030\007 \001(\0132\034."
      "naothmessages.DoubleVector3\022\027\n\017searchDir"
      "ection\030\010 \001(\010\022<\n\026targetPointOnTheGround\030\t"
      " \001(\0132\034.naothmessages.DoubleVector2\022\022\n\nco"
      "ordinate\030\n \001(\r\022\020\n\010velocity\030\013 \001(\001\"\245\003\n\022Ste"
      "pControlRequest\022\016\n\006stepID\030\001 \002(\r\022\024\n\014moveL"
      "eftFoot\030\002 \002(\010\022%\n\006target\030\003 \002(\0132\025.naothmes"
      "sages.Pose2D\022\014\n\004time\030\004 \002(\r\022\026\n\016speedDirec"
      "tion\030\005 \002(\001\022\r\n\005scale\030\006 \002(\001\022<\n\010steptype\030\007 "
      "\002(\0162*.naothmessages.StepControlRequest.S"
      "tepType\022F\n\013restriction\030\010 \002(\01621.naothmess"
      "ages.StepControlRequest.RestrictionMode\022"
      "\023\n\013isProtected\030\t \002(\010\022\025\n\rstepRequestID\030\n "
      "\002(\r\"4\n\010StepType\022\014\n\010WALKSTEP\020\000\022\014\n\010KICKSTE"
      "P\020\001\022\014\n\010ZEROSTEP\020\002\"%\n\017RestrictionMode\022\010\n\004"
      "HARD\020\000\022\010\n\004SOFT\020\001\"\272\001\n\013WalkRequest\022\022\n\ncoor"
      "dinate\030\001 \002(\r\022\021\n\tcharacter\030\002 \002(\001\022%\n\006targe"
      "t\030\003 \002(\0132\025.naothmessages.Pose2D\0226\n\013stepCo"
      "ntrol\030\004 \001(\0132!.naothmessages.StepControlR"
      "equest\022%\n\006offset\030\005 \002(\0132\025.naothmessages.P"
      "ose2D\"{\n\013KickRequest\022/\n\tkickPoint\030\001 \002(\0132"
      "\034.naothmessages.DoubleVector3\022\025\n\rkickDir"
      "ection\030\002 \002(\001\022\020\n\010kickFoot\030\003 \002(\005\022\022\n\nfinish"
      "Kick\030\004 \002(\010\"\213\001\n\014GraspRequest\0223\n\rgraspingP"
      "oint\030\001 \002(\0132\034.naothmessages.DoubleVector3"
      "\022\025\n\rgraspingState\030\002 \002(\r\022\026\n\016graspDistStat"
      "e\030\003 \002(\r\022\027\n\017graspStiffState\030\004 \002(\r\"\336\003\n\020Arm"
      "MotionRequest\022\n\n\002id\030\001 \002(\r\0227\n\021lShoulderPo"
      "sition\030\002 \001(\0132\034.naothmessages.DoubleVecto"
      "r2\0228\n\022lShoulderStiffness\030\003 \001(\0132\034.naothme"
      "ssages.DoubleVector2\0224\n\016lElbowPosition\030\004"
      " \001(\0132\034.naothmessages.DoubleVector2\0225\n\017lE"
      "lbowStiffness\030\005 \001(\0132\034.naothmessages.Doub"
      "leVector2\0227\n\021rShoulderPosition\030\006 \001(\0132\034.n"
      "aothmessages.DoubleVector2\0228\n\022rShoulderS"
      "tiffness\030\007 \001(\0132\034.naothmessages.DoubleVec"
      "tor2\0224\n\016rElbowPosition\030\010 \001(\0132\034.naothmess"
      "ages.DoubleVector2\0225\n\017rElbowStiffness\030\t "
      "\001(\0132\034.naothmessages.DoubleVector2\"\227\003\n\rMo"
      "tionRequest\022\n\n\002id\030\001 \002(\r\022\014\n\004time\030\002 \002(\r\022\016\n"
      "\006forced\030\003 \002(\010\022/\n\013walkRequest\030\004 \001(\0132\032.nao"
      "thmessages.WalkRequest\022\026\n\016starndardStand"
      "\030\005 \001(\010\022/\n\013kickRequest\030\006 \001(\0132\032.naothmessa"
      "ges.KickRequest\022\023\n\013standHeight\030\007 \001(\001\022\"\n\032"
      "calibrateFootTouchDetector\030\010 \001(\010\022\034\n\024cogn"
      "itionFrameNumber\030\t \001(\r\0221\n\014graspRequest\030\n"
      " \001(\0132\033.naothmessages.GraspRequest\0229\n\020arm"
      "MotionRequest\030\013 \001(\0132\037.naothmessages.ArmM"
      "otionRequest\022\035\n\025disable_relaxed_stand\030\014 "
      "\001(\010\"\232\006\n\013LinePercept\022:\n\005lines\030\001 \003(\0132+.nao"
      "thmessages.LinePercept.FieldLineSegment\022"
      ">\n\rintersections\030\002 \003(\0132\'.naothmessages.L"
      "inePercept.Intersection\0228\n\022middleCircleC"
      "enter\030\003 \001(\0132\034.naothmessages.DoubleVector"
      "2\032\353\002\n\014Intersection\0220\n\nposInImage\030\001 \001(\0132\034"
      ".naothmessages.DoubleVector2\0220\n\nposOnFie"
      "ld\030\002 \001(\0132\034.naothmessages.DoubleVector2\022F"
      "\n\004type\030\003 \001(\01628.naothmessages.LinePercept"
      ".Intersection.IntersectionType\022\027\n\017segmen"
      "tOneIndex\030\006 \001(\r\022\027\n\017segmentTwoIndex\030\007 \001(\r"
      "\022\032\n\022segmentOneDistance\030\010 \001(\001\022\032\n\022segmentT"
      "woDistance\030\t \001(\001\"E\n\020IntersectionType\022\013\n\007"
      "unknown\020\000\022\005\n\001T\020\001\022\005\n\001L\020\002\022\005\n\001C\020\003\022\010\n\004none\020\004"
      "\022\005\n\001X\020\005\032\346\001\n\020FieldLineSegment\022/\n\013lineInIm"
      "age\030\001 \001(\0132\032.naothmessages.LineSegment\022/\n"
      "\013lineOnField\030\002 \001(\0132\032.naothmessages.LineS"
      "egment\022\030\n\020beginExtendCount\030\003 \001(\005\022\026\n\016endE"
      "xtendCount\030\004 \001(\005\022\021\n\tthickness\030\005 \001(\001\022\r\n\005s"
      "lope\030\006 \001(\001\022\r\n\005angle\030\007 \001(\001\022\r\n\005valid\030\010 \001(\010"
      "\"I\n\020ShortLinePercept\0225\n\021fieldLineSegment"
      "s\030\001 \003(\0132\032.naothmessages.LineSegment\"4\n\007P"
      "olygon\022)\n\006points\030\001 \003(\0132\031.naothmessages.I"
      "ntVector2\"9\n\014FieldPercept\022)\n\tfieldPoly\030\001"
      " \002(\0132\026.naothmessages.Polygon\"J\n\021RansacLi"
      "nePercept\0225\n\021fieldLineSegments\030\001 \003(\0132\032.n"
      "aothmessages.LineSegment\"d\n\027RansacCircle"
      "Percept2018\022\017\n\007wasSeen\030\001 \001(\010\0228\n\022middleCi"
      "rcleCenter\030\002 \001(\0132\034.naothmessages.DoubleV"
      "ector2\"\254\001\n\020ScanLineEndPoint\022-\n\nposInImag"
      "e\030\001 \002(\0132\031.naothmessages.IntVector2\0220\n\npo"
      "sOnField\030\002 \002(\0132\034.naothmessages.DoubleVec"
      "tor2\022#\n\005color\030\003 \002(\0162\024.naothmessages.Colo"
      "r\022\022\n\nScanLineID\030\004 \002(\r\"k\n\013DoubleEdgel\022+\n\005"
      "point\030\001 \002(\0132\034.naothmessages.DoubleVector"
      "2\022/\n\tdirection\030\002 \002(\0132\034.naothmessages.Dou"
      "bleVector2\"b\n\005Edgel\022(\n\005point\030\001 \002(\0132\031.nao"
      "thmessages.IntVector2\022/\n\tdirection\030\002 \002(\013"
      "2\034.naothmessages.DoubleVector2\"3\n\tEdgelP"
      "air\022\r\n\005begin\030\001 \002(\005\022\013\n\003end\030\002 \002(\005\022\n\n\002id\030\003 "
      "\002(\005\"\231\001\n\024ScanLineEdgelPercept\022$\n\006edgels\030\001"
      " \003(\0132\024.naothmessages.Edgel\022\'\n\005pairs\030\003 \003("
      "\0132\030.naothmessages.EdgelPair\0222\n\tendPoints"
      "\030\002 \003(\0132\037.naothmessages.ScanLineEndPoint\""
      "\250\001\n\020LineGraphPercept\022+\n\redgelsOnField\030\001 "
      "\003(\0132\024.naothmessages.Edgel\0224\n\020edgelsInIma"
      "geTop\030\002 \003(\0132\032.naothmessages.DoubleEdgel\022"
      "1\n\redgelsInImage\030\003 \003(\0132\032.naothmessages.D"
      "oubleEdgel\"P\n\021StepControlStatus\022\016\n\006stepI"
      "D\030\001 \002(\r\022\024\n\014moveableFoot\030\002 \002(\r\022\025\n\rstepReq"
      "uestID\030\003 \002(\r\"\274\003\n\014MotionStatus\022\014\n\004time\030\001 "
      "\002(\r\022\022\n\nlastMotion\030\002 \002(\r\022\025\n\rcurrentMotion"
      "\030\003 \002(\r\022\022\n\nheadMotion\030\004 \002(\r\022\032\n\022currentMot"
      "ionState\030\005 \002(\r\0224\n\025plannedMotionLeftFoot\030"
      "\006 \002(\0132\025.naothmessages.Pose2D\0225\n\026plannedM"
      "otionRightFoot\030\007 \002(\0132\025.naothmessages.Pos"
      "e2D\022/\n\020plannedMotionHip\030\010 \002(\0132\025.naothmes"
      "sages.Pose2D\022;\n\021stepControlStatus\030\t \001(\0132"
      " .naothmessages.StepControlStatus\022\026\n\016tar"
      "get_reached\030\n \001(\010\022\033\n\023head_target_reached"
      "\030\013 \001(\010\022\026\n\016head_got_stuck\030\014 \001(\010\022\033\n\023walk_e"
      "mergency_stop\030\r \001(\010\"3\n\014OdometryData\022#\n\004p"
      "ose\030\001 \002(\0132\025.naothmessages.Pose2D\"\037\n\tBody"
      "State\022\022\n\nisLiftedUp\030\001 \001(\010\"3\n\nBodyStatus\022"
      "\022\n\ncurrentSum\030\001 \003(\001\022\021\n\ttimestamp\030\003 \002(\r\"\320"
      "\001\n\017CalibrationData\022:\n\024inertialSensorOffs"
      "et\030\001 \001(\0132\034.naothmessages.DoubleVector2\0226"
      "\n\020gyroSensorOffset\030\005 \001(\0132\034.naothmessages"
      ".DoubleVector3\0225\n\017accSensorOffset\030\003 \001(\0132"
      "\034.naothmessages.DoubleVector3\022\022\n\ncalibra"
      "ted\030\004 \002(\010\"B\n\rInertialModel\0221\n\013orientatio"
      "n\030\001 \001(\0132\034.naothmessages.DoubleVector2\"\210\002"
      "\n\027CameraMatrixCalibration\022:\n\020correctionO"
      "ffset\030\001 \003(\0132\034.naothmessages.DoubleVector"
      "2B\002\030\001\022:\n\024correctionOffsetBody\030\002 \001(\0132\034.na"
      "othmessages.DoubleVector2\022:\n\024correctionO"
      "ffsetHead\030\003 \001(\0132\034.naothmessages.DoubleVe"
      "ctor3\0229\n\023correctionOffsetCam\030\004 \003(\0132\034.nao"
      "thmessages.DoubleVector3\"\232\002\n\016BallCandida"
      "tes\0224\n\007patches\030\001 \003(\0132#.naothmessages.Bal"
      "lCandidates.Patch\032\321\001\n\005Patch\022&\n\003min\030\001 \002(\013"
      "2\031.naothmessages.IntVector2\022&\n\003max\030\002 \002(\013"
      "2\031.naothmessages.IntVector2\0229\n\004type\030\003 \001("
      "\0162(.naothmessages.BallCandidates.Patch.T"
      "ype:\001Y\022\014\n\004data\030\005 \002(\014\022\r\n\005value\030\006 \001(\001\" \n\004T"
      "ype\022\005\n\001Y\020\000\022\007\n\003YUV\020\001\022\010\n\004YUVC\020\002\"\371\003\n\024Remote"
      "ControlCommand\022D\n\013controlMode\030\001 \001(\0162/.na"
      "othmessages.RemoteControlCommand.Control"
      "Mode\022>\n\006action\030\002 \001(\0162..naothmessages.Rem"
      "oteControlCommand.ActionType\022K\n\rsecond_a"
      "ction\030\003 \001(\01624.naothmessages.RemoteContro"
      "lCommand.SecondActionType\022%\n\006target\030\004 \001("
      "\0132\025.naothmessages.Pose2D\"3\n\013ControlMode\022"
      "\022\n\016DIRECT_CONTROL\020\000\022\020\n\014LOCK_CONTROL\020\001\"y\n"
      "\nActionType\022\010\n\004NONE\020\000\022\t\n\005STAND\020\001\022\010\n\004WALK"
      "\020\002\022\016\n\nKICK_RIGHT\020\003\022\r\n\tKICK_LEFT\020\004\022\025\n\021KIC"
      "K_FORWARD_LEFT\020\005\022\026\n\022KICK_FORWARD_RIGHT\020\006"
      "\"7\n\020SecondActionType\022\017\n\013SECOND_NONE\020\000\022\t\n"
      "\005BLINK\020\001\022\007\n\003SAY\020\002\"\257\001\n\022GroundContactModel"
      "\022\031\n\021leftGroundContact\030\001 \002(\010\022\032\n\022rightGrou"
      "ndContact\030\002 \002(\010\022;\n\013supportFoot\030\003 \002(\0162&.n"
      "aothmessages.GroundContactModel.Foot\"%\n\004"
      "Foot\022\010\n\004LEFT\020\000\022\t\n\005RIGHT\020\001\022\010\n\004NONE\020\002\"\325\001\n\020"
      "CollisionPercept\022\034\n\024timeCollisionArmLeft"
      "\030\001 \002(\r\022\035\n\025timeCollisionArmRight\030\002 \002(\r\022\035\n"
      "\025isCollisionLeftBumper\030\003 \002(\010\022\036\n\026isCollis"
      "ionRightBumper\030\004 \002(\010\022!\n\031lastComputedColl"
      "isionLeft\030\005 \002(\001\022\"\n\032lastComputedCollision"
      "Right\030\006 \002(\001\"\362\003\n\007IMUData\022.\n\010location\030\001 \002("
      "\0132\034.naothmessages.DoubleVector3\022.\n\010veloc"
      "ity\030\002 \002(\0132\034.naothmessages.DoubleVector3\022"
      "2\n\014acceleration\030\003 \002(\0132\034.naothmessages.Do"
      "ubleVector3\0229\n\023acceleration_sensor\030\004 \001(\013"
      "2\034.naothmessages.DoubleVector3\022.\n\010rotati"
      "on\030\005 \002(\0132\034.naothmessages.DoubleVector3\0229"
      "\n\023rotational_velocity\030\006 \002(\0132\034.naothmessa"
      "ges.DoubleVector3\022@\n\032rotational_velocity"
      "_sensor\030\007 \001(\0132\034.naothmessages.DoubleVect"
      "or3\0221\n\013orientation\030\010 \002(\0132\034.naothmessages"
      ".DoubleVector2\0228\n\022orientation_rotvec\030\t \002"
      "(\0132\034.naothmessages.DoubleVector3\"\316\003\n\020Cen"
      "treOfPressure\022\?\n\031in_and_only_left_foot_c"
      "op\030\001 \002(\0132\034.naothmessages.DoubleVector3\022\'"
      "\n\037in_and_only_left_foot_magnitude\030\002 \002(\001\022"
      "#\n\033in_and_only_left_foot_valid\030\003 \002(\010\022@\n\032"
      "in_and_only_right_foot_cop\030\004 \002(\0132\034.naoth"
      "messages.DoubleVector3\022(\n in_and_only_ri"
      "ght_foot_magnitude\030\005 \002(\001\022$\n\034in_and_only_"
      "right_foot_valid\030\006 \002(\010\022C\n\035in_kinematic_c"
      "hain_origin_cop\030\007 \002(\0132\034.naothmessages.Do"
      "ubleVector3\022+\n#in_kinematic_chain_origin"
      "_magnitude\030\010 \002(\001\022\'\n\037in_kinematic_chain_o"
      "rigin_valid\030\t \002(\010\"\215\003\n\022CalibrationDataCMC"
      "\022R\n\017calibrationData\030\001 \003(\01329.naothmessage"
      "s.CalibrationDataCMC.CalibrationDataSamp"
      "leV3\022\031\n\021numberOfResudials\030\002 \001(\r\032\207\002\n\027Cali"
      "brationDataSampleV3\022(\n\tchestPose\030\001 \001(\0132\025"
      ".naothmessages.Pose3D\0223\n\redgelsInImage\030\002"
      " \003(\0132\034.naothmessages.DoubleVector2\0226\n\020ed"
      "gelsInImageTop\030\003 \003(\0132\034.naothmessages.Dou"
      "bleVector2\0221\n\013orientation\030\004 \001(\0132\034.naothm"
      "essages.DoubleVector2\022\017\n\007headYaw\030\005 \001(\001\022\021"
      "\n\theadPitch\030\006 \001(\001\"\356\001\n\016WhistlePercept\022 \n\030"
      "frameWhenWhistleDetected\030\001 \001(\r\022\023\n\013captur"
      "eFile\030\002 \001(\t\022A\n\022recognizedWhistles\030\003 \003(\0132"
      "%.naothmessages.WhistlePercept.Whistle\022\027"
      "\n\017whistleDetected\030\004 \001(\010\032I\n\007Whistle\022\014\n\004na"
      "me\030\001 \002(\t\022\031\n\021positionInCapture\030\002 \002(\003\022\025\n\rr"
      "esponseValue\030\003 \002(\001\"\203\001\n\013DebugModify\0228\n\010va"
      "lueMap\030\001 \003(\0132&.naothmessages.DebugModify"
      ".ModifyValue\032:\n\013ModifyValue\022\014\n\004name\030\001 \002("
      "\t\022\016\n\006modify\030\002 \001(\010\022\r\n\005value\030\003 \001(\001\"9\n\nStep"
      "Buffer\022+\n\014support_foot\030\001 \001(\0132\025.naothmess"
      "ages.Pose3D\"\215\001\n\rbodyAwareness\022\020\n\010isLifte"
      "d\030\001 \001(\010\0223\n\rcalculatedCoM\030\002 \001(\0132\034.naothme"
      "ssages.DoubleVector3\0225\n\017currentCoMError\030"
      "\003 \001(\0132\034.naothmessages.DoubleVector3B\033\n\031d"
      "e.naoth.rc.core.messages"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 10224);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Representations.proto", &protobuf_RegisterTypes);
  ::naothmessages::protobuf_CommonTypes_2eproto::AddDescriptors();
  ::naothmessages::protobuf_Framework_2dRepresentations_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_Representations_2eproto

const ::google::protobuf::EnumDescriptor* GoalPercept_GoalPost_PostType_descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_enum_descriptors[0];
}
bool GoalPercept_GoalPost_PostType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GoalPercept_GoalPost_PostType GoalPercept_GoalPost::rightPost;
const GoalPercept_GoalPost_PostType GoalPercept_GoalPost::leftPost;
const GoalPercept_GoalPost_PostType GoalPercept_GoalPost::unknownPost;
const GoalPercept_GoalPost_PostType GoalPercept_GoalPost::PostType_MIN;
const GoalPercept_GoalPost_PostType GoalPercept_GoalPost::PostType_MAX;
const int GoalPercept_GoalPost::PostType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StepControlRequest_StepType_descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_enum_descriptors[1];
}
bool StepControlRequest_StepType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StepControlRequest_StepType StepControlRequest::WALKSTEP;
const StepControlRequest_StepType StepControlRequest::KICKSTEP;
const StepControlRequest_StepType StepControlRequest::ZEROSTEP;
const StepControlRequest_StepType StepControlRequest::StepType_MIN;
const StepControlRequest_StepType StepControlRequest::StepType_MAX;
const int StepControlRequest::StepType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StepControlRequest_RestrictionMode_descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_enum_descriptors[2];
}
bool StepControlRequest_RestrictionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StepControlRequest_RestrictionMode StepControlRequest::HARD;
const StepControlRequest_RestrictionMode StepControlRequest::SOFT;
const StepControlRequest_RestrictionMode StepControlRequest::RestrictionMode_MIN;
const StepControlRequest_RestrictionMode StepControlRequest::RestrictionMode_MAX;
const int StepControlRequest::RestrictionMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LinePercept_Intersection_IntersectionType_descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_enum_descriptors[3];
}
bool LinePercept_Intersection_IntersectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LinePercept_Intersection_IntersectionType LinePercept_Intersection::unknown;
const LinePercept_Intersection_IntersectionType LinePercept_Intersection::T;
const LinePercept_Intersection_IntersectionType LinePercept_Intersection::L;
const LinePercept_Intersection_IntersectionType LinePercept_Intersection::C;
const LinePercept_Intersection_IntersectionType LinePercept_Intersection::none;
const LinePercept_Intersection_IntersectionType LinePercept_Intersection::X;
const LinePercept_Intersection_IntersectionType LinePercept_Intersection::IntersectionType_MIN;
const LinePercept_Intersection_IntersectionType LinePercept_Intersection::IntersectionType_MAX;
const int LinePercept_Intersection::IntersectionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BallCandidates_Patch_Type_descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_enum_descriptors[4];
}
bool BallCandidates_Patch_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BallCandidates_Patch_Type BallCandidates_Patch::Y;
const BallCandidates_Patch_Type BallCandidates_Patch::YUV;
const BallCandidates_Patch_Type BallCandidates_Patch::YUVC;
const BallCandidates_Patch_Type BallCandidates_Patch::Type_MIN;
const BallCandidates_Patch_Type BallCandidates_Patch::Type_MAX;
const int BallCandidates_Patch::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RemoteControlCommand_ControlMode_descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_enum_descriptors[5];
}
bool RemoteControlCommand_ControlMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RemoteControlCommand_ControlMode RemoteControlCommand::DIRECT_CONTROL;
const RemoteControlCommand_ControlMode RemoteControlCommand::LOCK_CONTROL;
const RemoteControlCommand_ControlMode RemoteControlCommand::ControlMode_MIN;
const RemoteControlCommand_ControlMode RemoteControlCommand::ControlMode_MAX;
const int RemoteControlCommand::ControlMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RemoteControlCommand_ActionType_descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_enum_descriptors[6];
}
bool RemoteControlCommand_ActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RemoteControlCommand_ActionType RemoteControlCommand::NONE;
const RemoteControlCommand_ActionType RemoteControlCommand::STAND;
const RemoteControlCommand_ActionType RemoteControlCommand::WALK;
const RemoteControlCommand_ActionType RemoteControlCommand::KICK_RIGHT;
const RemoteControlCommand_ActionType RemoteControlCommand::KICK_LEFT;
const RemoteControlCommand_ActionType RemoteControlCommand::KICK_FORWARD_LEFT;
const RemoteControlCommand_ActionType RemoteControlCommand::KICK_FORWARD_RIGHT;
const RemoteControlCommand_ActionType RemoteControlCommand::ActionType_MIN;
const RemoteControlCommand_ActionType RemoteControlCommand::ActionType_MAX;
const int RemoteControlCommand::ActionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RemoteControlCommand_SecondActionType_descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_enum_descriptors[7];
}
bool RemoteControlCommand_SecondActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RemoteControlCommand_SecondActionType RemoteControlCommand::SECOND_NONE;
const RemoteControlCommand_SecondActionType RemoteControlCommand::BLINK;
const RemoteControlCommand_SecondActionType RemoteControlCommand::SAY;
const RemoteControlCommand_SecondActionType RemoteControlCommand::SecondActionType_MIN;
const RemoteControlCommand_SecondActionType RemoteControlCommand::SecondActionType_MAX;
const int RemoteControlCommand::SecondActionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GroundContactModel_Foot_descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_enum_descriptors[8];
}
bool GroundContactModel_Foot_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GroundContactModel_Foot GroundContactModel::LEFT;
const GroundContactModel_Foot GroundContactModel::RIGHT;
const GroundContactModel_Foot GroundContactModel::NONE;
const GroundContactModel_Foot GroundContactModel::Foot_MIN;
const GroundContactModel_Foot GroundContactModel::Foot_MAX;
const int GroundContactModel::Foot_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraMatrix::kPoseFieldNumber;
const int CameraMatrix::kCameraIDFieldNumber;
const int CameraMatrix::kValidFieldNumber;
const int CameraMatrix::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraMatrix::CameraMatrix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.CameraMatrix)
}
CameraMatrix::CameraMatrix(const CameraMatrix& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pose()) {
    pose_ = new ::naothmessages::Pose3D(*from.pose_);
  } else {
    pose_ = NULL;
  }
  ::memcpy(&valid_, &from.valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cameraid_) -
    reinterpret_cast<char*>(&valid_)) + sizeof(cameraid_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.CameraMatrix)
}

void CameraMatrix::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(timestamp_));
  cameraid_ = 1;
}

CameraMatrix::~CameraMatrix() {
  // @@protoc_insertion_point(destructor:naothmessages.CameraMatrix)
  SharedDtor();
}

void CameraMatrix::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
}

void CameraMatrix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraMatrix::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraMatrix& CameraMatrix::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

CameraMatrix* CameraMatrix::New(::google::protobuf::Arena* arena) const {
  CameraMatrix* n = new CameraMatrix;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.CameraMatrix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_pose()) {
    GOOGLE_DCHECK(pose_ != NULL);
    pose_->::naothmessages::Pose3D::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 14u) {
    ::memset(&valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&valid_)) + sizeof(timestamp_));
    cameraid_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CameraMatrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.CameraMatrix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .naothmessages.Pose3D pose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.CameraID cameraID = 2 [default = bottom];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::naothmessages::CameraID_IsValid(value)) {
            set_cameraid(static_cast< ::naothmessages::CameraID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool valid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.CameraMatrix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.CameraMatrix)
  return false;
#undef DO_
}

void CameraMatrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.CameraMatrix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.Pose3D pose = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pose_, output);
  }

  // optional .naothmessages.CameraID cameraID = 2 [default = bottom];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cameraid(), output);
  }

  // optional bool valid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->valid(), output);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.CameraMatrix)
}

::google::protobuf::uint8* CameraMatrix::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.CameraMatrix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.Pose3D pose = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pose_, deterministic, target);
  }

  // optional .naothmessages.CameraID cameraID = 2 [default = bottom];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cameraid(), target);
  }

  // optional bool valid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->valid(), target);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.CameraMatrix)
  return target;
}

size_t CameraMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.CameraMatrix)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .naothmessages.Pose3D pose = 1;
  if (has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional bool valid = 3;
    if (has_valid()) {
      total_size += 1 + 1;
    }

    // optional uint32 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional .naothmessages.CameraID cameraID = 2 [default = bottom];
    if (has_cameraid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cameraid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraMatrix::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.CameraMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraMatrix* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraMatrix>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.CameraMatrix)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.CameraMatrix)
    MergeFrom(*source);
  }
}

void CameraMatrix::MergeFrom(const CameraMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.CameraMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pose()->::naothmessages::Pose3D::MergeFrom(from.pose());
    }
    if (cached_has_bits & 0x00000002u) {
      valid_ = from.valid_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      cameraid_ = from.cameraid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CameraMatrix::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.CameraMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraMatrix::CopyFrom(const CameraMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.CameraMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraMatrix::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_pose()) {
    if (!this->pose_->IsInitialized()) return false;
  }
  return true;
}

void CameraMatrix::Swap(CameraMatrix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraMatrix::InternalSwap(CameraMatrix* other) {
  using std::swap;
  swap(pose_, other->pose_);
  swap(valid_, other->valid_);
  swap(timestamp_, other->timestamp_);
  swap(cameraid_, other->cameraid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraMatrix::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CameraMatrix

// required .naothmessages.Pose3D pose = 1;
bool CameraMatrix::has_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CameraMatrix::set_has_pose() {
  _has_bits_[0] |= 0x00000001u;
}
void CameraMatrix::clear_has_pose() {
  _has_bits_[0] &= ~0x00000001u;
}
void CameraMatrix::clear_pose() {
  if (pose_ != NULL) pose_->::naothmessages::Pose3D::Clear();
  clear_has_pose();
}
const ::naothmessages::Pose3D& CameraMatrix::pose() const {
  const ::naothmessages::Pose3D* p = pose_;
  // @@protoc_insertion_point(field_get:naothmessages.CameraMatrix.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::Pose3D*>(
      &::naothmessages::_Pose3D_default_instance_);
}
::naothmessages::Pose3D* CameraMatrix::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::naothmessages::Pose3D;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.CameraMatrix.pose)
  return pose_;
}
::naothmessages::Pose3D* CameraMatrix::release_pose() {
  // @@protoc_insertion_point(field_release:naothmessages.CameraMatrix.pose)
  clear_has_pose();
  ::naothmessages::Pose3D* temp = pose_;
  pose_ = NULL;
  return temp;
}
void CameraMatrix::set_allocated_pose(::naothmessages::Pose3D* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.CameraMatrix.pose)
}

// optional .naothmessages.CameraID cameraID = 2 [default = bottom];
bool CameraMatrix::has_cameraid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CameraMatrix::set_has_cameraid() {
  _has_bits_[0] |= 0x00000008u;
}
void CameraMatrix::clear_has_cameraid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CameraMatrix::clear_cameraid() {
  cameraid_ = 1;
  clear_has_cameraid();
}
::naothmessages::CameraID CameraMatrix::cameraid() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraMatrix.cameraID)
  return static_cast< ::naothmessages::CameraID >(cameraid_);
}
void CameraMatrix::set_cameraid(::naothmessages::CameraID value) {
  assert(::naothmessages::CameraID_IsValid(value));
  set_has_cameraid();
  cameraid_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraMatrix.cameraID)
}

// optional bool valid = 3;
bool CameraMatrix::has_valid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CameraMatrix::set_has_valid() {
  _has_bits_[0] |= 0x00000002u;
}
void CameraMatrix::clear_has_valid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CameraMatrix::clear_valid() {
  valid_ = false;
  clear_has_valid();
}
bool CameraMatrix::valid() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraMatrix.valid)
  return valid_;
}
void CameraMatrix::set_valid(bool value) {
  set_has_valid();
  valid_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraMatrix.valid)
}

// optional uint32 timestamp = 4;
bool CameraMatrix::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CameraMatrix::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void CameraMatrix::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void CameraMatrix::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 CameraMatrix::timestamp() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraMatrix.timestamp)
  return timestamp_;
}
void CameraMatrix::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraMatrix.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BallPercept::kBallWasSeenFieldNumber;
const int BallPercept::kCenterInImageFieldNumber;
const int BallPercept::kRadiusInImageFieldNumber;
const int BallPercept::kBallColorFieldNumber;
const int BallPercept::kBearingBasedOffsetOnFieldFieldNumber;
const int BallPercept::kFrameInfoWhenBallWasSeenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BallPercept::BallPercept()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.BallPercept)
}
BallPercept::BallPercept(const BallPercept& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_centerinimage()) {
    centerinimage_ = new ::naothmessages::DoubleVector2(*from.centerinimage_);
  } else {
    centerinimage_ = NULL;
  }
  if (from.has_bearingbasedoffsetonfield()) {
    bearingbasedoffsetonfield_ = new ::naothmessages::DoubleVector2(*from.bearingbasedoffsetonfield_);
  } else {
    bearingbasedoffsetonfield_ = NULL;
  }
  if (from.has_frameinfowhenballwasseen()) {
    frameinfowhenballwasseen_ = new ::naothmessages::FrameInfo(*from.frameinfowhenballwasseen_);
  } else {
    frameinfowhenballwasseen_ = NULL;
  }
  ::memcpy(&ballwasseen_, &from.ballwasseen_,
    static_cast<size_t>(reinterpret_cast<char*>(&radiusinimage_) -
    reinterpret_cast<char*>(&ballwasseen_)) + sizeof(radiusinimage_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.BallPercept)
}

void BallPercept::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&centerinimage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radiusinimage_) -
      reinterpret_cast<char*>(&centerinimage_)) + sizeof(radiusinimage_));
}

BallPercept::~BallPercept() {
  // @@protoc_insertion_point(destructor:naothmessages.BallPercept)
  SharedDtor();
}

void BallPercept::SharedDtor() {
  if (this != internal_default_instance()) delete centerinimage_;
  if (this != internal_default_instance()) delete bearingbasedoffsetonfield_;
  if (this != internal_default_instance()) delete frameinfowhenballwasseen_;
}

void BallPercept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BallPercept::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BallPercept& BallPercept::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

BallPercept* BallPercept::New(::google::protobuf::Arena* arena) const {
  BallPercept* n = new BallPercept;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BallPercept::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.BallPercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(centerinimage_ != NULL);
      centerinimage_->::naothmessages::DoubleVector2::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bearingbasedoffsetonfield_ != NULL);
      bearingbasedoffsetonfield_->::naothmessages::DoubleVector2::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(frameinfowhenballwasseen_ != NULL);
      frameinfowhenballwasseen_->::naothmessages::FrameInfo::Clear();
    }
  }
  if (cached_has_bits & 56u) {
    ::memset(&ballwasseen_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&radiusinimage_) -
        reinterpret_cast<char*>(&ballwasseen_)) + sizeof(radiusinimage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BallPercept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.BallPercept)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool ballWasSeen = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ballwasseen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ballwasseen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector2 centerInImage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_centerinimage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double radiusInImage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_radiusinimage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radiusinimage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.Color ballColor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::naothmessages::Color_IsValid(value)) {
            set_ballcolor(static_cast< ::naothmessages::Color >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector2 bearingBasedOffsetOnField = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bearingbasedoffsetonfield()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.FrameInfo frameInfoWhenBallWasSeen = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frameinfowhenballwasseen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.BallPercept)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.BallPercept)
  return false;
#undef DO_
}

void BallPercept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.BallPercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool ballWasSeen = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ballwasseen(), output);
  }

  // optional .naothmessages.DoubleVector2 centerInImage = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->centerinimage_, output);
  }

  // optional double radiusInImage = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->radiusinimage(), output);
  }

  // optional .naothmessages.Color ballColor = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ballcolor(), output);
  }

  // optional .naothmessages.DoubleVector2 bearingBasedOffsetOnField = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->bearingbasedoffsetonfield_, output);
  }

  // optional .naothmessages.FrameInfo frameInfoWhenBallWasSeen = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->frameinfowhenballwasseen_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.BallPercept)
}

::google::protobuf::uint8* BallPercept::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.BallPercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool ballWasSeen = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ballwasseen(), target);
  }

  // optional .naothmessages.DoubleVector2 centerInImage = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->centerinimage_, deterministic, target);
  }

  // optional double radiusInImage = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->radiusinimage(), target);
  }

  // optional .naothmessages.Color ballColor = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ballcolor(), target);
  }

  // optional .naothmessages.DoubleVector2 bearingBasedOffsetOnField = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->bearingbasedoffsetonfield_, deterministic, target);
  }

  // optional .naothmessages.FrameInfo frameInfoWhenBallWasSeen = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->frameinfowhenballwasseen_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.BallPercept)
  return target;
}

size_t BallPercept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.BallPercept)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .naothmessages.DoubleVector2 centerInImage = 2;
    if (has_centerinimage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->centerinimage_);
    }

    // optional .naothmessages.DoubleVector2 bearingBasedOffsetOnField = 5;
    if (has_bearingbasedoffsetonfield()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bearingbasedoffsetonfield_);
    }

    // optional .naothmessages.FrameInfo frameInfoWhenBallWasSeen = 6;
    if (has_frameinfowhenballwasseen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->frameinfowhenballwasseen_);
    }

    // optional bool ballWasSeen = 1;
    if (has_ballwasseen()) {
      total_size += 1 + 1;
    }

    // optional .naothmessages.Color ballColor = 4;
    if (has_ballcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ballcolor());
    }

    // optional double radiusInImage = 3;
    if (has_radiusinimage()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BallPercept::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.BallPercept)
  GOOGLE_DCHECK_NE(&from, this);
  const BallPercept* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BallPercept>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.BallPercept)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.BallPercept)
    MergeFrom(*source);
  }
}

void BallPercept::MergeFrom(const BallPercept& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.BallPercept)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_centerinimage()->::naothmessages::DoubleVector2::MergeFrom(from.centerinimage());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bearingbasedoffsetonfield()->::naothmessages::DoubleVector2::MergeFrom(from.bearingbasedoffsetonfield());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_frameinfowhenballwasseen()->::naothmessages::FrameInfo::MergeFrom(from.frameinfowhenballwasseen());
    }
    if (cached_has_bits & 0x00000008u) {
      ballwasseen_ = from.ballwasseen_;
    }
    if (cached_has_bits & 0x00000010u) {
      ballcolor_ = from.ballcolor_;
    }
    if (cached_has_bits & 0x00000020u) {
      radiusinimage_ = from.radiusinimage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BallPercept::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.BallPercept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallPercept::CopyFrom(const BallPercept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.BallPercept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallPercept::IsInitialized() const {
  if (has_centerinimage()) {
    if (!this->centerinimage_->IsInitialized()) return false;
  }
  if (has_bearingbasedoffsetonfield()) {
    if (!this->bearingbasedoffsetonfield_->IsInitialized()) return false;
  }
  if (has_frameinfowhenballwasseen()) {
    if (!this->frameinfowhenballwasseen_->IsInitialized()) return false;
  }
  return true;
}

void BallPercept::Swap(BallPercept* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BallPercept::InternalSwap(BallPercept* other) {
  using std::swap;
  swap(centerinimage_, other->centerinimage_);
  swap(bearingbasedoffsetonfield_, other->bearingbasedoffsetonfield_);
  swap(frameinfowhenballwasseen_, other->frameinfowhenballwasseen_);
  swap(ballwasseen_, other->ballwasseen_);
  swap(ballcolor_, other->ballcolor_);
  swap(radiusinimage_, other->radiusinimage_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BallPercept::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BallPercept

// optional bool ballWasSeen = 1;
bool BallPercept::has_ballwasseen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BallPercept::set_has_ballwasseen() {
  _has_bits_[0] |= 0x00000008u;
}
void BallPercept::clear_has_ballwasseen() {
  _has_bits_[0] &= ~0x00000008u;
}
void BallPercept::clear_ballwasseen() {
  ballwasseen_ = false;
  clear_has_ballwasseen();
}
bool BallPercept::ballwasseen() const {
  // @@protoc_insertion_point(field_get:naothmessages.BallPercept.ballWasSeen)
  return ballwasseen_;
}
void BallPercept::set_ballwasseen(bool value) {
  set_has_ballwasseen();
  ballwasseen_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BallPercept.ballWasSeen)
}

// optional .naothmessages.DoubleVector2 centerInImage = 2;
bool BallPercept::has_centerinimage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BallPercept::set_has_centerinimage() {
  _has_bits_[0] |= 0x00000001u;
}
void BallPercept::clear_has_centerinimage() {
  _has_bits_[0] &= ~0x00000001u;
}
void BallPercept::clear_centerinimage() {
  if (centerinimage_ != NULL) centerinimage_->::naothmessages::DoubleVector2::Clear();
  clear_has_centerinimage();
}
const ::naothmessages::DoubleVector2& BallPercept::centerinimage() const {
  const ::naothmessages::DoubleVector2* p = centerinimage_;
  // @@protoc_insertion_point(field_get:naothmessages.BallPercept.centerInImage)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* BallPercept::mutable_centerinimage() {
  set_has_centerinimage();
  if (centerinimage_ == NULL) {
    centerinimage_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.BallPercept.centerInImage)
  return centerinimage_;
}
::naothmessages::DoubleVector2* BallPercept::release_centerinimage() {
  // @@protoc_insertion_point(field_release:naothmessages.BallPercept.centerInImage)
  clear_has_centerinimage();
  ::naothmessages::DoubleVector2* temp = centerinimage_;
  centerinimage_ = NULL;
  return temp;
}
void BallPercept::set_allocated_centerinimage(::naothmessages::DoubleVector2* centerinimage) {
  delete centerinimage_;
  centerinimage_ = centerinimage;
  if (centerinimage) {
    set_has_centerinimage();
  } else {
    clear_has_centerinimage();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.BallPercept.centerInImage)
}

// optional double radiusInImage = 3;
bool BallPercept::has_radiusinimage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BallPercept::set_has_radiusinimage() {
  _has_bits_[0] |= 0x00000020u;
}
void BallPercept::clear_has_radiusinimage() {
  _has_bits_[0] &= ~0x00000020u;
}
void BallPercept::clear_radiusinimage() {
  radiusinimage_ = 0;
  clear_has_radiusinimage();
}
double BallPercept::radiusinimage() const {
  // @@protoc_insertion_point(field_get:naothmessages.BallPercept.radiusInImage)
  return radiusinimage_;
}
void BallPercept::set_radiusinimage(double value) {
  set_has_radiusinimage();
  radiusinimage_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BallPercept.radiusInImage)
}

// optional .naothmessages.Color ballColor = 4;
bool BallPercept::has_ballcolor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BallPercept::set_has_ballcolor() {
  _has_bits_[0] |= 0x00000010u;
}
void BallPercept::clear_has_ballcolor() {
  _has_bits_[0] &= ~0x00000010u;
}
void BallPercept::clear_ballcolor() {
  ballcolor_ = 0;
  clear_has_ballcolor();
}
::naothmessages::Color BallPercept::ballcolor() const {
  // @@protoc_insertion_point(field_get:naothmessages.BallPercept.ballColor)
  return static_cast< ::naothmessages::Color >(ballcolor_);
}
void BallPercept::set_ballcolor(::naothmessages::Color value) {
  assert(::naothmessages::Color_IsValid(value));
  set_has_ballcolor();
  ballcolor_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BallPercept.ballColor)
}

// optional .naothmessages.DoubleVector2 bearingBasedOffsetOnField = 5;
bool BallPercept::has_bearingbasedoffsetonfield() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BallPercept::set_has_bearingbasedoffsetonfield() {
  _has_bits_[0] |= 0x00000002u;
}
void BallPercept::clear_has_bearingbasedoffsetonfield() {
  _has_bits_[0] &= ~0x00000002u;
}
void BallPercept::clear_bearingbasedoffsetonfield() {
  if (bearingbasedoffsetonfield_ != NULL) bearingbasedoffsetonfield_->::naothmessages::DoubleVector2::Clear();
  clear_has_bearingbasedoffsetonfield();
}
const ::naothmessages::DoubleVector2& BallPercept::bearingbasedoffsetonfield() const {
  const ::naothmessages::DoubleVector2* p = bearingbasedoffsetonfield_;
  // @@protoc_insertion_point(field_get:naothmessages.BallPercept.bearingBasedOffsetOnField)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* BallPercept::mutable_bearingbasedoffsetonfield() {
  set_has_bearingbasedoffsetonfield();
  if (bearingbasedoffsetonfield_ == NULL) {
    bearingbasedoffsetonfield_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.BallPercept.bearingBasedOffsetOnField)
  return bearingbasedoffsetonfield_;
}
::naothmessages::DoubleVector2* BallPercept::release_bearingbasedoffsetonfield() {
  // @@protoc_insertion_point(field_release:naothmessages.BallPercept.bearingBasedOffsetOnField)
  clear_has_bearingbasedoffsetonfield();
  ::naothmessages::DoubleVector2* temp = bearingbasedoffsetonfield_;
  bearingbasedoffsetonfield_ = NULL;
  return temp;
}
void BallPercept::set_allocated_bearingbasedoffsetonfield(::naothmessages::DoubleVector2* bearingbasedoffsetonfield) {
  delete bearingbasedoffsetonfield_;
  bearingbasedoffsetonfield_ = bearingbasedoffsetonfield;
  if (bearingbasedoffsetonfield) {
    set_has_bearingbasedoffsetonfield();
  } else {
    clear_has_bearingbasedoffsetonfield();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.BallPercept.bearingBasedOffsetOnField)
}

// optional .naothmessages.FrameInfo frameInfoWhenBallWasSeen = 6;
bool BallPercept::has_frameinfowhenballwasseen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BallPercept::set_has_frameinfowhenballwasseen() {
  _has_bits_[0] |= 0x00000004u;
}
void BallPercept::clear_has_frameinfowhenballwasseen() {
  _has_bits_[0] &= ~0x00000004u;
}
void BallPercept::clear_frameinfowhenballwasseen() {
  if (frameinfowhenballwasseen_ != NULL) frameinfowhenballwasseen_->::naothmessages::FrameInfo::Clear();
  clear_has_frameinfowhenballwasseen();
}
const ::naothmessages::FrameInfo& BallPercept::frameinfowhenballwasseen() const {
  const ::naothmessages::FrameInfo* p = frameinfowhenballwasseen_;
  // @@protoc_insertion_point(field_get:naothmessages.BallPercept.frameInfoWhenBallWasSeen)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::FrameInfo*>(
      &::naothmessages::_FrameInfo_default_instance_);
}
::naothmessages::FrameInfo* BallPercept::mutable_frameinfowhenballwasseen() {
  set_has_frameinfowhenballwasseen();
  if (frameinfowhenballwasseen_ == NULL) {
    frameinfowhenballwasseen_ = new ::naothmessages::FrameInfo;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.BallPercept.frameInfoWhenBallWasSeen)
  return frameinfowhenballwasseen_;
}
::naothmessages::FrameInfo* BallPercept::release_frameinfowhenballwasseen() {
  // @@protoc_insertion_point(field_release:naothmessages.BallPercept.frameInfoWhenBallWasSeen)
  clear_has_frameinfowhenballwasseen();
  ::naothmessages::FrameInfo* temp = frameinfowhenballwasseen_;
  frameinfowhenballwasseen_ = NULL;
  return temp;
}
void BallPercept::set_allocated_frameinfowhenballwasseen(::naothmessages::FrameInfo* frameinfowhenballwasseen) {
  delete frameinfowhenballwasseen_;
  frameinfowhenballwasseen_ = frameinfowhenballwasseen;
  if (frameinfowhenballwasseen) {
    set_has_frameinfowhenballwasseen();
  } else {
    clear_has_frameinfowhenballwasseen();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.BallPercept.frameInfoWhenBallWasSeen)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiBallPercept_BallPercept::kCenterInImageFieldNumber;
const int MultiBallPercept_BallPercept::kRadiusInImageFieldNumber;
const int MultiBallPercept_BallPercept::kPositionOnFieldFieldNumber;
const int MultiBallPercept_BallPercept::kCameraIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiBallPercept_BallPercept::MultiBallPercept_BallPercept()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.MultiBallPercept.BallPercept)
}
MultiBallPercept_BallPercept::MultiBallPercept_BallPercept(const MultiBallPercept_BallPercept& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_centerinimage()) {
    centerinimage_ = new ::naothmessages::DoubleVector2(*from.centerinimage_);
  } else {
    centerinimage_ = NULL;
  }
  if (from.has_positiononfield()) {
    positiononfield_ = new ::naothmessages::DoubleVector2(*from.positiononfield_);
  } else {
    positiononfield_ = NULL;
  }
  ::memcpy(&radiusinimage_, &from.radiusinimage_,
    static_cast<size_t>(reinterpret_cast<char*>(&cameraid_) -
    reinterpret_cast<char*>(&radiusinimage_)) + sizeof(cameraid_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.MultiBallPercept.BallPercept)
}

void MultiBallPercept_BallPercept::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&centerinimage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cameraid_) -
      reinterpret_cast<char*>(&centerinimage_)) + sizeof(cameraid_));
}

MultiBallPercept_BallPercept::~MultiBallPercept_BallPercept() {
  // @@protoc_insertion_point(destructor:naothmessages.MultiBallPercept.BallPercept)
  SharedDtor();
}

void MultiBallPercept_BallPercept::SharedDtor() {
  if (this != internal_default_instance()) delete centerinimage_;
  if (this != internal_default_instance()) delete positiononfield_;
}

void MultiBallPercept_BallPercept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiBallPercept_BallPercept::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultiBallPercept_BallPercept& MultiBallPercept_BallPercept::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

MultiBallPercept_BallPercept* MultiBallPercept_BallPercept::New(::google::protobuf::Arena* arena) const {
  MultiBallPercept_BallPercept* n = new MultiBallPercept_BallPercept;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiBallPercept_BallPercept::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.MultiBallPercept.BallPercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(centerinimage_ != NULL);
      centerinimage_->::naothmessages::DoubleVector2::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(positiononfield_ != NULL);
      positiononfield_->::naothmessages::DoubleVector2::Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&radiusinimage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cameraid_) -
        reinterpret_cast<char*>(&radiusinimage_)) + sizeof(cameraid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MultiBallPercept_BallPercept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.MultiBallPercept.BallPercept)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .naothmessages.DoubleVector2 centerInImage = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_centerinimage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double radiusInImage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_radiusinimage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radiusinimage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector2 positionOnField = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_positiononfield()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.CameraID cameraId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::naothmessages::CameraID_IsValid(value)) {
            set_cameraid(static_cast< ::naothmessages::CameraID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.MultiBallPercept.BallPercept)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.MultiBallPercept.BallPercept)
  return false;
#undef DO_
}

void MultiBallPercept_BallPercept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.MultiBallPercept.BallPercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.DoubleVector2 centerInImage = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->centerinimage_, output);
  }

  // optional double radiusInImage = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->radiusinimage(), output);
  }

  // optional .naothmessages.DoubleVector2 positionOnField = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->positiononfield_, output);
  }

  // optional .naothmessages.CameraID cameraId = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->cameraid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.MultiBallPercept.BallPercept)
}

::google::protobuf::uint8* MultiBallPercept_BallPercept::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.MultiBallPercept.BallPercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.DoubleVector2 centerInImage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->centerinimage_, deterministic, target);
  }

  // optional double radiusInImage = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->radiusinimage(), target);
  }

  // optional .naothmessages.DoubleVector2 positionOnField = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->positiononfield_, deterministic, target);
  }

  // optional .naothmessages.CameraID cameraId = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->cameraid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.MultiBallPercept.BallPercept)
  return target;
}

size_t MultiBallPercept_BallPercept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.MultiBallPercept.BallPercept)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .naothmessages.DoubleVector2 centerInImage = 1;
    if (has_centerinimage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->centerinimage_);
    }

    // optional .naothmessages.DoubleVector2 positionOnField = 3;
    if (has_positiononfield()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->positiononfield_);
    }

    // optional double radiusInImage = 2;
    if (has_radiusinimage()) {
      total_size += 1 + 8;
    }

    // optional .naothmessages.CameraID cameraId = 4;
    if (has_cameraid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cameraid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiBallPercept_BallPercept::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.MultiBallPercept.BallPercept)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiBallPercept_BallPercept* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiBallPercept_BallPercept>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.MultiBallPercept.BallPercept)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.MultiBallPercept.BallPercept)
    MergeFrom(*source);
  }
}

void MultiBallPercept_BallPercept::MergeFrom(const MultiBallPercept_BallPercept& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.MultiBallPercept.BallPercept)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_centerinimage()->::naothmessages::DoubleVector2::MergeFrom(from.centerinimage());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_positiononfield()->::naothmessages::DoubleVector2::MergeFrom(from.positiononfield());
    }
    if (cached_has_bits & 0x00000004u) {
      radiusinimage_ = from.radiusinimage_;
    }
    if (cached_has_bits & 0x00000008u) {
      cameraid_ = from.cameraid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MultiBallPercept_BallPercept::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.MultiBallPercept.BallPercept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiBallPercept_BallPercept::CopyFrom(const MultiBallPercept_BallPercept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.MultiBallPercept.BallPercept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiBallPercept_BallPercept::IsInitialized() const {
  if (has_centerinimage()) {
    if (!this->centerinimage_->IsInitialized()) return false;
  }
  if (has_positiononfield()) {
    if (!this->positiononfield_->IsInitialized()) return false;
  }
  return true;
}

void MultiBallPercept_BallPercept::Swap(MultiBallPercept_BallPercept* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiBallPercept_BallPercept::InternalSwap(MultiBallPercept_BallPercept* other) {
  using std::swap;
  swap(centerinimage_, other->centerinimage_);
  swap(positiononfield_, other->positiononfield_);
  swap(radiusinimage_, other->radiusinimage_);
  swap(cameraid_, other->cameraid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiBallPercept_BallPercept::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiBallPercept_BallPercept

// optional .naothmessages.DoubleVector2 centerInImage = 1;
bool MultiBallPercept_BallPercept::has_centerinimage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MultiBallPercept_BallPercept::set_has_centerinimage() {
  _has_bits_[0] |= 0x00000001u;
}
void MultiBallPercept_BallPercept::clear_has_centerinimage() {
  _has_bits_[0] &= ~0x00000001u;
}
void MultiBallPercept_BallPercept::clear_centerinimage() {
  if (centerinimage_ != NULL) centerinimage_->::naothmessages::DoubleVector2::Clear();
  clear_has_centerinimage();
}
const ::naothmessages::DoubleVector2& MultiBallPercept_BallPercept::centerinimage() const {
  const ::naothmessages::DoubleVector2* p = centerinimage_;
  // @@protoc_insertion_point(field_get:naothmessages.MultiBallPercept.BallPercept.centerInImage)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* MultiBallPercept_BallPercept::mutable_centerinimage() {
  set_has_centerinimage();
  if (centerinimage_ == NULL) {
    centerinimage_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.MultiBallPercept.BallPercept.centerInImage)
  return centerinimage_;
}
::naothmessages::DoubleVector2* MultiBallPercept_BallPercept::release_centerinimage() {
  // @@protoc_insertion_point(field_release:naothmessages.MultiBallPercept.BallPercept.centerInImage)
  clear_has_centerinimage();
  ::naothmessages::DoubleVector2* temp = centerinimage_;
  centerinimage_ = NULL;
  return temp;
}
void MultiBallPercept_BallPercept::set_allocated_centerinimage(::naothmessages::DoubleVector2* centerinimage) {
  delete centerinimage_;
  centerinimage_ = centerinimage;
  if (centerinimage) {
    set_has_centerinimage();
  } else {
    clear_has_centerinimage();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.MultiBallPercept.BallPercept.centerInImage)
}

// optional double radiusInImage = 2;
bool MultiBallPercept_BallPercept::has_radiusinimage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MultiBallPercept_BallPercept::set_has_radiusinimage() {
  _has_bits_[0] |= 0x00000004u;
}
void MultiBallPercept_BallPercept::clear_has_radiusinimage() {
  _has_bits_[0] &= ~0x00000004u;
}
void MultiBallPercept_BallPercept::clear_radiusinimage() {
  radiusinimage_ = 0;
  clear_has_radiusinimage();
}
double MultiBallPercept_BallPercept::radiusinimage() const {
  // @@protoc_insertion_point(field_get:naothmessages.MultiBallPercept.BallPercept.radiusInImage)
  return radiusinimage_;
}
void MultiBallPercept_BallPercept::set_radiusinimage(double value) {
  set_has_radiusinimage();
  radiusinimage_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.MultiBallPercept.BallPercept.radiusInImage)
}

// optional .naothmessages.DoubleVector2 positionOnField = 3;
bool MultiBallPercept_BallPercept::has_positiononfield() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MultiBallPercept_BallPercept::set_has_positiononfield() {
  _has_bits_[0] |= 0x00000002u;
}
void MultiBallPercept_BallPercept::clear_has_positiononfield() {
  _has_bits_[0] &= ~0x00000002u;
}
void MultiBallPercept_BallPercept::clear_positiononfield() {
  if (positiononfield_ != NULL) positiononfield_->::naothmessages::DoubleVector2::Clear();
  clear_has_positiononfield();
}
const ::naothmessages::DoubleVector2& MultiBallPercept_BallPercept::positiononfield() const {
  const ::naothmessages::DoubleVector2* p = positiononfield_;
  // @@protoc_insertion_point(field_get:naothmessages.MultiBallPercept.BallPercept.positionOnField)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* MultiBallPercept_BallPercept::mutable_positiononfield() {
  set_has_positiononfield();
  if (positiononfield_ == NULL) {
    positiononfield_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.MultiBallPercept.BallPercept.positionOnField)
  return positiononfield_;
}
::naothmessages::DoubleVector2* MultiBallPercept_BallPercept::release_positiononfield() {
  // @@protoc_insertion_point(field_release:naothmessages.MultiBallPercept.BallPercept.positionOnField)
  clear_has_positiononfield();
  ::naothmessages::DoubleVector2* temp = positiononfield_;
  positiononfield_ = NULL;
  return temp;
}
void MultiBallPercept_BallPercept::set_allocated_positiononfield(::naothmessages::DoubleVector2* positiononfield) {
  delete positiononfield_;
  positiononfield_ = positiononfield;
  if (positiononfield) {
    set_has_positiononfield();
  } else {
    clear_has_positiononfield();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.MultiBallPercept.BallPercept.positionOnField)
}

// optional .naothmessages.CameraID cameraId = 4;
bool MultiBallPercept_BallPercept::has_cameraid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MultiBallPercept_BallPercept::set_has_cameraid() {
  _has_bits_[0] |= 0x00000008u;
}
void MultiBallPercept_BallPercept::clear_has_cameraid() {
  _has_bits_[0] &= ~0x00000008u;
}
void MultiBallPercept_BallPercept::clear_cameraid() {
  cameraid_ = 0;
  clear_has_cameraid();
}
::naothmessages::CameraID MultiBallPercept_BallPercept::cameraid() const {
  // @@protoc_insertion_point(field_get:naothmessages.MultiBallPercept.BallPercept.cameraId)
  return static_cast< ::naothmessages::CameraID >(cameraid_);
}
void MultiBallPercept_BallPercept::set_cameraid(::naothmessages::CameraID value) {
  assert(::naothmessages::CameraID_IsValid(value));
  set_has_cameraid();
  cameraid_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.MultiBallPercept.BallPercept.cameraId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiBallPercept::kFrameInfoWhenBallWasSeenFieldNumber;
const int MultiBallPercept::kPerceptsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiBallPercept::MultiBallPercept()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.MultiBallPercept)
}
MultiBallPercept::MultiBallPercept(const MultiBallPercept& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      percepts_(from.percepts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_frameinfowhenballwasseen()) {
    frameinfowhenballwasseen_ = new ::naothmessages::FrameInfo(*from.frameinfowhenballwasseen_);
  } else {
    frameinfowhenballwasseen_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:naothmessages.MultiBallPercept)
}

void MultiBallPercept::SharedCtor() {
  _cached_size_ = 0;
  frameinfowhenballwasseen_ = NULL;
}

MultiBallPercept::~MultiBallPercept() {
  // @@protoc_insertion_point(destructor:naothmessages.MultiBallPercept)
  SharedDtor();
}

void MultiBallPercept::SharedDtor() {
  if (this != internal_default_instance()) delete frameinfowhenballwasseen_;
}

void MultiBallPercept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiBallPercept::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultiBallPercept& MultiBallPercept::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

MultiBallPercept* MultiBallPercept::New(::google::protobuf::Arena* arena) const {
  MultiBallPercept* n = new MultiBallPercept;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiBallPercept::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.MultiBallPercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  percepts_.Clear();
  if (has_frameinfowhenballwasseen()) {
    GOOGLE_DCHECK(frameinfowhenballwasseen_ != NULL);
    frameinfowhenballwasseen_->::naothmessages::FrameInfo::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MultiBallPercept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.MultiBallPercept)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .naothmessages.FrameInfo frameInfoWhenBallWasSeen = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frameinfowhenballwasseen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .naothmessages.MultiBallPercept.BallPercept percepts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_percepts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.MultiBallPercept)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.MultiBallPercept)
  return false;
#undef DO_
}

void MultiBallPercept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.MultiBallPercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.FrameInfo frameInfoWhenBallWasSeen = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->frameinfowhenballwasseen_, output);
  }

  // repeated .naothmessages.MultiBallPercept.BallPercept percepts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->percepts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->percepts(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.MultiBallPercept)
}

::google::protobuf::uint8* MultiBallPercept::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.MultiBallPercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.FrameInfo frameInfoWhenBallWasSeen = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->frameinfowhenballwasseen_, deterministic, target);
  }

  // repeated .naothmessages.MultiBallPercept.BallPercept percepts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->percepts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->percepts(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.MultiBallPercept)
  return target;
}

size_t MultiBallPercept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.MultiBallPercept)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .naothmessages.MultiBallPercept.BallPercept percepts = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->percepts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->percepts(static_cast<int>(i)));
    }
  }

  // optional .naothmessages.FrameInfo frameInfoWhenBallWasSeen = 1;
  if (has_frameinfowhenballwasseen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->frameinfowhenballwasseen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiBallPercept::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.MultiBallPercept)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiBallPercept* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiBallPercept>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.MultiBallPercept)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.MultiBallPercept)
    MergeFrom(*source);
  }
}

void MultiBallPercept::MergeFrom(const MultiBallPercept& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.MultiBallPercept)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  percepts_.MergeFrom(from.percepts_);
  if (from.has_frameinfowhenballwasseen()) {
    mutable_frameinfowhenballwasseen()->::naothmessages::FrameInfo::MergeFrom(from.frameinfowhenballwasseen());
  }
}

void MultiBallPercept::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.MultiBallPercept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiBallPercept::CopyFrom(const MultiBallPercept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.MultiBallPercept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiBallPercept::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->percepts())) return false;
  if (has_frameinfowhenballwasseen()) {
    if (!this->frameinfowhenballwasseen_->IsInitialized()) return false;
  }
  return true;
}

void MultiBallPercept::Swap(MultiBallPercept* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiBallPercept::InternalSwap(MultiBallPercept* other) {
  using std::swap;
  percepts_.InternalSwap(&other->percepts_);
  swap(frameinfowhenballwasseen_, other->frameinfowhenballwasseen_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiBallPercept::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiBallPercept

// optional .naothmessages.FrameInfo frameInfoWhenBallWasSeen = 1;
bool MultiBallPercept::has_frameinfowhenballwasseen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MultiBallPercept::set_has_frameinfowhenballwasseen() {
  _has_bits_[0] |= 0x00000001u;
}
void MultiBallPercept::clear_has_frameinfowhenballwasseen() {
  _has_bits_[0] &= ~0x00000001u;
}
void MultiBallPercept::clear_frameinfowhenballwasseen() {
  if (frameinfowhenballwasseen_ != NULL) frameinfowhenballwasseen_->::naothmessages::FrameInfo::Clear();
  clear_has_frameinfowhenballwasseen();
}
const ::naothmessages::FrameInfo& MultiBallPercept::frameinfowhenballwasseen() const {
  const ::naothmessages::FrameInfo* p = frameinfowhenballwasseen_;
  // @@protoc_insertion_point(field_get:naothmessages.MultiBallPercept.frameInfoWhenBallWasSeen)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::FrameInfo*>(
      &::naothmessages::_FrameInfo_default_instance_);
}
::naothmessages::FrameInfo* MultiBallPercept::mutable_frameinfowhenballwasseen() {
  set_has_frameinfowhenballwasseen();
  if (frameinfowhenballwasseen_ == NULL) {
    frameinfowhenballwasseen_ = new ::naothmessages::FrameInfo;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.MultiBallPercept.frameInfoWhenBallWasSeen)
  return frameinfowhenballwasseen_;
}
::naothmessages::FrameInfo* MultiBallPercept::release_frameinfowhenballwasseen() {
  // @@protoc_insertion_point(field_release:naothmessages.MultiBallPercept.frameInfoWhenBallWasSeen)
  clear_has_frameinfowhenballwasseen();
  ::naothmessages::FrameInfo* temp = frameinfowhenballwasseen_;
  frameinfowhenballwasseen_ = NULL;
  return temp;
}
void MultiBallPercept::set_allocated_frameinfowhenballwasseen(::naothmessages::FrameInfo* frameinfowhenballwasseen) {
  delete frameinfowhenballwasseen_;
  frameinfowhenballwasseen_ = frameinfowhenballwasseen;
  if (frameinfowhenballwasseen) {
    set_has_frameinfowhenballwasseen();
  } else {
    clear_has_frameinfowhenballwasseen();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.MultiBallPercept.frameInfoWhenBallWasSeen)
}

// repeated .naothmessages.MultiBallPercept.BallPercept percepts = 2;
int MultiBallPercept::percepts_size() const {
  return percepts_.size();
}
void MultiBallPercept::clear_percepts() {
  percepts_.Clear();
}
const ::naothmessages::MultiBallPercept_BallPercept& MultiBallPercept::percepts(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.MultiBallPercept.percepts)
  return percepts_.Get(index);
}
::naothmessages::MultiBallPercept_BallPercept* MultiBallPercept::mutable_percepts(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.MultiBallPercept.percepts)
  return percepts_.Mutable(index);
}
::naothmessages::MultiBallPercept_BallPercept* MultiBallPercept::add_percepts() {
  // @@protoc_insertion_point(field_add:naothmessages.MultiBallPercept.percepts)
  return percepts_.Add();
}
::google::protobuf::RepeatedPtrField< ::naothmessages::MultiBallPercept_BallPercept >*
MultiBallPercept::mutable_percepts() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.MultiBallPercept.percepts)
  return &percepts_;
}
const ::google::protobuf::RepeatedPtrField< ::naothmessages::MultiBallPercept_BallPercept >&
MultiBallPercept::percepts() const {
  // @@protoc_insertion_point(field_list:naothmessages.MultiBallPercept.percepts)
  return percepts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BallModel::kValidFieldNumber;
const int BallModel::kKnowsFieldNumber;
const int BallModel::kPositionFieldNumber;
const int BallModel::kSpeedFieldNumber;
const int BallModel::kPositionPreviewFieldNumber;
const int BallModel::kPositionPreviewInLFootFieldNumber;
const int BallModel::kPositionPreviewInRFootFieldNumber;
const int BallModel::kFuturePositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BallModel::BallModel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.BallModel)
}
BallModel::BallModel(const BallModel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      futureposition_(from.futureposition_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::naothmessages::DoubleVector2(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_speed()) {
    speed_ = new ::naothmessages::DoubleVector2(*from.speed_);
  } else {
    speed_ = NULL;
  }
  if (from.has_positionpreview()) {
    positionpreview_ = new ::naothmessages::DoubleVector2(*from.positionpreview_);
  } else {
    positionpreview_ = NULL;
  }
  if (from.has_positionpreviewinlfoot()) {
    positionpreviewinlfoot_ = new ::naothmessages::DoubleVector2(*from.positionpreviewinlfoot_);
  } else {
    positionpreviewinlfoot_ = NULL;
  }
  if (from.has_positionpreviewinrfoot()) {
    positionpreviewinrfoot_ = new ::naothmessages::DoubleVector2(*from.positionpreviewinrfoot_);
  } else {
    positionpreviewinrfoot_ = NULL;
  }
  ::memcpy(&valid_, &from.valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&knows_) -
    reinterpret_cast<char*>(&valid_)) + sizeof(knows_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.BallModel)
}

void BallModel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&knows_) -
      reinterpret_cast<char*>(&position_)) + sizeof(knows_));
}

BallModel::~BallModel() {
  // @@protoc_insertion_point(destructor:naothmessages.BallModel)
  SharedDtor();
}

void BallModel::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete speed_;
  if (this != internal_default_instance()) delete positionpreview_;
  if (this != internal_default_instance()) delete positionpreviewinlfoot_;
  if (this != internal_default_instance()) delete positionpreviewinrfoot_;
}

void BallModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BallModel::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BallModel& BallModel::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

BallModel* BallModel::New(::google::protobuf::Arena* arena) const {
  BallModel* n = new BallModel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BallModel::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.BallModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  futureposition_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->::naothmessages::DoubleVector2::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(speed_ != NULL);
      speed_->::naothmessages::DoubleVector2::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(positionpreview_ != NULL);
      positionpreview_->::naothmessages::DoubleVector2::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(positionpreviewinlfoot_ != NULL);
      positionpreviewinlfoot_->::naothmessages::DoubleVector2::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(positionpreviewinrfoot_ != NULL);
      positionpreviewinrfoot_->::naothmessages::DoubleVector2::Clear();
    }
  }
  if (cached_has_bits & 96u) {
    ::memset(&valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&knows_) -
        reinterpret_cast<char*>(&valid_)) + sizeof(knows_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BallModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.BallModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool valid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool knows = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_knows();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &knows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector2 position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector2 speed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector2 positionPreview = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_positionpreview()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector2 positionPreviewInLFoot = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_positionpreviewinlfoot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector2 positionPreviewInRFoot = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_positionpreviewinrfoot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .naothmessages.DoubleVector2 futurePosition = 8 [deprecated = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_futureposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.BallModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.BallModel)
  return false;
#undef DO_
}

void BallModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.BallModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool valid = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->valid(), output);
  }

  // optional bool knows = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->knows(), output);
  }

  // optional .naothmessages.DoubleVector2 position = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->position_, output);
  }

  // optional .naothmessages.DoubleVector2 speed = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->speed_, output);
  }

  // optional .naothmessages.DoubleVector2 positionPreview = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->positionpreview_, output);
  }

  // optional .naothmessages.DoubleVector2 positionPreviewInLFoot = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->positionpreviewinlfoot_, output);
  }

  // optional .naothmessages.DoubleVector2 positionPreviewInRFoot = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->positionpreviewinrfoot_, output);
  }

  // repeated .naothmessages.DoubleVector2 futurePosition = 8 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->futureposition_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->futureposition(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.BallModel)
}

::google::protobuf::uint8* BallModel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.BallModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool valid = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->valid(), target);
  }

  // optional bool knows = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->knows(), target);
  }

  // optional .naothmessages.DoubleVector2 position = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->position_, deterministic, target);
  }

  // optional .naothmessages.DoubleVector2 speed = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->speed_, deterministic, target);
  }

  // optional .naothmessages.DoubleVector2 positionPreview = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->positionpreview_, deterministic, target);
  }

  // optional .naothmessages.DoubleVector2 positionPreviewInLFoot = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->positionpreviewinlfoot_, deterministic, target);
  }

  // optional .naothmessages.DoubleVector2 positionPreviewInRFoot = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->positionpreviewinrfoot_, deterministic, target);
  }

  // repeated .naothmessages.DoubleVector2 futurePosition = 8 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->futureposition_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->futureposition(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.BallModel)
  return target;
}

size_t BallModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.BallModel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .naothmessages.DoubleVector2 futurePosition = 8 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->futureposition_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->futureposition(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional .naothmessages.DoubleVector2 position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional .naothmessages.DoubleVector2 speed = 4;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->speed_);
    }

    // optional .naothmessages.DoubleVector2 positionPreview = 5;
    if (has_positionpreview()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->positionpreview_);
    }

    // optional .naothmessages.DoubleVector2 positionPreviewInLFoot = 6;
    if (has_positionpreviewinlfoot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->positionpreviewinlfoot_);
    }

    // optional .naothmessages.DoubleVector2 positionPreviewInRFoot = 7;
    if (has_positionpreviewinrfoot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->positionpreviewinrfoot_);
    }

    // optional bool valid = 1;
    if (has_valid()) {
      total_size += 1 + 1;
    }

    // optional bool knows = 2;
    if (has_knows()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BallModel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.BallModel)
  GOOGLE_DCHECK_NE(&from, this);
  const BallModel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BallModel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.BallModel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.BallModel)
    MergeFrom(*source);
  }
}

void BallModel::MergeFrom(const BallModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.BallModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  futureposition_.MergeFrom(from.futureposition_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::naothmessages::DoubleVector2::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_speed()->::naothmessages::DoubleVector2::MergeFrom(from.speed());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_positionpreview()->::naothmessages::DoubleVector2::MergeFrom(from.positionpreview());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_positionpreviewinlfoot()->::naothmessages::DoubleVector2::MergeFrom(from.positionpreviewinlfoot());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_positionpreviewinrfoot()->::naothmessages::DoubleVector2::MergeFrom(from.positionpreviewinrfoot());
    }
    if (cached_has_bits & 0x00000020u) {
      valid_ = from.valid_;
    }
    if (cached_has_bits & 0x00000040u) {
      knows_ = from.knows_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BallModel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.BallModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallModel::CopyFrom(const BallModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.BallModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallModel::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->futureposition())) return false;
  if (has_position()) {
    if (!this->position_->IsInitialized()) return false;
  }
  if (has_speed()) {
    if (!this->speed_->IsInitialized()) return false;
  }
  if (has_positionpreview()) {
    if (!this->positionpreview_->IsInitialized()) return false;
  }
  if (has_positionpreviewinlfoot()) {
    if (!this->positionpreviewinlfoot_->IsInitialized()) return false;
  }
  if (has_positionpreviewinrfoot()) {
    if (!this->positionpreviewinrfoot_->IsInitialized()) return false;
  }
  return true;
}

void BallModel::Swap(BallModel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BallModel::InternalSwap(BallModel* other) {
  using std::swap;
  futureposition_.InternalSwap(&other->futureposition_);
  swap(position_, other->position_);
  swap(speed_, other->speed_);
  swap(positionpreview_, other->positionpreview_);
  swap(positionpreviewinlfoot_, other->positionpreviewinlfoot_);
  swap(positionpreviewinrfoot_, other->positionpreviewinrfoot_);
  swap(valid_, other->valid_);
  swap(knows_, other->knows_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BallModel::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BallModel

// optional bool valid = 1;
bool BallModel::has_valid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BallModel::set_has_valid() {
  _has_bits_[0] |= 0x00000020u;
}
void BallModel::clear_has_valid() {
  _has_bits_[0] &= ~0x00000020u;
}
void BallModel::clear_valid() {
  valid_ = false;
  clear_has_valid();
}
bool BallModel::valid() const {
  // @@protoc_insertion_point(field_get:naothmessages.BallModel.valid)
  return valid_;
}
void BallModel::set_valid(bool value) {
  set_has_valid();
  valid_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BallModel.valid)
}

// optional bool knows = 2;
bool BallModel::has_knows() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BallModel::set_has_knows() {
  _has_bits_[0] |= 0x00000040u;
}
void BallModel::clear_has_knows() {
  _has_bits_[0] &= ~0x00000040u;
}
void BallModel::clear_knows() {
  knows_ = false;
  clear_has_knows();
}
bool BallModel::knows() const {
  // @@protoc_insertion_point(field_get:naothmessages.BallModel.knows)
  return knows_;
}
void BallModel::set_knows(bool value) {
  set_has_knows();
  knows_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BallModel.knows)
}

// optional .naothmessages.DoubleVector2 position = 3;
bool BallModel::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BallModel::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void BallModel::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void BallModel::clear_position() {
  if (position_ != NULL) position_->::naothmessages::DoubleVector2::Clear();
  clear_has_position();
}
const ::naothmessages::DoubleVector2& BallModel::position() const {
  const ::naothmessages::DoubleVector2* p = position_;
  // @@protoc_insertion_point(field_get:naothmessages.BallModel.position)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* BallModel::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.BallModel.position)
  return position_;
}
::naothmessages::DoubleVector2* BallModel::release_position() {
  // @@protoc_insertion_point(field_release:naothmessages.BallModel.position)
  clear_has_position();
  ::naothmessages::DoubleVector2* temp = position_;
  position_ = NULL;
  return temp;
}
void BallModel::set_allocated_position(::naothmessages::DoubleVector2* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.BallModel.position)
}

// optional .naothmessages.DoubleVector2 speed = 4;
bool BallModel::has_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BallModel::set_has_speed() {
  _has_bits_[0] |= 0x00000002u;
}
void BallModel::clear_has_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
void BallModel::clear_speed() {
  if (speed_ != NULL) speed_->::naothmessages::DoubleVector2::Clear();
  clear_has_speed();
}
const ::naothmessages::DoubleVector2& BallModel::speed() const {
  const ::naothmessages::DoubleVector2* p = speed_;
  // @@protoc_insertion_point(field_get:naothmessages.BallModel.speed)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* BallModel::mutable_speed() {
  set_has_speed();
  if (speed_ == NULL) {
    speed_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.BallModel.speed)
  return speed_;
}
::naothmessages::DoubleVector2* BallModel::release_speed() {
  // @@protoc_insertion_point(field_release:naothmessages.BallModel.speed)
  clear_has_speed();
  ::naothmessages::DoubleVector2* temp = speed_;
  speed_ = NULL;
  return temp;
}
void BallModel::set_allocated_speed(::naothmessages::DoubleVector2* speed) {
  delete speed_;
  speed_ = speed;
  if (speed) {
    set_has_speed();
  } else {
    clear_has_speed();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.BallModel.speed)
}

// optional .naothmessages.DoubleVector2 positionPreview = 5;
bool BallModel::has_positionpreview() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BallModel::set_has_positionpreview() {
  _has_bits_[0] |= 0x00000004u;
}
void BallModel::clear_has_positionpreview() {
  _has_bits_[0] &= ~0x00000004u;
}
void BallModel::clear_positionpreview() {
  if (positionpreview_ != NULL) positionpreview_->::naothmessages::DoubleVector2::Clear();
  clear_has_positionpreview();
}
const ::naothmessages::DoubleVector2& BallModel::positionpreview() const {
  const ::naothmessages::DoubleVector2* p = positionpreview_;
  // @@protoc_insertion_point(field_get:naothmessages.BallModel.positionPreview)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* BallModel::mutable_positionpreview() {
  set_has_positionpreview();
  if (positionpreview_ == NULL) {
    positionpreview_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.BallModel.positionPreview)
  return positionpreview_;
}
::naothmessages::DoubleVector2* BallModel::release_positionpreview() {
  // @@protoc_insertion_point(field_release:naothmessages.BallModel.positionPreview)
  clear_has_positionpreview();
  ::naothmessages::DoubleVector2* temp = positionpreview_;
  positionpreview_ = NULL;
  return temp;
}
void BallModel::set_allocated_positionpreview(::naothmessages::DoubleVector2* positionpreview) {
  delete positionpreview_;
  positionpreview_ = positionpreview;
  if (positionpreview) {
    set_has_positionpreview();
  } else {
    clear_has_positionpreview();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.BallModel.positionPreview)
}

// optional .naothmessages.DoubleVector2 positionPreviewInLFoot = 6;
bool BallModel::has_positionpreviewinlfoot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BallModel::set_has_positionpreviewinlfoot() {
  _has_bits_[0] |= 0x00000008u;
}
void BallModel::clear_has_positionpreviewinlfoot() {
  _has_bits_[0] &= ~0x00000008u;
}
void BallModel::clear_positionpreviewinlfoot() {
  if (positionpreviewinlfoot_ != NULL) positionpreviewinlfoot_->::naothmessages::DoubleVector2::Clear();
  clear_has_positionpreviewinlfoot();
}
const ::naothmessages::DoubleVector2& BallModel::positionpreviewinlfoot() const {
  const ::naothmessages::DoubleVector2* p = positionpreviewinlfoot_;
  // @@protoc_insertion_point(field_get:naothmessages.BallModel.positionPreviewInLFoot)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* BallModel::mutable_positionpreviewinlfoot() {
  set_has_positionpreviewinlfoot();
  if (positionpreviewinlfoot_ == NULL) {
    positionpreviewinlfoot_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.BallModel.positionPreviewInLFoot)
  return positionpreviewinlfoot_;
}
::naothmessages::DoubleVector2* BallModel::release_positionpreviewinlfoot() {
  // @@protoc_insertion_point(field_release:naothmessages.BallModel.positionPreviewInLFoot)
  clear_has_positionpreviewinlfoot();
  ::naothmessages::DoubleVector2* temp = positionpreviewinlfoot_;
  positionpreviewinlfoot_ = NULL;
  return temp;
}
void BallModel::set_allocated_positionpreviewinlfoot(::naothmessages::DoubleVector2* positionpreviewinlfoot) {
  delete positionpreviewinlfoot_;
  positionpreviewinlfoot_ = positionpreviewinlfoot;
  if (positionpreviewinlfoot) {
    set_has_positionpreviewinlfoot();
  } else {
    clear_has_positionpreviewinlfoot();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.BallModel.positionPreviewInLFoot)
}

// optional .naothmessages.DoubleVector2 positionPreviewInRFoot = 7;
bool BallModel::has_positionpreviewinrfoot() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BallModel::set_has_positionpreviewinrfoot() {
  _has_bits_[0] |= 0x00000010u;
}
void BallModel::clear_has_positionpreviewinrfoot() {
  _has_bits_[0] &= ~0x00000010u;
}
void BallModel::clear_positionpreviewinrfoot() {
  if (positionpreviewinrfoot_ != NULL) positionpreviewinrfoot_->::naothmessages::DoubleVector2::Clear();
  clear_has_positionpreviewinrfoot();
}
const ::naothmessages::DoubleVector2& BallModel::positionpreviewinrfoot() const {
  const ::naothmessages::DoubleVector2* p = positionpreviewinrfoot_;
  // @@protoc_insertion_point(field_get:naothmessages.BallModel.positionPreviewInRFoot)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* BallModel::mutable_positionpreviewinrfoot() {
  set_has_positionpreviewinrfoot();
  if (positionpreviewinrfoot_ == NULL) {
    positionpreviewinrfoot_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.BallModel.positionPreviewInRFoot)
  return positionpreviewinrfoot_;
}
::naothmessages::DoubleVector2* BallModel::release_positionpreviewinrfoot() {
  // @@protoc_insertion_point(field_release:naothmessages.BallModel.positionPreviewInRFoot)
  clear_has_positionpreviewinrfoot();
  ::naothmessages::DoubleVector2* temp = positionpreviewinrfoot_;
  positionpreviewinrfoot_ = NULL;
  return temp;
}
void BallModel::set_allocated_positionpreviewinrfoot(::naothmessages::DoubleVector2* positionpreviewinrfoot) {
  delete positionpreviewinrfoot_;
  positionpreviewinrfoot_ = positionpreviewinrfoot;
  if (positionpreviewinrfoot) {
    set_has_positionpreviewinrfoot();
  } else {
    clear_has_positionpreviewinrfoot();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.BallModel.positionPreviewInRFoot)
}

// repeated .naothmessages.DoubleVector2 futurePosition = 8 [deprecated = true];
int BallModel::futureposition_size() const {
  return futureposition_.size();
}
void BallModel::clear_futureposition() {
  futureposition_.Clear();
}
const ::naothmessages::DoubleVector2& BallModel::futureposition(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.BallModel.futurePosition)
  return futureposition_.Get(index);
}
::naothmessages::DoubleVector2* BallModel::mutable_futureposition(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.BallModel.futurePosition)
  return futureposition_.Mutable(index);
}
::naothmessages::DoubleVector2* BallModel::add_futureposition() {
  // @@protoc_insertion_point(field_add:naothmessages.BallModel.futurePosition)
  return futureposition_.Add();
}
::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 >*
BallModel::mutable_futureposition() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.BallModel.futurePosition)
  return &futureposition_;
}
const ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 >&
BallModel::futureposition() const {
  // @@protoc_insertion_point(field_list:naothmessages.BallModel.futurePosition)
  return futureposition_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GoalPercept_GoalPost::kBasePointFieldNumber;
const int GoalPercept_GoalPost::kPositionFieldNumber;
const int GoalPercept_GoalPost::kColorFieldNumber;
const int GoalPercept_GoalPost::kTypeFieldNumber;
const int GoalPercept_GoalPost::kPositionReliableFieldNumber;
const int GoalPercept_GoalPost::kSeenHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GoalPercept_GoalPost::GoalPercept_GoalPost()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.GoalPercept.GoalPost)
}
GoalPercept_GoalPost::GoalPercept_GoalPost(const GoalPercept_GoalPost& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_basepoint()) {
    basepoint_ = new ::naothmessages::IntVector2(*from.basepoint_);
  } else {
    basepoint_ = NULL;
  }
  if (from.has_position()) {
    position_ = new ::naothmessages::DoubleVector2(*from.position_);
  } else {
    position_ = NULL;
  }
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&positionreliable_) -
    reinterpret_cast<char*>(&color_)) + sizeof(positionreliable_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.GoalPercept.GoalPost)
}

void GoalPercept_GoalPost::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&basepoint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&positionreliable_) -
      reinterpret_cast<char*>(&basepoint_)) + sizeof(positionreliable_));
}

GoalPercept_GoalPost::~GoalPercept_GoalPost() {
  // @@protoc_insertion_point(destructor:naothmessages.GoalPercept.GoalPost)
  SharedDtor();
}

void GoalPercept_GoalPost::SharedDtor() {
  if (this != internal_default_instance()) delete basepoint_;
  if (this != internal_default_instance()) delete position_;
}

void GoalPercept_GoalPost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoalPercept_GoalPost::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GoalPercept_GoalPost& GoalPercept_GoalPost::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

GoalPercept_GoalPost* GoalPercept_GoalPost::New(::google::protobuf::Arena* arena) const {
  GoalPercept_GoalPost* n = new GoalPercept_GoalPost;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GoalPercept_GoalPost::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.GoalPercept.GoalPost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(basepoint_ != NULL);
      basepoint_->::naothmessages::IntVector2::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->::naothmessages::DoubleVector2::Clear();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&positionreliable_) -
        reinterpret_cast<char*>(&color_)) + sizeof(positionreliable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GoalPercept_GoalPost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.GoalPercept.GoalPost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .naothmessages.IntVector2 basePoint = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basepoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector2 position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.Color color = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::naothmessages::Color_IsValid(value)) {
            set_color(static_cast< ::naothmessages::Color >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.GoalPercept.GoalPost.PostType type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::naothmessages::GoalPercept_GoalPost_PostType_IsValid(value)) {
            set_type(static_cast< ::naothmessages::GoalPercept_GoalPost_PostType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool positionReliable = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_positionreliable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &positionreliable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double seenHeight = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_seenheight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &seenheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.GoalPercept.GoalPost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.GoalPercept.GoalPost)
  return false;
#undef DO_
}

void GoalPercept_GoalPost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.GoalPercept.GoalPost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.IntVector2 basePoint = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->basepoint_, output);
  }

  // optional .naothmessages.DoubleVector2 position = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->position_, output);
  }

  // optional .naothmessages.Color color = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->color(), output);
  }

  // optional .naothmessages.GoalPercept.GoalPost.PostType type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional bool positionReliable = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->positionreliable(), output);
  }

  // optional double seenHeight = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->seenheight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.GoalPercept.GoalPost)
}

::google::protobuf::uint8* GoalPercept_GoalPost::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.GoalPercept.GoalPost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.IntVector2 basePoint = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->basepoint_, deterministic, target);
  }

  // optional .naothmessages.DoubleVector2 position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->position_, deterministic, target);
  }

  // optional .naothmessages.Color color = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->color(), target);
  }

  // optional .naothmessages.GoalPercept.GoalPost.PostType type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional bool positionReliable = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->positionreliable(), target);
  }

  // optional double seenHeight = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->seenheight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.GoalPercept.GoalPost)
  return target;
}

size_t GoalPercept_GoalPost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.GoalPercept.GoalPost)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .naothmessages.IntVector2 basePoint = 1;
    if (has_basepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->basepoint_);
    }

    // optional .naothmessages.DoubleVector2 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional .naothmessages.Color color = 3;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

    // optional .naothmessages.GoalPercept.GoalPost.PostType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional double seenHeight = 6;
    if (has_seenheight()) {
      total_size += 1 + 8;
    }

    // optional bool positionReliable = 5;
    if (has_positionreliable()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoalPercept_GoalPost::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.GoalPercept.GoalPost)
  GOOGLE_DCHECK_NE(&from, this);
  const GoalPercept_GoalPost* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GoalPercept_GoalPost>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.GoalPercept.GoalPost)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.GoalPercept.GoalPost)
    MergeFrom(*source);
  }
}

void GoalPercept_GoalPost::MergeFrom(const GoalPercept_GoalPost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.GoalPercept.GoalPost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_basepoint()->::naothmessages::IntVector2::MergeFrom(from.basepoint());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_position()->::naothmessages::DoubleVector2::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000004u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      seenheight_ = from.seenheight_;
    }
    if (cached_has_bits & 0x00000020u) {
      positionreliable_ = from.positionreliable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GoalPercept_GoalPost::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.GoalPercept.GoalPost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoalPercept_GoalPost::CopyFrom(const GoalPercept_GoalPost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.GoalPercept.GoalPost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoalPercept_GoalPost::IsInitialized() const {
  if (has_basepoint()) {
    if (!this->basepoint_->IsInitialized()) return false;
  }
  if (has_position()) {
    if (!this->position_->IsInitialized()) return false;
  }
  return true;
}

void GoalPercept_GoalPost::Swap(GoalPercept_GoalPost* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GoalPercept_GoalPost::InternalSwap(GoalPercept_GoalPost* other) {
  using std::swap;
  swap(basepoint_, other->basepoint_);
  swap(position_, other->position_);
  swap(color_, other->color_);
  swap(type_, other->type_);
  swap(seenheight_, other->seenheight_);
  swap(positionreliable_, other->positionreliable_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GoalPercept_GoalPost::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GoalPercept_GoalPost

// optional .naothmessages.IntVector2 basePoint = 1;
bool GoalPercept_GoalPost::has_basepoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GoalPercept_GoalPost::set_has_basepoint() {
  _has_bits_[0] |= 0x00000001u;
}
void GoalPercept_GoalPost::clear_has_basepoint() {
  _has_bits_[0] &= ~0x00000001u;
}
void GoalPercept_GoalPost::clear_basepoint() {
  if (basepoint_ != NULL) basepoint_->::naothmessages::IntVector2::Clear();
  clear_has_basepoint();
}
const ::naothmessages::IntVector2& GoalPercept_GoalPost::basepoint() const {
  const ::naothmessages::IntVector2* p = basepoint_;
  // @@protoc_insertion_point(field_get:naothmessages.GoalPercept.GoalPost.basePoint)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::IntVector2*>(
      &::naothmessages::_IntVector2_default_instance_);
}
::naothmessages::IntVector2* GoalPercept_GoalPost::mutable_basepoint() {
  set_has_basepoint();
  if (basepoint_ == NULL) {
    basepoint_ = new ::naothmessages::IntVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.GoalPercept.GoalPost.basePoint)
  return basepoint_;
}
::naothmessages::IntVector2* GoalPercept_GoalPost::release_basepoint() {
  // @@protoc_insertion_point(field_release:naothmessages.GoalPercept.GoalPost.basePoint)
  clear_has_basepoint();
  ::naothmessages::IntVector2* temp = basepoint_;
  basepoint_ = NULL;
  return temp;
}
void GoalPercept_GoalPost::set_allocated_basepoint(::naothmessages::IntVector2* basepoint) {
  delete basepoint_;
  basepoint_ = basepoint;
  if (basepoint) {
    set_has_basepoint();
  } else {
    clear_has_basepoint();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.GoalPercept.GoalPost.basePoint)
}

// optional .naothmessages.DoubleVector2 position = 2;
bool GoalPercept_GoalPost::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GoalPercept_GoalPost::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
void GoalPercept_GoalPost::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
void GoalPercept_GoalPost::clear_position() {
  if (position_ != NULL) position_->::naothmessages::DoubleVector2::Clear();
  clear_has_position();
}
const ::naothmessages::DoubleVector2& GoalPercept_GoalPost::position() const {
  const ::naothmessages::DoubleVector2* p = position_;
  // @@protoc_insertion_point(field_get:naothmessages.GoalPercept.GoalPost.position)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* GoalPercept_GoalPost::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.GoalPercept.GoalPost.position)
  return position_;
}
::naothmessages::DoubleVector2* GoalPercept_GoalPost::release_position() {
  // @@protoc_insertion_point(field_release:naothmessages.GoalPercept.GoalPost.position)
  clear_has_position();
  ::naothmessages::DoubleVector2* temp = position_;
  position_ = NULL;
  return temp;
}
void GoalPercept_GoalPost::set_allocated_position(::naothmessages::DoubleVector2* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.GoalPercept.GoalPost.position)
}

// optional .naothmessages.Color color = 3;
bool GoalPercept_GoalPost::has_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GoalPercept_GoalPost::set_has_color() {
  _has_bits_[0] |= 0x00000004u;
}
void GoalPercept_GoalPost::clear_has_color() {
  _has_bits_[0] &= ~0x00000004u;
}
void GoalPercept_GoalPost::clear_color() {
  color_ = 0;
  clear_has_color();
}
::naothmessages::Color GoalPercept_GoalPost::color() const {
  // @@protoc_insertion_point(field_get:naothmessages.GoalPercept.GoalPost.color)
  return static_cast< ::naothmessages::Color >(color_);
}
void GoalPercept_GoalPost::set_color(::naothmessages::Color value) {
  assert(::naothmessages::Color_IsValid(value));
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.GoalPercept.GoalPost.color)
}

// optional .naothmessages.GoalPercept.GoalPost.PostType type = 4;
bool GoalPercept_GoalPost::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GoalPercept_GoalPost::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void GoalPercept_GoalPost::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void GoalPercept_GoalPost::clear_type() {
  type_ = 0;
  clear_has_type();
}
::naothmessages::GoalPercept_GoalPost_PostType GoalPercept_GoalPost::type() const {
  // @@protoc_insertion_point(field_get:naothmessages.GoalPercept.GoalPost.type)
  return static_cast< ::naothmessages::GoalPercept_GoalPost_PostType >(type_);
}
void GoalPercept_GoalPost::set_type(::naothmessages::GoalPercept_GoalPost_PostType value) {
  assert(::naothmessages::GoalPercept_GoalPost_PostType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.GoalPercept.GoalPost.type)
}

// optional bool positionReliable = 5;
bool GoalPercept_GoalPost::has_positionreliable() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GoalPercept_GoalPost::set_has_positionreliable() {
  _has_bits_[0] |= 0x00000020u;
}
void GoalPercept_GoalPost::clear_has_positionreliable() {
  _has_bits_[0] &= ~0x00000020u;
}
void GoalPercept_GoalPost::clear_positionreliable() {
  positionreliable_ = false;
  clear_has_positionreliable();
}
bool GoalPercept_GoalPost::positionreliable() const {
  // @@protoc_insertion_point(field_get:naothmessages.GoalPercept.GoalPost.positionReliable)
  return positionreliable_;
}
void GoalPercept_GoalPost::set_positionreliable(bool value) {
  set_has_positionreliable();
  positionreliable_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.GoalPercept.GoalPost.positionReliable)
}

// optional double seenHeight = 6;
bool GoalPercept_GoalPost::has_seenheight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GoalPercept_GoalPost::set_has_seenheight() {
  _has_bits_[0] |= 0x00000010u;
}
void GoalPercept_GoalPost::clear_has_seenheight() {
  _has_bits_[0] &= ~0x00000010u;
}
void GoalPercept_GoalPost::clear_seenheight() {
  seenheight_ = 0;
  clear_has_seenheight();
}
double GoalPercept_GoalPost::seenheight() const {
  // @@protoc_insertion_point(field_get:naothmessages.GoalPercept.GoalPost.seenHeight)
  return seenheight_;
}
void GoalPercept_GoalPost::set_seenheight(double value) {
  set_has_seenheight();
  seenheight_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.GoalPercept.GoalPost.seenHeight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GoalPercept::kAngleToSeenGoalFieldNumber;
const int GoalPercept::kGoalCentroidFieldNumber;
const int GoalPercept::kNumberOfSeenPostsFieldNumber;
const int GoalPercept::kPostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GoalPercept::GoalPercept()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.GoalPercept)
}
GoalPercept::GoalPercept(const GoalPercept& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      post_(from.post_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_goalcentroid()) {
    goalcentroid_ = new ::naothmessages::DoubleVector3(*from.goalcentroid_);
  } else {
    goalcentroid_ = NULL;
  }
  ::memcpy(&angletoseengoal_, &from.angletoseengoal_,
    static_cast<size_t>(reinterpret_cast<char*>(&numberofseenposts_) -
    reinterpret_cast<char*>(&angletoseengoal_)) + sizeof(numberofseenposts_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.GoalPercept)
}

void GoalPercept::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&goalcentroid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numberofseenposts_) -
      reinterpret_cast<char*>(&goalcentroid_)) + sizeof(numberofseenposts_));
}

GoalPercept::~GoalPercept() {
  // @@protoc_insertion_point(destructor:naothmessages.GoalPercept)
  SharedDtor();
}

void GoalPercept::SharedDtor() {
  if (this != internal_default_instance()) delete goalcentroid_;
}

void GoalPercept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoalPercept::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GoalPercept& GoalPercept::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

GoalPercept* GoalPercept::New(::google::protobuf::Arena* arena) const {
  GoalPercept* n = new GoalPercept;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GoalPercept::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.GoalPercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  post_.Clear();
  if (has_goalcentroid()) {
    GOOGLE_DCHECK(goalcentroid_ != NULL);
    goalcentroid_->::naothmessages::DoubleVector3::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&angletoseengoal_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&numberofseenposts_) -
        reinterpret_cast<char*>(&angletoseengoal_)) + sizeof(numberofseenposts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GoalPercept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.GoalPercept)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double angleToSeenGoal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_angletoseengoal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angletoseengoal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector3 goalCentroid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_goalcentroid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 numberOfSeenPosts = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_numberofseenposts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numberofseenposts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .naothmessages.GoalPercept.GoalPost post = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_post()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.GoalPercept)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.GoalPercept)
  return false;
#undef DO_
}

void GoalPercept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.GoalPercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double angleToSeenGoal = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->angletoseengoal(), output);
  }

  // optional .naothmessages.DoubleVector3 goalCentroid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->goalcentroid_, output);
  }

  // optional int32 numberOfSeenPosts = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->numberofseenposts(), output);
  }

  // repeated .naothmessages.GoalPercept.GoalPost post = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->post_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->post(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.GoalPercept)
}

::google::protobuf::uint8* GoalPercept::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.GoalPercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double angleToSeenGoal = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->angletoseengoal(), target);
  }

  // optional .naothmessages.DoubleVector3 goalCentroid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->goalcentroid_, deterministic, target);
  }

  // optional int32 numberOfSeenPosts = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->numberofseenposts(), target);
  }

  // repeated .naothmessages.GoalPercept.GoalPost post = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->post_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->post(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.GoalPercept)
  return target;
}

size_t GoalPercept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.GoalPercept)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .naothmessages.GoalPercept.GoalPost post = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->post_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->post(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .naothmessages.DoubleVector3 goalCentroid = 2;
    if (has_goalcentroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->goalcentroid_);
    }

    // optional double angleToSeenGoal = 1;
    if (has_angletoseengoal()) {
      total_size += 1 + 8;
    }

    // optional int32 numberOfSeenPosts = 3;
    if (has_numberofseenposts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numberofseenposts());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoalPercept::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.GoalPercept)
  GOOGLE_DCHECK_NE(&from, this);
  const GoalPercept* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GoalPercept>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.GoalPercept)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.GoalPercept)
    MergeFrom(*source);
  }
}

void GoalPercept::MergeFrom(const GoalPercept& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.GoalPercept)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  post_.MergeFrom(from.post_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_goalcentroid()->::naothmessages::DoubleVector3::MergeFrom(from.goalcentroid());
    }
    if (cached_has_bits & 0x00000002u) {
      angletoseengoal_ = from.angletoseengoal_;
    }
    if (cached_has_bits & 0x00000004u) {
      numberofseenposts_ = from.numberofseenposts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GoalPercept::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.GoalPercept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoalPercept::CopyFrom(const GoalPercept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.GoalPercept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoalPercept::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->post())) return false;
  if (has_goalcentroid()) {
    if (!this->goalcentroid_->IsInitialized()) return false;
  }
  return true;
}

void GoalPercept::Swap(GoalPercept* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GoalPercept::InternalSwap(GoalPercept* other) {
  using std::swap;
  post_.InternalSwap(&other->post_);
  swap(goalcentroid_, other->goalcentroid_);
  swap(angletoseengoal_, other->angletoseengoal_);
  swap(numberofseenposts_, other->numberofseenposts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GoalPercept::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GoalPercept

// optional double angleToSeenGoal = 1;
bool GoalPercept::has_angletoseengoal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GoalPercept::set_has_angletoseengoal() {
  _has_bits_[0] |= 0x00000002u;
}
void GoalPercept::clear_has_angletoseengoal() {
  _has_bits_[0] &= ~0x00000002u;
}
void GoalPercept::clear_angletoseengoal() {
  angletoseengoal_ = 0;
  clear_has_angletoseengoal();
}
double GoalPercept::angletoseengoal() const {
  // @@protoc_insertion_point(field_get:naothmessages.GoalPercept.angleToSeenGoal)
  return angletoseengoal_;
}
void GoalPercept::set_angletoseengoal(double value) {
  set_has_angletoseengoal();
  angletoseengoal_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.GoalPercept.angleToSeenGoal)
}

// optional .naothmessages.DoubleVector3 goalCentroid = 2;
bool GoalPercept::has_goalcentroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GoalPercept::set_has_goalcentroid() {
  _has_bits_[0] |= 0x00000001u;
}
void GoalPercept::clear_has_goalcentroid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GoalPercept::clear_goalcentroid() {
  if (goalcentroid_ != NULL) goalcentroid_->::naothmessages::DoubleVector3::Clear();
  clear_has_goalcentroid();
}
const ::naothmessages::DoubleVector3& GoalPercept::goalcentroid() const {
  const ::naothmessages::DoubleVector3* p = goalcentroid_;
  // @@protoc_insertion_point(field_get:naothmessages.GoalPercept.goalCentroid)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
::naothmessages::DoubleVector3* GoalPercept::mutable_goalcentroid() {
  set_has_goalcentroid();
  if (goalcentroid_ == NULL) {
    goalcentroid_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.GoalPercept.goalCentroid)
  return goalcentroid_;
}
::naothmessages::DoubleVector3* GoalPercept::release_goalcentroid() {
  // @@protoc_insertion_point(field_release:naothmessages.GoalPercept.goalCentroid)
  clear_has_goalcentroid();
  ::naothmessages::DoubleVector3* temp = goalcentroid_;
  goalcentroid_ = NULL;
  return temp;
}
void GoalPercept::set_allocated_goalcentroid(::naothmessages::DoubleVector3* goalcentroid) {
  delete goalcentroid_;
  goalcentroid_ = goalcentroid;
  if (goalcentroid) {
    set_has_goalcentroid();
  } else {
    clear_has_goalcentroid();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.GoalPercept.goalCentroid)
}

// optional int32 numberOfSeenPosts = 3;
bool GoalPercept::has_numberofseenposts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GoalPercept::set_has_numberofseenposts() {
  _has_bits_[0] |= 0x00000004u;
}
void GoalPercept::clear_has_numberofseenposts() {
  _has_bits_[0] &= ~0x00000004u;
}
void GoalPercept::clear_numberofseenposts() {
  numberofseenposts_ = 0;
  clear_has_numberofseenposts();
}
::google::protobuf::int32 GoalPercept::numberofseenposts() const {
  // @@protoc_insertion_point(field_get:naothmessages.GoalPercept.numberOfSeenPosts)
  return numberofseenposts_;
}
void GoalPercept::set_numberofseenposts(::google::protobuf::int32 value) {
  set_has_numberofseenposts();
  numberofseenposts_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.GoalPercept.numberOfSeenPosts)
}

// repeated .naothmessages.GoalPercept.GoalPost post = 4;
int GoalPercept::post_size() const {
  return post_.size();
}
void GoalPercept::clear_post() {
  post_.Clear();
}
const ::naothmessages::GoalPercept_GoalPost& GoalPercept::post(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.GoalPercept.post)
  return post_.Get(index);
}
::naothmessages::GoalPercept_GoalPost* GoalPercept::mutable_post(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.GoalPercept.post)
  return post_.Mutable(index);
}
::naothmessages::GoalPercept_GoalPost* GoalPercept::add_post() {
  // @@protoc_insertion_point(field_add:naothmessages.GoalPercept.post)
  return post_.Add();
}
::google::protobuf::RepeatedPtrField< ::naothmessages::GoalPercept_GoalPost >*
GoalPercept::mutable_post() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.GoalPercept.post)
  return &post_;
}
const ::google::protobuf::RepeatedPtrField< ::naothmessages::GoalPercept_GoalPost >&
GoalPercept::post() const {
  // @@protoc_insertion_point(field_list:naothmessages.GoalPercept.post)
  return post_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeadMotionRequest::kIdFieldNumber;
const int HeadMotionRequest::kCameraIDFieldNumber;
const int HeadMotionRequest::kTargetJointPositionFieldNumber;
const int HeadMotionRequest::kTargetPointInImageFieldNumber;
const int HeadMotionRequest::kTargetPointInTheWorldFieldNumber;
const int HeadMotionRequest::kSearchCenterFieldNumber;
const int HeadMotionRequest::kSearchSizeFieldNumber;
const int HeadMotionRequest::kSearchDirectionFieldNumber;
const int HeadMotionRequest::kTargetPointOnTheGroundFieldNumber;
const int HeadMotionRequest::kCoordinateFieldNumber;
const int HeadMotionRequest::kVelocityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeadMotionRequest::HeadMotionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.HeadMotionRequest)
}
HeadMotionRequest::HeadMotionRequest(const HeadMotionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_targetjointposition()) {
    targetjointposition_ = new ::naothmessages::DoubleVector2(*from.targetjointposition_);
  } else {
    targetjointposition_ = NULL;
  }
  if (from.has_targetpointinimage()) {
    targetpointinimage_ = new ::naothmessages::DoubleVector2(*from.targetpointinimage_);
  } else {
    targetpointinimage_ = NULL;
  }
  if (from.has_targetpointintheworld()) {
    targetpointintheworld_ = new ::naothmessages::DoubleVector3(*from.targetpointintheworld_);
  } else {
    targetpointintheworld_ = NULL;
  }
  if (from.has_searchcenter()) {
    searchcenter_ = new ::naothmessages::DoubleVector3(*from.searchcenter_);
  } else {
    searchcenter_ = NULL;
  }
  if (from.has_searchsize()) {
    searchsize_ = new ::naothmessages::DoubleVector3(*from.searchsize_);
  } else {
    searchsize_ = NULL;
  }
  if (from.has_targetpointontheground()) {
    targetpointontheground_ = new ::naothmessages::DoubleVector2(*from.targetpointontheground_);
  } else {
    targetpointontheground_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&velocity_) -
    reinterpret_cast<char*>(&id_)) + sizeof(velocity_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.HeadMotionRequest)
}

void HeadMotionRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&targetjointposition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&velocity_) -
      reinterpret_cast<char*>(&targetjointposition_)) + sizeof(velocity_));
}

HeadMotionRequest::~HeadMotionRequest() {
  // @@protoc_insertion_point(destructor:naothmessages.HeadMotionRequest)
  SharedDtor();
}

void HeadMotionRequest::SharedDtor() {
  if (this != internal_default_instance()) delete targetjointposition_;
  if (this != internal_default_instance()) delete targetpointinimage_;
  if (this != internal_default_instance()) delete targetpointintheworld_;
  if (this != internal_default_instance()) delete searchcenter_;
  if (this != internal_default_instance()) delete searchsize_;
  if (this != internal_default_instance()) delete targetpointontheground_;
}

void HeadMotionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeadMotionRequest::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeadMotionRequest& HeadMotionRequest::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

HeadMotionRequest* HeadMotionRequest::New(::google::protobuf::Arena* arena) const {
  HeadMotionRequest* n = new HeadMotionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeadMotionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.HeadMotionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(targetjointposition_ != NULL);
      targetjointposition_->::naothmessages::DoubleVector2::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(targetpointinimage_ != NULL);
      targetpointinimage_->::naothmessages::DoubleVector2::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(targetpointintheworld_ != NULL);
      targetpointintheworld_->::naothmessages::DoubleVector3::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(searchcenter_ != NULL);
      searchcenter_->::naothmessages::DoubleVector3::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(searchsize_ != NULL);
      searchsize_->::naothmessages::DoubleVector3::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(targetpointontheground_ != NULL);
      targetpointontheground_->::naothmessages::DoubleVector2::Clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cameraid_) -
        reinterpret_cast<char*>(&id_)) + sizeof(cameraid_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&searchdirection_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&velocity_) -
        reinterpret_cast<char*>(&searchdirection_)) + sizeof(velocity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HeadMotionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.HeadMotionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 cameraID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_cameraid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cameraid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector2 targetJointPosition = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetjointposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector2 targetPointInImage = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpointinimage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector3 targetPointInTheWorld = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpointintheworld()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector3 searchCenter = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_searchcenter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector3 searchSize = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_searchsize()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool searchDirection = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_searchdirection();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &searchdirection_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector2 targetPointOnTheGround = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpointontheground()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 coordinate = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_coordinate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coordinate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double velocity = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_velocity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.HeadMotionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.HeadMotionRequest)
  return false;
#undef DO_
}

void HeadMotionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.HeadMotionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 cameraID = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cameraid(), output);
  }

  // optional .naothmessages.DoubleVector2 targetJointPosition = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->targetjointposition_, output);
  }

  // optional .naothmessages.DoubleVector2 targetPointInImage = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->targetpointinimage_, output);
  }

  // optional .naothmessages.DoubleVector3 targetPointInTheWorld = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->targetpointintheworld_, output);
  }

  // optional .naothmessages.DoubleVector3 searchCenter = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->searchcenter_, output);
  }

  // optional .naothmessages.DoubleVector3 searchSize = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->searchsize_, output);
  }

  // optional bool searchDirection = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->searchdirection(), output);
  }

  // optional .naothmessages.DoubleVector2 targetPointOnTheGround = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->targetpointontheground_, output);
  }

  // optional uint32 coordinate = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->coordinate(), output);
  }

  // optional double velocity = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->velocity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.HeadMotionRequest)
}

::google::protobuf::uint8* HeadMotionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.HeadMotionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 cameraID = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cameraid(), target);
  }

  // optional .naothmessages.DoubleVector2 targetJointPosition = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->targetjointposition_, deterministic, target);
  }

  // optional .naothmessages.DoubleVector2 targetPointInImage = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->targetpointinimage_, deterministic, target);
  }

  // optional .naothmessages.DoubleVector3 targetPointInTheWorld = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->targetpointintheworld_, deterministic, target);
  }

  // optional .naothmessages.DoubleVector3 searchCenter = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->searchcenter_, deterministic, target);
  }

  // optional .naothmessages.DoubleVector3 searchSize = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->searchsize_, deterministic, target);
  }

  // optional bool searchDirection = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->searchdirection(), target);
  }

  // optional .naothmessages.DoubleVector2 targetPointOnTheGround = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->targetpointontheground_, deterministic, target);
  }

  // optional uint32 coordinate = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->coordinate(), target);
  }

  // optional double velocity = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->velocity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.HeadMotionRequest)
  return target;
}

size_t HeadMotionRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:naothmessages.HeadMotionRequest)
  size_t total_size = 0;

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_cameraid()) {
    // required uint32 cameraID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cameraid());
  }

  return total_size;
}
size_t HeadMotionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.HeadMotionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000c0) ^ 0x000000c0) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required uint32 cameraID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cameraid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .naothmessages.DoubleVector2 targetJointPosition = 3;
    if (has_targetjointposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->targetjointposition_);
    }

    // optional .naothmessages.DoubleVector2 targetPointInImage = 4;
    if (has_targetpointinimage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->targetpointinimage_);
    }

    // optional .naothmessages.DoubleVector3 targetPointInTheWorld = 5;
    if (has_targetpointintheworld()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->targetpointintheworld_);
    }

    // optional .naothmessages.DoubleVector3 searchCenter = 6;
    if (has_searchcenter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->searchcenter_);
    }

    // optional .naothmessages.DoubleVector3 searchSize = 7;
    if (has_searchsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->searchsize_);
    }

    // optional .naothmessages.DoubleVector2 targetPointOnTheGround = 9;
    if (has_targetpointontheground()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->targetpointontheground_);
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional bool searchDirection = 8;
    if (has_searchdirection()) {
      total_size += 1 + 1;
    }

    // optional uint32 coordinate = 10;
    if (has_coordinate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coordinate());
    }

    // optional double velocity = 11;
    if (has_velocity()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeadMotionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.HeadMotionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HeadMotionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeadMotionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.HeadMotionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.HeadMotionRequest)
    MergeFrom(*source);
  }
}

void HeadMotionRequest::MergeFrom(const HeadMotionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.HeadMotionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_targetjointposition()->::naothmessages::DoubleVector2::MergeFrom(from.targetjointposition());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_targetpointinimage()->::naothmessages::DoubleVector2::MergeFrom(from.targetpointinimage());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_targetpointintheworld()->::naothmessages::DoubleVector3::MergeFrom(from.targetpointintheworld());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_searchcenter()->::naothmessages::DoubleVector3::MergeFrom(from.searchcenter());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_searchsize()->::naothmessages::DoubleVector3::MergeFrom(from.searchsize());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_targetpointontheground()->::naothmessages::DoubleVector2::MergeFrom(from.targetpointontheground());
    }
    if (cached_has_bits & 0x00000040u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000080u) {
      cameraid_ = from.cameraid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      searchdirection_ = from.searchdirection_;
    }
    if (cached_has_bits & 0x00000200u) {
      coordinate_ = from.coordinate_;
    }
    if (cached_has_bits & 0x00000400u) {
      velocity_ = from.velocity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HeadMotionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.HeadMotionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeadMotionRequest::CopyFrom(const HeadMotionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.HeadMotionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeadMotionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000c0) != 0x000000c0) return false;
  if (has_targetjointposition()) {
    if (!this->targetjointposition_->IsInitialized()) return false;
  }
  if (has_targetpointinimage()) {
    if (!this->targetpointinimage_->IsInitialized()) return false;
  }
  if (has_targetpointintheworld()) {
    if (!this->targetpointintheworld_->IsInitialized()) return false;
  }
  if (has_searchcenter()) {
    if (!this->searchcenter_->IsInitialized()) return false;
  }
  if (has_searchsize()) {
    if (!this->searchsize_->IsInitialized()) return false;
  }
  if (has_targetpointontheground()) {
    if (!this->targetpointontheground_->IsInitialized()) return false;
  }
  return true;
}

void HeadMotionRequest::Swap(HeadMotionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeadMotionRequest::InternalSwap(HeadMotionRequest* other) {
  using std::swap;
  swap(targetjointposition_, other->targetjointposition_);
  swap(targetpointinimage_, other->targetpointinimage_);
  swap(targetpointintheworld_, other->targetpointintheworld_);
  swap(searchcenter_, other->searchcenter_);
  swap(searchsize_, other->searchsize_);
  swap(targetpointontheground_, other->targetpointontheground_);
  swap(id_, other->id_);
  swap(cameraid_, other->cameraid_);
  swap(searchdirection_, other->searchdirection_);
  swap(coordinate_, other->coordinate_);
  swap(velocity_, other->velocity_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeadMotionRequest::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeadMotionRequest

// required uint32 id = 1;
bool HeadMotionRequest::has_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void HeadMotionRequest::set_has_id() {
  _has_bits_[0] |= 0x00000040u;
}
void HeadMotionRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void HeadMotionRequest::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 HeadMotionRequest::id() const {
  // @@protoc_insertion_point(field_get:naothmessages.HeadMotionRequest.id)
  return id_;
}
void HeadMotionRequest::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.HeadMotionRequest.id)
}

// required uint32 cameraID = 2;
bool HeadMotionRequest::has_cameraid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void HeadMotionRequest::set_has_cameraid() {
  _has_bits_[0] |= 0x00000080u;
}
void HeadMotionRequest::clear_has_cameraid() {
  _has_bits_[0] &= ~0x00000080u;
}
void HeadMotionRequest::clear_cameraid() {
  cameraid_ = 0u;
  clear_has_cameraid();
}
::google::protobuf::uint32 HeadMotionRequest::cameraid() const {
  // @@protoc_insertion_point(field_get:naothmessages.HeadMotionRequest.cameraID)
  return cameraid_;
}
void HeadMotionRequest::set_cameraid(::google::protobuf::uint32 value) {
  set_has_cameraid();
  cameraid_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.HeadMotionRequest.cameraID)
}

// optional .naothmessages.DoubleVector2 targetJointPosition = 3;
bool HeadMotionRequest::has_targetjointposition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HeadMotionRequest::set_has_targetjointposition() {
  _has_bits_[0] |= 0x00000001u;
}
void HeadMotionRequest::clear_has_targetjointposition() {
  _has_bits_[0] &= ~0x00000001u;
}
void HeadMotionRequest::clear_targetjointposition() {
  if (targetjointposition_ != NULL) targetjointposition_->::naothmessages::DoubleVector2::Clear();
  clear_has_targetjointposition();
}
const ::naothmessages::DoubleVector2& HeadMotionRequest::targetjointposition() const {
  const ::naothmessages::DoubleVector2* p = targetjointposition_;
  // @@protoc_insertion_point(field_get:naothmessages.HeadMotionRequest.targetJointPosition)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* HeadMotionRequest::mutable_targetjointposition() {
  set_has_targetjointposition();
  if (targetjointposition_ == NULL) {
    targetjointposition_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.HeadMotionRequest.targetJointPosition)
  return targetjointposition_;
}
::naothmessages::DoubleVector2* HeadMotionRequest::release_targetjointposition() {
  // @@protoc_insertion_point(field_release:naothmessages.HeadMotionRequest.targetJointPosition)
  clear_has_targetjointposition();
  ::naothmessages::DoubleVector2* temp = targetjointposition_;
  targetjointposition_ = NULL;
  return temp;
}
void HeadMotionRequest::set_allocated_targetjointposition(::naothmessages::DoubleVector2* targetjointposition) {
  delete targetjointposition_;
  targetjointposition_ = targetjointposition;
  if (targetjointposition) {
    set_has_targetjointposition();
  } else {
    clear_has_targetjointposition();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.HeadMotionRequest.targetJointPosition)
}

// optional .naothmessages.DoubleVector2 targetPointInImage = 4;
bool HeadMotionRequest::has_targetpointinimage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HeadMotionRequest::set_has_targetpointinimage() {
  _has_bits_[0] |= 0x00000002u;
}
void HeadMotionRequest::clear_has_targetpointinimage() {
  _has_bits_[0] &= ~0x00000002u;
}
void HeadMotionRequest::clear_targetpointinimage() {
  if (targetpointinimage_ != NULL) targetpointinimage_->::naothmessages::DoubleVector2::Clear();
  clear_has_targetpointinimage();
}
const ::naothmessages::DoubleVector2& HeadMotionRequest::targetpointinimage() const {
  const ::naothmessages::DoubleVector2* p = targetpointinimage_;
  // @@protoc_insertion_point(field_get:naothmessages.HeadMotionRequest.targetPointInImage)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* HeadMotionRequest::mutable_targetpointinimage() {
  set_has_targetpointinimage();
  if (targetpointinimage_ == NULL) {
    targetpointinimage_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.HeadMotionRequest.targetPointInImage)
  return targetpointinimage_;
}
::naothmessages::DoubleVector2* HeadMotionRequest::release_targetpointinimage() {
  // @@protoc_insertion_point(field_release:naothmessages.HeadMotionRequest.targetPointInImage)
  clear_has_targetpointinimage();
  ::naothmessages::DoubleVector2* temp = targetpointinimage_;
  targetpointinimage_ = NULL;
  return temp;
}
void HeadMotionRequest::set_allocated_targetpointinimage(::naothmessages::DoubleVector2* targetpointinimage) {
  delete targetpointinimage_;
  targetpointinimage_ = targetpointinimage;
  if (targetpointinimage) {
    set_has_targetpointinimage();
  } else {
    clear_has_targetpointinimage();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.HeadMotionRequest.targetPointInImage)
}

// optional .naothmessages.DoubleVector3 targetPointInTheWorld = 5;
bool HeadMotionRequest::has_targetpointintheworld() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HeadMotionRequest::set_has_targetpointintheworld() {
  _has_bits_[0] |= 0x00000004u;
}
void HeadMotionRequest::clear_has_targetpointintheworld() {
  _has_bits_[0] &= ~0x00000004u;
}
void HeadMotionRequest::clear_targetpointintheworld() {
  if (targetpointintheworld_ != NULL) targetpointintheworld_->::naothmessages::DoubleVector3::Clear();
  clear_has_targetpointintheworld();
}
const ::naothmessages::DoubleVector3& HeadMotionRequest::targetpointintheworld() const {
  const ::naothmessages::DoubleVector3* p = targetpointintheworld_;
  // @@protoc_insertion_point(field_get:naothmessages.HeadMotionRequest.targetPointInTheWorld)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
::naothmessages::DoubleVector3* HeadMotionRequest::mutable_targetpointintheworld() {
  set_has_targetpointintheworld();
  if (targetpointintheworld_ == NULL) {
    targetpointintheworld_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.HeadMotionRequest.targetPointInTheWorld)
  return targetpointintheworld_;
}
::naothmessages::DoubleVector3* HeadMotionRequest::release_targetpointintheworld() {
  // @@protoc_insertion_point(field_release:naothmessages.HeadMotionRequest.targetPointInTheWorld)
  clear_has_targetpointintheworld();
  ::naothmessages::DoubleVector3* temp = targetpointintheworld_;
  targetpointintheworld_ = NULL;
  return temp;
}
void HeadMotionRequest::set_allocated_targetpointintheworld(::naothmessages::DoubleVector3* targetpointintheworld) {
  delete targetpointintheworld_;
  targetpointintheworld_ = targetpointintheworld;
  if (targetpointintheworld) {
    set_has_targetpointintheworld();
  } else {
    clear_has_targetpointintheworld();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.HeadMotionRequest.targetPointInTheWorld)
}

// optional .naothmessages.DoubleVector3 searchCenter = 6;
bool HeadMotionRequest::has_searchcenter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HeadMotionRequest::set_has_searchcenter() {
  _has_bits_[0] |= 0x00000008u;
}
void HeadMotionRequest::clear_has_searchcenter() {
  _has_bits_[0] &= ~0x00000008u;
}
void HeadMotionRequest::clear_searchcenter() {
  if (searchcenter_ != NULL) searchcenter_->::naothmessages::DoubleVector3::Clear();
  clear_has_searchcenter();
}
const ::naothmessages::DoubleVector3& HeadMotionRequest::searchcenter() const {
  const ::naothmessages::DoubleVector3* p = searchcenter_;
  // @@protoc_insertion_point(field_get:naothmessages.HeadMotionRequest.searchCenter)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
::naothmessages::DoubleVector3* HeadMotionRequest::mutable_searchcenter() {
  set_has_searchcenter();
  if (searchcenter_ == NULL) {
    searchcenter_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.HeadMotionRequest.searchCenter)
  return searchcenter_;
}
::naothmessages::DoubleVector3* HeadMotionRequest::release_searchcenter() {
  // @@protoc_insertion_point(field_release:naothmessages.HeadMotionRequest.searchCenter)
  clear_has_searchcenter();
  ::naothmessages::DoubleVector3* temp = searchcenter_;
  searchcenter_ = NULL;
  return temp;
}
void HeadMotionRequest::set_allocated_searchcenter(::naothmessages::DoubleVector3* searchcenter) {
  delete searchcenter_;
  searchcenter_ = searchcenter;
  if (searchcenter) {
    set_has_searchcenter();
  } else {
    clear_has_searchcenter();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.HeadMotionRequest.searchCenter)
}

// optional .naothmessages.DoubleVector3 searchSize = 7;
bool HeadMotionRequest::has_searchsize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void HeadMotionRequest::set_has_searchsize() {
  _has_bits_[0] |= 0x00000010u;
}
void HeadMotionRequest::clear_has_searchsize() {
  _has_bits_[0] &= ~0x00000010u;
}
void HeadMotionRequest::clear_searchsize() {
  if (searchsize_ != NULL) searchsize_->::naothmessages::DoubleVector3::Clear();
  clear_has_searchsize();
}
const ::naothmessages::DoubleVector3& HeadMotionRequest::searchsize() const {
  const ::naothmessages::DoubleVector3* p = searchsize_;
  // @@protoc_insertion_point(field_get:naothmessages.HeadMotionRequest.searchSize)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
::naothmessages::DoubleVector3* HeadMotionRequest::mutable_searchsize() {
  set_has_searchsize();
  if (searchsize_ == NULL) {
    searchsize_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.HeadMotionRequest.searchSize)
  return searchsize_;
}
::naothmessages::DoubleVector3* HeadMotionRequest::release_searchsize() {
  // @@protoc_insertion_point(field_release:naothmessages.HeadMotionRequest.searchSize)
  clear_has_searchsize();
  ::naothmessages::DoubleVector3* temp = searchsize_;
  searchsize_ = NULL;
  return temp;
}
void HeadMotionRequest::set_allocated_searchsize(::naothmessages::DoubleVector3* searchsize) {
  delete searchsize_;
  searchsize_ = searchsize;
  if (searchsize) {
    set_has_searchsize();
  } else {
    clear_has_searchsize();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.HeadMotionRequest.searchSize)
}

// optional bool searchDirection = 8;
bool HeadMotionRequest::has_searchdirection() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void HeadMotionRequest::set_has_searchdirection() {
  _has_bits_[0] |= 0x00000100u;
}
void HeadMotionRequest::clear_has_searchdirection() {
  _has_bits_[0] &= ~0x00000100u;
}
void HeadMotionRequest::clear_searchdirection() {
  searchdirection_ = false;
  clear_has_searchdirection();
}
bool HeadMotionRequest::searchdirection() const {
  // @@protoc_insertion_point(field_get:naothmessages.HeadMotionRequest.searchDirection)
  return searchdirection_;
}
void HeadMotionRequest::set_searchdirection(bool value) {
  set_has_searchdirection();
  searchdirection_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.HeadMotionRequest.searchDirection)
}

// optional .naothmessages.DoubleVector2 targetPointOnTheGround = 9;
bool HeadMotionRequest::has_targetpointontheground() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void HeadMotionRequest::set_has_targetpointontheground() {
  _has_bits_[0] |= 0x00000020u;
}
void HeadMotionRequest::clear_has_targetpointontheground() {
  _has_bits_[0] &= ~0x00000020u;
}
void HeadMotionRequest::clear_targetpointontheground() {
  if (targetpointontheground_ != NULL) targetpointontheground_->::naothmessages::DoubleVector2::Clear();
  clear_has_targetpointontheground();
}
const ::naothmessages::DoubleVector2& HeadMotionRequest::targetpointontheground() const {
  const ::naothmessages::DoubleVector2* p = targetpointontheground_;
  // @@protoc_insertion_point(field_get:naothmessages.HeadMotionRequest.targetPointOnTheGround)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* HeadMotionRequest::mutable_targetpointontheground() {
  set_has_targetpointontheground();
  if (targetpointontheground_ == NULL) {
    targetpointontheground_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.HeadMotionRequest.targetPointOnTheGround)
  return targetpointontheground_;
}
::naothmessages::DoubleVector2* HeadMotionRequest::release_targetpointontheground() {
  // @@protoc_insertion_point(field_release:naothmessages.HeadMotionRequest.targetPointOnTheGround)
  clear_has_targetpointontheground();
  ::naothmessages::DoubleVector2* temp = targetpointontheground_;
  targetpointontheground_ = NULL;
  return temp;
}
void HeadMotionRequest::set_allocated_targetpointontheground(::naothmessages::DoubleVector2* targetpointontheground) {
  delete targetpointontheground_;
  targetpointontheground_ = targetpointontheground;
  if (targetpointontheground) {
    set_has_targetpointontheground();
  } else {
    clear_has_targetpointontheground();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.HeadMotionRequest.targetPointOnTheGround)
}

// optional uint32 coordinate = 10;
bool HeadMotionRequest::has_coordinate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void HeadMotionRequest::set_has_coordinate() {
  _has_bits_[0] |= 0x00000200u;
}
void HeadMotionRequest::clear_has_coordinate() {
  _has_bits_[0] &= ~0x00000200u;
}
void HeadMotionRequest::clear_coordinate() {
  coordinate_ = 0u;
  clear_has_coordinate();
}
::google::protobuf::uint32 HeadMotionRequest::coordinate() const {
  // @@protoc_insertion_point(field_get:naothmessages.HeadMotionRequest.coordinate)
  return coordinate_;
}
void HeadMotionRequest::set_coordinate(::google::protobuf::uint32 value) {
  set_has_coordinate();
  coordinate_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.HeadMotionRequest.coordinate)
}

// optional double velocity = 11;
bool HeadMotionRequest::has_velocity() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void HeadMotionRequest::set_has_velocity() {
  _has_bits_[0] |= 0x00000400u;
}
void HeadMotionRequest::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000400u;
}
void HeadMotionRequest::clear_velocity() {
  velocity_ = 0;
  clear_has_velocity();
}
double HeadMotionRequest::velocity() const {
  // @@protoc_insertion_point(field_get:naothmessages.HeadMotionRequest.velocity)
  return velocity_;
}
void HeadMotionRequest::set_velocity(double value) {
  set_has_velocity();
  velocity_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.HeadMotionRequest.velocity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StepControlRequest::kStepIDFieldNumber;
const int StepControlRequest::kMoveLeftFootFieldNumber;
const int StepControlRequest::kTargetFieldNumber;
const int StepControlRequest::kTimeFieldNumber;
const int StepControlRequest::kSpeedDirectionFieldNumber;
const int StepControlRequest::kScaleFieldNumber;
const int StepControlRequest::kSteptypeFieldNumber;
const int StepControlRequest::kRestrictionFieldNumber;
const int StepControlRequest::kIsProtectedFieldNumber;
const int StepControlRequest::kStepRequestIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StepControlRequest::StepControlRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.StepControlRequest)
}
StepControlRequest::StepControlRequest(const StepControlRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_target()) {
    target_ = new ::naothmessages::Pose2D(*from.target_);
  } else {
    target_ = NULL;
  }
  ::memcpy(&stepid_, &from.stepid_,
    static_cast<size_t>(reinterpret_cast<char*>(&steprequestid_) -
    reinterpret_cast<char*>(&stepid_)) + sizeof(steprequestid_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.StepControlRequest)
}

void StepControlRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steprequestid_) -
      reinterpret_cast<char*>(&target_)) + sizeof(steprequestid_));
}

StepControlRequest::~StepControlRequest() {
  // @@protoc_insertion_point(destructor:naothmessages.StepControlRequest)
  SharedDtor();
}

void StepControlRequest::SharedDtor() {
  if (this != internal_default_instance()) delete target_;
}

void StepControlRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StepControlRequest::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StepControlRequest& StepControlRequest::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

StepControlRequest* StepControlRequest::New(::google::protobuf::Arena* arena) const {
  StepControlRequest* n = new StepControlRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StepControlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.StepControlRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_target()) {
    GOOGLE_DCHECK(target_ != NULL);
    target_->::naothmessages::Pose2D::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 254u) {
    ::memset(&stepid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steptype_) -
        reinterpret_cast<char*>(&stepid_)) + sizeof(steptype_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&restriction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steprequestid_) -
        reinterpret_cast<char*>(&restriction_)) + sizeof(steprequestid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StepControlRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.StepControlRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 stepID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_stepid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool moveLeftFoot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_moveleftfoot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &moveleftfoot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .naothmessages.Pose2D target = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double speedDirection = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_speeddirection();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speeddirection_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double scale = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .naothmessages.StepControlRequest.StepType steptype = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::naothmessages::StepControlRequest_StepType_IsValid(value)) {
            set_steptype(static_cast< ::naothmessages::StepControlRequest_StepType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .naothmessages.StepControlRequest.RestrictionMode restriction = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::naothmessages::StepControlRequest_RestrictionMode_IsValid(value)) {
            set_restriction(static_cast< ::naothmessages::StepControlRequest_RestrictionMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool isProtected = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_isprotected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isprotected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 stepRequestID = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_steprequestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steprequestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.StepControlRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.StepControlRequest)
  return false;
#undef DO_
}

void StepControlRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.StepControlRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 stepID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stepid(), output);
  }

  // required bool moveLeftFoot = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->moveleftfoot(), output);
  }

  // required .naothmessages.Pose2D target = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->target_, output);
  }

  // required uint32 time = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }

  // required double speedDirection = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->speeddirection(), output);
  }

  // required double scale = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->scale(), output);
  }

  // required .naothmessages.StepControlRequest.StepType steptype = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->steptype(), output);
  }

  // required .naothmessages.StepControlRequest.RestrictionMode restriction = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->restriction(), output);
  }

  // required bool isProtected = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isprotected(), output);
  }

  // required uint32 stepRequestID = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->steprequestid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.StepControlRequest)
}

::google::protobuf::uint8* StepControlRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.StepControlRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 stepID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stepid(), target);
  }

  // required bool moveLeftFoot = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->moveleftfoot(), target);
  }

  // required .naothmessages.Pose2D target = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->target_, deterministic, target);
  }

  // required uint32 time = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }

  // required double speedDirection = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->speeddirection(), target);
  }

  // required double scale = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->scale(), target);
  }

  // required .naothmessages.StepControlRequest.StepType steptype = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->steptype(), target);
  }

  // required .naothmessages.StepControlRequest.RestrictionMode restriction = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->restriction(), target);
  }

  // required bool isProtected = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isprotected(), target);
  }

  // required uint32 stepRequestID = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->steprequestid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.StepControlRequest)
  return target;
}

size_t StepControlRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:naothmessages.StepControlRequest)
  size_t total_size = 0;

  if (has_target()) {
    // required .naothmessages.Pose2D target = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_);
  }

  if (has_stepid()) {
    // required uint32 stepID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stepid());
  }

  if (has_time()) {
    // required uint32 time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());
  }

  if (has_speeddirection()) {
    // required double speedDirection = 5;
    total_size += 1 + 8;
  }

  if (has_scale()) {
    // required double scale = 6;
    total_size += 1 + 8;
  }

  if (has_moveleftfoot()) {
    // required bool moveLeftFoot = 2;
    total_size += 1 + 1;
  }

  if (has_isprotected()) {
    // required bool isProtected = 9;
    total_size += 1 + 1;
  }

  if (has_steptype()) {
    // required .naothmessages.StepControlRequest.StepType steptype = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->steptype());
  }

  if (has_restriction()) {
    // required .naothmessages.StepControlRequest.RestrictionMode restriction = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->restriction());
  }

  if (has_steprequestid()) {
    // required uint32 stepRequestID = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->steprequestid());
  }

  return total_size;
}
size_t StepControlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.StepControlRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required .naothmessages.Pose2D target = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_);

    // required uint32 stepID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stepid());

    // required uint32 time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());

    // required double speedDirection = 5;
    total_size += 1 + 8;

    // required double scale = 6;
    total_size += 1 + 8;

    // required bool moveLeftFoot = 2;
    total_size += 1 + 1;

    // required bool isProtected = 9;
    total_size += 1 + 1;

    // required .naothmessages.StepControlRequest.StepType steptype = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->steptype());

    // required .naothmessages.StepControlRequest.RestrictionMode restriction = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->restriction());

    // required uint32 stepRequestID = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->steprequestid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StepControlRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.StepControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StepControlRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StepControlRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.StepControlRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.StepControlRequest)
    MergeFrom(*source);
  }
}

void StepControlRequest::MergeFrom(const StepControlRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.StepControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_target()->::naothmessages::Pose2D::MergeFrom(from.target());
    }
    if (cached_has_bits & 0x00000002u) {
      stepid_ = from.stepid_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      speeddirection_ = from.speeddirection_;
    }
    if (cached_has_bits & 0x00000010u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000020u) {
      moveleftfoot_ = from.moveleftfoot_;
    }
    if (cached_has_bits & 0x00000040u) {
      isprotected_ = from.isprotected_;
    }
    if (cached_has_bits & 0x00000080u) {
      steptype_ = from.steptype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      restriction_ = from.restriction_;
    }
    if (cached_has_bits & 0x00000200u) {
      steprequestid_ = from.steprequestid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StepControlRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.StepControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepControlRequest::CopyFrom(const StepControlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.StepControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepControlRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  if (has_target()) {
    if (!this->target_->IsInitialized()) return false;
  }
  return true;
}

void StepControlRequest::Swap(StepControlRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StepControlRequest::InternalSwap(StepControlRequest* other) {
  using std::swap;
  swap(target_, other->target_);
  swap(stepid_, other->stepid_);
  swap(time_, other->time_);
  swap(speeddirection_, other->speeddirection_);
  swap(scale_, other->scale_);
  swap(moveleftfoot_, other->moveleftfoot_);
  swap(isprotected_, other->isprotected_);
  swap(steptype_, other->steptype_);
  swap(restriction_, other->restriction_);
  swap(steprequestid_, other->steprequestid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StepControlRequest::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StepControlRequest

// required uint32 stepID = 1;
bool StepControlRequest::has_stepid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StepControlRequest::set_has_stepid() {
  _has_bits_[0] |= 0x00000002u;
}
void StepControlRequest::clear_has_stepid() {
  _has_bits_[0] &= ~0x00000002u;
}
void StepControlRequest::clear_stepid() {
  stepid_ = 0u;
  clear_has_stepid();
}
::google::protobuf::uint32 StepControlRequest::stepid() const {
  // @@protoc_insertion_point(field_get:naothmessages.StepControlRequest.stepID)
  return stepid_;
}
void StepControlRequest::set_stepid(::google::protobuf::uint32 value) {
  set_has_stepid();
  stepid_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.StepControlRequest.stepID)
}

// required bool moveLeftFoot = 2;
bool StepControlRequest::has_moveleftfoot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void StepControlRequest::set_has_moveleftfoot() {
  _has_bits_[0] |= 0x00000020u;
}
void StepControlRequest::clear_has_moveleftfoot() {
  _has_bits_[0] &= ~0x00000020u;
}
void StepControlRequest::clear_moveleftfoot() {
  moveleftfoot_ = false;
  clear_has_moveleftfoot();
}
bool StepControlRequest::moveleftfoot() const {
  // @@protoc_insertion_point(field_get:naothmessages.StepControlRequest.moveLeftFoot)
  return moveleftfoot_;
}
void StepControlRequest::set_moveleftfoot(bool value) {
  set_has_moveleftfoot();
  moveleftfoot_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.StepControlRequest.moveLeftFoot)
}

// required .naothmessages.Pose2D target = 3;
bool StepControlRequest::has_target() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StepControlRequest::set_has_target() {
  _has_bits_[0] |= 0x00000001u;
}
void StepControlRequest::clear_has_target() {
  _has_bits_[0] &= ~0x00000001u;
}
void StepControlRequest::clear_target() {
  if (target_ != NULL) target_->::naothmessages::Pose2D::Clear();
  clear_has_target();
}
const ::naothmessages::Pose2D& StepControlRequest::target() const {
  const ::naothmessages::Pose2D* p = target_;
  // @@protoc_insertion_point(field_get:naothmessages.StepControlRequest.target)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::Pose2D*>(
      &::naothmessages::_Pose2D_default_instance_);
}
::naothmessages::Pose2D* StepControlRequest::mutable_target() {
  set_has_target();
  if (target_ == NULL) {
    target_ = new ::naothmessages::Pose2D;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.StepControlRequest.target)
  return target_;
}
::naothmessages::Pose2D* StepControlRequest::release_target() {
  // @@protoc_insertion_point(field_release:naothmessages.StepControlRequest.target)
  clear_has_target();
  ::naothmessages::Pose2D* temp = target_;
  target_ = NULL;
  return temp;
}
void StepControlRequest::set_allocated_target(::naothmessages::Pose2D* target) {
  delete target_;
  target_ = target;
  if (target) {
    set_has_target();
  } else {
    clear_has_target();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.StepControlRequest.target)
}

// required uint32 time = 4;
bool StepControlRequest::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StepControlRequest::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
void StepControlRequest::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void StepControlRequest::clear_time() {
  time_ = 0u;
  clear_has_time();
}
::google::protobuf::uint32 StepControlRequest::time() const {
  // @@protoc_insertion_point(field_get:naothmessages.StepControlRequest.time)
  return time_;
}
void StepControlRequest::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.StepControlRequest.time)
}

// required double speedDirection = 5;
bool StepControlRequest::has_speeddirection() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StepControlRequest::set_has_speeddirection() {
  _has_bits_[0] |= 0x00000008u;
}
void StepControlRequest::clear_has_speeddirection() {
  _has_bits_[0] &= ~0x00000008u;
}
void StepControlRequest::clear_speeddirection() {
  speeddirection_ = 0;
  clear_has_speeddirection();
}
double StepControlRequest::speeddirection() const {
  // @@protoc_insertion_point(field_get:naothmessages.StepControlRequest.speedDirection)
  return speeddirection_;
}
void StepControlRequest::set_speeddirection(double value) {
  set_has_speeddirection();
  speeddirection_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.StepControlRequest.speedDirection)
}

// required double scale = 6;
bool StepControlRequest::has_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void StepControlRequest::set_has_scale() {
  _has_bits_[0] |= 0x00000010u;
}
void StepControlRequest::clear_has_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
void StepControlRequest::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
double StepControlRequest::scale() const {
  // @@protoc_insertion_point(field_get:naothmessages.StepControlRequest.scale)
  return scale_;
}
void StepControlRequest::set_scale(double value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.StepControlRequest.scale)
}

// required .naothmessages.StepControlRequest.StepType steptype = 7;
bool StepControlRequest::has_steptype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void StepControlRequest::set_has_steptype() {
  _has_bits_[0] |= 0x00000080u;
}
void StepControlRequest::clear_has_steptype() {
  _has_bits_[0] &= ~0x00000080u;
}
void StepControlRequest::clear_steptype() {
  steptype_ = 0;
  clear_has_steptype();
}
::naothmessages::StepControlRequest_StepType StepControlRequest::steptype() const {
  // @@protoc_insertion_point(field_get:naothmessages.StepControlRequest.steptype)
  return static_cast< ::naothmessages::StepControlRequest_StepType >(steptype_);
}
void StepControlRequest::set_steptype(::naothmessages::StepControlRequest_StepType value) {
  assert(::naothmessages::StepControlRequest_StepType_IsValid(value));
  set_has_steptype();
  steptype_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.StepControlRequest.steptype)
}

// required .naothmessages.StepControlRequest.RestrictionMode restriction = 8;
bool StepControlRequest::has_restriction() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void StepControlRequest::set_has_restriction() {
  _has_bits_[0] |= 0x00000100u;
}
void StepControlRequest::clear_has_restriction() {
  _has_bits_[0] &= ~0x00000100u;
}
void StepControlRequest::clear_restriction() {
  restriction_ = 0;
  clear_has_restriction();
}
::naothmessages::StepControlRequest_RestrictionMode StepControlRequest::restriction() const {
  // @@protoc_insertion_point(field_get:naothmessages.StepControlRequest.restriction)
  return static_cast< ::naothmessages::StepControlRequest_RestrictionMode >(restriction_);
}
void StepControlRequest::set_restriction(::naothmessages::StepControlRequest_RestrictionMode value) {
  assert(::naothmessages::StepControlRequest_RestrictionMode_IsValid(value));
  set_has_restriction();
  restriction_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.StepControlRequest.restriction)
}

// required bool isProtected = 9;
bool StepControlRequest::has_isprotected() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void StepControlRequest::set_has_isprotected() {
  _has_bits_[0] |= 0x00000040u;
}
void StepControlRequest::clear_has_isprotected() {
  _has_bits_[0] &= ~0x00000040u;
}
void StepControlRequest::clear_isprotected() {
  isprotected_ = false;
  clear_has_isprotected();
}
bool StepControlRequest::isprotected() const {
  // @@protoc_insertion_point(field_get:naothmessages.StepControlRequest.isProtected)
  return isprotected_;
}
void StepControlRequest::set_isprotected(bool value) {
  set_has_isprotected();
  isprotected_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.StepControlRequest.isProtected)
}

// required uint32 stepRequestID = 10;
bool StepControlRequest::has_steprequestid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void StepControlRequest::set_has_steprequestid() {
  _has_bits_[0] |= 0x00000200u;
}
void StepControlRequest::clear_has_steprequestid() {
  _has_bits_[0] &= ~0x00000200u;
}
void StepControlRequest::clear_steprequestid() {
  steprequestid_ = 0u;
  clear_has_steprequestid();
}
::google::protobuf::uint32 StepControlRequest::steprequestid() const {
  // @@protoc_insertion_point(field_get:naothmessages.StepControlRequest.stepRequestID)
  return steprequestid_;
}
void StepControlRequest::set_steprequestid(::google::protobuf::uint32 value) {
  set_has_steprequestid();
  steprequestid_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.StepControlRequest.stepRequestID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WalkRequest::kCoordinateFieldNumber;
const int WalkRequest::kCharacterFieldNumber;
const int WalkRequest::kTargetFieldNumber;
const int WalkRequest::kStepControlFieldNumber;
const int WalkRequest::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WalkRequest::WalkRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.WalkRequest)
}
WalkRequest::WalkRequest(const WalkRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_target()) {
    target_ = new ::naothmessages::Pose2D(*from.target_);
  } else {
    target_ = NULL;
  }
  if (from.has_stepcontrol()) {
    stepcontrol_ = new ::naothmessages::StepControlRequest(*from.stepcontrol_);
  } else {
    stepcontrol_ = NULL;
  }
  if (from.has_offset()) {
    offset_ = new ::naothmessages::Pose2D(*from.offset_);
  } else {
    offset_ = NULL;
  }
  ::memcpy(&character_, &from.character_,
    static_cast<size_t>(reinterpret_cast<char*>(&coordinate_) -
    reinterpret_cast<char*>(&character_)) + sizeof(coordinate_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.WalkRequest)
}

void WalkRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coordinate_) -
      reinterpret_cast<char*>(&target_)) + sizeof(coordinate_));
}

WalkRequest::~WalkRequest() {
  // @@protoc_insertion_point(destructor:naothmessages.WalkRequest)
  SharedDtor();
}

void WalkRequest::SharedDtor() {
  if (this != internal_default_instance()) delete target_;
  if (this != internal_default_instance()) delete stepcontrol_;
  if (this != internal_default_instance()) delete offset_;
}

void WalkRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WalkRequest::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WalkRequest& WalkRequest::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

WalkRequest* WalkRequest::New(::google::protobuf::Arena* arena) const {
  WalkRequest* n = new WalkRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WalkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.WalkRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(target_ != NULL);
      target_->::naothmessages::Pose2D::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stepcontrol_ != NULL);
      stepcontrol_->::naothmessages::StepControlRequest::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(offset_ != NULL);
      offset_->::naothmessages::Pose2D::Clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&character_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&coordinate_) -
        reinterpret_cast<char*>(&character_)) + sizeof(coordinate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WalkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.WalkRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 coordinate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_coordinate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coordinate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double character = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_character();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &character_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .naothmessages.Pose2D target = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.StepControlRequest stepControl = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stepcontrol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .naothmessages.Pose2D offset = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.WalkRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.WalkRequest)
  return false;
#undef DO_
}

void WalkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.WalkRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 coordinate = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->coordinate(), output);
  }

  // required double character = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->character(), output);
  }

  // required .naothmessages.Pose2D target = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->target_, output);
  }

  // optional .naothmessages.StepControlRequest stepControl = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->stepcontrol_, output);
  }

  // required .naothmessages.Pose2D offset = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->offset_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.WalkRequest)
}

::google::protobuf::uint8* WalkRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.WalkRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 coordinate = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->coordinate(), target);
  }

  // required double character = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->character(), target);
  }

  // required .naothmessages.Pose2D target = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->target_, deterministic, target);
  }

  // optional .naothmessages.StepControlRequest stepControl = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->stepcontrol_, deterministic, target);
  }

  // required .naothmessages.Pose2D offset = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->offset_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.WalkRequest)
  return target;
}

size_t WalkRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:naothmessages.WalkRequest)
  size_t total_size = 0;

  if (has_target()) {
    // required .naothmessages.Pose2D target = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_);
  }

  if (has_offset()) {
    // required .naothmessages.Pose2D offset = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->offset_);
  }

  if (has_character()) {
    // required double character = 2;
    total_size += 1 + 8;
  }

  if (has_coordinate()) {
    // required uint32 coordinate = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coordinate());
  }

  return total_size;
}
size_t WalkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.WalkRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001d) ^ 0x0000001d) == 0) {  // All required fields are present.
    // required .naothmessages.Pose2D target = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_);

    // required .naothmessages.Pose2D offset = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->offset_);

    // required double character = 2;
    total_size += 1 + 8;

    // required uint32 coordinate = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coordinate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .naothmessages.StepControlRequest stepControl = 4;
  if (has_stepcontrol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stepcontrol_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WalkRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.WalkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WalkRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WalkRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.WalkRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.WalkRequest)
    MergeFrom(*source);
  }
}

void WalkRequest::MergeFrom(const WalkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.WalkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_target()->::naothmessages::Pose2D::MergeFrom(from.target());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_stepcontrol()->::naothmessages::StepControlRequest::MergeFrom(from.stepcontrol());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_offset()->::naothmessages::Pose2D::MergeFrom(from.offset());
    }
    if (cached_has_bits & 0x00000008u) {
      character_ = from.character_;
    }
    if (cached_has_bits & 0x00000010u) {
      coordinate_ = from.coordinate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WalkRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.WalkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WalkRequest::CopyFrom(const WalkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.WalkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WalkRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;
  if (has_target()) {
    if (!this->target_->IsInitialized()) return false;
  }
  if (has_stepcontrol()) {
    if (!this->stepcontrol_->IsInitialized()) return false;
  }
  if (has_offset()) {
    if (!this->offset_->IsInitialized()) return false;
  }
  return true;
}

void WalkRequest::Swap(WalkRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WalkRequest::InternalSwap(WalkRequest* other) {
  using std::swap;
  swap(target_, other->target_);
  swap(stepcontrol_, other->stepcontrol_);
  swap(offset_, other->offset_);
  swap(character_, other->character_);
  swap(coordinate_, other->coordinate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WalkRequest::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WalkRequest

// required uint32 coordinate = 1;
bool WalkRequest::has_coordinate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void WalkRequest::set_has_coordinate() {
  _has_bits_[0] |= 0x00000010u;
}
void WalkRequest::clear_has_coordinate() {
  _has_bits_[0] &= ~0x00000010u;
}
void WalkRequest::clear_coordinate() {
  coordinate_ = 0u;
  clear_has_coordinate();
}
::google::protobuf::uint32 WalkRequest::coordinate() const {
  // @@protoc_insertion_point(field_get:naothmessages.WalkRequest.coordinate)
  return coordinate_;
}
void WalkRequest::set_coordinate(::google::protobuf::uint32 value) {
  set_has_coordinate();
  coordinate_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.WalkRequest.coordinate)
}

// required double character = 2;
bool WalkRequest::has_character() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void WalkRequest::set_has_character() {
  _has_bits_[0] |= 0x00000008u;
}
void WalkRequest::clear_has_character() {
  _has_bits_[0] &= ~0x00000008u;
}
void WalkRequest::clear_character() {
  character_ = 0;
  clear_has_character();
}
double WalkRequest::character() const {
  // @@protoc_insertion_point(field_get:naothmessages.WalkRequest.character)
  return character_;
}
void WalkRequest::set_character(double value) {
  set_has_character();
  character_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.WalkRequest.character)
}

// required .naothmessages.Pose2D target = 3;
bool WalkRequest::has_target() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WalkRequest::set_has_target() {
  _has_bits_[0] |= 0x00000001u;
}
void WalkRequest::clear_has_target() {
  _has_bits_[0] &= ~0x00000001u;
}
void WalkRequest::clear_target() {
  if (target_ != NULL) target_->::naothmessages::Pose2D::Clear();
  clear_has_target();
}
const ::naothmessages::Pose2D& WalkRequest::target() const {
  const ::naothmessages::Pose2D* p = target_;
  // @@protoc_insertion_point(field_get:naothmessages.WalkRequest.target)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::Pose2D*>(
      &::naothmessages::_Pose2D_default_instance_);
}
::naothmessages::Pose2D* WalkRequest::mutable_target() {
  set_has_target();
  if (target_ == NULL) {
    target_ = new ::naothmessages::Pose2D;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.WalkRequest.target)
  return target_;
}
::naothmessages::Pose2D* WalkRequest::release_target() {
  // @@protoc_insertion_point(field_release:naothmessages.WalkRequest.target)
  clear_has_target();
  ::naothmessages::Pose2D* temp = target_;
  target_ = NULL;
  return temp;
}
void WalkRequest::set_allocated_target(::naothmessages::Pose2D* target) {
  delete target_;
  target_ = target;
  if (target) {
    set_has_target();
  } else {
    clear_has_target();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.WalkRequest.target)
}

// optional .naothmessages.StepControlRequest stepControl = 4;
bool WalkRequest::has_stepcontrol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WalkRequest::set_has_stepcontrol() {
  _has_bits_[0] |= 0x00000002u;
}
void WalkRequest::clear_has_stepcontrol() {
  _has_bits_[0] &= ~0x00000002u;
}
void WalkRequest::clear_stepcontrol() {
  if (stepcontrol_ != NULL) stepcontrol_->::naothmessages::StepControlRequest::Clear();
  clear_has_stepcontrol();
}
const ::naothmessages::StepControlRequest& WalkRequest::stepcontrol() const {
  const ::naothmessages::StepControlRequest* p = stepcontrol_;
  // @@protoc_insertion_point(field_get:naothmessages.WalkRequest.stepControl)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::StepControlRequest*>(
      &::naothmessages::_StepControlRequest_default_instance_);
}
::naothmessages::StepControlRequest* WalkRequest::mutable_stepcontrol() {
  set_has_stepcontrol();
  if (stepcontrol_ == NULL) {
    stepcontrol_ = new ::naothmessages::StepControlRequest;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.WalkRequest.stepControl)
  return stepcontrol_;
}
::naothmessages::StepControlRequest* WalkRequest::release_stepcontrol() {
  // @@protoc_insertion_point(field_release:naothmessages.WalkRequest.stepControl)
  clear_has_stepcontrol();
  ::naothmessages::StepControlRequest* temp = stepcontrol_;
  stepcontrol_ = NULL;
  return temp;
}
void WalkRequest::set_allocated_stepcontrol(::naothmessages::StepControlRequest* stepcontrol) {
  delete stepcontrol_;
  stepcontrol_ = stepcontrol;
  if (stepcontrol) {
    set_has_stepcontrol();
  } else {
    clear_has_stepcontrol();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.WalkRequest.stepControl)
}

// required .naothmessages.Pose2D offset = 5;
bool WalkRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WalkRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000004u;
}
void WalkRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
void WalkRequest::clear_offset() {
  if (offset_ != NULL) offset_->::naothmessages::Pose2D::Clear();
  clear_has_offset();
}
const ::naothmessages::Pose2D& WalkRequest::offset() const {
  const ::naothmessages::Pose2D* p = offset_;
  // @@protoc_insertion_point(field_get:naothmessages.WalkRequest.offset)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::Pose2D*>(
      &::naothmessages::_Pose2D_default_instance_);
}
::naothmessages::Pose2D* WalkRequest::mutable_offset() {
  set_has_offset();
  if (offset_ == NULL) {
    offset_ = new ::naothmessages::Pose2D;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.WalkRequest.offset)
  return offset_;
}
::naothmessages::Pose2D* WalkRequest::release_offset() {
  // @@protoc_insertion_point(field_release:naothmessages.WalkRequest.offset)
  clear_has_offset();
  ::naothmessages::Pose2D* temp = offset_;
  offset_ = NULL;
  return temp;
}
void WalkRequest::set_allocated_offset(::naothmessages::Pose2D* offset) {
  delete offset_;
  offset_ = offset;
  if (offset) {
    set_has_offset();
  } else {
    clear_has_offset();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.WalkRequest.offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KickRequest::kKickPointFieldNumber;
const int KickRequest::kKickDirectionFieldNumber;
const int KickRequest::kKickFootFieldNumber;
const int KickRequest::kFinishKickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KickRequest::KickRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.KickRequest)
}
KickRequest::KickRequest(const KickRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_kickpoint()) {
    kickpoint_ = new ::naothmessages::DoubleVector3(*from.kickpoint_);
  } else {
    kickpoint_ = NULL;
  }
  ::memcpy(&kickdirection_, &from.kickdirection_,
    static_cast<size_t>(reinterpret_cast<char*>(&finishkick_) -
    reinterpret_cast<char*>(&kickdirection_)) + sizeof(finishkick_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.KickRequest)
}

void KickRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&kickpoint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finishkick_) -
      reinterpret_cast<char*>(&kickpoint_)) + sizeof(finishkick_));
}

KickRequest::~KickRequest() {
  // @@protoc_insertion_point(destructor:naothmessages.KickRequest)
  SharedDtor();
}

void KickRequest::SharedDtor() {
  if (this != internal_default_instance()) delete kickpoint_;
}

void KickRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickRequest::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KickRequest& KickRequest::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

KickRequest* KickRequest::New(::google::protobuf::Arena* arena) const {
  KickRequest* n = new KickRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KickRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.KickRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_kickpoint()) {
    GOOGLE_DCHECK(kickpoint_ != NULL);
    kickpoint_->::naothmessages::DoubleVector3::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 14u) {
    ::memset(&kickdirection_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&finishkick_) -
        reinterpret_cast<char*>(&kickdirection_)) + sizeof(finishkick_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KickRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.KickRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .naothmessages.DoubleVector3 kickPoint = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kickpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double kickDirection = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_kickdirection();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kickdirection_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 kickFoot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_kickfoot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kickfoot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool finishKick = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_finishkick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finishkick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.KickRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.KickRequest)
  return false;
#undef DO_
}

void KickRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.KickRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.DoubleVector3 kickPoint = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->kickpoint_, output);
  }

  // required double kickDirection = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->kickdirection(), output);
  }

  // required int32 kickFoot = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->kickfoot(), output);
  }

  // required bool finishKick = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->finishkick(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.KickRequest)
}

::google::protobuf::uint8* KickRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.KickRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.DoubleVector3 kickPoint = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->kickpoint_, deterministic, target);
  }

  // required double kickDirection = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->kickdirection(), target);
  }

  // required int32 kickFoot = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->kickfoot(), target);
  }

  // required bool finishKick = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->finishkick(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.KickRequest)
  return target;
}

size_t KickRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:naothmessages.KickRequest)
  size_t total_size = 0;

  if (has_kickpoint()) {
    // required .naothmessages.DoubleVector3 kickPoint = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kickpoint_);
  }

  if (has_kickdirection()) {
    // required double kickDirection = 2;
    total_size += 1 + 8;
  }

  if (has_kickfoot()) {
    // required int32 kickFoot = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->kickfoot());
  }

  if (has_finishkick()) {
    // required bool finishKick = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t KickRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.KickRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .naothmessages.DoubleVector3 kickPoint = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kickpoint_);

    // required double kickDirection = 2;
    total_size += 1 + 8;

    // required int32 kickFoot = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->kickfoot());

    // required bool finishKick = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.KickRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KickRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KickRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.KickRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.KickRequest)
    MergeFrom(*source);
  }
}

void KickRequest::MergeFrom(const KickRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.KickRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_kickpoint()->::naothmessages::DoubleVector3::MergeFrom(from.kickpoint());
    }
    if (cached_has_bits & 0x00000002u) {
      kickdirection_ = from.kickdirection_;
    }
    if (cached_has_bits & 0x00000004u) {
      kickfoot_ = from.kickfoot_;
    }
    if (cached_has_bits & 0x00000008u) {
      finishkick_ = from.finishkick_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KickRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.KickRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickRequest::CopyFrom(const KickRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.KickRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_kickpoint()) {
    if (!this->kickpoint_->IsInitialized()) return false;
  }
  return true;
}

void KickRequest::Swap(KickRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KickRequest::InternalSwap(KickRequest* other) {
  using std::swap;
  swap(kickpoint_, other->kickpoint_);
  swap(kickdirection_, other->kickdirection_);
  swap(kickfoot_, other->kickfoot_);
  swap(finishkick_, other->finishkick_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KickRequest::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KickRequest

// required .naothmessages.DoubleVector3 kickPoint = 1;
bool KickRequest::has_kickpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KickRequest::set_has_kickpoint() {
  _has_bits_[0] |= 0x00000001u;
}
void KickRequest::clear_has_kickpoint() {
  _has_bits_[0] &= ~0x00000001u;
}
void KickRequest::clear_kickpoint() {
  if (kickpoint_ != NULL) kickpoint_->::naothmessages::DoubleVector3::Clear();
  clear_has_kickpoint();
}
const ::naothmessages::DoubleVector3& KickRequest::kickpoint() const {
  const ::naothmessages::DoubleVector3* p = kickpoint_;
  // @@protoc_insertion_point(field_get:naothmessages.KickRequest.kickPoint)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
::naothmessages::DoubleVector3* KickRequest::mutable_kickpoint() {
  set_has_kickpoint();
  if (kickpoint_ == NULL) {
    kickpoint_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.KickRequest.kickPoint)
  return kickpoint_;
}
::naothmessages::DoubleVector3* KickRequest::release_kickpoint() {
  // @@protoc_insertion_point(field_release:naothmessages.KickRequest.kickPoint)
  clear_has_kickpoint();
  ::naothmessages::DoubleVector3* temp = kickpoint_;
  kickpoint_ = NULL;
  return temp;
}
void KickRequest::set_allocated_kickpoint(::naothmessages::DoubleVector3* kickpoint) {
  delete kickpoint_;
  kickpoint_ = kickpoint;
  if (kickpoint) {
    set_has_kickpoint();
  } else {
    clear_has_kickpoint();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.KickRequest.kickPoint)
}

// required double kickDirection = 2;
bool KickRequest::has_kickdirection() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KickRequest::set_has_kickdirection() {
  _has_bits_[0] |= 0x00000002u;
}
void KickRequest::clear_has_kickdirection() {
  _has_bits_[0] &= ~0x00000002u;
}
void KickRequest::clear_kickdirection() {
  kickdirection_ = 0;
  clear_has_kickdirection();
}
double KickRequest::kickdirection() const {
  // @@protoc_insertion_point(field_get:naothmessages.KickRequest.kickDirection)
  return kickdirection_;
}
void KickRequest::set_kickdirection(double value) {
  set_has_kickdirection();
  kickdirection_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.KickRequest.kickDirection)
}

// required int32 kickFoot = 3;
bool KickRequest::has_kickfoot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void KickRequest::set_has_kickfoot() {
  _has_bits_[0] |= 0x00000004u;
}
void KickRequest::clear_has_kickfoot() {
  _has_bits_[0] &= ~0x00000004u;
}
void KickRequest::clear_kickfoot() {
  kickfoot_ = 0;
  clear_has_kickfoot();
}
::google::protobuf::int32 KickRequest::kickfoot() const {
  // @@protoc_insertion_point(field_get:naothmessages.KickRequest.kickFoot)
  return kickfoot_;
}
void KickRequest::set_kickfoot(::google::protobuf::int32 value) {
  set_has_kickfoot();
  kickfoot_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.KickRequest.kickFoot)
}

// required bool finishKick = 4;
bool KickRequest::has_finishkick() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void KickRequest::set_has_finishkick() {
  _has_bits_[0] |= 0x00000008u;
}
void KickRequest::clear_has_finishkick() {
  _has_bits_[0] &= ~0x00000008u;
}
void KickRequest::clear_finishkick() {
  finishkick_ = false;
  clear_has_finishkick();
}
bool KickRequest::finishkick() const {
  // @@protoc_insertion_point(field_get:naothmessages.KickRequest.finishKick)
  return finishkick_;
}
void KickRequest::set_finishkick(bool value) {
  set_has_finishkick();
  finishkick_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.KickRequest.finishKick)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraspRequest::kGraspingPointFieldNumber;
const int GraspRequest::kGraspingStateFieldNumber;
const int GraspRequest::kGraspDistStateFieldNumber;
const int GraspRequest::kGraspStiffStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraspRequest::GraspRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.GraspRequest)
}
GraspRequest::GraspRequest(const GraspRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_graspingpoint()) {
    graspingpoint_ = new ::naothmessages::DoubleVector3(*from.graspingpoint_);
  } else {
    graspingpoint_ = NULL;
  }
  ::memcpy(&graspingstate_, &from.graspingstate_,
    static_cast<size_t>(reinterpret_cast<char*>(&graspstiffstate_) -
    reinterpret_cast<char*>(&graspingstate_)) + sizeof(graspstiffstate_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.GraspRequest)
}

void GraspRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&graspingpoint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&graspstiffstate_) -
      reinterpret_cast<char*>(&graspingpoint_)) + sizeof(graspstiffstate_));
}

GraspRequest::~GraspRequest() {
  // @@protoc_insertion_point(destructor:naothmessages.GraspRequest)
  SharedDtor();
}

void GraspRequest::SharedDtor() {
  if (this != internal_default_instance()) delete graspingpoint_;
}

void GraspRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GraspRequest::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GraspRequest& GraspRequest::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

GraspRequest* GraspRequest::New(::google::protobuf::Arena* arena) const {
  GraspRequest* n = new GraspRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GraspRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.GraspRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_graspingpoint()) {
    GOOGLE_DCHECK(graspingpoint_ != NULL);
    graspingpoint_->::naothmessages::DoubleVector3::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 14u) {
    ::memset(&graspingstate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&graspstiffstate_) -
        reinterpret_cast<char*>(&graspingstate_)) + sizeof(graspstiffstate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GraspRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.GraspRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .naothmessages.DoubleVector3 graspingPoint = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_graspingpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 graspingState = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_graspingstate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &graspingstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 graspDistState = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_graspdiststate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &graspdiststate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 graspStiffState = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_graspstiffstate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &graspstiffstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.GraspRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.GraspRequest)
  return false;
#undef DO_
}

void GraspRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.GraspRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.DoubleVector3 graspingPoint = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->graspingpoint_, output);
  }

  // required uint32 graspingState = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->graspingstate(), output);
  }

  // required uint32 graspDistState = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->graspdiststate(), output);
  }

  // required uint32 graspStiffState = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->graspstiffstate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.GraspRequest)
}

::google::protobuf::uint8* GraspRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.GraspRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.DoubleVector3 graspingPoint = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->graspingpoint_, deterministic, target);
  }

  // required uint32 graspingState = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->graspingstate(), target);
  }

  // required uint32 graspDistState = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->graspdiststate(), target);
  }

  // required uint32 graspStiffState = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->graspstiffstate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.GraspRequest)
  return target;
}

size_t GraspRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:naothmessages.GraspRequest)
  size_t total_size = 0;

  if (has_graspingpoint()) {
    // required .naothmessages.DoubleVector3 graspingPoint = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->graspingpoint_);
  }

  if (has_graspingstate()) {
    // required uint32 graspingState = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->graspingstate());
  }

  if (has_graspdiststate()) {
    // required uint32 graspDistState = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->graspdiststate());
  }

  if (has_graspstiffstate()) {
    // required uint32 graspStiffState = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->graspstiffstate());
  }

  return total_size;
}
size_t GraspRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.GraspRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .naothmessages.DoubleVector3 graspingPoint = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->graspingpoint_);

    // required uint32 graspingState = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->graspingstate());

    // required uint32 graspDistState = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->graspdiststate());

    // required uint32 graspStiffState = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->graspstiffstate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraspRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.GraspRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GraspRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GraspRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.GraspRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.GraspRequest)
    MergeFrom(*source);
  }
}

void GraspRequest::MergeFrom(const GraspRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.GraspRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_graspingpoint()->::naothmessages::DoubleVector3::MergeFrom(from.graspingpoint());
    }
    if (cached_has_bits & 0x00000002u) {
      graspingstate_ = from.graspingstate_;
    }
    if (cached_has_bits & 0x00000004u) {
      graspdiststate_ = from.graspdiststate_;
    }
    if (cached_has_bits & 0x00000008u) {
      graspstiffstate_ = from.graspstiffstate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GraspRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.GraspRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraspRequest::CopyFrom(const GraspRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.GraspRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraspRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_graspingpoint()) {
    if (!this->graspingpoint_->IsInitialized()) return false;
  }
  return true;
}

void GraspRequest::Swap(GraspRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GraspRequest::InternalSwap(GraspRequest* other) {
  using std::swap;
  swap(graspingpoint_, other->graspingpoint_);
  swap(graspingstate_, other->graspingstate_);
  swap(graspdiststate_, other->graspdiststate_);
  swap(graspstiffstate_, other->graspstiffstate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GraspRequest::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GraspRequest

// required .naothmessages.DoubleVector3 graspingPoint = 1;
bool GraspRequest::has_graspingpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GraspRequest::set_has_graspingpoint() {
  _has_bits_[0] |= 0x00000001u;
}
void GraspRequest::clear_has_graspingpoint() {
  _has_bits_[0] &= ~0x00000001u;
}
void GraspRequest::clear_graspingpoint() {
  if (graspingpoint_ != NULL) graspingpoint_->::naothmessages::DoubleVector3::Clear();
  clear_has_graspingpoint();
}
const ::naothmessages::DoubleVector3& GraspRequest::graspingpoint() const {
  const ::naothmessages::DoubleVector3* p = graspingpoint_;
  // @@protoc_insertion_point(field_get:naothmessages.GraspRequest.graspingPoint)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
::naothmessages::DoubleVector3* GraspRequest::mutable_graspingpoint() {
  set_has_graspingpoint();
  if (graspingpoint_ == NULL) {
    graspingpoint_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.GraspRequest.graspingPoint)
  return graspingpoint_;
}
::naothmessages::DoubleVector3* GraspRequest::release_graspingpoint() {
  // @@protoc_insertion_point(field_release:naothmessages.GraspRequest.graspingPoint)
  clear_has_graspingpoint();
  ::naothmessages::DoubleVector3* temp = graspingpoint_;
  graspingpoint_ = NULL;
  return temp;
}
void GraspRequest::set_allocated_graspingpoint(::naothmessages::DoubleVector3* graspingpoint) {
  delete graspingpoint_;
  graspingpoint_ = graspingpoint;
  if (graspingpoint) {
    set_has_graspingpoint();
  } else {
    clear_has_graspingpoint();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.GraspRequest.graspingPoint)
}

// required uint32 graspingState = 2;
bool GraspRequest::has_graspingstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GraspRequest::set_has_graspingstate() {
  _has_bits_[0] |= 0x00000002u;
}
void GraspRequest::clear_has_graspingstate() {
  _has_bits_[0] &= ~0x00000002u;
}
void GraspRequest::clear_graspingstate() {
  graspingstate_ = 0u;
  clear_has_graspingstate();
}
::google::protobuf::uint32 GraspRequest::graspingstate() const {
  // @@protoc_insertion_point(field_get:naothmessages.GraspRequest.graspingState)
  return graspingstate_;
}
void GraspRequest::set_graspingstate(::google::protobuf::uint32 value) {
  set_has_graspingstate();
  graspingstate_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.GraspRequest.graspingState)
}

// required uint32 graspDistState = 3;
bool GraspRequest::has_graspdiststate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GraspRequest::set_has_graspdiststate() {
  _has_bits_[0] |= 0x00000004u;
}
void GraspRequest::clear_has_graspdiststate() {
  _has_bits_[0] &= ~0x00000004u;
}
void GraspRequest::clear_graspdiststate() {
  graspdiststate_ = 0u;
  clear_has_graspdiststate();
}
::google::protobuf::uint32 GraspRequest::graspdiststate() const {
  // @@protoc_insertion_point(field_get:naothmessages.GraspRequest.graspDistState)
  return graspdiststate_;
}
void GraspRequest::set_graspdiststate(::google::protobuf::uint32 value) {
  set_has_graspdiststate();
  graspdiststate_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.GraspRequest.graspDistState)
}

// required uint32 graspStiffState = 4;
bool GraspRequest::has_graspstiffstate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GraspRequest::set_has_graspstiffstate() {
  _has_bits_[0] |= 0x00000008u;
}
void GraspRequest::clear_has_graspstiffstate() {
  _has_bits_[0] &= ~0x00000008u;
}
void GraspRequest::clear_graspstiffstate() {
  graspstiffstate_ = 0u;
  clear_has_graspstiffstate();
}
::google::protobuf::uint32 GraspRequest::graspstiffstate() const {
  // @@protoc_insertion_point(field_get:naothmessages.GraspRequest.graspStiffState)
  return graspstiffstate_;
}
void GraspRequest::set_graspstiffstate(::google::protobuf::uint32 value) {
  set_has_graspstiffstate();
  graspstiffstate_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.GraspRequest.graspStiffState)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArmMotionRequest::kIdFieldNumber;
const int ArmMotionRequest::kLShoulderPositionFieldNumber;
const int ArmMotionRequest::kLShoulderStiffnessFieldNumber;
const int ArmMotionRequest::kLElbowPositionFieldNumber;
const int ArmMotionRequest::kLElbowStiffnessFieldNumber;
const int ArmMotionRequest::kRShoulderPositionFieldNumber;
const int ArmMotionRequest::kRShoulderStiffnessFieldNumber;
const int ArmMotionRequest::kRElbowPositionFieldNumber;
const int ArmMotionRequest::kRElbowStiffnessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArmMotionRequest::ArmMotionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.ArmMotionRequest)
}
ArmMotionRequest::ArmMotionRequest(const ArmMotionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lshoulderposition()) {
    lshoulderposition_ = new ::naothmessages::DoubleVector2(*from.lshoulderposition_);
  } else {
    lshoulderposition_ = NULL;
  }
  if (from.has_lshoulderstiffness()) {
    lshoulderstiffness_ = new ::naothmessages::DoubleVector2(*from.lshoulderstiffness_);
  } else {
    lshoulderstiffness_ = NULL;
  }
  if (from.has_lelbowposition()) {
    lelbowposition_ = new ::naothmessages::DoubleVector2(*from.lelbowposition_);
  } else {
    lelbowposition_ = NULL;
  }
  if (from.has_lelbowstiffness()) {
    lelbowstiffness_ = new ::naothmessages::DoubleVector2(*from.lelbowstiffness_);
  } else {
    lelbowstiffness_ = NULL;
  }
  if (from.has_rshoulderposition()) {
    rshoulderposition_ = new ::naothmessages::DoubleVector2(*from.rshoulderposition_);
  } else {
    rshoulderposition_ = NULL;
  }
  if (from.has_rshoulderstiffness()) {
    rshoulderstiffness_ = new ::naothmessages::DoubleVector2(*from.rshoulderstiffness_);
  } else {
    rshoulderstiffness_ = NULL;
  }
  if (from.has_relbowposition()) {
    relbowposition_ = new ::naothmessages::DoubleVector2(*from.relbowposition_);
  } else {
    relbowposition_ = NULL;
  }
  if (from.has_relbowstiffness()) {
    relbowstiffness_ = new ::naothmessages::DoubleVector2(*from.relbowstiffness_);
  } else {
    relbowstiffness_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:naothmessages.ArmMotionRequest)
}

void ArmMotionRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&lshoulderposition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&lshoulderposition_)) + sizeof(id_));
}

ArmMotionRequest::~ArmMotionRequest() {
  // @@protoc_insertion_point(destructor:naothmessages.ArmMotionRequest)
  SharedDtor();
}

void ArmMotionRequest::SharedDtor() {
  if (this != internal_default_instance()) delete lshoulderposition_;
  if (this != internal_default_instance()) delete lshoulderstiffness_;
  if (this != internal_default_instance()) delete lelbowposition_;
  if (this != internal_default_instance()) delete lelbowstiffness_;
  if (this != internal_default_instance()) delete rshoulderposition_;
  if (this != internal_default_instance()) delete rshoulderstiffness_;
  if (this != internal_default_instance()) delete relbowposition_;
  if (this != internal_default_instance()) delete relbowstiffness_;
}

void ArmMotionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArmMotionRequest::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ArmMotionRequest& ArmMotionRequest::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

ArmMotionRequest* ArmMotionRequest::New(::google::protobuf::Arena* arena) const {
  ArmMotionRequest* n = new ArmMotionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ArmMotionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.ArmMotionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(lshoulderposition_ != NULL);
      lshoulderposition_->::naothmessages::DoubleVector2::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lshoulderstiffness_ != NULL);
      lshoulderstiffness_->::naothmessages::DoubleVector2::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(lelbowposition_ != NULL);
      lelbowposition_->::naothmessages::DoubleVector2::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(lelbowstiffness_ != NULL);
      lelbowstiffness_->::naothmessages::DoubleVector2::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(rshoulderposition_ != NULL);
      rshoulderposition_->::naothmessages::DoubleVector2::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(rshoulderstiffness_ != NULL);
      rshoulderstiffness_->::naothmessages::DoubleVector2::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(relbowposition_ != NULL);
      relbowposition_->::naothmessages::DoubleVector2::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(relbowstiffness_ != NULL);
      relbowstiffness_->::naothmessages::DoubleVector2::Clear();
    }
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ArmMotionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.ArmMotionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector2 lShoulderPosition = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lshoulderposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector2 lShoulderStiffness = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lshoulderstiffness()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector2 lElbowPosition = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lelbowposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector2 lElbowStiffness = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lelbowstiffness()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector2 rShoulderPosition = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rshoulderposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector2 rShoulderStiffness = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rshoulderstiffness()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector2 rElbowPosition = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relbowposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector2 rElbowStiffness = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relbowstiffness()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.ArmMotionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.ArmMotionRequest)
  return false;
#undef DO_
}

void ArmMotionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.ArmMotionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .naothmessages.DoubleVector2 lShoulderPosition = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->lshoulderposition_, output);
  }

  // optional .naothmessages.DoubleVector2 lShoulderStiffness = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->lshoulderstiffness_, output);
  }

  // optional .naothmessages.DoubleVector2 lElbowPosition = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->lelbowposition_, output);
  }

  // optional .naothmessages.DoubleVector2 lElbowStiffness = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->lelbowstiffness_, output);
  }

  // optional .naothmessages.DoubleVector2 rShoulderPosition = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->rshoulderposition_, output);
  }

  // optional .naothmessages.DoubleVector2 rShoulderStiffness = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->rshoulderstiffness_, output);
  }

  // optional .naothmessages.DoubleVector2 rElbowPosition = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->relbowposition_, output);
  }

  // optional .naothmessages.DoubleVector2 rElbowStiffness = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->relbowstiffness_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.ArmMotionRequest)
}

::google::protobuf::uint8* ArmMotionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.ArmMotionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .naothmessages.DoubleVector2 lShoulderPosition = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->lshoulderposition_, deterministic, target);
  }

  // optional .naothmessages.DoubleVector2 lShoulderStiffness = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->lshoulderstiffness_, deterministic, target);
  }

  // optional .naothmessages.DoubleVector2 lElbowPosition = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->lelbowposition_, deterministic, target);
  }

  // optional .naothmessages.DoubleVector2 lElbowStiffness = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->lelbowstiffness_, deterministic, target);
  }

  // optional .naothmessages.DoubleVector2 rShoulderPosition = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->rshoulderposition_, deterministic, target);
  }

  // optional .naothmessages.DoubleVector2 rShoulderStiffness = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->rshoulderstiffness_, deterministic, target);
  }

  // optional .naothmessages.DoubleVector2 rElbowPosition = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->relbowposition_, deterministic, target);
  }

  // optional .naothmessages.DoubleVector2 rElbowStiffness = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->relbowstiffness_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.ArmMotionRequest)
  return target;
}

size_t ArmMotionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.ArmMotionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .naothmessages.DoubleVector2 lShoulderPosition = 2;
    if (has_lshoulderposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lshoulderposition_);
    }

    // optional .naothmessages.DoubleVector2 lShoulderStiffness = 3;
    if (has_lshoulderstiffness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lshoulderstiffness_);
    }

    // optional .naothmessages.DoubleVector2 lElbowPosition = 4;
    if (has_lelbowposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lelbowposition_);
    }

    // optional .naothmessages.DoubleVector2 lElbowStiffness = 5;
    if (has_lelbowstiffness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lelbowstiffness_);
    }

    // optional .naothmessages.DoubleVector2 rShoulderPosition = 6;
    if (has_rshoulderposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rshoulderposition_);
    }

    // optional .naothmessages.DoubleVector2 rShoulderStiffness = 7;
    if (has_rshoulderstiffness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rshoulderstiffness_);
    }

    // optional .naothmessages.DoubleVector2 rElbowPosition = 8;
    if (has_relbowposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->relbowposition_);
    }

    // optional .naothmessages.DoubleVector2 rElbowStiffness = 9;
    if (has_relbowstiffness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->relbowstiffness_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArmMotionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.ArmMotionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ArmMotionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ArmMotionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.ArmMotionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.ArmMotionRequest)
    MergeFrom(*source);
  }
}

void ArmMotionRequest::MergeFrom(const ArmMotionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.ArmMotionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_lshoulderposition()->::naothmessages::DoubleVector2::MergeFrom(from.lshoulderposition());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_lshoulderstiffness()->::naothmessages::DoubleVector2::MergeFrom(from.lshoulderstiffness());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_lelbowposition()->::naothmessages::DoubleVector2::MergeFrom(from.lelbowposition());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_lelbowstiffness()->::naothmessages::DoubleVector2::MergeFrom(from.lelbowstiffness());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_rshoulderposition()->::naothmessages::DoubleVector2::MergeFrom(from.rshoulderposition());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_rshoulderstiffness()->::naothmessages::DoubleVector2::MergeFrom(from.rshoulderstiffness());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_relbowposition()->::naothmessages::DoubleVector2::MergeFrom(from.relbowposition());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_relbowstiffness()->::naothmessages::DoubleVector2::MergeFrom(from.relbowstiffness());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    set_id(from.id());
  }
}

void ArmMotionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.ArmMotionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArmMotionRequest::CopyFrom(const ArmMotionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.ArmMotionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArmMotionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000100) != 0x00000100) return false;
  if (has_lshoulderposition()) {
    if (!this->lshoulderposition_->IsInitialized()) return false;
  }
  if (has_lshoulderstiffness()) {
    if (!this->lshoulderstiffness_->IsInitialized()) return false;
  }
  if (has_lelbowposition()) {
    if (!this->lelbowposition_->IsInitialized()) return false;
  }
  if (has_lelbowstiffness()) {
    if (!this->lelbowstiffness_->IsInitialized()) return false;
  }
  if (has_rshoulderposition()) {
    if (!this->rshoulderposition_->IsInitialized()) return false;
  }
  if (has_rshoulderstiffness()) {
    if (!this->rshoulderstiffness_->IsInitialized()) return false;
  }
  if (has_relbowposition()) {
    if (!this->relbowposition_->IsInitialized()) return false;
  }
  if (has_relbowstiffness()) {
    if (!this->relbowstiffness_->IsInitialized()) return false;
  }
  return true;
}

void ArmMotionRequest::Swap(ArmMotionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArmMotionRequest::InternalSwap(ArmMotionRequest* other) {
  using std::swap;
  swap(lshoulderposition_, other->lshoulderposition_);
  swap(lshoulderstiffness_, other->lshoulderstiffness_);
  swap(lelbowposition_, other->lelbowposition_);
  swap(lelbowstiffness_, other->lelbowstiffness_);
  swap(rshoulderposition_, other->rshoulderposition_);
  swap(rshoulderstiffness_, other->rshoulderstiffness_);
  swap(relbowposition_, other->relbowposition_);
  swap(relbowstiffness_, other->relbowstiffness_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ArmMotionRequest::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ArmMotionRequest

// required uint32 id = 1;
bool ArmMotionRequest::has_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ArmMotionRequest::set_has_id() {
  _has_bits_[0] |= 0x00000100u;
}
void ArmMotionRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void ArmMotionRequest::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 ArmMotionRequest::id() const {
  // @@protoc_insertion_point(field_get:naothmessages.ArmMotionRequest.id)
  return id_;
}
void ArmMotionRequest::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.ArmMotionRequest.id)
}

// optional .naothmessages.DoubleVector2 lShoulderPosition = 2;
bool ArmMotionRequest::has_lshoulderposition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ArmMotionRequest::set_has_lshoulderposition() {
  _has_bits_[0] |= 0x00000001u;
}
void ArmMotionRequest::clear_has_lshoulderposition() {
  _has_bits_[0] &= ~0x00000001u;
}
void ArmMotionRequest::clear_lshoulderposition() {
  if (lshoulderposition_ != NULL) lshoulderposition_->::naothmessages::DoubleVector2::Clear();
  clear_has_lshoulderposition();
}
const ::naothmessages::DoubleVector2& ArmMotionRequest::lshoulderposition() const {
  const ::naothmessages::DoubleVector2* p = lshoulderposition_;
  // @@protoc_insertion_point(field_get:naothmessages.ArmMotionRequest.lShoulderPosition)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* ArmMotionRequest::mutable_lshoulderposition() {
  set_has_lshoulderposition();
  if (lshoulderposition_ == NULL) {
    lshoulderposition_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.ArmMotionRequest.lShoulderPosition)
  return lshoulderposition_;
}
::naothmessages::DoubleVector2* ArmMotionRequest::release_lshoulderposition() {
  // @@protoc_insertion_point(field_release:naothmessages.ArmMotionRequest.lShoulderPosition)
  clear_has_lshoulderposition();
  ::naothmessages::DoubleVector2* temp = lshoulderposition_;
  lshoulderposition_ = NULL;
  return temp;
}
void ArmMotionRequest::set_allocated_lshoulderposition(::naothmessages::DoubleVector2* lshoulderposition) {
  delete lshoulderposition_;
  lshoulderposition_ = lshoulderposition;
  if (lshoulderposition) {
    set_has_lshoulderposition();
  } else {
    clear_has_lshoulderposition();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.ArmMotionRequest.lShoulderPosition)
}

// optional .naothmessages.DoubleVector2 lShoulderStiffness = 3;
bool ArmMotionRequest::has_lshoulderstiffness() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ArmMotionRequest::set_has_lshoulderstiffness() {
  _has_bits_[0] |= 0x00000002u;
}
void ArmMotionRequest::clear_has_lshoulderstiffness() {
  _has_bits_[0] &= ~0x00000002u;
}
void ArmMotionRequest::clear_lshoulderstiffness() {
  if (lshoulderstiffness_ != NULL) lshoulderstiffness_->::naothmessages::DoubleVector2::Clear();
  clear_has_lshoulderstiffness();
}
const ::naothmessages::DoubleVector2& ArmMotionRequest::lshoulderstiffness() const {
  const ::naothmessages::DoubleVector2* p = lshoulderstiffness_;
  // @@protoc_insertion_point(field_get:naothmessages.ArmMotionRequest.lShoulderStiffness)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* ArmMotionRequest::mutable_lshoulderstiffness() {
  set_has_lshoulderstiffness();
  if (lshoulderstiffness_ == NULL) {
    lshoulderstiffness_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.ArmMotionRequest.lShoulderStiffness)
  return lshoulderstiffness_;
}
::naothmessages::DoubleVector2* ArmMotionRequest::release_lshoulderstiffness() {
  // @@protoc_insertion_point(field_release:naothmessages.ArmMotionRequest.lShoulderStiffness)
  clear_has_lshoulderstiffness();
  ::naothmessages::DoubleVector2* temp = lshoulderstiffness_;
  lshoulderstiffness_ = NULL;
  return temp;
}
void ArmMotionRequest::set_allocated_lshoulderstiffness(::naothmessages::DoubleVector2* lshoulderstiffness) {
  delete lshoulderstiffness_;
  lshoulderstiffness_ = lshoulderstiffness;
  if (lshoulderstiffness) {
    set_has_lshoulderstiffness();
  } else {
    clear_has_lshoulderstiffness();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.ArmMotionRequest.lShoulderStiffness)
}

// optional .naothmessages.DoubleVector2 lElbowPosition = 4;
bool ArmMotionRequest::has_lelbowposition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ArmMotionRequest::set_has_lelbowposition() {
  _has_bits_[0] |= 0x00000004u;
}
void ArmMotionRequest::clear_has_lelbowposition() {
  _has_bits_[0] &= ~0x00000004u;
}
void ArmMotionRequest::clear_lelbowposition() {
  if (lelbowposition_ != NULL) lelbowposition_->::naothmessages::DoubleVector2::Clear();
  clear_has_lelbowposition();
}
const ::naothmessages::DoubleVector2& ArmMotionRequest::lelbowposition() const {
  const ::naothmessages::DoubleVector2* p = lelbowposition_;
  // @@protoc_insertion_point(field_get:naothmessages.ArmMotionRequest.lElbowPosition)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* ArmMotionRequest::mutable_lelbowposition() {
  set_has_lelbowposition();
  if (lelbowposition_ == NULL) {
    lelbowposition_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.ArmMotionRequest.lElbowPosition)
  return lelbowposition_;
}
::naothmessages::DoubleVector2* ArmMotionRequest::release_lelbowposition() {
  // @@protoc_insertion_point(field_release:naothmessages.ArmMotionRequest.lElbowPosition)
  clear_has_lelbowposition();
  ::naothmessages::DoubleVector2* temp = lelbowposition_;
  lelbowposition_ = NULL;
  return temp;
}
void ArmMotionRequest::set_allocated_lelbowposition(::naothmessages::DoubleVector2* lelbowposition) {
  delete lelbowposition_;
  lelbowposition_ = lelbowposition;
  if (lelbowposition) {
    set_has_lelbowposition();
  } else {
    clear_has_lelbowposition();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.ArmMotionRequest.lElbowPosition)
}

// optional .naothmessages.DoubleVector2 lElbowStiffness = 5;
bool ArmMotionRequest::has_lelbowstiffness() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ArmMotionRequest::set_has_lelbowstiffness() {
  _has_bits_[0] |= 0x00000008u;
}
void ArmMotionRequest::clear_has_lelbowstiffness() {
  _has_bits_[0] &= ~0x00000008u;
}
void ArmMotionRequest::clear_lelbowstiffness() {
  if (lelbowstiffness_ != NULL) lelbowstiffness_->::naothmessages::DoubleVector2::Clear();
  clear_has_lelbowstiffness();
}
const ::naothmessages::DoubleVector2& ArmMotionRequest::lelbowstiffness() const {
  const ::naothmessages::DoubleVector2* p = lelbowstiffness_;
  // @@protoc_insertion_point(field_get:naothmessages.ArmMotionRequest.lElbowStiffness)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* ArmMotionRequest::mutable_lelbowstiffness() {
  set_has_lelbowstiffness();
  if (lelbowstiffness_ == NULL) {
    lelbowstiffness_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.ArmMotionRequest.lElbowStiffness)
  return lelbowstiffness_;
}
::naothmessages::DoubleVector2* ArmMotionRequest::release_lelbowstiffness() {
  // @@protoc_insertion_point(field_release:naothmessages.ArmMotionRequest.lElbowStiffness)
  clear_has_lelbowstiffness();
  ::naothmessages::DoubleVector2* temp = lelbowstiffness_;
  lelbowstiffness_ = NULL;
  return temp;
}
void ArmMotionRequest::set_allocated_lelbowstiffness(::naothmessages::DoubleVector2* lelbowstiffness) {
  delete lelbowstiffness_;
  lelbowstiffness_ = lelbowstiffness;
  if (lelbowstiffness) {
    set_has_lelbowstiffness();
  } else {
    clear_has_lelbowstiffness();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.ArmMotionRequest.lElbowStiffness)
}

// optional .naothmessages.DoubleVector2 rShoulderPosition = 6;
bool ArmMotionRequest::has_rshoulderposition() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ArmMotionRequest::set_has_rshoulderposition() {
  _has_bits_[0] |= 0x00000010u;
}
void ArmMotionRequest::clear_has_rshoulderposition() {
  _has_bits_[0] &= ~0x00000010u;
}
void ArmMotionRequest::clear_rshoulderposition() {
  if (rshoulderposition_ != NULL) rshoulderposition_->::naothmessages::DoubleVector2::Clear();
  clear_has_rshoulderposition();
}
const ::naothmessages::DoubleVector2& ArmMotionRequest::rshoulderposition() const {
  const ::naothmessages::DoubleVector2* p = rshoulderposition_;
  // @@protoc_insertion_point(field_get:naothmessages.ArmMotionRequest.rShoulderPosition)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* ArmMotionRequest::mutable_rshoulderposition() {
  set_has_rshoulderposition();
  if (rshoulderposition_ == NULL) {
    rshoulderposition_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.ArmMotionRequest.rShoulderPosition)
  return rshoulderposition_;
}
::naothmessages::DoubleVector2* ArmMotionRequest::release_rshoulderposition() {
  // @@protoc_insertion_point(field_release:naothmessages.ArmMotionRequest.rShoulderPosition)
  clear_has_rshoulderposition();
  ::naothmessages::DoubleVector2* temp = rshoulderposition_;
  rshoulderposition_ = NULL;
  return temp;
}
void ArmMotionRequest::set_allocated_rshoulderposition(::naothmessages::DoubleVector2* rshoulderposition) {
  delete rshoulderposition_;
  rshoulderposition_ = rshoulderposition;
  if (rshoulderposition) {
    set_has_rshoulderposition();
  } else {
    clear_has_rshoulderposition();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.ArmMotionRequest.rShoulderPosition)
}

// optional .naothmessages.DoubleVector2 rShoulderStiffness = 7;
bool ArmMotionRequest::has_rshoulderstiffness() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ArmMotionRequest::set_has_rshoulderstiffness() {
  _has_bits_[0] |= 0x00000020u;
}
void ArmMotionRequest::clear_has_rshoulderstiffness() {
  _has_bits_[0] &= ~0x00000020u;
}
void ArmMotionRequest::clear_rshoulderstiffness() {
  if (rshoulderstiffness_ != NULL) rshoulderstiffness_->::naothmessages::DoubleVector2::Clear();
  clear_has_rshoulderstiffness();
}
const ::naothmessages::DoubleVector2& ArmMotionRequest::rshoulderstiffness() const {
  const ::naothmessages::DoubleVector2* p = rshoulderstiffness_;
  // @@protoc_insertion_point(field_get:naothmessages.ArmMotionRequest.rShoulderStiffness)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* ArmMotionRequest::mutable_rshoulderstiffness() {
  set_has_rshoulderstiffness();
  if (rshoulderstiffness_ == NULL) {
    rshoulderstiffness_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.ArmMotionRequest.rShoulderStiffness)
  return rshoulderstiffness_;
}
::naothmessages::DoubleVector2* ArmMotionRequest::release_rshoulderstiffness() {
  // @@protoc_insertion_point(field_release:naothmessages.ArmMotionRequest.rShoulderStiffness)
  clear_has_rshoulderstiffness();
  ::naothmessages::DoubleVector2* temp = rshoulderstiffness_;
  rshoulderstiffness_ = NULL;
  return temp;
}
void ArmMotionRequest::set_allocated_rshoulderstiffness(::naothmessages::DoubleVector2* rshoulderstiffness) {
  delete rshoulderstiffness_;
  rshoulderstiffness_ = rshoulderstiffness;
  if (rshoulderstiffness) {
    set_has_rshoulderstiffness();
  } else {
    clear_has_rshoulderstiffness();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.ArmMotionRequest.rShoulderStiffness)
}

// optional .naothmessages.DoubleVector2 rElbowPosition = 8;
bool ArmMotionRequest::has_relbowposition() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ArmMotionRequest::set_has_relbowposition() {
  _has_bits_[0] |= 0x00000040u;
}
void ArmMotionRequest::clear_has_relbowposition() {
  _has_bits_[0] &= ~0x00000040u;
}
void ArmMotionRequest::clear_relbowposition() {
  if (relbowposition_ != NULL) relbowposition_->::naothmessages::DoubleVector2::Clear();
  clear_has_relbowposition();
}
const ::naothmessages::DoubleVector2& ArmMotionRequest::relbowposition() const {
  const ::naothmessages::DoubleVector2* p = relbowposition_;
  // @@protoc_insertion_point(field_get:naothmessages.ArmMotionRequest.rElbowPosition)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* ArmMotionRequest::mutable_relbowposition() {
  set_has_relbowposition();
  if (relbowposition_ == NULL) {
    relbowposition_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.ArmMotionRequest.rElbowPosition)
  return relbowposition_;
}
::naothmessages::DoubleVector2* ArmMotionRequest::release_relbowposition() {
  // @@protoc_insertion_point(field_release:naothmessages.ArmMotionRequest.rElbowPosition)
  clear_has_relbowposition();
  ::naothmessages::DoubleVector2* temp = relbowposition_;
  relbowposition_ = NULL;
  return temp;
}
void ArmMotionRequest::set_allocated_relbowposition(::naothmessages::DoubleVector2* relbowposition) {
  delete relbowposition_;
  relbowposition_ = relbowposition;
  if (relbowposition) {
    set_has_relbowposition();
  } else {
    clear_has_relbowposition();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.ArmMotionRequest.rElbowPosition)
}

// optional .naothmessages.DoubleVector2 rElbowStiffness = 9;
bool ArmMotionRequest::has_relbowstiffness() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ArmMotionRequest::set_has_relbowstiffness() {
  _has_bits_[0] |= 0x00000080u;
}
void ArmMotionRequest::clear_has_relbowstiffness() {
  _has_bits_[0] &= ~0x00000080u;
}
void ArmMotionRequest::clear_relbowstiffness() {
  if (relbowstiffness_ != NULL) relbowstiffness_->::naothmessages::DoubleVector2::Clear();
  clear_has_relbowstiffness();
}
const ::naothmessages::DoubleVector2& ArmMotionRequest::relbowstiffness() const {
  const ::naothmessages::DoubleVector2* p = relbowstiffness_;
  // @@protoc_insertion_point(field_get:naothmessages.ArmMotionRequest.rElbowStiffness)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* ArmMotionRequest::mutable_relbowstiffness() {
  set_has_relbowstiffness();
  if (relbowstiffness_ == NULL) {
    relbowstiffness_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.ArmMotionRequest.rElbowStiffness)
  return relbowstiffness_;
}
::naothmessages::DoubleVector2* ArmMotionRequest::release_relbowstiffness() {
  // @@protoc_insertion_point(field_release:naothmessages.ArmMotionRequest.rElbowStiffness)
  clear_has_relbowstiffness();
  ::naothmessages::DoubleVector2* temp = relbowstiffness_;
  relbowstiffness_ = NULL;
  return temp;
}
void ArmMotionRequest::set_allocated_relbowstiffness(::naothmessages::DoubleVector2* relbowstiffness) {
  delete relbowstiffness_;
  relbowstiffness_ = relbowstiffness;
  if (relbowstiffness) {
    set_has_relbowstiffness();
  } else {
    clear_has_relbowstiffness();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.ArmMotionRequest.rElbowStiffness)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MotionRequest::kIdFieldNumber;
const int MotionRequest::kTimeFieldNumber;
const int MotionRequest::kForcedFieldNumber;
const int MotionRequest::kWalkRequestFieldNumber;
const int MotionRequest::kStarndardStandFieldNumber;
const int MotionRequest::kKickRequestFieldNumber;
const int MotionRequest::kStandHeightFieldNumber;
const int MotionRequest::kCalibrateFootTouchDetectorFieldNumber;
const int MotionRequest::kCognitionFrameNumberFieldNumber;
const int MotionRequest::kGraspRequestFieldNumber;
const int MotionRequest::kArmMotionRequestFieldNumber;
const int MotionRequest::kDisableRelaxedStandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MotionRequest::MotionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.MotionRequest)
}
MotionRequest::MotionRequest(const MotionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_walkrequest()) {
    walkrequest_ = new ::naothmessages::WalkRequest(*from.walkrequest_);
  } else {
    walkrequest_ = NULL;
  }
  if (from.has_kickrequest()) {
    kickrequest_ = new ::naothmessages::KickRequest(*from.kickrequest_);
  } else {
    kickrequest_ = NULL;
  }
  if (from.has_grasprequest()) {
    grasprequest_ = new ::naothmessages::GraspRequest(*from.grasprequest_);
  } else {
    grasprequest_ = NULL;
  }
  if (from.has_armmotionrequest()) {
    armmotionrequest_ = new ::naothmessages::ArmMotionRequest(*from.armmotionrequest_);
  } else {
    armmotionrequest_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cognitionframenumber_) -
    reinterpret_cast<char*>(&id_)) + sizeof(cognitionframenumber_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.MotionRequest)
}

void MotionRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&walkrequest_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cognitionframenumber_) -
      reinterpret_cast<char*>(&walkrequest_)) + sizeof(cognitionframenumber_));
}

MotionRequest::~MotionRequest() {
  // @@protoc_insertion_point(destructor:naothmessages.MotionRequest)
  SharedDtor();
}

void MotionRequest::SharedDtor() {
  if (this != internal_default_instance()) delete walkrequest_;
  if (this != internal_default_instance()) delete kickrequest_;
  if (this != internal_default_instance()) delete grasprequest_;
  if (this != internal_default_instance()) delete armmotionrequest_;
}

void MotionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MotionRequest::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MotionRequest& MotionRequest::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

MotionRequest* MotionRequest::New(::google::protobuf::Arena* arena) const {
  MotionRequest* n = new MotionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MotionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.MotionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(walkrequest_ != NULL);
      walkrequest_->::naothmessages::WalkRequest::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(kickrequest_ != NULL);
      kickrequest_->::naothmessages::KickRequest::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(grasprequest_ != NULL);
      grasprequest_->::naothmessages::GraspRequest::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(armmotionrequest_ != NULL);
      armmotionrequest_->::naothmessages::ArmMotionRequest::Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&forced_) -
        reinterpret_cast<char*>(&id_)) + sizeof(forced_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&starndardstand_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cognitionframenumber_) -
        reinterpret_cast<char*>(&starndardstand_)) + sizeof(cognitionframenumber_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MotionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.MotionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool forced = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_forced();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forced_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.WalkRequest walkRequest = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_walkrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool starndardStand = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_starndardstand();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &starndardstand_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.KickRequest kickRequest = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kickrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double standHeight = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_standheight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &standheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool calibrateFootTouchDetector = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_calibratefoottouchdetector();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &calibratefoottouchdetector_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cognitionFrameNumber = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_cognitionframenumber();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cognitionframenumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.GraspRequest graspRequest = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grasprequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.ArmMotionRequest armMotionRequest = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_armmotionrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool disable_relaxed_stand = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_disable_relaxed_stand();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_relaxed_stand_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.MotionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.MotionRequest)
  return false;
#undef DO_
}

void MotionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.MotionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 time = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  // required bool forced = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->forced(), output);
  }

  // optional .naothmessages.WalkRequest walkRequest = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->walkrequest_, output);
  }

  // optional bool starndardStand = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->starndardstand(), output);
  }

  // optional .naothmessages.KickRequest kickRequest = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->kickrequest_, output);
  }

  // optional double standHeight = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->standheight(), output);
  }

  // optional bool calibrateFootTouchDetector = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->calibratefoottouchdetector(), output);
  }

  // optional uint32 cognitionFrameNumber = 9;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->cognitionframenumber(), output);
  }

  // optional .naothmessages.GraspRequest graspRequest = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->grasprequest_, output);
  }

  // optional .naothmessages.ArmMotionRequest armMotionRequest = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->armmotionrequest_, output);
  }

  // optional bool disable_relaxed_stand = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->disable_relaxed_stand(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.MotionRequest)
}

::google::protobuf::uint8* MotionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.MotionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 time = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  // required bool forced = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->forced(), target);
  }

  // optional .naothmessages.WalkRequest walkRequest = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->walkrequest_, deterministic, target);
  }

  // optional bool starndardStand = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->starndardstand(), target);
  }

  // optional .naothmessages.KickRequest kickRequest = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->kickrequest_, deterministic, target);
  }

  // optional double standHeight = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->standheight(), target);
  }

  // optional bool calibrateFootTouchDetector = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->calibratefoottouchdetector(), target);
  }

  // optional uint32 cognitionFrameNumber = 9;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->cognitionframenumber(), target);
  }

  // optional .naothmessages.GraspRequest graspRequest = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->grasprequest_, deterministic, target);
  }

  // optional .naothmessages.ArmMotionRequest armMotionRequest = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->armmotionrequest_, deterministic, target);
  }

  // optional bool disable_relaxed_stand = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->disable_relaxed_stand(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.MotionRequest)
  return target;
}

size_t MotionRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:naothmessages.MotionRequest)
  size_t total_size = 0;

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_time()) {
    // required uint32 time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());
  }

  if (has_forced()) {
    // required bool forced = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t MotionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.MotionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000b0) ^ 0x000000b0) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required uint32 time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());

    // required bool forced = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .naothmessages.WalkRequest walkRequest = 4;
    if (has_walkrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->walkrequest_);
    }

    // optional .naothmessages.KickRequest kickRequest = 6;
    if (has_kickrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kickrequest_);
    }

    // optional .naothmessages.GraspRequest graspRequest = 10;
    if (has_grasprequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->grasprequest_);
    }

    // optional .naothmessages.ArmMotionRequest armMotionRequest = 11;
    if (has_armmotionrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->armmotionrequest_);
    }

  }
  // optional double standHeight = 7;
  if (has_standheight()) {
    total_size += 1 + 8;
  }

  if (_has_bits_[8 / 32] & 3840u) {
    // optional bool starndardStand = 5;
    if (has_starndardstand()) {
      total_size += 1 + 1;
    }

    // optional bool calibrateFootTouchDetector = 8;
    if (has_calibratefoottouchdetector()) {
      total_size += 1 + 1;
    }

    // optional bool disable_relaxed_stand = 12;
    if (has_disable_relaxed_stand()) {
      total_size += 1 + 1;
    }

    // optional uint32 cognitionFrameNumber = 9;
    if (has_cognitionframenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cognitionframenumber());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MotionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.MotionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MotionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MotionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.MotionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.MotionRequest)
    MergeFrom(*source);
  }
}

void MotionRequest::MergeFrom(const MotionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.MotionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_walkrequest()->::naothmessages::WalkRequest::MergeFrom(from.walkrequest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_kickrequest()->::naothmessages::KickRequest::MergeFrom(from.kickrequest());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_grasprequest()->::naothmessages::GraspRequest::MergeFrom(from.grasprequest());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_armmotionrequest()->::naothmessages::ArmMotionRequest::MergeFrom(from.armmotionrequest());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000040u) {
      standheight_ = from.standheight_;
    }
    if (cached_has_bits & 0x00000080u) {
      forced_ = from.forced_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      starndardstand_ = from.starndardstand_;
    }
    if (cached_has_bits & 0x00000200u) {
      calibratefoottouchdetector_ = from.calibratefoottouchdetector_;
    }
    if (cached_has_bits & 0x00000400u) {
      disable_relaxed_stand_ = from.disable_relaxed_stand_;
    }
    if (cached_has_bits & 0x00000800u) {
      cognitionframenumber_ = from.cognitionframenumber_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MotionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.MotionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionRequest::CopyFrom(const MotionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.MotionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000b0) != 0x000000b0) return false;
  if (has_walkrequest()) {
    if (!this->walkrequest_->IsInitialized()) return false;
  }
  if (has_kickrequest()) {
    if (!this->kickrequest_->IsInitialized()) return false;
  }
  if (has_grasprequest()) {
    if (!this->grasprequest_->IsInitialized()) return false;
  }
  if (has_armmotionrequest()) {
    if (!this->armmotionrequest_->IsInitialized()) return false;
  }
  return true;
}

void MotionRequest::Swap(MotionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MotionRequest::InternalSwap(MotionRequest* other) {
  using std::swap;
  swap(walkrequest_, other->walkrequest_);
  swap(kickrequest_, other->kickrequest_);
  swap(grasprequest_, other->grasprequest_);
  swap(armmotionrequest_, other->armmotionrequest_);
  swap(id_, other->id_);
  swap(time_, other->time_);
  swap(standheight_, other->standheight_);
  swap(forced_, other->forced_);
  swap(starndardstand_, other->starndardstand_);
  swap(calibratefoottouchdetector_, other->calibratefoottouchdetector_);
  swap(disable_relaxed_stand_, other->disable_relaxed_stand_);
  swap(cognitionframenumber_, other->cognitionframenumber_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MotionRequest::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MotionRequest

// required uint32 id = 1;
bool MotionRequest::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MotionRequest::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
void MotionRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void MotionRequest::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 MotionRequest::id() const {
  // @@protoc_insertion_point(field_get:naothmessages.MotionRequest.id)
  return id_;
}
void MotionRequest::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.MotionRequest.id)
}

// required uint32 time = 2;
bool MotionRequest::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MotionRequest::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
void MotionRequest::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void MotionRequest::clear_time() {
  time_ = 0u;
  clear_has_time();
}
::google::protobuf::uint32 MotionRequest::time() const {
  // @@protoc_insertion_point(field_get:naothmessages.MotionRequest.time)
  return time_;
}
void MotionRequest::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.MotionRequest.time)
}

// required bool forced = 3;
bool MotionRequest::has_forced() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MotionRequest::set_has_forced() {
  _has_bits_[0] |= 0x00000080u;
}
void MotionRequest::clear_has_forced() {
  _has_bits_[0] &= ~0x00000080u;
}
void MotionRequest::clear_forced() {
  forced_ = false;
  clear_has_forced();
}
bool MotionRequest::forced() const {
  // @@protoc_insertion_point(field_get:naothmessages.MotionRequest.forced)
  return forced_;
}
void MotionRequest::set_forced(bool value) {
  set_has_forced();
  forced_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.MotionRequest.forced)
}

// optional .naothmessages.WalkRequest walkRequest = 4;
bool MotionRequest::has_walkrequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MotionRequest::set_has_walkrequest() {
  _has_bits_[0] |= 0x00000001u;
}
void MotionRequest::clear_has_walkrequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void MotionRequest::clear_walkrequest() {
  if (walkrequest_ != NULL) walkrequest_->::naothmessages::WalkRequest::Clear();
  clear_has_walkrequest();
}
const ::naothmessages::WalkRequest& MotionRequest::walkrequest() const {
  const ::naothmessages::WalkRequest* p = walkrequest_;
  // @@protoc_insertion_point(field_get:naothmessages.MotionRequest.walkRequest)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::WalkRequest*>(
      &::naothmessages::_WalkRequest_default_instance_);
}
::naothmessages::WalkRequest* MotionRequest::mutable_walkrequest() {
  set_has_walkrequest();
  if (walkrequest_ == NULL) {
    walkrequest_ = new ::naothmessages::WalkRequest;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.MotionRequest.walkRequest)
  return walkrequest_;
}
::naothmessages::WalkRequest* MotionRequest::release_walkrequest() {
  // @@protoc_insertion_point(field_release:naothmessages.MotionRequest.walkRequest)
  clear_has_walkrequest();
  ::naothmessages::WalkRequest* temp = walkrequest_;
  walkrequest_ = NULL;
  return temp;
}
void MotionRequest::set_allocated_walkrequest(::naothmessages::WalkRequest* walkrequest) {
  delete walkrequest_;
  walkrequest_ = walkrequest;
  if (walkrequest) {
    set_has_walkrequest();
  } else {
    clear_has_walkrequest();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.MotionRequest.walkRequest)
}

// optional bool starndardStand = 5;
bool MotionRequest::has_starndardstand() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void MotionRequest::set_has_starndardstand() {
  _has_bits_[0] |= 0x00000100u;
}
void MotionRequest::clear_has_starndardstand() {
  _has_bits_[0] &= ~0x00000100u;
}
void MotionRequest::clear_starndardstand() {
  starndardstand_ = false;
  clear_has_starndardstand();
}
bool MotionRequest::starndardstand() const {
  // @@protoc_insertion_point(field_get:naothmessages.MotionRequest.starndardStand)
  return starndardstand_;
}
void MotionRequest::set_starndardstand(bool value) {
  set_has_starndardstand();
  starndardstand_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.MotionRequest.starndardStand)
}

// optional .naothmessages.KickRequest kickRequest = 6;
bool MotionRequest::has_kickrequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MotionRequest::set_has_kickrequest() {
  _has_bits_[0] |= 0x00000002u;
}
void MotionRequest::clear_has_kickrequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void MotionRequest::clear_kickrequest() {
  if (kickrequest_ != NULL) kickrequest_->::naothmessages::KickRequest::Clear();
  clear_has_kickrequest();
}
const ::naothmessages::KickRequest& MotionRequest::kickrequest() const {
  const ::naothmessages::KickRequest* p = kickrequest_;
  // @@protoc_insertion_point(field_get:naothmessages.MotionRequest.kickRequest)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::KickRequest*>(
      &::naothmessages::_KickRequest_default_instance_);
}
::naothmessages::KickRequest* MotionRequest::mutable_kickrequest() {
  set_has_kickrequest();
  if (kickrequest_ == NULL) {
    kickrequest_ = new ::naothmessages::KickRequest;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.MotionRequest.kickRequest)
  return kickrequest_;
}
::naothmessages::KickRequest* MotionRequest::release_kickrequest() {
  // @@protoc_insertion_point(field_release:naothmessages.MotionRequest.kickRequest)
  clear_has_kickrequest();
  ::naothmessages::KickRequest* temp = kickrequest_;
  kickrequest_ = NULL;
  return temp;
}
void MotionRequest::set_allocated_kickrequest(::naothmessages::KickRequest* kickrequest) {
  delete kickrequest_;
  kickrequest_ = kickrequest;
  if (kickrequest) {
    set_has_kickrequest();
  } else {
    clear_has_kickrequest();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.MotionRequest.kickRequest)
}

// optional double standHeight = 7;
bool MotionRequest::has_standheight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MotionRequest::set_has_standheight() {
  _has_bits_[0] |= 0x00000040u;
}
void MotionRequest::clear_has_standheight() {
  _has_bits_[0] &= ~0x00000040u;
}
void MotionRequest::clear_standheight() {
  standheight_ = 0;
  clear_has_standheight();
}
double MotionRequest::standheight() const {
  // @@protoc_insertion_point(field_get:naothmessages.MotionRequest.standHeight)
  return standheight_;
}
void MotionRequest::set_standheight(double value) {
  set_has_standheight();
  standheight_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.MotionRequest.standHeight)
}

// optional bool calibrateFootTouchDetector = 8;
bool MotionRequest::has_calibratefoottouchdetector() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void MotionRequest::set_has_calibratefoottouchdetector() {
  _has_bits_[0] |= 0x00000200u;
}
void MotionRequest::clear_has_calibratefoottouchdetector() {
  _has_bits_[0] &= ~0x00000200u;
}
void MotionRequest::clear_calibratefoottouchdetector() {
  calibratefoottouchdetector_ = false;
  clear_has_calibratefoottouchdetector();
}
bool MotionRequest::calibratefoottouchdetector() const {
  // @@protoc_insertion_point(field_get:naothmessages.MotionRequest.calibrateFootTouchDetector)
  return calibratefoottouchdetector_;
}
void MotionRequest::set_calibratefoottouchdetector(bool value) {
  set_has_calibratefoottouchdetector();
  calibratefoottouchdetector_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.MotionRequest.calibrateFootTouchDetector)
}

// optional uint32 cognitionFrameNumber = 9;
bool MotionRequest::has_cognitionframenumber() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void MotionRequest::set_has_cognitionframenumber() {
  _has_bits_[0] |= 0x00000800u;
}
void MotionRequest::clear_has_cognitionframenumber() {
  _has_bits_[0] &= ~0x00000800u;
}
void MotionRequest::clear_cognitionframenumber() {
  cognitionframenumber_ = 0u;
  clear_has_cognitionframenumber();
}
::google::protobuf::uint32 MotionRequest::cognitionframenumber() const {
  // @@protoc_insertion_point(field_get:naothmessages.MotionRequest.cognitionFrameNumber)
  return cognitionframenumber_;
}
void MotionRequest::set_cognitionframenumber(::google::protobuf::uint32 value) {
  set_has_cognitionframenumber();
  cognitionframenumber_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.MotionRequest.cognitionFrameNumber)
}

// optional .naothmessages.GraspRequest graspRequest = 10;
bool MotionRequest::has_grasprequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MotionRequest::set_has_grasprequest() {
  _has_bits_[0] |= 0x00000004u;
}
void MotionRequest::clear_has_grasprequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void MotionRequest::clear_grasprequest() {
  if (grasprequest_ != NULL) grasprequest_->::naothmessages::GraspRequest::Clear();
  clear_has_grasprequest();
}
const ::naothmessages::GraspRequest& MotionRequest::grasprequest() const {
  const ::naothmessages::GraspRequest* p = grasprequest_;
  // @@protoc_insertion_point(field_get:naothmessages.MotionRequest.graspRequest)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::GraspRequest*>(
      &::naothmessages::_GraspRequest_default_instance_);
}
::naothmessages::GraspRequest* MotionRequest::mutable_grasprequest() {
  set_has_grasprequest();
  if (grasprequest_ == NULL) {
    grasprequest_ = new ::naothmessages::GraspRequest;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.MotionRequest.graspRequest)
  return grasprequest_;
}
::naothmessages::GraspRequest* MotionRequest::release_grasprequest() {
  // @@protoc_insertion_point(field_release:naothmessages.MotionRequest.graspRequest)
  clear_has_grasprequest();
  ::naothmessages::GraspRequest* temp = grasprequest_;
  grasprequest_ = NULL;
  return temp;
}
void MotionRequest::set_allocated_grasprequest(::naothmessages::GraspRequest* grasprequest) {
  delete grasprequest_;
  grasprequest_ = grasprequest;
  if (grasprequest) {
    set_has_grasprequest();
  } else {
    clear_has_grasprequest();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.MotionRequest.graspRequest)
}

// optional .naothmessages.ArmMotionRequest armMotionRequest = 11;
bool MotionRequest::has_armmotionrequest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MotionRequest::set_has_armmotionrequest() {
  _has_bits_[0] |= 0x00000008u;
}
void MotionRequest::clear_has_armmotionrequest() {
  _has_bits_[0] &= ~0x00000008u;
}
void MotionRequest::clear_armmotionrequest() {
  if (armmotionrequest_ != NULL) armmotionrequest_->::naothmessages::ArmMotionRequest::Clear();
  clear_has_armmotionrequest();
}
const ::naothmessages::ArmMotionRequest& MotionRequest::armmotionrequest() const {
  const ::naothmessages::ArmMotionRequest* p = armmotionrequest_;
  // @@protoc_insertion_point(field_get:naothmessages.MotionRequest.armMotionRequest)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::ArmMotionRequest*>(
      &::naothmessages::_ArmMotionRequest_default_instance_);
}
::naothmessages::ArmMotionRequest* MotionRequest::mutable_armmotionrequest() {
  set_has_armmotionrequest();
  if (armmotionrequest_ == NULL) {
    armmotionrequest_ = new ::naothmessages::ArmMotionRequest;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.MotionRequest.armMotionRequest)
  return armmotionrequest_;
}
::naothmessages::ArmMotionRequest* MotionRequest::release_armmotionrequest() {
  // @@protoc_insertion_point(field_release:naothmessages.MotionRequest.armMotionRequest)
  clear_has_armmotionrequest();
  ::naothmessages::ArmMotionRequest* temp = armmotionrequest_;
  armmotionrequest_ = NULL;
  return temp;
}
void MotionRequest::set_allocated_armmotionrequest(::naothmessages::ArmMotionRequest* armmotionrequest) {
  delete armmotionrequest_;
  armmotionrequest_ = armmotionrequest;
  if (armmotionrequest) {
    set_has_armmotionrequest();
  } else {
    clear_has_armmotionrequest();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.MotionRequest.armMotionRequest)
}

// optional bool disable_relaxed_stand = 12;
bool MotionRequest::has_disable_relaxed_stand() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void MotionRequest::set_has_disable_relaxed_stand() {
  _has_bits_[0] |= 0x00000400u;
}
void MotionRequest::clear_has_disable_relaxed_stand() {
  _has_bits_[0] &= ~0x00000400u;
}
void MotionRequest::clear_disable_relaxed_stand() {
  disable_relaxed_stand_ = false;
  clear_has_disable_relaxed_stand();
}
bool MotionRequest::disable_relaxed_stand() const {
  // @@protoc_insertion_point(field_get:naothmessages.MotionRequest.disable_relaxed_stand)
  return disable_relaxed_stand_;
}
void MotionRequest::set_disable_relaxed_stand(bool value) {
  set_has_disable_relaxed_stand();
  disable_relaxed_stand_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.MotionRequest.disable_relaxed_stand)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinePercept_Intersection::kPosInImageFieldNumber;
const int LinePercept_Intersection::kPosOnFieldFieldNumber;
const int LinePercept_Intersection::kTypeFieldNumber;
const int LinePercept_Intersection::kSegmentOneIndexFieldNumber;
const int LinePercept_Intersection::kSegmentTwoIndexFieldNumber;
const int LinePercept_Intersection::kSegmentOneDistanceFieldNumber;
const int LinePercept_Intersection::kSegmentTwoDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinePercept_Intersection::LinePercept_Intersection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.LinePercept.Intersection)
}
LinePercept_Intersection::LinePercept_Intersection(const LinePercept_Intersection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_posinimage()) {
    posinimage_ = new ::naothmessages::DoubleVector2(*from.posinimage_);
  } else {
    posinimage_ = NULL;
  }
  if (from.has_posonfield()) {
    posonfield_ = new ::naothmessages::DoubleVector2(*from.posonfield_);
  } else {
    posonfield_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&segmenttwodistance_) -
    reinterpret_cast<char*>(&type_)) + sizeof(segmenttwodistance_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.LinePercept.Intersection)
}

void LinePercept_Intersection::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&posinimage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&segmenttwodistance_) -
      reinterpret_cast<char*>(&posinimage_)) + sizeof(segmenttwodistance_));
}

LinePercept_Intersection::~LinePercept_Intersection() {
  // @@protoc_insertion_point(destructor:naothmessages.LinePercept.Intersection)
  SharedDtor();
}

void LinePercept_Intersection::SharedDtor() {
  if (this != internal_default_instance()) delete posinimage_;
  if (this != internal_default_instance()) delete posonfield_;
}

void LinePercept_Intersection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinePercept_Intersection::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LinePercept_Intersection& LinePercept_Intersection::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinePercept_Intersection* LinePercept_Intersection::New(::google::protobuf::Arena* arena) const {
  LinePercept_Intersection* n = new LinePercept_Intersection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinePercept_Intersection::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.LinePercept.Intersection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(posinimage_ != NULL);
      posinimage_->::naothmessages::DoubleVector2::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(posonfield_ != NULL);
      posonfield_->::naothmessages::DoubleVector2::Clear();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&segmenttwodistance_) -
        reinterpret_cast<char*>(&type_)) + sizeof(segmenttwodistance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LinePercept_Intersection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.LinePercept.Intersection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .naothmessages.DoubleVector2 posInImage = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_posinimage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector2 posOnField = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_posonfield()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.LinePercept.Intersection.IntersectionType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::naothmessages::LinePercept_Intersection_IntersectionType_IsValid(value)) {
            set_type(static_cast< ::naothmessages::LinePercept_Intersection_IntersectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 segmentOneIndex = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_segmentoneindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &segmentoneindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 segmentTwoIndex = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_segmenttwoindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &segmenttwoindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double segmentOneDistance = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_segmentonedistance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &segmentonedistance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double segmentTwoDistance = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_segmenttwodistance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &segmenttwodistance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.LinePercept.Intersection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.LinePercept.Intersection)
  return false;
#undef DO_
}

void LinePercept_Intersection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.LinePercept.Intersection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.DoubleVector2 posInImage = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->posinimage_, output);
  }

  // optional .naothmessages.DoubleVector2 posOnField = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->posonfield_, output);
  }

  // optional .naothmessages.LinePercept.Intersection.IntersectionType type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint32 segmentOneIndex = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->segmentoneindex(), output);
  }

  // optional uint32 segmentTwoIndex = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->segmenttwoindex(), output);
  }

  // optional double segmentOneDistance = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->segmentonedistance(), output);
  }

  // optional double segmentTwoDistance = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->segmenttwodistance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.LinePercept.Intersection)
}

::google::protobuf::uint8* LinePercept_Intersection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.LinePercept.Intersection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.DoubleVector2 posInImage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->posinimage_, deterministic, target);
  }

  // optional .naothmessages.DoubleVector2 posOnField = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->posonfield_, deterministic, target);
  }

  // optional .naothmessages.LinePercept.Intersection.IntersectionType type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint32 segmentOneIndex = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->segmentoneindex(), target);
  }

  // optional uint32 segmentTwoIndex = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->segmenttwoindex(), target);
  }

  // optional double segmentOneDistance = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->segmentonedistance(), target);
  }

  // optional double segmentTwoDistance = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->segmenttwodistance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.LinePercept.Intersection)
  return target;
}

size_t LinePercept_Intersection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.LinePercept.Intersection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .naothmessages.DoubleVector2 posInImage = 1;
    if (has_posinimage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->posinimage_);
    }

    // optional .naothmessages.DoubleVector2 posOnField = 2;
    if (has_posonfield()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->posonfield_);
    }

    // optional .naothmessages.LinePercept.Intersection.IntersectionType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 segmentOneIndex = 6;
    if (has_segmentoneindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->segmentoneindex());
    }

    // optional double segmentOneDistance = 8;
    if (has_segmentonedistance()) {
      total_size += 1 + 8;
    }

    // optional uint32 segmentTwoIndex = 7;
    if (has_segmenttwoindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->segmenttwoindex());
    }

    // optional double segmentTwoDistance = 9;
    if (has_segmenttwodistance()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinePercept_Intersection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.LinePercept.Intersection)
  GOOGLE_DCHECK_NE(&from, this);
  const LinePercept_Intersection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinePercept_Intersection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.LinePercept.Intersection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.LinePercept.Intersection)
    MergeFrom(*source);
  }
}

void LinePercept_Intersection::MergeFrom(const LinePercept_Intersection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.LinePercept.Intersection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_posinimage()->::naothmessages::DoubleVector2::MergeFrom(from.posinimage());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_posonfield()->::naothmessages::DoubleVector2::MergeFrom(from.posonfield());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      segmentoneindex_ = from.segmentoneindex_;
    }
    if (cached_has_bits & 0x00000010u) {
      segmentonedistance_ = from.segmentonedistance_;
    }
    if (cached_has_bits & 0x00000020u) {
      segmenttwoindex_ = from.segmenttwoindex_;
    }
    if (cached_has_bits & 0x00000040u) {
      segmenttwodistance_ = from.segmenttwodistance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LinePercept_Intersection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.LinePercept.Intersection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinePercept_Intersection::CopyFrom(const LinePercept_Intersection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.LinePercept.Intersection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinePercept_Intersection::IsInitialized() const {
  if (has_posinimage()) {
    if (!this->posinimage_->IsInitialized()) return false;
  }
  if (has_posonfield()) {
    if (!this->posonfield_->IsInitialized()) return false;
  }
  return true;
}

void LinePercept_Intersection::Swap(LinePercept_Intersection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinePercept_Intersection::InternalSwap(LinePercept_Intersection* other) {
  using std::swap;
  swap(posinimage_, other->posinimage_);
  swap(posonfield_, other->posonfield_);
  swap(type_, other->type_);
  swap(segmentoneindex_, other->segmentoneindex_);
  swap(segmentonedistance_, other->segmentonedistance_);
  swap(segmenttwoindex_, other->segmenttwoindex_);
  swap(segmenttwodistance_, other->segmenttwodistance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinePercept_Intersection::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinePercept_Intersection

// optional .naothmessages.DoubleVector2 posInImage = 1;
bool LinePercept_Intersection::has_posinimage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LinePercept_Intersection::set_has_posinimage() {
  _has_bits_[0] |= 0x00000001u;
}
void LinePercept_Intersection::clear_has_posinimage() {
  _has_bits_[0] &= ~0x00000001u;
}
void LinePercept_Intersection::clear_posinimage() {
  if (posinimage_ != NULL) posinimage_->::naothmessages::DoubleVector2::Clear();
  clear_has_posinimage();
}
const ::naothmessages::DoubleVector2& LinePercept_Intersection::posinimage() const {
  const ::naothmessages::DoubleVector2* p = posinimage_;
  // @@protoc_insertion_point(field_get:naothmessages.LinePercept.Intersection.posInImage)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* LinePercept_Intersection::mutable_posinimage() {
  set_has_posinimage();
  if (posinimage_ == NULL) {
    posinimage_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.LinePercept.Intersection.posInImage)
  return posinimage_;
}
::naothmessages::DoubleVector2* LinePercept_Intersection::release_posinimage() {
  // @@protoc_insertion_point(field_release:naothmessages.LinePercept.Intersection.posInImage)
  clear_has_posinimage();
  ::naothmessages::DoubleVector2* temp = posinimage_;
  posinimage_ = NULL;
  return temp;
}
void LinePercept_Intersection::set_allocated_posinimage(::naothmessages::DoubleVector2* posinimage) {
  delete posinimage_;
  posinimage_ = posinimage;
  if (posinimage) {
    set_has_posinimage();
  } else {
    clear_has_posinimage();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.LinePercept.Intersection.posInImage)
}

// optional .naothmessages.DoubleVector2 posOnField = 2;
bool LinePercept_Intersection::has_posonfield() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LinePercept_Intersection::set_has_posonfield() {
  _has_bits_[0] |= 0x00000002u;
}
void LinePercept_Intersection::clear_has_posonfield() {
  _has_bits_[0] &= ~0x00000002u;
}
void LinePercept_Intersection::clear_posonfield() {
  if (posonfield_ != NULL) posonfield_->::naothmessages::DoubleVector2::Clear();
  clear_has_posonfield();
}
const ::naothmessages::DoubleVector2& LinePercept_Intersection::posonfield() const {
  const ::naothmessages::DoubleVector2* p = posonfield_;
  // @@protoc_insertion_point(field_get:naothmessages.LinePercept.Intersection.posOnField)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* LinePercept_Intersection::mutable_posonfield() {
  set_has_posonfield();
  if (posonfield_ == NULL) {
    posonfield_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.LinePercept.Intersection.posOnField)
  return posonfield_;
}
::naothmessages::DoubleVector2* LinePercept_Intersection::release_posonfield() {
  // @@protoc_insertion_point(field_release:naothmessages.LinePercept.Intersection.posOnField)
  clear_has_posonfield();
  ::naothmessages::DoubleVector2* temp = posonfield_;
  posonfield_ = NULL;
  return temp;
}
void LinePercept_Intersection::set_allocated_posonfield(::naothmessages::DoubleVector2* posonfield) {
  delete posonfield_;
  posonfield_ = posonfield;
  if (posonfield) {
    set_has_posonfield();
  } else {
    clear_has_posonfield();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.LinePercept.Intersection.posOnField)
}

// optional .naothmessages.LinePercept.Intersection.IntersectionType type = 3;
bool LinePercept_Intersection::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LinePercept_Intersection::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void LinePercept_Intersection::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void LinePercept_Intersection::clear_type() {
  type_ = 0;
  clear_has_type();
}
::naothmessages::LinePercept_Intersection_IntersectionType LinePercept_Intersection::type() const {
  // @@protoc_insertion_point(field_get:naothmessages.LinePercept.Intersection.type)
  return static_cast< ::naothmessages::LinePercept_Intersection_IntersectionType >(type_);
}
void LinePercept_Intersection::set_type(::naothmessages::LinePercept_Intersection_IntersectionType value) {
  assert(::naothmessages::LinePercept_Intersection_IntersectionType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.LinePercept.Intersection.type)
}

// optional uint32 segmentOneIndex = 6;
bool LinePercept_Intersection::has_segmentoneindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LinePercept_Intersection::set_has_segmentoneindex() {
  _has_bits_[0] |= 0x00000008u;
}
void LinePercept_Intersection::clear_has_segmentoneindex() {
  _has_bits_[0] &= ~0x00000008u;
}
void LinePercept_Intersection::clear_segmentoneindex() {
  segmentoneindex_ = 0u;
  clear_has_segmentoneindex();
}
::google::protobuf::uint32 LinePercept_Intersection::segmentoneindex() const {
  // @@protoc_insertion_point(field_get:naothmessages.LinePercept.Intersection.segmentOneIndex)
  return segmentoneindex_;
}
void LinePercept_Intersection::set_segmentoneindex(::google::protobuf::uint32 value) {
  set_has_segmentoneindex();
  segmentoneindex_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.LinePercept.Intersection.segmentOneIndex)
}

// optional uint32 segmentTwoIndex = 7;
bool LinePercept_Intersection::has_segmenttwoindex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LinePercept_Intersection::set_has_segmenttwoindex() {
  _has_bits_[0] |= 0x00000020u;
}
void LinePercept_Intersection::clear_has_segmenttwoindex() {
  _has_bits_[0] &= ~0x00000020u;
}
void LinePercept_Intersection::clear_segmenttwoindex() {
  segmenttwoindex_ = 0u;
  clear_has_segmenttwoindex();
}
::google::protobuf::uint32 LinePercept_Intersection::segmenttwoindex() const {
  // @@protoc_insertion_point(field_get:naothmessages.LinePercept.Intersection.segmentTwoIndex)
  return segmenttwoindex_;
}
void LinePercept_Intersection::set_segmenttwoindex(::google::protobuf::uint32 value) {
  set_has_segmenttwoindex();
  segmenttwoindex_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.LinePercept.Intersection.segmentTwoIndex)
}

// optional double segmentOneDistance = 8;
bool LinePercept_Intersection::has_segmentonedistance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LinePercept_Intersection::set_has_segmentonedistance() {
  _has_bits_[0] |= 0x00000010u;
}
void LinePercept_Intersection::clear_has_segmentonedistance() {
  _has_bits_[0] &= ~0x00000010u;
}
void LinePercept_Intersection::clear_segmentonedistance() {
  segmentonedistance_ = 0;
  clear_has_segmentonedistance();
}
double LinePercept_Intersection::segmentonedistance() const {
  // @@protoc_insertion_point(field_get:naothmessages.LinePercept.Intersection.segmentOneDistance)
  return segmentonedistance_;
}
void LinePercept_Intersection::set_segmentonedistance(double value) {
  set_has_segmentonedistance();
  segmentonedistance_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.LinePercept.Intersection.segmentOneDistance)
}

// optional double segmentTwoDistance = 9;
bool LinePercept_Intersection::has_segmenttwodistance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LinePercept_Intersection::set_has_segmenttwodistance() {
  _has_bits_[0] |= 0x00000040u;
}
void LinePercept_Intersection::clear_has_segmenttwodistance() {
  _has_bits_[0] &= ~0x00000040u;
}
void LinePercept_Intersection::clear_segmenttwodistance() {
  segmenttwodistance_ = 0;
  clear_has_segmenttwodistance();
}
double LinePercept_Intersection::segmenttwodistance() const {
  // @@protoc_insertion_point(field_get:naothmessages.LinePercept.Intersection.segmentTwoDistance)
  return segmenttwodistance_;
}
void LinePercept_Intersection::set_segmenttwodistance(double value) {
  set_has_segmenttwodistance();
  segmenttwodistance_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.LinePercept.Intersection.segmentTwoDistance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinePercept_FieldLineSegment::kLineInImageFieldNumber;
const int LinePercept_FieldLineSegment::kLineOnFieldFieldNumber;
const int LinePercept_FieldLineSegment::kBeginExtendCountFieldNumber;
const int LinePercept_FieldLineSegment::kEndExtendCountFieldNumber;
const int LinePercept_FieldLineSegment::kThicknessFieldNumber;
const int LinePercept_FieldLineSegment::kSlopeFieldNumber;
const int LinePercept_FieldLineSegment::kAngleFieldNumber;
const int LinePercept_FieldLineSegment::kValidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinePercept_FieldLineSegment::LinePercept_FieldLineSegment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.LinePercept.FieldLineSegment)
}
LinePercept_FieldLineSegment::LinePercept_FieldLineSegment(const LinePercept_FieldLineSegment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lineinimage()) {
    lineinimage_ = new ::naothmessages::LineSegment(*from.lineinimage_);
  } else {
    lineinimage_ = NULL;
  }
  if (from.has_lineonfield()) {
    lineonfield_ = new ::naothmessages::LineSegment(*from.lineonfield_);
  } else {
    lineonfield_ = NULL;
  }
  ::memcpy(&beginextendcount_, &from.beginextendcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&valid_) -
    reinterpret_cast<char*>(&beginextendcount_)) + sizeof(valid_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.LinePercept.FieldLineSegment)
}

void LinePercept_FieldLineSegment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&lineinimage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&valid_) -
      reinterpret_cast<char*>(&lineinimage_)) + sizeof(valid_));
}

LinePercept_FieldLineSegment::~LinePercept_FieldLineSegment() {
  // @@protoc_insertion_point(destructor:naothmessages.LinePercept.FieldLineSegment)
  SharedDtor();
}

void LinePercept_FieldLineSegment::SharedDtor() {
  if (this != internal_default_instance()) delete lineinimage_;
  if (this != internal_default_instance()) delete lineonfield_;
}

void LinePercept_FieldLineSegment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinePercept_FieldLineSegment::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LinePercept_FieldLineSegment& LinePercept_FieldLineSegment::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinePercept_FieldLineSegment* LinePercept_FieldLineSegment::New(::google::protobuf::Arena* arena) const {
  LinePercept_FieldLineSegment* n = new LinePercept_FieldLineSegment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinePercept_FieldLineSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.LinePercept.FieldLineSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(lineinimage_ != NULL);
      lineinimage_->::naothmessages::LineSegment::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lineonfield_ != NULL);
      lineonfield_->::naothmessages::LineSegment::Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&beginextendcount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&valid_) -
        reinterpret_cast<char*>(&beginextendcount_)) + sizeof(valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LinePercept_FieldLineSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.LinePercept.FieldLineSegment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .naothmessages.LineSegment lineInImage = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lineinimage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.LineSegment lineOnField = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lineonfield()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 beginExtendCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_beginextendcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beginextendcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 endExtendCount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_endextendcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endextendcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double thickness = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_thickness();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &thickness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double slope = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_slope();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &slope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double angle = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool valid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.LinePercept.FieldLineSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.LinePercept.FieldLineSegment)
  return false;
#undef DO_
}

void LinePercept_FieldLineSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.LinePercept.FieldLineSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.LineSegment lineInImage = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->lineinimage_, output);
  }

  // optional .naothmessages.LineSegment lineOnField = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->lineonfield_, output);
  }

  // optional int32 beginExtendCount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->beginextendcount(), output);
  }

  // optional int32 endExtendCount = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->endextendcount(), output);
  }

  // optional double thickness = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->thickness(), output);
  }

  // optional double slope = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->slope(), output);
  }

  // optional double angle = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->angle(), output);
  }

  // optional bool valid = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->valid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.LinePercept.FieldLineSegment)
}

::google::protobuf::uint8* LinePercept_FieldLineSegment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.LinePercept.FieldLineSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.LineSegment lineInImage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->lineinimage_, deterministic, target);
  }

  // optional .naothmessages.LineSegment lineOnField = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->lineonfield_, deterministic, target);
  }

  // optional int32 beginExtendCount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->beginextendcount(), target);
  }

  // optional int32 endExtendCount = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->endextendcount(), target);
  }

  // optional double thickness = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->thickness(), target);
  }

  // optional double slope = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->slope(), target);
  }

  // optional double angle = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->angle(), target);
  }

  // optional bool valid = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->valid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.LinePercept.FieldLineSegment)
  return target;
}

size_t LinePercept_FieldLineSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.LinePercept.FieldLineSegment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .naothmessages.LineSegment lineInImage = 1;
    if (has_lineinimage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lineinimage_);
    }

    // optional .naothmessages.LineSegment lineOnField = 2;
    if (has_lineonfield()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lineonfield_);
    }

    // optional int32 beginExtendCount = 3;
    if (has_beginextendcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beginextendcount());
    }

    // optional int32 endExtendCount = 4;
    if (has_endextendcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endextendcount());
    }

    // optional double thickness = 5;
    if (has_thickness()) {
      total_size += 1 + 8;
    }

    // optional double slope = 6;
    if (has_slope()) {
      total_size += 1 + 8;
    }

    // optional double angle = 7;
    if (has_angle()) {
      total_size += 1 + 8;
    }

    // optional bool valid = 8;
    if (has_valid()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinePercept_FieldLineSegment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.LinePercept.FieldLineSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const LinePercept_FieldLineSegment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinePercept_FieldLineSegment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.LinePercept.FieldLineSegment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.LinePercept.FieldLineSegment)
    MergeFrom(*source);
  }
}

void LinePercept_FieldLineSegment::MergeFrom(const LinePercept_FieldLineSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.LinePercept.FieldLineSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_lineinimage()->::naothmessages::LineSegment::MergeFrom(from.lineinimage());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_lineonfield()->::naothmessages::LineSegment::MergeFrom(from.lineonfield());
    }
    if (cached_has_bits & 0x00000004u) {
      beginextendcount_ = from.beginextendcount_;
    }
    if (cached_has_bits & 0x00000008u) {
      endextendcount_ = from.endextendcount_;
    }
    if (cached_has_bits & 0x00000010u) {
      thickness_ = from.thickness_;
    }
    if (cached_has_bits & 0x00000020u) {
      slope_ = from.slope_;
    }
    if (cached_has_bits & 0x00000040u) {
      angle_ = from.angle_;
    }
    if (cached_has_bits & 0x00000080u) {
      valid_ = from.valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LinePercept_FieldLineSegment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.LinePercept.FieldLineSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinePercept_FieldLineSegment::CopyFrom(const LinePercept_FieldLineSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.LinePercept.FieldLineSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinePercept_FieldLineSegment::IsInitialized() const {
  if (has_lineinimage()) {
    if (!this->lineinimage_->IsInitialized()) return false;
  }
  if (has_lineonfield()) {
    if (!this->lineonfield_->IsInitialized()) return false;
  }
  return true;
}

void LinePercept_FieldLineSegment::Swap(LinePercept_FieldLineSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinePercept_FieldLineSegment::InternalSwap(LinePercept_FieldLineSegment* other) {
  using std::swap;
  swap(lineinimage_, other->lineinimage_);
  swap(lineonfield_, other->lineonfield_);
  swap(beginextendcount_, other->beginextendcount_);
  swap(endextendcount_, other->endextendcount_);
  swap(thickness_, other->thickness_);
  swap(slope_, other->slope_);
  swap(angle_, other->angle_);
  swap(valid_, other->valid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinePercept_FieldLineSegment::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinePercept_FieldLineSegment

// optional .naothmessages.LineSegment lineInImage = 1;
bool LinePercept_FieldLineSegment::has_lineinimage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LinePercept_FieldLineSegment::set_has_lineinimage() {
  _has_bits_[0] |= 0x00000001u;
}
void LinePercept_FieldLineSegment::clear_has_lineinimage() {
  _has_bits_[0] &= ~0x00000001u;
}
void LinePercept_FieldLineSegment::clear_lineinimage() {
  if (lineinimage_ != NULL) lineinimage_->::naothmessages::LineSegment::Clear();
  clear_has_lineinimage();
}
const ::naothmessages::LineSegment& LinePercept_FieldLineSegment::lineinimage() const {
  const ::naothmessages::LineSegment* p = lineinimage_;
  // @@protoc_insertion_point(field_get:naothmessages.LinePercept.FieldLineSegment.lineInImage)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::LineSegment*>(
      &::naothmessages::_LineSegment_default_instance_);
}
::naothmessages::LineSegment* LinePercept_FieldLineSegment::mutable_lineinimage() {
  set_has_lineinimage();
  if (lineinimage_ == NULL) {
    lineinimage_ = new ::naothmessages::LineSegment;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.LinePercept.FieldLineSegment.lineInImage)
  return lineinimage_;
}
::naothmessages::LineSegment* LinePercept_FieldLineSegment::release_lineinimage() {
  // @@protoc_insertion_point(field_release:naothmessages.LinePercept.FieldLineSegment.lineInImage)
  clear_has_lineinimage();
  ::naothmessages::LineSegment* temp = lineinimage_;
  lineinimage_ = NULL;
  return temp;
}
void LinePercept_FieldLineSegment::set_allocated_lineinimage(::naothmessages::LineSegment* lineinimage) {
  delete lineinimage_;
  lineinimage_ = lineinimage;
  if (lineinimage) {
    set_has_lineinimage();
  } else {
    clear_has_lineinimage();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.LinePercept.FieldLineSegment.lineInImage)
}

// optional .naothmessages.LineSegment lineOnField = 2;
bool LinePercept_FieldLineSegment::has_lineonfield() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LinePercept_FieldLineSegment::set_has_lineonfield() {
  _has_bits_[0] |= 0x00000002u;
}
void LinePercept_FieldLineSegment::clear_has_lineonfield() {
  _has_bits_[0] &= ~0x00000002u;
}
void LinePercept_FieldLineSegment::clear_lineonfield() {
  if (lineonfield_ != NULL) lineonfield_->::naothmessages::LineSegment::Clear();
  clear_has_lineonfield();
}
const ::naothmessages::LineSegment& LinePercept_FieldLineSegment::lineonfield() const {
  const ::naothmessages::LineSegment* p = lineonfield_;
  // @@protoc_insertion_point(field_get:naothmessages.LinePercept.FieldLineSegment.lineOnField)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::LineSegment*>(
      &::naothmessages::_LineSegment_default_instance_);
}
::naothmessages::LineSegment* LinePercept_FieldLineSegment::mutable_lineonfield() {
  set_has_lineonfield();
  if (lineonfield_ == NULL) {
    lineonfield_ = new ::naothmessages::LineSegment;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.LinePercept.FieldLineSegment.lineOnField)
  return lineonfield_;
}
::naothmessages::LineSegment* LinePercept_FieldLineSegment::release_lineonfield() {
  // @@protoc_insertion_point(field_release:naothmessages.LinePercept.FieldLineSegment.lineOnField)
  clear_has_lineonfield();
  ::naothmessages::LineSegment* temp = lineonfield_;
  lineonfield_ = NULL;
  return temp;
}
void LinePercept_FieldLineSegment::set_allocated_lineonfield(::naothmessages::LineSegment* lineonfield) {
  delete lineonfield_;
  lineonfield_ = lineonfield;
  if (lineonfield) {
    set_has_lineonfield();
  } else {
    clear_has_lineonfield();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.LinePercept.FieldLineSegment.lineOnField)
}

// optional int32 beginExtendCount = 3;
bool LinePercept_FieldLineSegment::has_beginextendcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LinePercept_FieldLineSegment::set_has_beginextendcount() {
  _has_bits_[0] |= 0x00000004u;
}
void LinePercept_FieldLineSegment::clear_has_beginextendcount() {
  _has_bits_[0] &= ~0x00000004u;
}
void LinePercept_FieldLineSegment::clear_beginextendcount() {
  beginextendcount_ = 0;
  clear_has_beginextendcount();
}
::google::protobuf::int32 LinePercept_FieldLineSegment::beginextendcount() const {
  // @@protoc_insertion_point(field_get:naothmessages.LinePercept.FieldLineSegment.beginExtendCount)
  return beginextendcount_;
}
void LinePercept_FieldLineSegment::set_beginextendcount(::google::protobuf::int32 value) {
  set_has_beginextendcount();
  beginextendcount_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.LinePercept.FieldLineSegment.beginExtendCount)
}

// optional int32 endExtendCount = 4;
bool LinePercept_FieldLineSegment::has_endextendcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LinePercept_FieldLineSegment::set_has_endextendcount() {
  _has_bits_[0] |= 0x00000008u;
}
void LinePercept_FieldLineSegment::clear_has_endextendcount() {
  _has_bits_[0] &= ~0x00000008u;
}
void LinePercept_FieldLineSegment::clear_endextendcount() {
  endextendcount_ = 0;
  clear_has_endextendcount();
}
::google::protobuf::int32 LinePercept_FieldLineSegment::endextendcount() const {
  // @@protoc_insertion_point(field_get:naothmessages.LinePercept.FieldLineSegment.endExtendCount)
  return endextendcount_;
}
void LinePercept_FieldLineSegment::set_endextendcount(::google::protobuf::int32 value) {
  set_has_endextendcount();
  endextendcount_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.LinePercept.FieldLineSegment.endExtendCount)
}

// optional double thickness = 5;
bool LinePercept_FieldLineSegment::has_thickness() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LinePercept_FieldLineSegment::set_has_thickness() {
  _has_bits_[0] |= 0x00000010u;
}
void LinePercept_FieldLineSegment::clear_has_thickness() {
  _has_bits_[0] &= ~0x00000010u;
}
void LinePercept_FieldLineSegment::clear_thickness() {
  thickness_ = 0;
  clear_has_thickness();
}
double LinePercept_FieldLineSegment::thickness() const {
  // @@protoc_insertion_point(field_get:naothmessages.LinePercept.FieldLineSegment.thickness)
  return thickness_;
}
void LinePercept_FieldLineSegment::set_thickness(double value) {
  set_has_thickness();
  thickness_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.LinePercept.FieldLineSegment.thickness)
}

// optional double slope = 6;
bool LinePercept_FieldLineSegment::has_slope() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LinePercept_FieldLineSegment::set_has_slope() {
  _has_bits_[0] |= 0x00000020u;
}
void LinePercept_FieldLineSegment::clear_has_slope() {
  _has_bits_[0] &= ~0x00000020u;
}
void LinePercept_FieldLineSegment::clear_slope() {
  slope_ = 0;
  clear_has_slope();
}
double LinePercept_FieldLineSegment::slope() const {
  // @@protoc_insertion_point(field_get:naothmessages.LinePercept.FieldLineSegment.slope)
  return slope_;
}
void LinePercept_FieldLineSegment::set_slope(double value) {
  set_has_slope();
  slope_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.LinePercept.FieldLineSegment.slope)
}

// optional double angle = 7;
bool LinePercept_FieldLineSegment::has_angle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LinePercept_FieldLineSegment::set_has_angle() {
  _has_bits_[0] |= 0x00000040u;
}
void LinePercept_FieldLineSegment::clear_has_angle() {
  _has_bits_[0] &= ~0x00000040u;
}
void LinePercept_FieldLineSegment::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
double LinePercept_FieldLineSegment::angle() const {
  // @@protoc_insertion_point(field_get:naothmessages.LinePercept.FieldLineSegment.angle)
  return angle_;
}
void LinePercept_FieldLineSegment::set_angle(double value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.LinePercept.FieldLineSegment.angle)
}

// optional bool valid = 8;
bool LinePercept_FieldLineSegment::has_valid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LinePercept_FieldLineSegment::set_has_valid() {
  _has_bits_[0] |= 0x00000080u;
}
void LinePercept_FieldLineSegment::clear_has_valid() {
  _has_bits_[0] &= ~0x00000080u;
}
void LinePercept_FieldLineSegment::clear_valid() {
  valid_ = false;
  clear_has_valid();
}
bool LinePercept_FieldLineSegment::valid() const {
  // @@protoc_insertion_point(field_get:naothmessages.LinePercept.FieldLineSegment.valid)
  return valid_;
}
void LinePercept_FieldLineSegment::set_valid(bool value) {
  set_has_valid();
  valid_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.LinePercept.FieldLineSegment.valid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinePercept::kLinesFieldNumber;
const int LinePercept::kIntersectionsFieldNumber;
const int LinePercept::kMiddleCircleCenterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinePercept::LinePercept()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.LinePercept)
}
LinePercept::LinePercept(const LinePercept& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      lines_(from.lines_),
      intersections_(from.intersections_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_middlecirclecenter()) {
    middlecirclecenter_ = new ::naothmessages::DoubleVector2(*from.middlecirclecenter_);
  } else {
    middlecirclecenter_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:naothmessages.LinePercept)
}

void LinePercept::SharedCtor() {
  _cached_size_ = 0;
  middlecirclecenter_ = NULL;
}

LinePercept::~LinePercept() {
  // @@protoc_insertion_point(destructor:naothmessages.LinePercept)
  SharedDtor();
}

void LinePercept::SharedDtor() {
  if (this != internal_default_instance()) delete middlecirclecenter_;
}

void LinePercept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinePercept::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LinePercept& LinePercept::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinePercept* LinePercept::New(::google::protobuf::Arena* arena) const {
  LinePercept* n = new LinePercept;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinePercept::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.LinePercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lines_.Clear();
  intersections_.Clear();
  if (has_middlecirclecenter()) {
    GOOGLE_DCHECK(middlecirclecenter_ != NULL);
    middlecirclecenter_->::naothmessages::DoubleVector2::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LinePercept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.LinePercept)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .naothmessages.LinePercept.FieldLineSegment lines = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lines()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .naothmessages.LinePercept.Intersection intersections = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_intersections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector2 middleCircleCenter = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_middlecirclecenter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.LinePercept)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.LinePercept)
  return false;
#undef DO_
}

void LinePercept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.LinePercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .naothmessages.LinePercept.FieldLineSegment lines = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lines_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lines(static_cast<int>(i)), output);
  }

  // repeated .naothmessages.LinePercept.Intersection intersections = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intersections_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->intersections(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.DoubleVector2 middleCircleCenter = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->middlecirclecenter_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.LinePercept)
}

::google::protobuf::uint8* LinePercept::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.LinePercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .naothmessages.LinePercept.FieldLineSegment lines = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lines_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->lines(static_cast<int>(i)), deterministic, target);
  }

  // repeated .naothmessages.LinePercept.Intersection intersections = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intersections_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->intersections(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.DoubleVector2 middleCircleCenter = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->middlecirclecenter_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.LinePercept)
  return target;
}

size_t LinePercept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.LinePercept)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .naothmessages.LinePercept.FieldLineSegment lines = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->lines_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lines(static_cast<int>(i)));
    }
  }

  // repeated .naothmessages.LinePercept.Intersection intersections = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->intersections_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->intersections(static_cast<int>(i)));
    }
  }

  // optional .naothmessages.DoubleVector2 middleCircleCenter = 3;
  if (has_middlecirclecenter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->middlecirclecenter_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinePercept::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.LinePercept)
  GOOGLE_DCHECK_NE(&from, this);
  const LinePercept* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinePercept>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.LinePercept)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.LinePercept)
    MergeFrom(*source);
  }
}

void LinePercept::MergeFrom(const LinePercept& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.LinePercept)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lines_.MergeFrom(from.lines_);
  intersections_.MergeFrom(from.intersections_);
  if (from.has_middlecirclecenter()) {
    mutable_middlecirclecenter()->::naothmessages::DoubleVector2::MergeFrom(from.middlecirclecenter());
  }
}

void LinePercept::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.LinePercept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinePercept::CopyFrom(const LinePercept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.LinePercept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinePercept::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->lines())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->intersections())) return false;
  if (has_middlecirclecenter()) {
    if (!this->middlecirclecenter_->IsInitialized()) return false;
  }
  return true;
}

void LinePercept::Swap(LinePercept* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinePercept::InternalSwap(LinePercept* other) {
  using std::swap;
  lines_.InternalSwap(&other->lines_);
  intersections_.InternalSwap(&other->intersections_);
  swap(middlecirclecenter_, other->middlecirclecenter_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinePercept::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinePercept

// repeated .naothmessages.LinePercept.FieldLineSegment lines = 1;
int LinePercept::lines_size() const {
  return lines_.size();
}
void LinePercept::clear_lines() {
  lines_.Clear();
}
const ::naothmessages::LinePercept_FieldLineSegment& LinePercept::lines(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.LinePercept.lines)
  return lines_.Get(index);
}
::naothmessages::LinePercept_FieldLineSegment* LinePercept::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.LinePercept.lines)
  return lines_.Mutable(index);
}
::naothmessages::LinePercept_FieldLineSegment* LinePercept::add_lines() {
  // @@protoc_insertion_point(field_add:naothmessages.LinePercept.lines)
  return lines_.Add();
}
::google::protobuf::RepeatedPtrField< ::naothmessages::LinePercept_FieldLineSegment >*
LinePercept::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.LinePercept.lines)
  return &lines_;
}
const ::google::protobuf::RepeatedPtrField< ::naothmessages::LinePercept_FieldLineSegment >&
LinePercept::lines() const {
  // @@protoc_insertion_point(field_list:naothmessages.LinePercept.lines)
  return lines_;
}

// repeated .naothmessages.LinePercept.Intersection intersections = 2;
int LinePercept::intersections_size() const {
  return intersections_.size();
}
void LinePercept::clear_intersections() {
  intersections_.Clear();
}
const ::naothmessages::LinePercept_Intersection& LinePercept::intersections(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.LinePercept.intersections)
  return intersections_.Get(index);
}
::naothmessages::LinePercept_Intersection* LinePercept::mutable_intersections(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.LinePercept.intersections)
  return intersections_.Mutable(index);
}
::naothmessages::LinePercept_Intersection* LinePercept::add_intersections() {
  // @@protoc_insertion_point(field_add:naothmessages.LinePercept.intersections)
  return intersections_.Add();
}
::google::protobuf::RepeatedPtrField< ::naothmessages::LinePercept_Intersection >*
LinePercept::mutable_intersections() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.LinePercept.intersections)
  return &intersections_;
}
const ::google::protobuf::RepeatedPtrField< ::naothmessages::LinePercept_Intersection >&
LinePercept::intersections() const {
  // @@protoc_insertion_point(field_list:naothmessages.LinePercept.intersections)
  return intersections_;
}

// optional .naothmessages.DoubleVector2 middleCircleCenter = 3;
bool LinePercept::has_middlecirclecenter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LinePercept::set_has_middlecirclecenter() {
  _has_bits_[0] |= 0x00000001u;
}
void LinePercept::clear_has_middlecirclecenter() {
  _has_bits_[0] &= ~0x00000001u;
}
void LinePercept::clear_middlecirclecenter() {
  if (middlecirclecenter_ != NULL) middlecirclecenter_->::naothmessages::DoubleVector2::Clear();
  clear_has_middlecirclecenter();
}
const ::naothmessages::DoubleVector2& LinePercept::middlecirclecenter() const {
  const ::naothmessages::DoubleVector2* p = middlecirclecenter_;
  // @@protoc_insertion_point(field_get:naothmessages.LinePercept.middleCircleCenter)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* LinePercept::mutable_middlecirclecenter() {
  set_has_middlecirclecenter();
  if (middlecirclecenter_ == NULL) {
    middlecirclecenter_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.LinePercept.middleCircleCenter)
  return middlecirclecenter_;
}
::naothmessages::DoubleVector2* LinePercept::release_middlecirclecenter() {
  // @@protoc_insertion_point(field_release:naothmessages.LinePercept.middleCircleCenter)
  clear_has_middlecirclecenter();
  ::naothmessages::DoubleVector2* temp = middlecirclecenter_;
  middlecirclecenter_ = NULL;
  return temp;
}
void LinePercept::set_allocated_middlecirclecenter(::naothmessages::DoubleVector2* middlecirclecenter) {
  delete middlecirclecenter_;
  middlecirclecenter_ = middlecirclecenter;
  if (middlecirclecenter) {
    set_has_middlecirclecenter();
  } else {
    clear_has_middlecirclecenter();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.LinePercept.middleCircleCenter)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShortLinePercept::kFieldLineSegmentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShortLinePercept::ShortLinePercept()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.ShortLinePercept)
}
ShortLinePercept::ShortLinePercept(const ShortLinePercept& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      fieldlinesegments_(from.fieldlinesegments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:naothmessages.ShortLinePercept)
}

void ShortLinePercept::SharedCtor() {
  _cached_size_ = 0;
}

ShortLinePercept::~ShortLinePercept() {
  // @@protoc_insertion_point(destructor:naothmessages.ShortLinePercept)
  SharedDtor();
}

void ShortLinePercept::SharedDtor() {
}

void ShortLinePercept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShortLinePercept::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShortLinePercept& ShortLinePercept::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShortLinePercept* ShortLinePercept::New(::google::protobuf::Arena* arena) const {
  ShortLinePercept* n = new ShortLinePercept;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShortLinePercept::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.ShortLinePercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldlinesegments_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShortLinePercept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.ShortLinePercept)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .naothmessages.LineSegment fieldLineSegments = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldlinesegments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.ShortLinePercept)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.ShortLinePercept)
  return false;
#undef DO_
}

void ShortLinePercept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.ShortLinePercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .naothmessages.LineSegment fieldLineSegments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldlinesegments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fieldlinesegments(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.ShortLinePercept)
}

::google::protobuf::uint8* ShortLinePercept::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.ShortLinePercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .naothmessages.LineSegment fieldLineSegments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldlinesegments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->fieldlinesegments(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.ShortLinePercept)
  return target;
}

size_t ShortLinePercept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.ShortLinePercept)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .naothmessages.LineSegment fieldLineSegments = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->fieldlinesegments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fieldlinesegments(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShortLinePercept::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.ShortLinePercept)
  GOOGLE_DCHECK_NE(&from, this);
  const ShortLinePercept* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShortLinePercept>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.ShortLinePercept)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.ShortLinePercept)
    MergeFrom(*source);
  }
}

void ShortLinePercept::MergeFrom(const ShortLinePercept& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.ShortLinePercept)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fieldlinesegments_.MergeFrom(from.fieldlinesegments_);
}

void ShortLinePercept::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.ShortLinePercept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShortLinePercept::CopyFrom(const ShortLinePercept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.ShortLinePercept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShortLinePercept::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->fieldlinesegments())) return false;
  return true;
}

void ShortLinePercept::Swap(ShortLinePercept* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShortLinePercept::InternalSwap(ShortLinePercept* other) {
  using std::swap;
  fieldlinesegments_.InternalSwap(&other->fieldlinesegments_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShortLinePercept::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShortLinePercept

// repeated .naothmessages.LineSegment fieldLineSegments = 1;
int ShortLinePercept::fieldlinesegments_size() const {
  return fieldlinesegments_.size();
}
void ShortLinePercept::clear_fieldlinesegments() {
  fieldlinesegments_.Clear();
}
const ::naothmessages::LineSegment& ShortLinePercept::fieldlinesegments(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.ShortLinePercept.fieldLineSegments)
  return fieldlinesegments_.Get(index);
}
::naothmessages::LineSegment* ShortLinePercept::mutable_fieldlinesegments(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.ShortLinePercept.fieldLineSegments)
  return fieldlinesegments_.Mutable(index);
}
::naothmessages::LineSegment* ShortLinePercept::add_fieldlinesegments() {
  // @@protoc_insertion_point(field_add:naothmessages.ShortLinePercept.fieldLineSegments)
  return fieldlinesegments_.Add();
}
::google::protobuf::RepeatedPtrField< ::naothmessages::LineSegment >*
ShortLinePercept::mutable_fieldlinesegments() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.ShortLinePercept.fieldLineSegments)
  return &fieldlinesegments_;
}
const ::google::protobuf::RepeatedPtrField< ::naothmessages::LineSegment >&
ShortLinePercept::fieldlinesegments() const {
  // @@protoc_insertion_point(field_list:naothmessages.ShortLinePercept.fieldLineSegments)
  return fieldlinesegments_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Polygon::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Polygon::Polygon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:naothmessages.Polygon)
}

void Polygon::SharedCtor() {
  _cached_size_ = 0;
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:naothmessages.Polygon)
  SharedDtor();
}

void Polygon::SharedDtor() {
}

void Polygon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Polygon::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Polygon& Polygon::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

Polygon* Polygon::New(::google::protobuf::Arena* arena) const {
  Polygon* n = new Polygon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.Polygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Polygon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.Polygon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .naothmessages.IntVector2 points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.Polygon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.Polygon)
  return false;
#undef DO_
}

void Polygon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.Polygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .naothmessages.IntVector2 points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->points(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.Polygon)
}

::google::protobuf::uint8* Polygon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.Polygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .naothmessages.IntVector2 points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->points(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.Polygon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .naothmessages.IntVector2 points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->points(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Polygon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  const Polygon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Polygon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.Polygon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.Polygon)
    MergeFrom(*source);
  }
}

void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void Polygon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->points())) return false;
  return true;
}

void Polygon::Swap(Polygon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Polygon::InternalSwap(Polygon* other) {
  using std::swap;
  points_.InternalSwap(&other->points_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Polygon::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Polygon

// repeated .naothmessages.IntVector2 points = 1;
int Polygon::points_size() const {
  return points_.size();
}
void Polygon::clear_points() {
  points_.Clear();
}
const ::naothmessages::IntVector2& Polygon::points(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.Polygon.points)
  return points_.Get(index);
}
::naothmessages::IntVector2* Polygon::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.Polygon.points)
  return points_.Mutable(index);
}
::naothmessages::IntVector2* Polygon::add_points() {
  // @@protoc_insertion_point(field_add:naothmessages.Polygon.points)
  return points_.Add();
}
::google::protobuf::RepeatedPtrField< ::naothmessages::IntVector2 >*
Polygon::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.Polygon.points)
  return &points_;
}
const ::google::protobuf::RepeatedPtrField< ::naothmessages::IntVector2 >&
Polygon::points() const {
  // @@protoc_insertion_point(field_list:naothmessages.Polygon.points)
  return points_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldPercept::kFieldPolyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldPercept::FieldPercept()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.FieldPercept)
}
FieldPercept::FieldPercept(const FieldPercept& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fieldpoly()) {
    fieldpoly_ = new ::naothmessages::Polygon(*from.fieldpoly_);
  } else {
    fieldpoly_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:naothmessages.FieldPercept)
}

void FieldPercept::SharedCtor() {
  _cached_size_ = 0;
  fieldpoly_ = NULL;
}

FieldPercept::~FieldPercept() {
  // @@protoc_insertion_point(destructor:naothmessages.FieldPercept)
  SharedDtor();
}

void FieldPercept::SharedDtor() {
  if (this != internal_default_instance()) delete fieldpoly_;
}

void FieldPercept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldPercept::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FieldPercept& FieldPercept::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

FieldPercept* FieldPercept::New(::google::protobuf::Arena* arena) const {
  FieldPercept* n = new FieldPercept;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FieldPercept::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.FieldPercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_fieldpoly()) {
    GOOGLE_DCHECK(fieldpoly_ != NULL);
    fieldpoly_->::naothmessages::Polygon::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FieldPercept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.FieldPercept)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .naothmessages.Polygon fieldPoly = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fieldpoly()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.FieldPercept)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.FieldPercept)
  return false;
#undef DO_
}

void FieldPercept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.FieldPercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.Polygon fieldPoly = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->fieldpoly_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.FieldPercept)
}

::google::protobuf::uint8* FieldPercept::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.FieldPercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.Polygon fieldPoly = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->fieldpoly_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.FieldPercept)
  return target;
}

size_t FieldPercept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.FieldPercept)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .naothmessages.Polygon fieldPoly = 1;
  if (has_fieldpoly()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fieldpoly_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldPercept::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.FieldPercept)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldPercept* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FieldPercept>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.FieldPercept)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.FieldPercept)
    MergeFrom(*source);
  }
}

void FieldPercept::MergeFrom(const FieldPercept& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.FieldPercept)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fieldpoly()) {
    mutable_fieldpoly()->::naothmessages::Polygon::MergeFrom(from.fieldpoly());
  }
}

void FieldPercept::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.FieldPercept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldPercept::CopyFrom(const FieldPercept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.FieldPercept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldPercept::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_fieldpoly()) {
    if (!this->fieldpoly_->IsInitialized()) return false;
  }
  return true;
}

void FieldPercept::Swap(FieldPercept* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldPercept::InternalSwap(FieldPercept* other) {
  using std::swap;
  swap(fieldpoly_, other->fieldpoly_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FieldPercept::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FieldPercept

// required .naothmessages.Polygon fieldPoly = 1;
bool FieldPercept::has_fieldpoly() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FieldPercept::set_has_fieldpoly() {
  _has_bits_[0] |= 0x00000001u;
}
void FieldPercept::clear_has_fieldpoly() {
  _has_bits_[0] &= ~0x00000001u;
}
void FieldPercept::clear_fieldpoly() {
  if (fieldpoly_ != NULL) fieldpoly_->::naothmessages::Polygon::Clear();
  clear_has_fieldpoly();
}
const ::naothmessages::Polygon& FieldPercept::fieldpoly() const {
  const ::naothmessages::Polygon* p = fieldpoly_;
  // @@protoc_insertion_point(field_get:naothmessages.FieldPercept.fieldPoly)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::Polygon*>(
      &::naothmessages::_Polygon_default_instance_);
}
::naothmessages::Polygon* FieldPercept::mutable_fieldpoly() {
  set_has_fieldpoly();
  if (fieldpoly_ == NULL) {
    fieldpoly_ = new ::naothmessages::Polygon;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.FieldPercept.fieldPoly)
  return fieldpoly_;
}
::naothmessages::Polygon* FieldPercept::release_fieldpoly() {
  // @@protoc_insertion_point(field_release:naothmessages.FieldPercept.fieldPoly)
  clear_has_fieldpoly();
  ::naothmessages::Polygon* temp = fieldpoly_;
  fieldpoly_ = NULL;
  return temp;
}
void FieldPercept::set_allocated_fieldpoly(::naothmessages::Polygon* fieldpoly) {
  delete fieldpoly_;
  fieldpoly_ = fieldpoly;
  if (fieldpoly) {
    set_has_fieldpoly();
  } else {
    clear_has_fieldpoly();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.FieldPercept.fieldPoly)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RansacLinePercept::kFieldLineSegmentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RansacLinePercept::RansacLinePercept()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.RansacLinePercept)
}
RansacLinePercept::RansacLinePercept(const RansacLinePercept& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      fieldlinesegments_(from.fieldlinesegments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:naothmessages.RansacLinePercept)
}

void RansacLinePercept::SharedCtor() {
  _cached_size_ = 0;
}

RansacLinePercept::~RansacLinePercept() {
  // @@protoc_insertion_point(destructor:naothmessages.RansacLinePercept)
  SharedDtor();
}

void RansacLinePercept::SharedDtor() {
}

void RansacLinePercept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RansacLinePercept::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RansacLinePercept& RansacLinePercept::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

RansacLinePercept* RansacLinePercept::New(::google::protobuf::Arena* arena) const {
  RansacLinePercept* n = new RansacLinePercept;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RansacLinePercept::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.RansacLinePercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldlinesegments_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RansacLinePercept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.RansacLinePercept)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .naothmessages.LineSegment fieldLineSegments = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldlinesegments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.RansacLinePercept)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.RansacLinePercept)
  return false;
#undef DO_
}

void RansacLinePercept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.RansacLinePercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .naothmessages.LineSegment fieldLineSegments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldlinesegments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fieldlinesegments(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.RansacLinePercept)
}

::google::protobuf::uint8* RansacLinePercept::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.RansacLinePercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .naothmessages.LineSegment fieldLineSegments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldlinesegments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->fieldlinesegments(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.RansacLinePercept)
  return target;
}

size_t RansacLinePercept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.RansacLinePercept)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .naothmessages.LineSegment fieldLineSegments = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->fieldlinesegments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fieldlinesegments(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RansacLinePercept::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.RansacLinePercept)
  GOOGLE_DCHECK_NE(&from, this);
  const RansacLinePercept* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RansacLinePercept>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.RansacLinePercept)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.RansacLinePercept)
    MergeFrom(*source);
  }
}

void RansacLinePercept::MergeFrom(const RansacLinePercept& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.RansacLinePercept)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fieldlinesegments_.MergeFrom(from.fieldlinesegments_);
}

void RansacLinePercept::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.RansacLinePercept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RansacLinePercept::CopyFrom(const RansacLinePercept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.RansacLinePercept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RansacLinePercept::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->fieldlinesegments())) return false;
  return true;
}

void RansacLinePercept::Swap(RansacLinePercept* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RansacLinePercept::InternalSwap(RansacLinePercept* other) {
  using std::swap;
  fieldlinesegments_.InternalSwap(&other->fieldlinesegments_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RansacLinePercept::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RansacLinePercept

// repeated .naothmessages.LineSegment fieldLineSegments = 1;
int RansacLinePercept::fieldlinesegments_size() const {
  return fieldlinesegments_.size();
}
void RansacLinePercept::clear_fieldlinesegments() {
  fieldlinesegments_.Clear();
}
const ::naothmessages::LineSegment& RansacLinePercept::fieldlinesegments(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.RansacLinePercept.fieldLineSegments)
  return fieldlinesegments_.Get(index);
}
::naothmessages::LineSegment* RansacLinePercept::mutable_fieldlinesegments(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.RansacLinePercept.fieldLineSegments)
  return fieldlinesegments_.Mutable(index);
}
::naothmessages::LineSegment* RansacLinePercept::add_fieldlinesegments() {
  // @@protoc_insertion_point(field_add:naothmessages.RansacLinePercept.fieldLineSegments)
  return fieldlinesegments_.Add();
}
::google::protobuf::RepeatedPtrField< ::naothmessages::LineSegment >*
RansacLinePercept::mutable_fieldlinesegments() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.RansacLinePercept.fieldLineSegments)
  return &fieldlinesegments_;
}
const ::google::protobuf::RepeatedPtrField< ::naothmessages::LineSegment >&
RansacLinePercept::fieldlinesegments() const {
  // @@protoc_insertion_point(field_list:naothmessages.RansacLinePercept.fieldLineSegments)
  return fieldlinesegments_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RansacCirclePercept2018::kWasSeenFieldNumber;
const int RansacCirclePercept2018::kMiddleCircleCenterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RansacCirclePercept2018::RansacCirclePercept2018()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.RansacCirclePercept2018)
}
RansacCirclePercept2018::RansacCirclePercept2018(const RansacCirclePercept2018& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_middlecirclecenter()) {
    middlecirclecenter_ = new ::naothmessages::DoubleVector2(*from.middlecirclecenter_);
  } else {
    middlecirclecenter_ = NULL;
  }
  wasseen_ = from.wasseen_;
  // @@protoc_insertion_point(copy_constructor:naothmessages.RansacCirclePercept2018)
}

void RansacCirclePercept2018::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&middlecirclecenter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wasseen_) -
      reinterpret_cast<char*>(&middlecirclecenter_)) + sizeof(wasseen_));
}

RansacCirclePercept2018::~RansacCirclePercept2018() {
  // @@protoc_insertion_point(destructor:naothmessages.RansacCirclePercept2018)
  SharedDtor();
}

void RansacCirclePercept2018::SharedDtor() {
  if (this != internal_default_instance()) delete middlecirclecenter_;
}

void RansacCirclePercept2018::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RansacCirclePercept2018::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RansacCirclePercept2018& RansacCirclePercept2018::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

RansacCirclePercept2018* RansacCirclePercept2018::New(::google::protobuf::Arena* arena) const {
  RansacCirclePercept2018* n = new RansacCirclePercept2018;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RansacCirclePercept2018::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.RansacCirclePercept2018)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_middlecirclecenter()) {
    GOOGLE_DCHECK(middlecirclecenter_ != NULL);
    middlecirclecenter_->::naothmessages::DoubleVector2::Clear();
  }
  wasseen_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RansacCirclePercept2018::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.RansacCirclePercept2018)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool wasSeen = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_wasseen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wasseen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector2 middleCircleCenter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_middlecirclecenter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.RansacCirclePercept2018)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.RansacCirclePercept2018)
  return false;
#undef DO_
}

void RansacCirclePercept2018::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.RansacCirclePercept2018)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool wasSeen = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->wasseen(), output);
  }

  // optional .naothmessages.DoubleVector2 middleCircleCenter = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->middlecirclecenter_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.RansacCirclePercept2018)
}

::google::protobuf::uint8* RansacCirclePercept2018::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.RansacCirclePercept2018)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool wasSeen = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->wasseen(), target);
  }

  // optional .naothmessages.DoubleVector2 middleCircleCenter = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->middlecirclecenter_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.RansacCirclePercept2018)
  return target;
}

size_t RansacCirclePercept2018::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.RansacCirclePercept2018)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .naothmessages.DoubleVector2 middleCircleCenter = 2;
    if (has_middlecirclecenter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->middlecirclecenter_);
    }

    // optional bool wasSeen = 1;
    if (has_wasseen()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RansacCirclePercept2018::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.RansacCirclePercept2018)
  GOOGLE_DCHECK_NE(&from, this);
  const RansacCirclePercept2018* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RansacCirclePercept2018>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.RansacCirclePercept2018)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.RansacCirclePercept2018)
    MergeFrom(*source);
  }
}

void RansacCirclePercept2018::MergeFrom(const RansacCirclePercept2018& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.RansacCirclePercept2018)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_middlecirclecenter()->::naothmessages::DoubleVector2::MergeFrom(from.middlecirclecenter());
    }
    if (cached_has_bits & 0x00000002u) {
      wasseen_ = from.wasseen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RansacCirclePercept2018::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.RansacCirclePercept2018)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RansacCirclePercept2018::CopyFrom(const RansacCirclePercept2018& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.RansacCirclePercept2018)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RansacCirclePercept2018::IsInitialized() const {
  if (has_middlecirclecenter()) {
    if (!this->middlecirclecenter_->IsInitialized()) return false;
  }
  return true;
}

void RansacCirclePercept2018::Swap(RansacCirclePercept2018* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RansacCirclePercept2018::InternalSwap(RansacCirclePercept2018* other) {
  using std::swap;
  swap(middlecirclecenter_, other->middlecirclecenter_);
  swap(wasseen_, other->wasseen_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RansacCirclePercept2018::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RansacCirclePercept2018

// optional bool wasSeen = 1;
bool RansacCirclePercept2018::has_wasseen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RansacCirclePercept2018::set_has_wasseen() {
  _has_bits_[0] |= 0x00000002u;
}
void RansacCirclePercept2018::clear_has_wasseen() {
  _has_bits_[0] &= ~0x00000002u;
}
void RansacCirclePercept2018::clear_wasseen() {
  wasseen_ = false;
  clear_has_wasseen();
}
bool RansacCirclePercept2018::wasseen() const {
  // @@protoc_insertion_point(field_get:naothmessages.RansacCirclePercept2018.wasSeen)
  return wasseen_;
}
void RansacCirclePercept2018::set_wasseen(bool value) {
  set_has_wasseen();
  wasseen_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.RansacCirclePercept2018.wasSeen)
}

// optional .naothmessages.DoubleVector2 middleCircleCenter = 2;
bool RansacCirclePercept2018::has_middlecirclecenter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RansacCirclePercept2018::set_has_middlecirclecenter() {
  _has_bits_[0] |= 0x00000001u;
}
void RansacCirclePercept2018::clear_has_middlecirclecenter() {
  _has_bits_[0] &= ~0x00000001u;
}
void RansacCirclePercept2018::clear_middlecirclecenter() {
  if (middlecirclecenter_ != NULL) middlecirclecenter_->::naothmessages::DoubleVector2::Clear();
  clear_has_middlecirclecenter();
}
const ::naothmessages::DoubleVector2& RansacCirclePercept2018::middlecirclecenter() const {
  const ::naothmessages::DoubleVector2* p = middlecirclecenter_;
  // @@protoc_insertion_point(field_get:naothmessages.RansacCirclePercept2018.middleCircleCenter)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* RansacCirclePercept2018::mutable_middlecirclecenter() {
  set_has_middlecirclecenter();
  if (middlecirclecenter_ == NULL) {
    middlecirclecenter_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.RansacCirclePercept2018.middleCircleCenter)
  return middlecirclecenter_;
}
::naothmessages::DoubleVector2* RansacCirclePercept2018::release_middlecirclecenter() {
  // @@protoc_insertion_point(field_release:naothmessages.RansacCirclePercept2018.middleCircleCenter)
  clear_has_middlecirclecenter();
  ::naothmessages::DoubleVector2* temp = middlecirclecenter_;
  middlecirclecenter_ = NULL;
  return temp;
}
void RansacCirclePercept2018::set_allocated_middlecirclecenter(::naothmessages::DoubleVector2* middlecirclecenter) {
  delete middlecirclecenter_;
  middlecirclecenter_ = middlecirclecenter;
  if (middlecirclecenter) {
    set_has_middlecirclecenter();
  } else {
    clear_has_middlecirclecenter();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.RansacCirclePercept2018.middleCircleCenter)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScanLineEndPoint::kPosInImageFieldNumber;
const int ScanLineEndPoint::kPosOnFieldFieldNumber;
const int ScanLineEndPoint::kColorFieldNumber;
const int ScanLineEndPoint::kScanLineIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScanLineEndPoint::ScanLineEndPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.ScanLineEndPoint)
}
ScanLineEndPoint::ScanLineEndPoint(const ScanLineEndPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_posinimage()) {
    posinimage_ = new ::naothmessages::IntVector2(*from.posinimage_);
  } else {
    posinimage_ = NULL;
  }
  if (from.has_posonfield()) {
    posonfield_ = new ::naothmessages::DoubleVector2(*from.posonfield_);
  } else {
    posonfield_ = NULL;
  }
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&scanlineid_) -
    reinterpret_cast<char*>(&color_)) + sizeof(scanlineid_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.ScanLineEndPoint)
}

void ScanLineEndPoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&posinimage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scanlineid_) -
      reinterpret_cast<char*>(&posinimage_)) + sizeof(scanlineid_));
}

ScanLineEndPoint::~ScanLineEndPoint() {
  // @@protoc_insertion_point(destructor:naothmessages.ScanLineEndPoint)
  SharedDtor();
}

void ScanLineEndPoint::SharedDtor() {
  if (this != internal_default_instance()) delete posinimage_;
  if (this != internal_default_instance()) delete posonfield_;
}

void ScanLineEndPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanLineEndPoint::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScanLineEndPoint& ScanLineEndPoint::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScanLineEndPoint* ScanLineEndPoint::New(::google::protobuf::Arena* arena) const {
  ScanLineEndPoint* n = new ScanLineEndPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScanLineEndPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.ScanLineEndPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(posinimage_ != NULL);
      posinimage_->::naothmessages::IntVector2::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(posonfield_ != NULL);
      posonfield_->::naothmessages::DoubleVector2::Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scanlineid_) -
        reinterpret_cast<char*>(&color_)) + sizeof(scanlineid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScanLineEndPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.ScanLineEndPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .naothmessages.IntVector2 posInImage = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_posinimage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .naothmessages.DoubleVector2 posOnField = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_posonfield()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .naothmessages.Color color = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::naothmessages::Color_IsValid(value)) {
            set_color(static_cast< ::naothmessages::Color >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ScanLineID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_scanlineid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scanlineid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.ScanLineEndPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.ScanLineEndPoint)
  return false;
#undef DO_
}

void ScanLineEndPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.ScanLineEndPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.IntVector2 posInImage = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->posinimage_, output);
  }

  // required .naothmessages.DoubleVector2 posOnField = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->posonfield_, output);
  }

  // required .naothmessages.Color color = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->color(), output);
  }

  // required uint32 ScanLineID = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scanlineid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.ScanLineEndPoint)
}

::google::protobuf::uint8* ScanLineEndPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.ScanLineEndPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.IntVector2 posInImage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->posinimage_, deterministic, target);
  }

  // required .naothmessages.DoubleVector2 posOnField = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->posonfield_, deterministic, target);
  }

  // required .naothmessages.Color color = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->color(), target);
  }

  // required uint32 ScanLineID = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scanlineid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.ScanLineEndPoint)
  return target;
}

size_t ScanLineEndPoint::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:naothmessages.ScanLineEndPoint)
  size_t total_size = 0;

  if (has_posinimage()) {
    // required .naothmessages.IntVector2 posInImage = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->posinimage_);
  }

  if (has_posonfield()) {
    // required .naothmessages.DoubleVector2 posOnField = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->posonfield_);
  }

  if (has_color()) {
    // required .naothmessages.Color color = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
  }

  if (has_scanlineid()) {
    // required uint32 ScanLineID = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scanlineid());
  }

  return total_size;
}
size_t ScanLineEndPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.ScanLineEndPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .naothmessages.IntVector2 posInImage = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->posinimage_);

    // required .naothmessages.DoubleVector2 posOnField = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->posonfield_);

    // required .naothmessages.Color color = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());

    // required uint32 ScanLineID = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scanlineid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanLineEndPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.ScanLineEndPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const ScanLineEndPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScanLineEndPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.ScanLineEndPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.ScanLineEndPoint)
    MergeFrom(*source);
  }
}

void ScanLineEndPoint::MergeFrom(const ScanLineEndPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.ScanLineEndPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_posinimage()->::naothmessages::IntVector2::MergeFrom(from.posinimage());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_posonfield()->::naothmessages::DoubleVector2::MergeFrom(from.posonfield());
    }
    if (cached_has_bits & 0x00000004u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000008u) {
      scanlineid_ = from.scanlineid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScanLineEndPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.ScanLineEndPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanLineEndPoint::CopyFrom(const ScanLineEndPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.ScanLineEndPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanLineEndPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_posinimage()) {
    if (!this->posinimage_->IsInitialized()) return false;
  }
  if (has_posonfield()) {
    if (!this->posonfield_->IsInitialized()) return false;
  }
  return true;
}

void ScanLineEndPoint::Swap(ScanLineEndPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScanLineEndPoint::InternalSwap(ScanLineEndPoint* other) {
  using std::swap;
  swap(posinimage_, other->posinimage_);
  swap(posonfield_, other->posonfield_);
  swap(color_, other->color_);
  swap(scanlineid_, other->scanlineid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScanLineEndPoint::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScanLineEndPoint

// required .naothmessages.IntVector2 posInImage = 1;
bool ScanLineEndPoint::has_posinimage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ScanLineEndPoint::set_has_posinimage() {
  _has_bits_[0] |= 0x00000001u;
}
void ScanLineEndPoint::clear_has_posinimage() {
  _has_bits_[0] &= ~0x00000001u;
}
void ScanLineEndPoint::clear_posinimage() {
  if (posinimage_ != NULL) posinimage_->::naothmessages::IntVector2::Clear();
  clear_has_posinimage();
}
const ::naothmessages::IntVector2& ScanLineEndPoint::posinimage() const {
  const ::naothmessages::IntVector2* p = posinimage_;
  // @@protoc_insertion_point(field_get:naothmessages.ScanLineEndPoint.posInImage)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::IntVector2*>(
      &::naothmessages::_IntVector2_default_instance_);
}
::naothmessages::IntVector2* ScanLineEndPoint::mutable_posinimage() {
  set_has_posinimage();
  if (posinimage_ == NULL) {
    posinimage_ = new ::naothmessages::IntVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.ScanLineEndPoint.posInImage)
  return posinimage_;
}
::naothmessages::IntVector2* ScanLineEndPoint::release_posinimage() {
  // @@protoc_insertion_point(field_release:naothmessages.ScanLineEndPoint.posInImage)
  clear_has_posinimage();
  ::naothmessages::IntVector2* temp = posinimage_;
  posinimage_ = NULL;
  return temp;
}
void ScanLineEndPoint::set_allocated_posinimage(::naothmessages::IntVector2* posinimage) {
  delete posinimage_;
  posinimage_ = posinimage;
  if (posinimage) {
    set_has_posinimage();
  } else {
    clear_has_posinimage();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.ScanLineEndPoint.posInImage)
}

// required .naothmessages.DoubleVector2 posOnField = 2;
bool ScanLineEndPoint::has_posonfield() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ScanLineEndPoint::set_has_posonfield() {
  _has_bits_[0] |= 0x00000002u;
}
void ScanLineEndPoint::clear_has_posonfield() {
  _has_bits_[0] &= ~0x00000002u;
}
void ScanLineEndPoint::clear_posonfield() {
  if (posonfield_ != NULL) posonfield_->::naothmessages::DoubleVector2::Clear();
  clear_has_posonfield();
}
const ::naothmessages::DoubleVector2& ScanLineEndPoint::posonfield() const {
  const ::naothmessages::DoubleVector2* p = posonfield_;
  // @@protoc_insertion_point(field_get:naothmessages.ScanLineEndPoint.posOnField)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* ScanLineEndPoint::mutable_posonfield() {
  set_has_posonfield();
  if (posonfield_ == NULL) {
    posonfield_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.ScanLineEndPoint.posOnField)
  return posonfield_;
}
::naothmessages::DoubleVector2* ScanLineEndPoint::release_posonfield() {
  // @@protoc_insertion_point(field_release:naothmessages.ScanLineEndPoint.posOnField)
  clear_has_posonfield();
  ::naothmessages::DoubleVector2* temp = posonfield_;
  posonfield_ = NULL;
  return temp;
}
void ScanLineEndPoint::set_allocated_posonfield(::naothmessages::DoubleVector2* posonfield) {
  delete posonfield_;
  posonfield_ = posonfield;
  if (posonfield) {
    set_has_posonfield();
  } else {
    clear_has_posonfield();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.ScanLineEndPoint.posOnField)
}

// required .naothmessages.Color color = 3;
bool ScanLineEndPoint::has_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ScanLineEndPoint::set_has_color() {
  _has_bits_[0] |= 0x00000004u;
}
void ScanLineEndPoint::clear_has_color() {
  _has_bits_[0] &= ~0x00000004u;
}
void ScanLineEndPoint::clear_color() {
  color_ = 0;
  clear_has_color();
}
::naothmessages::Color ScanLineEndPoint::color() const {
  // @@protoc_insertion_point(field_get:naothmessages.ScanLineEndPoint.color)
  return static_cast< ::naothmessages::Color >(color_);
}
void ScanLineEndPoint::set_color(::naothmessages::Color value) {
  assert(::naothmessages::Color_IsValid(value));
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.ScanLineEndPoint.color)
}

// required uint32 ScanLineID = 4;
bool ScanLineEndPoint::has_scanlineid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ScanLineEndPoint::set_has_scanlineid() {
  _has_bits_[0] |= 0x00000008u;
}
void ScanLineEndPoint::clear_has_scanlineid() {
  _has_bits_[0] &= ~0x00000008u;
}
void ScanLineEndPoint::clear_scanlineid() {
  scanlineid_ = 0u;
  clear_has_scanlineid();
}
::google::protobuf::uint32 ScanLineEndPoint::scanlineid() const {
  // @@protoc_insertion_point(field_get:naothmessages.ScanLineEndPoint.ScanLineID)
  return scanlineid_;
}
void ScanLineEndPoint::set_scanlineid(::google::protobuf::uint32 value) {
  set_has_scanlineid();
  scanlineid_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.ScanLineEndPoint.ScanLineID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoubleEdgel::kPointFieldNumber;
const int DoubleEdgel::kDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoubleEdgel::DoubleEdgel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.DoubleEdgel)
}
DoubleEdgel::DoubleEdgel(const DoubleEdgel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_point()) {
    point_ = new ::naothmessages::DoubleVector2(*from.point_);
  } else {
    point_ = NULL;
  }
  if (from.has_direction()) {
    direction_ = new ::naothmessages::DoubleVector2(*from.direction_);
  } else {
    direction_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:naothmessages.DoubleEdgel)
}

void DoubleEdgel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&point_)) + sizeof(direction_));
}

DoubleEdgel::~DoubleEdgel() {
  // @@protoc_insertion_point(destructor:naothmessages.DoubleEdgel)
  SharedDtor();
}

void DoubleEdgel::SharedDtor() {
  if (this != internal_default_instance()) delete point_;
  if (this != internal_default_instance()) delete direction_;
}

void DoubleEdgel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoubleEdgel::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DoubleEdgel& DoubleEdgel::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

DoubleEdgel* DoubleEdgel::New(::google::protobuf::Arena* arena) const {
  DoubleEdgel* n = new DoubleEdgel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DoubleEdgel::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.DoubleEdgel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(point_ != NULL);
      point_->::naothmessages::DoubleVector2::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(direction_ != NULL);
      direction_->::naothmessages::DoubleVector2::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DoubleEdgel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.DoubleEdgel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .naothmessages.DoubleVector2 point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .naothmessages.DoubleVector2 direction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.DoubleEdgel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.DoubleEdgel)
  return false;
#undef DO_
}

void DoubleEdgel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.DoubleEdgel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.DoubleVector2 point = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->point_, output);
  }

  // required .naothmessages.DoubleVector2 direction = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->direction_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.DoubleEdgel)
}

::google::protobuf::uint8* DoubleEdgel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.DoubleEdgel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.DoubleVector2 point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->point_, deterministic, target);
  }

  // required .naothmessages.DoubleVector2 direction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->direction_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.DoubleEdgel)
  return target;
}

size_t DoubleEdgel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:naothmessages.DoubleEdgel)
  size_t total_size = 0;

  if (has_point()) {
    // required .naothmessages.DoubleVector2 point = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->point_);
  }

  if (has_direction()) {
    // required .naothmessages.DoubleVector2 direction = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->direction_);
  }

  return total_size;
}
size_t DoubleEdgel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.DoubleEdgel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .naothmessages.DoubleVector2 point = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->point_);

    // required .naothmessages.DoubleVector2 direction = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->direction_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoubleEdgel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.DoubleEdgel)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleEdgel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DoubleEdgel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.DoubleEdgel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.DoubleEdgel)
    MergeFrom(*source);
  }
}

void DoubleEdgel::MergeFrom(const DoubleEdgel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.DoubleEdgel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_point()->::naothmessages::DoubleVector2::MergeFrom(from.point());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_direction()->::naothmessages::DoubleVector2::MergeFrom(from.direction());
    }
  }
}

void DoubleEdgel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.DoubleEdgel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleEdgel::CopyFrom(const DoubleEdgel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.DoubleEdgel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleEdgel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_point()) {
    if (!this->point_->IsInitialized()) return false;
  }
  if (has_direction()) {
    if (!this->direction_->IsInitialized()) return false;
  }
  return true;
}

void DoubleEdgel::Swap(DoubleEdgel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoubleEdgel::InternalSwap(DoubleEdgel* other) {
  using std::swap;
  swap(point_, other->point_);
  swap(direction_, other->direction_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DoubleEdgel::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DoubleEdgel

// required .naothmessages.DoubleVector2 point = 1;
bool DoubleEdgel::has_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DoubleEdgel::set_has_point() {
  _has_bits_[0] |= 0x00000001u;
}
void DoubleEdgel::clear_has_point() {
  _has_bits_[0] &= ~0x00000001u;
}
void DoubleEdgel::clear_point() {
  if (point_ != NULL) point_->::naothmessages::DoubleVector2::Clear();
  clear_has_point();
}
const ::naothmessages::DoubleVector2& DoubleEdgel::point() const {
  const ::naothmessages::DoubleVector2* p = point_;
  // @@protoc_insertion_point(field_get:naothmessages.DoubleEdgel.point)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* DoubleEdgel::mutable_point() {
  set_has_point();
  if (point_ == NULL) {
    point_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.DoubleEdgel.point)
  return point_;
}
::naothmessages::DoubleVector2* DoubleEdgel::release_point() {
  // @@protoc_insertion_point(field_release:naothmessages.DoubleEdgel.point)
  clear_has_point();
  ::naothmessages::DoubleVector2* temp = point_;
  point_ = NULL;
  return temp;
}
void DoubleEdgel::set_allocated_point(::naothmessages::DoubleVector2* point) {
  delete point_;
  point_ = point;
  if (point) {
    set_has_point();
  } else {
    clear_has_point();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.DoubleEdgel.point)
}

// required .naothmessages.DoubleVector2 direction = 2;
bool DoubleEdgel::has_direction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DoubleEdgel::set_has_direction() {
  _has_bits_[0] |= 0x00000002u;
}
void DoubleEdgel::clear_has_direction() {
  _has_bits_[0] &= ~0x00000002u;
}
void DoubleEdgel::clear_direction() {
  if (direction_ != NULL) direction_->::naothmessages::DoubleVector2::Clear();
  clear_has_direction();
}
const ::naothmessages::DoubleVector2& DoubleEdgel::direction() const {
  const ::naothmessages::DoubleVector2* p = direction_;
  // @@protoc_insertion_point(field_get:naothmessages.DoubleEdgel.direction)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* DoubleEdgel::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) {
    direction_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.DoubleEdgel.direction)
  return direction_;
}
::naothmessages::DoubleVector2* DoubleEdgel::release_direction() {
  // @@protoc_insertion_point(field_release:naothmessages.DoubleEdgel.direction)
  clear_has_direction();
  ::naothmessages::DoubleVector2* temp = direction_;
  direction_ = NULL;
  return temp;
}
void DoubleEdgel::set_allocated_direction(::naothmessages::DoubleVector2* direction) {
  delete direction_;
  direction_ = direction;
  if (direction) {
    set_has_direction();
  } else {
    clear_has_direction();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.DoubleEdgel.direction)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Edgel::kPointFieldNumber;
const int Edgel::kDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Edgel::Edgel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.Edgel)
}
Edgel::Edgel(const Edgel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_point()) {
    point_ = new ::naothmessages::IntVector2(*from.point_);
  } else {
    point_ = NULL;
  }
  if (from.has_direction()) {
    direction_ = new ::naothmessages::DoubleVector2(*from.direction_);
  } else {
    direction_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:naothmessages.Edgel)
}

void Edgel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&point_)) + sizeof(direction_));
}

Edgel::~Edgel() {
  // @@protoc_insertion_point(destructor:naothmessages.Edgel)
  SharedDtor();
}

void Edgel::SharedDtor() {
  if (this != internal_default_instance()) delete point_;
  if (this != internal_default_instance()) delete direction_;
}

void Edgel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Edgel::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Edgel& Edgel::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

Edgel* Edgel::New(::google::protobuf::Arena* arena) const {
  Edgel* n = new Edgel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Edgel::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.Edgel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(point_ != NULL);
      point_->::naothmessages::IntVector2::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(direction_ != NULL);
      direction_->::naothmessages::DoubleVector2::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Edgel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.Edgel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .naothmessages.IntVector2 point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .naothmessages.DoubleVector2 direction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.Edgel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.Edgel)
  return false;
#undef DO_
}

void Edgel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.Edgel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.IntVector2 point = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->point_, output);
  }

  // required .naothmessages.DoubleVector2 direction = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->direction_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.Edgel)
}

::google::protobuf::uint8* Edgel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.Edgel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.IntVector2 point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->point_, deterministic, target);
  }

  // required .naothmessages.DoubleVector2 direction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->direction_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.Edgel)
  return target;
}

size_t Edgel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:naothmessages.Edgel)
  size_t total_size = 0;

  if (has_point()) {
    // required .naothmessages.IntVector2 point = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->point_);
  }

  if (has_direction()) {
    // required .naothmessages.DoubleVector2 direction = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->direction_);
  }

  return total_size;
}
size_t Edgel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.Edgel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .naothmessages.IntVector2 point = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->point_);

    // required .naothmessages.DoubleVector2 direction = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->direction_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Edgel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.Edgel)
  GOOGLE_DCHECK_NE(&from, this);
  const Edgel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Edgel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.Edgel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.Edgel)
    MergeFrom(*source);
  }
}

void Edgel::MergeFrom(const Edgel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.Edgel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_point()->::naothmessages::IntVector2::MergeFrom(from.point());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_direction()->::naothmessages::DoubleVector2::MergeFrom(from.direction());
    }
  }
}

void Edgel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.Edgel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edgel::CopyFrom(const Edgel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.Edgel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edgel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_point()) {
    if (!this->point_->IsInitialized()) return false;
  }
  if (has_direction()) {
    if (!this->direction_->IsInitialized()) return false;
  }
  return true;
}

void Edgel::Swap(Edgel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Edgel::InternalSwap(Edgel* other) {
  using std::swap;
  swap(point_, other->point_);
  swap(direction_, other->direction_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Edgel::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Edgel

// required .naothmessages.IntVector2 point = 1;
bool Edgel::has_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Edgel::set_has_point() {
  _has_bits_[0] |= 0x00000001u;
}
void Edgel::clear_has_point() {
  _has_bits_[0] &= ~0x00000001u;
}
void Edgel::clear_point() {
  if (point_ != NULL) point_->::naothmessages::IntVector2::Clear();
  clear_has_point();
}
const ::naothmessages::IntVector2& Edgel::point() const {
  const ::naothmessages::IntVector2* p = point_;
  // @@protoc_insertion_point(field_get:naothmessages.Edgel.point)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::IntVector2*>(
      &::naothmessages::_IntVector2_default_instance_);
}
::naothmessages::IntVector2* Edgel::mutable_point() {
  set_has_point();
  if (point_ == NULL) {
    point_ = new ::naothmessages::IntVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.Edgel.point)
  return point_;
}
::naothmessages::IntVector2* Edgel::release_point() {
  // @@protoc_insertion_point(field_release:naothmessages.Edgel.point)
  clear_has_point();
  ::naothmessages::IntVector2* temp = point_;
  point_ = NULL;
  return temp;
}
void Edgel::set_allocated_point(::naothmessages::IntVector2* point) {
  delete point_;
  point_ = point;
  if (point) {
    set_has_point();
  } else {
    clear_has_point();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.Edgel.point)
}

// required .naothmessages.DoubleVector2 direction = 2;
bool Edgel::has_direction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Edgel::set_has_direction() {
  _has_bits_[0] |= 0x00000002u;
}
void Edgel::clear_has_direction() {
  _has_bits_[0] &= ~0x00000002u;
}
void Edgel::clear_direction() {
  if (direction_ != NULL) direction_->::naothmessages::DoubleVector2::Clear();
  clear_has_direction();
}
const ::naothmessages::DoubleVector2& Edgel::direction() const {
  const ::naothmessages::DoubleVector2* p = direction_;
  // @@protoc_insertion_point(field_get:naothmessages.Edgel.direction)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* Edgel::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) {
    direction_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.Edgel.direction)
  return direction_;
}
::naothmessages::DoubleVector2* Edgel::release_direction() {
  // @@protoc_insertion_point(field_release:naothmessages.Edgel.direction)
  clear_has_direction();
  ::naothmessages::DoubleVector2* temp = direction_;
  direction_ = NULL;
  return temp;
}
void Edgel::set_allocated_direction(::naothmessages::DoubleVector2* direction) {
  delete direction_;
  direction_ = direction;
  if (direction) {
    set_has_direction();
  } else {
    clear_has_direction();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.Edgel.direction)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EdgelPair::kBeginFieldNumber;
const int EdgelPair::kEndFieldNumber;
const int EdgelPair::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EdgelPair::EdgelPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.EdgelPair)
}
EdgelPair::EdgelPair(const EdgelPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&begin_, &from.begin_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&begin_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.EdgelPair)
}

void EdgelPair::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&begin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&begin_)) + sizeof(id_));
}

EdgelPair::~EdgelPair() {
  // @@protoc_insertion_point(destructor:naothmessages.EdgelPair)
  SharedDtor();
}

void EdgelPair::SharedDtor() {
}

void EdgelPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EdgelPair::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EdgelPair& EdgelPair::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

EdgelPair* EdgelPair::New(::google::protobuf::Arena* arena) const {
  EdgelPair* n = new EdgelPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EdgelPair::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.EdgelPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&begin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&begin_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EdgelPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.EdgelPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 begin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_begin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.EdgelPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.EdgelPair)
  return false;
#undef DO_
}

void EdgelPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.EdgelPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 begin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->begin(), output);
  }

  // required int32 end = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->end(), output);
  }

  // required int32 id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.EdgelPair)
}

::google::protobuf::uint8* EdgelPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.EdgelPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 begin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->begin(), target);
  }

  // required int32 end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->end(), target);
  }

  // required int32 id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.EdgelPair)
  return target;
}

size_t EdgelPair::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:naothmessages.EdgelPair)
  size_t total_size = 0;

  if (has_begin()) {
    // required int32 begin = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->begin());
  }

  if (has_end()) {
    // required int32 end = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end());
  }

  if (has_id()) {
    // required int32 id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  return total_size;
}
size_t EdgelPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.EdgelPair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 begin = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->begin());

    // required int32 end = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end());

    // required int32 id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EdgelPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.EdgelPair)
  GOOGLE_DCHECK_NE(&from, this);
  const EdgelPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EdgelPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.EdgelPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.EdgelPair)
    MergeFrom(*source);
  }
}

void EdgelPair::MergeFrom(const EdgelPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.EdgelPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      begin_ = from.begin_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_ = from.end_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EdgelPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.EdgelPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgelPair::CopyFrom(const EdgelPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.EdgelPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgelPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void EdgelPair::Swap(EdgelPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EdgelPair::InternalSwap(EdgelPair* other) {
  using std::swap;
  swap(begin_, other->begin_);
  swap(end_, other->end_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EdgelPair::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EdgelPair

// required int32 begin = 1;
bool EdgelPair::has_begin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EdgelPair::set_has_begin() {
  _has_bits_[0] |= 0x00000001u;
}
void EdgelPair::clear_has_begin() {
  _has_bits_[0] &= ~0x00000001u;
}
void EdgelPair::clear_begin() {
  begin_ = 0;
  clear_has_begin();
}
::google::protobuf::int32 EdgelPair::begin() const {
  // @@protoc_insertion_point(field_get:naothmessages.EdgelPair.begin)
  return begin_;
}
void EdgelPair::set_begin(::google::protobuf::int32 value) {
  set_has_begin();
  begin_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.EdgelPair.begin)
}

// required int32 end = 2;
bool EdgelPair::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EdgelPair::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
void EdgelPair::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
void EdgelPair::clear_end() {
  end_ = 0;
  clear_has_end();
}
::google::protobuf::int32 EdgelPair::end() const {
  // @@protoc_insertion_point(field_get:naothmessages.EdgelPair.end)
  return end_;
}
void EdgelPair::set_end(::google::protobuf::int32 value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.EdgelPair.end)
}

// required int32 id = 3;
bool EdgelPair::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EdgelPair::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void EdgelPair::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void EdgelPair::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 EdgelPair::id() const {
  // @@protoc_insertion_point(field_get:naothmessages.EdgelPair.id)
  return id_;
}
void EdgelPair::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.EdgelPair.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScanLineEdgelPercept::kEdgelsFieldNumber;
const int ScanLineEdgelPercept::kPairsFieldNumber;
const int ScanLineEdgelPercept::kEndPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScanLineEdgelPercept::ScanLineEdgelPercept()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.ScanLineEdgelPercept)
}
ScanLineEdgelPercept::ScanLineEdgelPercept(const ScanLineEdgelPercept& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      edgels_(from.edgels_),
      endpoints_(from.endpoints_),
      pairs_(from.pairs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:naothmessages.ScanLineEdgelPercept)
}

void ScanLineEdgelPercept::SharedCtor() {
  _cached_size_ = 0;
}

ScanLineEdgelPercept::~ScanLineEdgelPercept() {
  // @@protoc_insertion_point(destructor:naothmessages.ScanLineEdgelPercept)
  SharedDtor();
}

void ScanLineEdgelPercept::SharedDtor() {
}

void ScanLineEdgelPercept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanLineEdgelPercept::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScanLineEdgelPercept& ScanLineEdgelPercept::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScanLineEdgelPercept* ScanLineEdgelPercept::New(::google::protobuf::Arena* arena) const {
  ScanLineEdgelPercept* n = new ScanLineEdgelPercept;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScanLineEdgelPercept::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.ScanLineEdgelPercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edgels_.Clear();
  endpoints_.Clear();
  pairs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScanLineEdgelPercept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.ScanLineEdgelPercept)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .naothmessages.Edgel edgels = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edgels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .naothmessages.ScanLineEndPoint endPoints = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_endpoints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .naothmessages.EdgelPair pairs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pairs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.ScanLineEdgelPercept)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.ScanLineEdgelPercept)
  return false;
#undef DO_
}

void ScanLineEdgelPercept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.ScanLineEdgelPercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .naothmessages.Edgel edgels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edgels_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->edgels(static_cast<int>(i)), output);
  }

  // repeated .naothmessages.ScanLineEndPoint endPoints = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->endpoints_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->endpoints(static_cast<int>(i)), output);
  }

  // repeated .naothmessages.EdgelPair pairs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pairs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pairs(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.ScanLineEdgelPercept)
}

::google::protobuf::uint8* ScanLineEdgelPercept::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.ScanLineEdgelPercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .naothmessages.Edgel edgels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edgels_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->edgels(static_cast<int>(i)), deterministic, target);
  }

  // repeated .naothmessages.ScanLineEndPoint endPoints = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->endpoints_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->endpoints(static_cast<int>(i)), deterministic, target);
  }

  // repeated .naothmessages.EdgelPair pairs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pairs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->pairs(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.ScanLineEdgelPercept)
  return target;
}

size_t ScanLineEdgelPercept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.ScanLineEdgelPercept)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .naothmessages.Edgel edgels = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->edgels_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->edgels(static_cast<int>(i)));
    }
  }

  // repeated .naothmessages.ScanLineEndPoint endPoints = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->endpoints_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endpoints(static_cast<int>(i)));
    }
  }

  // repeated .naothmessages.EdgelPair pairs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->pairs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pairs(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanLineEdgelPercept::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.ScanLineEdgelPercept)
  GOOGLE_DCHECK_NE(&from, this);
  const ScanLineEdgelPercept* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScanLineEdgelPercept>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.ScanLineEdgelPercept)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.ScanLineEdgelPercept)
    MergeFrom(*source);
  }
}

void ScanLineEdgelPercept::MergeFrom(const ScanLineEdgelPercept& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.ScanLineEdgelPercept)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  edgels_.MergeFrom(from.edgels_);
  endpoints_.MergeFrom(from.endpoints_);
  pairs_.MergeFrom(from.pairs_);
}

void ScanLineEdgelPercept::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.ScanLineEdgelPercept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanLineEdgelPercept::CopyFrom(const ScanLineEdgelPercept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.ScanLineEdgelPercept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanLineEdgelPercept::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->edgels())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->endpoints())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->pairs())) return false;
  return true;
}

void ScanLineEdgelPercept::Swap(ScanLineEdgelPercept* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScanLineEdgelPercept::InternalSwap(ScanLineEdgelPercept* other) {
  using std::swap;
  edgels_.InternalSwap(&other->edgels_);
  endpoints_.InternalSwap(&other->endpoints_);
  pairs_.InternalSwap(&other->pairs_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScanLineEdgelPercept::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScanLineEdgelPercept

// repeated .naothmessages.Edgel edgels = 1;
int ScanLineEdgelPercept::edgels_size() const {
  return edgels_.size();
}
void ScanLineEdgelPercept::clear_edgels() {
  edgels_.Clear();
}
const ::naothmessages::Edgel& ScanLineEdgelPercept::edgels(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.ScanLineEdgelPercept.edgels)
  return edgels_.Get(index);
}
::naothmessages::Edgel* ScanLineEdgelPercept::mutable_edgels(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.ScanLineEdgelPercept.edgels)
  return edgels_.Mutable(index);
}
::naothmessages::Edgel* ScanLineEdgelPercept::add_edgels() {
  // @@protoc_insertion_point(field_add:naothmessages.ScanLineEdgelPercept.edgels)
  return edgels_.Add();
}
::google::protobuf::RepeatedPtrField< ::naothmessages::Edgel >*
ScanLineEdgelPercept::mutable_edgels() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.ScanLineEdgelPercept.edgels)
  return &edgels_;
}
const ::google::protobuf::RepeatedPtrField< ::naothmessages::Edgel >&
ScanLineEdgelPercept::edgels() const {
  // @@protoc_insertion_point(field_list:naothmessages.ScanLineEdgelPercept.edgels)
  return edgels_;
}

// repeated .naothmessages.EdgelPair pairs = 3;
int ScanLineEdgelPercept::pairs_size() const {
  return pairs_.size();
}
void ScanLineEdgelPercept::clear_pairs() {
  pairs_.Clear();
}
const ::naothmessages::EdgelPair& ScanLineEdgelPercept::pairs(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.ScanLineEdgelPercept.pairs)
  return pairs_.Get(index);
}
::naothmessages::EdgelPair* ScanLineEdgelPercept::mutable_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.ScanLineEdgelPercept.pairs)
  return pairs_.Mutable(index);
}
::naothmessages::EdgelPair* ScanLineEdgelPercept::add_pairs() {
  // @@protoc_insertion_point(field_add:naothmessages.ScanLineEdgelPercept.pairs)
  return pairs_.Add();
}
::google::protobuf::RepeatedPtrField< ::naothmessages::EdgelPair >*
ScanLineEdgelPercept::mutable_pairs() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.ScanLineEdgelPercept.pairs)
  return &pairs_;
}
const ::google::protobuf::RepeatedPtrField< ::naothmessages::EdgelPair >&
ScanLineEdgelPercept::pairs() const {
  // @@protoc_insertion_point(field_list:naothmessages.ScanLineEdgelPercept.pairs)
  return pairs_;
}

// repeated .naothmessages.ScanLineEndPoint endPoints = 2;
int ScanLineEdgelPercept::endpoints_size() const {
  return endpoints_.size();
}
void ScanLineEdgelPercept::clear_endpoints() {
  endpoints_.Clear();
}
const ::naothmessages::ScanLineEndPoint& ScanLineEdgelPercept::endpoints(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.ScanLineEdgelPercept.endPoints)
  return endpoints_.Get(index);
}
::naothmessages::ScanLineEndPoint* ScanLineEdgelPercept::mutable_endpoints(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.ScanLineEdgelPercept.endPoints)
  return endpoints_.Mutable(index);
}
::naothmessages::ScanLineEndPoint* ScanLineEdgelPercept::add_endpoints() {
  // @@protoc_insertion_point(field_add:naothmessages.ScanLineEdgelPercept.endPoints)
  return endpoints_.Add();
}
::google::protobuf::RepeatedPtrField< ::naothmessages::ScanLineEndPoint >*
ScanLineEdgelPercept::mutable_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.ScanLineEdgelPercept.endPoints)
  return &endpoints_;
}
const ::google::protobuf::RepeatedPtrField< ::naothmessages::ScanLineEndPoint >&
ScanLineEdgelPercept::endpoints() const {
  // @@protoc_insertion_point(field_list:naothmessages.ScanLineEdgelPercept.endPoints)
  return endpoints_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LineGraphPercept::kEdgelsOnFieldFieldNumber;
const int LineGraphPercept::kEdgelsInImageTopFieldNumber;
const int LineGraphPercept::kEdgelsInImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LineGraphPercept::LineGraphPercept()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.LineGraphPercept)
}
LineGraphPercept::LineGraphPercept(const LineGraphPercept& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      edgelsonfield_(from.edgelsonfield_),
      edgelsinimagetop_(from.edgelsinimagetop_),
      edgelsinimage_(from.edgelsinimage_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:naothmessages.LineGraphPercept)
}

void LineGraphPercept::SharedCtor() {
  _cached_size_ = 0;
}

LineGraphPercept::~LineGraphPercept() {
  // @@protoc_insertion_point(destructor:naothmessages.LineGraphPercept)
  SharedDtor();
}

void LineGraphPercept::SharedDtor() {
}

void LineGraphPercept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineGraphPercept::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LineGraphPercept& LineGraphPercept::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

LineGraphPercept* LineGraphPercept::New(::google::protobuf::Arena* arena) const {
  LineGraphPercept* n = new LineGraphPercept;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LineGraphPercept::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.LineGraphPercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edgelsonfield_.Clear();
  edgelsinimagetop_.Clear();
  edgelsinimage_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LineGraphPercept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.LineGraphPercept)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .naothmessages.Edgel edgelsOnField = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edgelsonfield()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .naothmessages.DoubleEdgel edgelsInImageTop = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edgelsinimagetop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .naothmessages.DoubleEdgel edgelsInImage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edgelsinimage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.LineGraphPercept)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.LineGraphPercept)
  return false;
#undef DO_
}

void LineGraphPercept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.LineGraphPercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .naothmessages.Edgel edgelsOnField = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edgelsonfield_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->edgelsonfield(static_cast<int>(i)), output);
  }

  // repeated .naothmessages.DoubleEdgel edgelsInImageTop = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edgelsinimagetop_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->edgelsinimagetop(static_cast<int>(i)), output);
  }

  // repeated .naothmessages.DoubleEdgel edgelsInImage = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edgelsinimage_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->edgelsinimage(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.LineGraphPercept)
}

::google::protobuf::uint8* LineGraphPercept::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.LineGraphPercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .naothmessages.Edgel edgelsOnField = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edgelsonfield_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->edgelsonfield(static_cast<int>(i)), deterministic, target);
  }

  // repeated .naothmessages.DoubleEdgel edgelsInImageTop = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edgelsinimagetop_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->edgelsinimagetop(static_cast<int>(i)), deterministic, target);
  }

  // repeated .naothmessages.DoubleEdgel edgelsInImage = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edgelsinimage_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->edgelsinimage(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.LineGraphPercept)
  return target;
}

size_t LineGraphPercept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.LineGraphPercept)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .naothmessages.Edgel edgelsOnField = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->edgelsonfield_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->edgelsonfield(static_cast<int>(i)));
    }
  }

  // repeated .naothmessages.DoubleEdgel edgelsInImageTop = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->edgelsinimagetop_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->edgelsinimagetop(static_cast<int>(i)));
    }
  }

  // repeated .naothmessages.DoubleEdgel edgelsInImage = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->edgelsinimage_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->edgelsinimage(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineGraphPercept::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.LineGraphPercept)
  GOOGLE_DCHECK_NE(&from, this);
  const LineGraphPercept* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LineGraphPercept>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.LineGraphPercept)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.LineGraphPercept)
    MergeFrom(*source);
  }
}

void LineGraphPercept::MergeFrom(const LineGraphPercept& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.LineGraphPercept)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  edgelsonfield_.MergeFrom(from.edgelsonfield_);
  edgelsinimagetop_.MergeFrom(from.edgelsinimagetop_);
  edgelsinimage_.MergeFrom(from.edgelsinimage_);
}

void LineGraphPercept::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.LineGraphPercept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineGraphPercept::CopyFrom(const LineGraphPercept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.LineGraphPercept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineGraphPercept::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->edgelsonfield())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->edgelsinimagetop())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->edgelsinimage())) return false;
  return true;
}

void LineGraphPercept::Swap(LineGraphPercept* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LineGraphPercept::InternalSwap(LineGraphPercept* other) {
  using std::swap;
  edgelsonfield_.InternalSwap(&other->edgelsonfield_);
  edgelsinimagetop_.InternalSwap(&other->edgelsinimagetop_);
  edgelsinimage_.InternalSwap(&other->edgelsinimage_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LineGraphPercept::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LineGraphPercept

// repeated .naothmessages.Edgel edgelsOnField = 1;
int LineGraphPercept::edgelsonfield_size() const {
  return edgelsonfield_.size();
}
void LineGraphPercept::clear_edgelsonfield() {
  edgelsonfield_.Clear();
}
const ::naothmessages::Edgel& LineGraphPercept::edgelsonfield(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.LineGraphPercept.edgelsOnField)
  return edgelsonfield_.Get(index);
}
::naothmessages::Edgel* LineGraphPercept::mutable_edgelsonfield(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.LineGraphPercept.edgelsOnField)
  return edgelsonfield_.Mutable(index);
}
::naothmessages::Edgel* LineGraphPercept::add_edgelsonfield() {
  // @@protoc_insertion_point(field_add:naothmessages.LineGraphPercept.edgelsOnField)
  return edgelsonfield_.Add();
}
::google::protobuf::RepeatedPtrField< ::naothmessages::Edgel >*
LineGraphPercept::mutable_edgelsonfield() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.LineGraphPercept.edgelsOnField)
  return &edgelsonfield_;
}
const ::google::protobuf::RepeatedPtrField< ::naothmessages::Edgel >&
LineGraphPercept::edgelsonfield() const {
  // @@protoc_insertion_point(field_list:naothmessages.LineGraphPercept.edgelsOnField)
  return edgelsonfield_;
}

// repeated .naothmessages.DoubleEdgel edgelsInImageTop = 2;
int LineGraphPercept::edgelsinimagetop_size() const {
  return edgelsinimagetop_.size();
}
void LineGraphPercept::clear_edgelsinimagetop() {
  edgelsinimagetop_.Clear();
}
const ::naothmessages::DoubleEdgel& LineGraphPercept::edgelsinimagetop(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.LineGraphPercept.edgelsInImageTop)
  return edgelsinimagetop_.Get(index);
}
::naothmessages::DoubleEdgel* LineGraphPercept::mutable_edgelsinimagetop(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.LineGraphPercept.edgelsInImageTop)
  return edgelsinimagetop_.Mutable(index);
}
::naothmessages::DoubleEdgel* LineGraphPercept::add_edgelsinimagetop() {
  // @@protoc_insertion_point(field_add:naothmessages.LineGraphPercept.edgelsInImageTop)
  return edgelsinimagetop_.Add();
}
::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleEdgel >*
LineGraphPercept::mutable_edgelsinimagetop() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.LineGraphPercept.edgelsInImageTop)
  return &edgelsinimagetop_;
}
const ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleEdgel >&
LineGraphPercept::edgelsinimagetop() const {
  // @@protoc_insertion_point(field_list:naothmessages.LineGraphPercept.edgelsInImageTop)
  return edgelsinimagetop_;
}

// repeated .naothmessages.DoubleEdgel edgelsInImage = 3;
int LineGraphPercept::edgelsinimage_size() const {
  return edgelsinimage_.size();
}
void LineGraphPercept::clear_edgelsinimage() {
  edgelsinimage_.Clear();
}
const ::naothmessages::DoubleEdgel& LineGraphPercept::edgelsinimage(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.LineGraphPercept.edgelsInImage)
  return edgelsinimage_.Get(index);
}
::naothmessages::DoubleEdgel* LineGraphPercept::mutable_edgelsinimage(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.LineGraphPercept.edgelsInImage)
  return edgelsinimage_.Mutable(index);
}
::naothmessages::DoubleEdgel* LineGraphPercept::add_edgelsinimage() {
  // @@protoc_insertion_point(field_add:naothmessages.LineGraphPercept.edgelsInImage)
  return edgelsinimage_.Add();
}
::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleEdgel >*
LineGraphPercept::mutable_edgelsinimage() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.LineGraphPercept.edgelsInImage)
  return &edgelsinimage_;
}
const ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleEdgel >&
LineGraphPercept::edgelsinimage() const {
  // @@protoc_insertion_point(field_list:naothmessages.LineGraphPercept.edgelsInImage)
  return edgelsinimage_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StepControlStatus::kStepIDFieldNumber;
const int StepControlStatus::kMoveableFootFieldNumber;
const int StepControlStatus::kStepRequestIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StepControlStatus::StepControlStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.StepControlStatus)
}
StepControlStatus::StepControlStatus(const StepControlStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stepid_, &from.stepid_,
    static_cast<size_t>(reinterpret_cast<char*>(&steprequestid_) -
    reinterpret_cast<char*>(&stepid_)) + sizeof(steprequestid_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.StepControlStatus)
}

void StepControlStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stepid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steprequestid_) -
      reinterpret_cast<char*>(&stepid_)) + sizeof(steprequestid_));
}

StepControlStatus::~StepControlStatus() {
  // @@protoc_insertion_point(destructor:naothmessages.StepControlStatus)
  SharedDtor();
}

void StepControlStatus::SharedDtor() {
}

void StepControlStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StepControlStatus::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StepControlStatus& StepControlStatus::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

StepControlStatus* StepControlStatus::New(::google::protobuf::Arena* arena) const {
  StepControlStatus* n = new StepControlStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StepControlStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.StepControlStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&stepid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steprequestid_) -
        reinterpret_cast<char*>(&stepid_)) + sizeof(steprequestid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StepControlStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.StepControlStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 stepID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_stepid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 moveableFoot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_moveablefoot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moveablefoot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 stepRequestID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_steprequestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steprequestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.StepControlStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.StepControlStatus)
  return false;
#undef DO_
}

void StepControlStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.StepControlStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 stepID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stepid(), output);
  }

  // required uint32 moveableFoot = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->moveablefoot(), output);
  }

  // required uint32 stepRequestID = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->steprequestid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.StepControlStatus)
}

::google::protobuf::uint8* StepControlStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.StepControlStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 stepID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stepid(), target);
  }

  // required uint32 moveableFoot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->moveablefoot(), target);
  }

  // required uint32 stepRequestID = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->steprequestid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.StepControlStatus)
  return target;
}

size_t StepControlStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:naothmessages.StepControlStatus)
  size_t total_size = 0;

  if (has_stepid()) {
    // required uint32 stepID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stepid());
  }

  if (has_moveablefoot()) {
    // required uint32 moveableFoot = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->moveablefoot());
  }

  if (has_steprequestid()) {
    // required uint32 stepRequestID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->steprequestid());
  }

  return total_size;
}
size_t StepControlStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.StepControlStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 stepID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stepid());

    // required uint32 moveableFoot = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->moveablefoot());

    // required uint32 stepRequestID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->steprequestid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StepControlStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.StepControlStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const StepControlStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StepControlStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.StepControlStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.StepControlStatus)
    MergeFrom(*source);
  }
}

void StepControlStatus::MergeFrom(const StepControlStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.StepControlStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      stepid_ = from.stepid_;
    }
    if (cached_has_bits & 0x00000002u) {
      moveablefoot_ = from.moveablefoot_;
    }
    if (cached_has_bits & 0x00000004u) {
      steprequestid_ = from.steprequestid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StepControlStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.StepControlStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepControlStatus::CopyFrom(const StepControlStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.StepControlStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepControlStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void StepControlStatus::Swap(StepControlStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StepControlStatus::InternalSwap(StepControlStatus* other) {
  using std::swap;
  swap(stepid_, other->stepid_);
  swap(moveablefoot_, other->moveablefoot_);
  swap(steprequestid_, other->steprequestid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StepControlStatus::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StepControlStatus

// required uint32 stepID = 1;
bool StepControlStatus::has_stepid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StepControlStatus::set_has_stepid() {
  _has_bits_[0] |= 0x00000001u;
}
void StepControlStatus::clear_has_stepid() {
  _has_bits_[0] &= ~0x00000001u;
}
void StepControlStatus::clear_stepid() {
  stepid_ = 0u;
  clear_has_stepid();
}
::google::protobuf::uint32 StepControlStatus::stepid() const {
  // @@protoc_insertion_point(field_get:naothmessages.StepControlStatus.stepID)
  return stepid_;
}
void StepControlStatus::set_stepid(::google::protobuf::uint32 value) {
  set_has_stepid();
  stepid_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.StepControlStatus.stepID)
}

// required uint32 moveableFoot = 2;
bool StepControlStatus::has_moveablefoot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StepControlStatus::set_has_moveablefoot() {
  _has_bits_[0] |= 0x00000002u;
}
void StepControlStatus::clear_has_moveablefoot() {
  _has_bits_[0] &= ~0x00000002u;
}
void StepControlStatus::clear_moveablefoot() {
  moveablefoot_ = 0u;
  clear_has_moveablefoot();
}
::google::protobuf::uint32 StepControlStatus::moveablefoot() const {
  // @@protoc_insertion_point(field_get:naothmessages.StepControlStatus.moveableFoot)
  return moveablefoot_;
}
void StepControlStatus::set_moveablefoot(::google::protobuf::uint32 value) {
  set_has_moveablefoot();
  moveablefoot_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.StepControlStatus.moveableFoot)
}

// required uint32 stepRequestID = 3;
bool StepControlStatus::has_steprequestid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StepControlStatus::set_has_steprequestid() {
  _has_bits_[0] |= 0x00000004u;
}
void StepControlStatus::clear_has_steprequestid() {
  _has_bits_[0] &= ~0x00000004u;
}
void StepControlStatus::clear_steprequestid() {
  steprequestid_ = 0u;
  clear_has_steprequestid();
}
::google::protobuf::uint32 StepControlStatus::steprequestid() const {
  // @@protoc_insertion_point(field_get:naothmessages.StepControlStatus.stepRequestID)
  return steprequestid_;
}
void StepControlStatus::set_steprequestid(::google::protobuf::uint32 value) {
  set_has_steprequestid();
  steprequestid_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.StepControlStatus.stepRequestID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MotionStatus::kTimeFieldNumber;
const int MotionStatus::kLastMotionFieldNumber;
const int MotionStatus::kCurrentMotionFieldNumber;
const int MotionStatus::kHeadMotionFieldNumber;
const int MotionStatus::kCurrentMotionStateFieldNumber;
const int MotionStatus::kPlannedMotionLeftFootFieldNumber;
const int MotionStatus::kPlannedMotionRightFootFieldNumber;
const int MotionStatus::kPlannedMotionHipFieldNumber;
const int MotionStatus::kStepControlStatusFieldNumber;
const int MotionStatus::kTargetReachedFieldNumber;
const int MotionStatus::kHeadTargetReachedFieldNumber;
const int MotionStatus::kHeadGotStuckFieldNumber;
const int MotionStatus::kWalkEmergencyStopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MotionStatus::MotionStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.MotionStatus)
}
MotionStatus::MotionStatus(const MotionStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_plannedmotionleftfoot()) {
    plannedmotionleftfoot_ = new ::naothmessages::Pose2D(*from.plannedmotionleftfoot_);
  } else {
    plannedmotionleftfoot_ = NULL;
  }
  if (from.has_plannedmotionrightfoot()) {
    plannedmotionrightfoot_ = new ::naothmessages::Pose2D(*from.plannedmotionrightfoot_);
  } else {
    plannedmotionrightfoot_ = NULL;
  }
  if (from.has_plannedmotionhip()) {
    plannedmotionhip_ = new ::naothmessages::Pose2D(*from.plannedmotionhip_);
  } else {
    plannedmotionhip_ = NULL;
  }
  if (from.has_stepcontrolstatus()) {
    stepcontrolstatus_ = new ::naothmessages::StepControlStatus(*from.stepcontrolstatus_);
  } else {
    stepcontrolstatus_ = NULL;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&walk_emergency_stop_) -
    reinterpret_cast<char*>(&time_)) + sizeof(walk_emergency_stop_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.MotionStatus)
}

void MotionStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&plannedmotionleftfoot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&walk_emergency_stop_) -
      reinterpret_cast<char*>(&plannedmotionleftfoot_)) + sizeof(walk_emergency_stop_));
}

MotionStatus::~MotionStatus() {
  // @@protoc_insertion_point(destructor:naothmessages.MotionStatus)
  SharedDtor();
}

void MotionStatus::SharedDtor() {
  if (this != internal_default_instance()) delete plannedmotionleftfoot_;
  if (this != internal_default_instance()) delete plannedmotionrightfoot_;
  if (this != internal_default_instance()) delete plannedmotionhip_;
  if (this != internal_default_instance()) delete stepcontrolstatus_;
}

void MotionStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MotionStatus::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MotionStatus& MotionStatus::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

MotionStatus* MotionStatus::New(::google::protobuf::Arena* arena) const {
  MotionStatus* n = new MotionStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MotionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.MotionStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(plannedmotionleftfoot_ != NULL);
      plannedmotionleftfoot_->::naothmessages::Pose2D::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(plannedmotionrightfoot_ != NULL);
      plannedmotionrightfoot_->::naothmessages::Pose2D::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(plannedmotionhip_ != NULL);
      plannedmotionhip_->::naothmessages::Pose2D::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(stepcontrolstatus_ != NULL);
      stepcontrolstatus_->::naothmessages::StepControlStatus::Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&headmotion_) -
        reinterpret_cast<char*>(&time_)) + sizeof(headmotion_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&currentmotionstate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&walk_emergency_stop_) -
        reinterpret_cast<char*>(&currentmotionstate_)) + sizeof(walk_emergency_stop_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MotionStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.MotionStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 lastMotion = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_lastmotion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastmotion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 currentMotion = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_currentmotion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currentmotion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 headMotion = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_headmotion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headmotion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 currentMotionState = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_currentmotionstate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currentmotionstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .naothmessages.Pose2D plannedMotionLeftFoot = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plannedmotionleftfoot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .naothmessages.Pose2D plannedMotionRightFoot = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plannedmotionrightfoot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .naothmessages.Pose2D plannedMotionHip = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plannedmotionhip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.StepControlStatus stepControlStatus = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stepcontrolstatus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool target_reached = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_target_reached();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &target_reached_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool head_target_reached = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_head_target_reached();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &head_target_reached_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool head_got_stuck = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_head_got_stuck();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &head_got_stuck_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool walk_emergency_stop = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_walk_emergency_stop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &walk_emergency_stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.MotionStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.MotionStatus)
  return false;
#undef DO_
}

void MotionStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.MotionStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 time = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // required uint32 lastMotion = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lastmotion(), output);
  }

  // required uint32 currentMotion = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->currentmotion(), output);
  }

  // required uint32 headMotion = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->headmotion(), output);
  }

  // required uint32 currentMotionState = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->currentmotionstate(), output);
  }

  // required .naothmessages.Pose2D plannedMotionLeftFoot = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->plannedmotionleftfoot_, output);
  }

  // required .naothmessages.Pose2D plannedMotionRightFoot = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->plannedmotionrightfoot_, output);
  }

  // required .naothmessages.Pose2D plannedMotionHip = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->plannedmotionhip_, output);
  }

  // optional .naothmessages.StepControlStatus stepControlStatus = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->stepcontrolstatus_, output);
  }

  // optional bool target_reached = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->target_reached(), output);
  }

  // optional bool head_target_reached = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->head_target_reached(), output);
  }

  // optional bool head_got_stuck = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->head_got_stuck(), output);
  }

  // optional bool walk_emergency_stop = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->walk_emergency_stop(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.MotionStatus)
}

::google::protobuf::uint8* MotionStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.MotionStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 time = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // required uint32 lastMotion = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lastmotion(), target);
  }

  // required uint32 currentMotion = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->currentmotion(), target);
  }

  // required uint32 headMotion = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->headmotion(), target);
  }

  // required uint32 currentMotionState = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->currentmotionstate(), target);
  }

  // required .naothmessages.Pose2D plannedMotionLeftFoot = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->plannedmotionleftfoot_, deterministic, target);
  }

  // required .naothmessages.Pose2D plannedMotionRightFoot = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->plannedmotionrightfoot_, deterministic, target);
  }

  // required .naothmessages.Pose2D plannedMotionHip = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->plannedmotionhip_, deterministic, target);
  }

  // optional .naothmessages.StepControlStatus stepControlStatus = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->stepcontrolstatus_, deterministic, target);
  }

  // optional bool target_reached = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->target_reached(), target);
  }

  // optional bool head_target_reached = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->head_target_reached(), target);
  }

  // optional bool head_got_stuck = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->head_got_stuck(), target);
  }

  // optional bool walk_emergency_stop = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->walk_emergency_stop(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.MotionStatus)
  return target;
}

size_t MotionStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:naothmessages.MotionStatus)
  size_t total_size = 0;

  if (has_plannedmotionleftfoot()) {
    // required .naothmessages.Pose2D plannedMotionLeftFoot = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->plannedmotionleftfoot_);
  }

  if (has_plannedmotionrightfoot()) {
    // required .naothmessages.Pose2D plannedMotionRightFoot = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->plannedmotionrightfoot_);
  }

  if (has_plannedmotionhip()) {
    // required .naothmessages.Pose2D plannedMotionHip = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->plannedmotionhip_);
  }

  if (has_time()) {
    // required uint32 time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());
  }

  if (has_lastmotion()) {
    // required uint32 lastMotion = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lastmotion());
  }

  if (has_currentmotion()) {
    // required uint32 currentMotion = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->currentmotion());
  }

  if (has_headmotion()) {
    // required uint32 headMotion = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->headmotion());
  }

  if (has_currentmotionstate()) {
    // required uint32 currentMotionState = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->currentmotionstate());
  }

  return total_size;
}
size_t MotionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.MotionStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001f7) ^ 0x000001f7) == 0) {  // All required fields are present.
    // required .naothmessages.Pose2D plannedMotionLeftFoot = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->plannedmotionleftfoot_);

    // required .naothmessages.Pose2D plannedMotionRightFoot = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->plannedmotionrightfoot_);

    // required .naothmessages.Pose2D plannedMotionHip = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->plannedmotionhip_);

    // required uint32 time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());

    // required uint32 lastMotion = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lastmotion());

    // required uint32 currentMotion = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->currentmotion());

    // required uint32 headMotion = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->headmotion());

    // required uint32 currentMotionState = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->currentmotionstate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .naothmessages.StepControlStatus stepControlStatus = 9;
  if (has_stepcontrolstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stepcontrolstatus_);
  }

  if (_has_bits_[8 / 32] & 7680u) {
    // optional bool target_reached = 10;
    if (has_target_reached()) {
      total_size += 1 + 1;
    }

    // optional bool head_target_reached = 11;
    if (has_head_target_reached()) {
      total_size += 1 + 1;
    }

    // optional bool head_got_stuck = 12;
    if (has_head_got_stuck()) {
      total_size += 1 + 1;
    }

    // optional bool walk_emergency_stop = 13;
    if (has_walk_emergency_stop()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MotionStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.MotionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const MotionStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MotionStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.MotionStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.MotionStatus)
    MergeFrom(*source);
  }
}

void MotionStatus::MergeFrom(const MotionStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.MotionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_plannedmotionleftfoot()->::naothmessages::Pose2D::MergeFrom(from.plannedmotionleftfoot());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_plannedmotionrightfoot()->::naothmessages::Pose2D::MergeFrom(from.plannedmotionrightfoot());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_plannedmotionhip()->::naothmessages::Pose2D::MergeFrom(from.plannedmotionhip());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_stepcontrolstatus()->::naothmessages::StepControlStatus::MergeFrom(from.stepcontrolstatus());
    }
    if (cached_has_bits & 0x00000010u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000020u) {
      lastmotion_ = from.lastmotion_;
    }
    if (cached_has_bits & 0x00000040u) {
      currentmotion_ = from.currentmotion_;
    }
    if (cached_has_bits & 0x00000080u) {
      headmotion_ = from.headmotion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      currentmotionstate_ = from.currentmotionstate_;
    }
    if (cached_has_bits & 0x00000200u) {
      target_reached_ = from.target_reached_;
    }
    if (cached_has_bits & 0x00000400u) {
      head_target_reached_ = from.head_target_reached_;
    }
    if (cached_has_bits & 0x00000800u) {
      head_got_stuck_ = from.head_got_stuck_;
    }
    if (cached_has_bits & 0x00001000u) {
      walk_emergency_stop_ = from.walk_emergency_stop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MotionStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.MotionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionStatus::CopyFrom(const MotionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.MotionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001f7) != 0x000001f7) return false;
  if (has_plannedmotionleftfoot()) {
    if (!this->plannedmotionleftfoot_->IsInitialized()) return false;
  }
  if (has_plannedmotionrightfoot()) {
    if (!this->plannedmotionrightfoot_->IsInitialized()) return false;
  }
  if (has_plannedmotionhip()) {
    if (!this->plannedmotionhip_->IsInitialized()) return false;
  }
  if (has_stepcontrolstatus()) {
    if (!this->stepcontrolstatus_->IsInitialized()) return false;
  }
  return true;
}

void MotionStatus::Swap(MotionStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MotionStatus::InternalSwap(MotionStatus* other) {
  using std::swap;
  swap(plannedmotionleftfoot_, other->plannedmotionleftfoot_);
  swap(plannedmotionrightfoot_, other->plannedmotionrightfoot_);
  swap(plannedmotionhip_, other->plannedmotionhip_);
  swap(stepcontrolstatus_, other->stepcontrolstatus_);
  swap(time_, other->time_);
  swap(lastmotion_, other->lastmotion_);
  swap(currentmotion_, other->currentmotion_);
  swap(headmotion_, other->headmotion_);
  swap(currentmotionstate_, other->currentmotionstate_);
  swap(target_reached_, other->target_reached_);
  swap(head_target_reached_, other->head_target_reached_);
  swap(head_got_stuck_, other->head_got_stuck_);
  swap(walk_emergency_stop_, other->walk_emergency_stop_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MotionStatus::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MotionStatus

// required uint32 time = 1;
bool MotionStatus::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MotionStatus::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
void MotionStatus::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void MotionStatus::clear_time() {
  time_ = 0u;
  clear_has_time();
}
::google::protobuf::uint32 MotionStatus::time() const {
  // @@protoc_insertion_point(field_get:naothmessages.MotionStatus.time)
  return time_;
}
void MotionStatus::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.MotionStatus.time)
}

// required uint32 lastMotion = 2;
bool MotionStatus::has_lastmotion() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MotionStatus::set_has_lastmotion() {
  _has_bits_[0] |= 0x00000020u;
}
void MotionStatus::clear_has_lastmotion() {
  _has_bits_[0] &= ~0x00000020u;
}
void MotionStatus::clear_lastmotion() {
  lastmotion_ = 0u;
  clear_has_lastmotion();
}
::google::protobuf::uint32 MotionStatus::lastmotion() const {
  // @@protoc_insertion_point(field_get:naothmessages.MotionStatus.lastMotion)
  return lastmotion_;
}
void MotionStatus::set_lastmotion(::google::protobuf::uint32 value) {
  set_has_lastmotion();
  lastmotion_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.MotionStatus.lastMotion)
}

// required uint32 currentMotion = 3;
bool MotionStatus::has_currentmotion() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MotionStatus::set_has_currentmotion() {
  _has_bits_[0] |= 0x00000040u;
}
void MotionStatus::clear_has_currentmotion() {
  _has_bits_[0] &= ~0x00000040u;
}
void MotionStatus::clear_currentmotion() {
  currentmotion_ = 0u;
  clear_has_currentmotion();
}
::google::protobuf::uint32 MotionStatus::currentmotion() const {
  // @@protoc_insertion_point(field_get:naothmessages.MotionStatus.currentMotion)
  return currentmotion_;
}
void MotionStatus::set_currentmotion(::google::protobuf::uint32 value) {
  set_has_currentmotion();
  currentmotion_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.MotionStatus.currentMotion)
}

// required uint32 headMotion = 4;
bool MotionStatus::has_headmotion() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MotionStatus::set_has_headmotion() {
  _has_bits_[0] |= 0x00000080u;
}
void MotionStatus::clear_has_headmotion() {
  _has_bits_[0] &= ~0x00000080u;
}
void MotionStatus::clear_headmotion() {
  headmotion_ = 0u;
  clear_has_headmotion();
}
::google::protobuf::uint32 MotionStatus::headmotion() const {
  // @@protoc_insertion_point(field_get:naothmessages.MotionStatus.headMotion)
  return headmotion_;
}
void MotionStatus::set_headmotion(::google::protobuf::uint32 value) {
  set_has_headmotion();
  headmotion_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.MotionStatus.headMotion)
}

// required uint32 currentMotionState = 5;
bool MotionStatus::has_currentmotionstate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void MotionStatus::set_has_currentmotionstate() {
  _has_bits_[0] |= 0x00000100u;
}
void MotionStatus::clear_has_currentmotionstate() {
  _has_bits_[0] &= ~0x00000100u;
}
void MotionStatus::clear_currentmotionstate() {
  currentmotionstate_ = 0u;
  clear_has_currentmotionstate();
}
::google::protobuf::uint32 MotionStatus::currentmotionstate() const {
  // @@protoc_insertion_point(field_get:naothmessages.MotionStatus.currentMotionState)
  return currentmotionstate_;
}
void MotionStatus::set_currentmotionstate(::google::protobuf::uint32 value) {
  set_has_currentmotionstate();
  currentmotionstate_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.MotionStatus.currentMotionState)
}

// required .naothmessages.Pose2D plannedMotionLeftFoot = 6;
bool MotionStatus::has_plannedmotionleftfoot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MotionStatus::set_has_plannedmotionleftfoot() {
  _has_bits_[0] |= 0x00000001u;
}
void MotionStatus::clear_has_plannedmotionleftfoot() {
  _has_bits_[0] &= ~0x00000001u;
}
void MotionStatus::clear_plannedmotionleftfoot() {
  if (plannedmotionleftfoot_ != NULL) plannedmotionleftfoot_->::naothmessages::Pose2D::Clear();
  clear_has_plannedmotionleftfoot();
}
const ::naothmessages::Pose2D& MotionStatus::plannedmotionleftfoot() const {
  const ::naothmessages::Pose2D* p = plannedmotionleftfoot_;
  // @@protoc_insertion_point(field_get:naothmessages.MotionStatus.plannedMotionLeftFoot)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::Pose2D*>(
      &::naothmessages::_Pose2D_default_instance_);
}
::naothmessages::Pose2D* MotionStatus::mutable_plannedmotionleftfoot() {
  set_has_plannedmotionleftfoot();
  if (plannedmotionleftfoot_ == NULL) {
    plannedmotionleftfoot_ = new ::naothmessages::Pose2D;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.MotionStatus.plannedMotionLeftFoot)
  return plannedmotionleftfoot_;
}
::naothmessages::Pose2D* MotionStatus::release_plannedmotionleftfoot() {
  // @@protoc_insertion_point(field_release:naothmessages.MotionStatus.plannedMotionLeftFoot)
  clear_has_plannedmotionleftfoot();
  ::naothmessages::Pose2D* temp = plannedmotionleftfoot_;
  plannedmotionleftfoot_ = NULL;
  return temp;
}
void MotionStatus::set_allocated_plannedmotionleftfoot(::naothmessages::Pose2D* plannedmotionleftfoot) {
  delete plannedmotionleftfoot_;
  plannedmotionleftfoot_ = plannedmotionleftfoot;
  if (plannedmotionleftfoot) {
    set_has_plannedmotionleftfoot();
  } else {
    clear_has_plannedmotionleftfoot();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.MotionStatus.plannedMotionLeftFoot)
}

// required .naothmessages.Pose2D plannedMotionRightFoot = 7;
bool MotionStatus::has_plannedmotionrightfoot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MotionStatus::set_has_plannedmotionrightfoot() {
  _has_bits_[0] |= 0x00000002u;
}
void MotionStatus::clear_has_plannedmotionrightfoot() {
  _has_bits_[0] &= ~0x00000002u;
}
void MotionStatus::clear_plannedmotionrightfoot() {
  if (plannedmotionrightfoot_ != NULL) plannedmotionrightfoot_->::naothmessages::Pose2D::Clear();
  clear_has_plannedmotionrightfoot();
}
const ::naothmessages::Pose2D& MotionStatus::plannedmotionrightfoot() const {
  const ::naothmessages::Pose2D* p = plannedmotionrightfoot_;
  // @@protoc_insertion_point(field_get:naothmessages.MotionStatus.plannedMotionRightFoot)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::Pose2D*>(
      &::naothmessages::_Pose2D_default_instance_);
}
::naothmessages::Pose2D* MotionStatus::mutable_plannedmotionrightfoot() {
  set_has_plannedmotionrightfoot();
  if (plannedmotionrightfoot_ == NULL) {
    plannedmotionrightfoot_ = new ::naothmessages::Pose2D;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.MotionStatus.plannedMotionRightFoot)
  return plannedmotionrightfoot_;
}
::naothmessages::Pose2D* MotionStatus::release_plannedmotionrightfoot() {
  // @@protoc_insertion_point(field_release:naothmessages.MotionStatus.plannedMotionRightFoot)
  clear_has_plannedmotionrightfoot();
  ::naothmessages::Pose2D* temp = plannedmotionrightfoot_;
  plannedmotionrightfoot_ = NULL;
  return temp;
}
void MotionStatus::set_allocated_plannedmotionrightfoot(::naothmessages::Pose2D* plannedmotionrightfoot) {
  delete plannedmotionrightfoot_;
  plannedmotionrightfoot_ = plannedmotionrightfoot;
  if (plannedmotionrightfoot) {
    set_has_plannedmotionrightfoot();
  } else {
    clear_has_plannedmotionrightfoot();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.MotionStatus.plannedMotionRightFoot)
}

// required .naothmessages.Pose2D plannedMotionHip = 8;
bool MotionStatus::has_plannedmotionhip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MotionStatus::set_has_plannedmotionhip() {
  _has_bits_[0] |= 0x00000004u;
}
void MotionStatus::clear_has_plannedmotionhip() {
  _has_bits_[0] &= ~0x00000004u;
}
void MotionStatus::clear_plannedmotionhip() {
  if (plannedmotionhip_ != NULL) plannedmotionhip_->::naothmessages::Pose2D::Clear();
  clear_has_plannedmotionhip();
}
const ::naothmessages::Pose2D& MotionStatus::plannedmotionhip() const {
  const ::naothmessages::Pose2D* p = plannedmotionhip_;
  // @@protoc_insertion_point(field_get:naothmessages.MotionStatus.plannedMotionHip)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::Pose2D*>(
      &::naothmessages::_Pose2D_default_instance_);
}
::naothmessages::Pose2D* MotionStatus::mutable_plannedmotionhip() {
  set_has_plannedmotionhip();
  if (plannedmotionhip_ == NULL) {
    plannedmotionhip_ = new ::naothmessages::Pose2D;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.MotionStatus.plannedMotionHip)
  return plannedmotionhip_;
}
::naothmessages::Pose2D* MotionStatus::release_plannedmotionhip() {
  // @@protoc_insertion_point(field_release:naothmessages.MotionStatus.plannedMotionHip)
  clear_has_plannedmotionhip();
  ::naothmessages::Pose2D* temp = plannedmotionhip_;
  plannedmotionhip_ = NULL;
  return temp;
}
void MotionStatus::set_allocated_plannedmotionhip(::naothmessages::Pose2D* plannedmotionhip) {
  delete plannedmotionhip_;
  plannedmotionhip_ = plannedmotionhip;
  if (plannedmotionhip) {
    set_has_plannedmotionhip();
  } else {
    clear_has_plannedmotionhip();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.MotionStatus.plannedMotionHip)
}

// optional .naothmessages.StepControlStatus stepControlStatus = 9;
bool MotionStatus::has_stepcontrolstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MotionStatus::set_has_stepcontrolstatus() {
  _has_bits_[0] |= 0x00000008u;
}
void MotionStatus::clear_has_stepcontrolstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
void MotionStatus::clear_stepcontrolstatus() {
  if (stepcontrolstatus_ != NULL) stepcontrolstatus_->::naothmessages::StepControlStatus::Clear();
  clear_has_stepcontrolstatus();
}
const ::naothmessages::StepControlStatus& MotionStatus::stepcontrolstatus() const {
  const ::naothmessages::StepControlStatus* p = stepcontrolstatus_;
  // @@protoc_insertion_point(field_get:naothmessages.MotionStatus.stepControlStatus)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::StepControlStatus*>(
      &::naothmessages::_StepControlStatus_default_instance_);
}
::naothmessages::StepControlStatus* MotionStatus::mutable_stepcontrolstatus() {
  set_has_stepcontrolstatus();
  if (stepcontrolstatus_ == NULL) {
    stepcontrolstatus_ = new ::naothmessages::StepControlStatus;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.MotionStatus.stepControlStatus)
  return stepcontrolstatus_;
}
::naothmessages::StepControlStatus* MotionStatus::release_stepcontrolstatus() {
  // @@protoc_insertion_point(field_release:naothmessages.MotionStatus.stepControlStatus)
  clear_has_stepcontrolstatus();
  ::naothmessages::StepControlStatus* temp = stepcontrolstatus_;
  stepcontrolstatus_ = NULL;
  return temp;
}
void MotionStatus::set_allocated_stepcontrolstatus(::naothmessages::StepControlStatus* stepcontrolstatus) {
  delete stepcontrolstatus_;
  stepcontrolstatus_ = stepcontrolstatus;
  if (stepcontrolstatus) {
    set_has_stepcontrolstatus();
  } else {
    clear_has_stepcontrolstatus();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.MotionStatus.stepControlStatus)
}

// optional bool target_reached = 10;
bool MotionStatus::has_target_reached() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void MotionStatus::set_has_target_reached() {
  _has_bits_[0] |= 0x00000200u;
}
void MotionStatus::clear_has_target_reached() {
  _has_bits_[0] &= ~0x00000200u;
}
void MotionStatus::clear_target_reached() {
  target_reached_ = false;
  clear_has_target_reached();
}
bool MotionStatus::target_reached() const {
  // @@protoc_insertion_point(field_get:naothmessages.MotionStatus.target_reached)
  return target_reached_;
}
void MotionStatus::set_target_reached(bool value) {
  set_has_target_reached();
  target_reached_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.MotionStatus.target_reached)
}

// optional bool head_target_reached = 11;
bool MotionStatus::has_head_target_reached() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void MotionStatus::set_has_head_target_reached() {
  _has_bits_[0] |= 0x00000400u;
}
void MotionStatus::clear_has_head_target_reached() {
  _has_bits_[0] &= ~0x00000400u;
}
void MotionStatus::clear_head_target_reached() {
  head_target_reached_ = false;
  clear_has_head_target_reached();
}
bool MotionStatus::head_target_reached() const {
  // @@protoc_insertion_point(field_get:naothmessages.MotionStatus.head_target_reached)
  return head_target_reached_;
}
void MotionStatus::set_head_target_reached(bool value) {
  set_has_head_target_reached();
  head_target_reached_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.MotionStatus.head_target_reached)
}

// optional bool head_got_stuck = 12;
bool MotionStatus::has_head_got_stuck() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void MotionStatus::set_has_head_got_stuck() {
  _has_bits_[0] |= 0x00000800u;
}
void MotionStatus::clear_has_head_got_stuck() {
  _has_bits_[0] &= ~0x00000800u;
}
void MotionStatus::clear_head_got_stuck() {
  head_got_stuck_ = false;
  clear_has_head_got_stuck();
}
bool MotionStatus::head_got_stuck() const {
  // @@protoc_insertion_point(field_get:naothmessages.MotionStatus.head_got_stuck)
  return head_got_stuck_;
}
void MotionStatus::set_head_got_stuck(bool value) {
  set_has_head_got_stuck();
  head_got_stuck_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.MotionStatus.head_got_stuck)
}

// optional bool walk_emergency_stop = 13;
bool MotionStatus::has_walk_emergency_stop() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void MotionStatus::set_has_walk_emergency_stop() {
  _has_bits_[0] |= 0x00001000u;
}
void MotionStatus::clear_has_walk_emergency_stop() {
  _has_bits_[0] &= ~0x00001000u;
}
void MotionStatus::clear_walk_emergency_stop() {
  walk_emergency_stop_ = false;
  clear_has_walk_emergency_stop();
}
bool MotionStatus::walk_emergency_stop() const {
  // @@protoc_insertion_point(field_get:naothmessages.MotionStatus.walk_emergency_stop)
  return walk_emergency_stop_;
}
void MotionStatus::set_walk_emergency_stop(bool value) {
  set_has_walk_emergency_stop();
  walk_emergency_stop_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.MotionStatus.walk_emergency_stop)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OdometryData::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OdometryData::OdometryData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.OdometryData)
}
OdometryData::OdometryData(const OdometryData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pose()) {
    pose_ = new ::naothmessages::Pose2D(*from.pose_);
  } else {
    pose_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:naothmessages.OdometryData)
}

void OdometryData::SharedCtor() {
  _cached_size_ = 0;
  pose_ = NULL;
}

OdometryData::~OdometryData() {
  // @@protoc_insertion_point(destructor:naothmessages.OdometryData)
  SharedDtor();
}

void OdometryData::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
}

void OdometryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OdometryData::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OdometryData& OdometryData::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

OdometryData* OdometryData::New(::google::protobuf::Arena* arena) const {
  OdometryData* n = new OdometryData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OdometryData::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.OdometryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_pose()) {
    GOOGLE_DCHECK(pose_ != NULL);
    pose_->::naothmessages::Pose2D::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OdometryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.OdometryData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .naothmessages.Pose2D pose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.OdometryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.OdometryData)
  return false;
#undef DO_
}

void OdometryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.OdometryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.Pose2D pose = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pose_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.OdometryData)
}

::google::protobuf::uint8* OdometryData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.OdometryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.Pose2D pose = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pose_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.OdometryData)
  return target;
}

size_t OdometryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.OdometryData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .naothmessages.Pose2D pose = 1;
  if (has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OdometryData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.OdometryData)
  GOOGLE_DCHECK_NE(&from, this);
  const OdometryData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OdometryData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.OdometryData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.OdometryData)
    MergeFrom(*source);
  }
}

void OdometryData::MergeFrom(const OdometryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.OdometryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose()) {
    mutable_pose()->::naothmessages::Pose2D::MergeFrom(from.pose());
  }
}

void OdometryData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.OdometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OdometryData::CopyFrom(const OdometryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.OdometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OdometryData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_pose()) {
    if (!this->pose_->IsInitialized()) return false;
  }
  return true;
}

void OdometryData::Swap(OdometryData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OdometryData::InternalSwap(OdometryData* other) {
  using std::swap;
  swap(pose_, other->pose_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OdometryData::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OdometryData

// required .naothmessages.Pose2D pose = 1;
bool OdometryData::has_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OdometryData::set_has_pose() {
  _has_bits_[0] |= 0x00000001u;
}
void OdometryData::clear_has_pose() {
  _has_bits_[0] &= ~0x00000001u;
}
void OdometryData::clear_pose() {
  if (pose_ != NULL) pose_->::naothmessages::Pose2D::Clear();
  clear_has_pose();
}
const ::naothmessages::Pose2D& OdometryData::pose() const {
  const ::naothmessages::Pose2D* p = pose_;
  // @@protoc_insertion_point(field_get:naothmessages.OdometryData.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::Pose2D*>(
      &::naothmessages::_Pose2D_default_instance_);
}
::naothmessages::Pose2D* OdometryData::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::naothmessages::Pose2D;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.OdometryData.pose)
  return pose_;
}
::naothmessages::Pose2D* OdometryData::release_pose() {
  // @@protoc_insertion_point(field_release:naothmessages.OdometryData.pose)
  clear_has_pose();
  ::naothmessages::Pose2D* temp = pose_;
  pose_ = NULL;
  return temp;
}
void OdometryData::set_allocated_pose(::naothmessages::Pose2D* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.OdometryData.pose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BodyState::kIsLiftedUpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BodyState::BodyState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.BodyState)
}
BodyState::BodyState(const BodyState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  isliftedup_ = from.isliftedup_;
  // @@protoc_insertion_point(copy_constructor:naothmessages.BodyState)
}

void BodyState::SharedCtor() {
  _cached_size_ = 0;
  isliftedup_ = false;
}

BodyState::~BodyState() {
  // @@protoc_insertion_point(destructor:naothmessages.BodyState)
  SharedDtor();
}

void BodyState::SharedDtor() {
}

void BodyState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BodyState::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BodyState& BodyState::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

BodyState* BodyState::New(::google::protobuf::Arena* arena) const {
  BodyState* n = new BodyState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BodyState::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.BodyState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isliftedup_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BodyState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.BodyState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isLiftedUp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_isliftedup();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isliftedup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.BodyState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.BodyState)
  return false;
#undef DO_
}

void BodyState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.BodyState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool isLiftedUp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isliftedup(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.BodyState)
}

::google::protobuf::uint8* BodyState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.BodyState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool isLiftedUp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isliftedup(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.BodyState)
  return target;
}

size_t BodyState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.BodyState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool isLiftedUp = 1;
  if (has_isliftedup()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BodyState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.BodyState)
  GOOGLE_DCHECK_NE(&from, this);
  const BodyState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BodyState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.BodyState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.BodyState)
    MergeFrom(*source);
  }
}

void BodyState::MergeFrom(const BodyState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.BodyState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_isliftedup()) {
    set_isliftedup(from.isliftedup());
  }
}

void BodyState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.BodyState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BodyState::CopyFrom(const BodyState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.BodyState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyState::IsInitialized() const {
  return true;
}

void BodyState::Swap(BodyState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BodyState::InternalSwap(BodyState* other) {
  using std::swap;
  swap(isliftedup_, other->isliftedup_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BodyState::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BodyState

// optional bool isLiftedUp = 1;
bool BodyState::has_isliftedup() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BodyState::set_has_isliftedup() {
  _has_bits_[0] |= 0x00000001u;
}
void BodyState::clear_has_isliftedup() {
  _has_bits_[0] &= ~0x00000001u;
}
void BodyState::clear_isliftedup() {
  isliftedup_ = false;
  clear_has_isliftedup();
}
bool BodyState::isliftedup() const {
  // @@protoc_insertion_point(field_get:naothmessages.BodyState.isLiftedUp)
  return isliftedup_;
}
void BodyState::set_isliftedup(bool value) {
  set_has_isliftedup();
  isliftedup_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BodyState.isLiftedUp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BodyStatus::kCurrentSumFieldNumber;
const int BodyStatus::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BodyStatus::BodyStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.BodyStatus)
}
BodyStatus::BodyStatus(const BodyStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      currentsum_(from.currentsum_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:naothmessages.BodyStatus)
}

void BodyStatus::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0u;
}

BodyStatus::~BodyStatus() {
  // @@protoc_insertion_point(destructor:naothmessages.BodyStatus)
  SharedDtor();
}

void BodyStatus::SharedDtor() {
}

void BodyStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BodyStatus::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BodyStatus& BodyStatus::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

BodyStatus* BodyStatus::New(::google::protobuf::Arena* arena) const {
  BodyStatus* n = new BodyStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BodyStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.BodyStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currentsum_.Clear();
  timestamp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BodyStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.BodyStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double currentSum = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9u, input, this->mutable_currentsum())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_currentsum())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.BodyStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.BodyStatus)
  return false;
#undef DO_
}

void BodyStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.BodyStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double currentSum = 1;
  for (int i = 0, n = this->currentsum_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->currentsum(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // required uint32 timestamp = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.BodyStatus)
}

::google::protobuf::uint8* BodyStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.BodyStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double currentSum = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(1, this->currentsum_, target);

  cached_has_bits = _has_bits_[0];
  // required uint32 timestamp = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.BodyStatus)
  return target;
}

size_t BodyStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.BodyStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 timestamp = 3;
  if (has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }
  // repeated double currentSum = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->currentsum_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->currentsum_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BodyStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.BodyStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const BodyStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BodyStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.BodyStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.BodyStatus)
    MergeFrom(*source);
  }
}

void BodyStatus::MergeFrom(const BodyStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.BodyStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  currentsum_.MergeFrom(from.currentsum_);
  if (from.has_timestamp()) {
    set_timestamp(from.timestamp());
  }
}

void BodyStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.BodyStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BodyStatus::CopyFrom(const BodyStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.BodyStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void BodyStatus::Swap(BodyStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BodyStatus::InternalSwap(BodyStatus* other) {
  using std::swap;
  currentsum_.InternalSwap(&other->currentsum_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BodyStatus::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BodyStatus

// repeated double currentSum = 1;
int BodyStatus::currentsum_size() const {
  return currentsum_.size();
}
void BodyStatus::clear_currentsum() {
  currentsum_.Clear();
}
double BodyStatus::currentsum(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.BodyStatus.currentSum)
  return currentsum_.Get(index);
}
void BodyStatus::set_currentsum(int index, double value) {
  currentsum_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.BodyStatus.currentSum)
}
void BodyStatus::add_currentsum(double value) {
  currentsum_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.BodyStatus.currentSum)
}
const ::google::protobuf::RepeatedField< double >&
BodyStatus::currentsum() const {
  // @@protoc_insertion_point(field_list:naothmessages.BodyStatus.currentSum)
  return currentsum_;
}
::google::protobuf::RepeatedField< double >*
BodyStatus::mutable_currentsum() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.BodyStatus.currentSum)
  return &currentsum_;
}

// required uint32 timestamp = 3;
bool BodyStatus::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BodyStatus::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void BodyStatus::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void BodyStatus::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 BodyStatus::timestamp() const {
  // @@protoc_insertion_point(field_get:naothmessages.BodyStatus.timestamp)
  return timestamp_;
}
void BodyStatus::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BodyStatus.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalibrationData::kInertialSensorOffsetFieldNumber;
const int CalibrationData::kGyroSensorOffsetFieldNumber;
const int CalibrationData::kAccSensorOffsetFieldNumber;
const int CalibrationData::kCalibratedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalibrationData::CalibrationData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.CalibrationData)
}
CalibrationData::CalibrationData(const CalibrationData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_inertialsensoroffset()) {
    inertialsensoroffset_ = new ::naothmessages::DoubleVector2(*from.inertialsensoroffset_);
  } else {
    inertialsensoroffset_ = NULL;
  }
  if (from.has_accsensoroffset()) {
    accsensoroffset_ = new ::naothmessages::DoubleVector3(*from.accsensoroffset_);
  } else {
    accsensoroffset_ = NULL;
  }
  if (from.has_gyrosensoroffset()) {
    gyrosensoroffset_ = new ::naothmessages::DoubleVector3(*from.gyrosensoroffset_);
  } else {
    gyrosensoroffset_ = NULL;
  }
  calibrated_ = from.calibrated_;
  // @@protoc_insertion_point(copy_constructor:naothmessages.CalibrationData)
}

void CalibrationData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&inertialsensoroffset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&calibrated_) -
      reinterpret_cast<char*>(&inertialsensoroffset_)) + sizeof(calibrated_));
}

CalibrationData::~CalibrationData() {
  // @@protoc_insertion_point(destructor:naothmessages.CalibrationData)
  SharedDtor();
}

void CalibrationData::SharedDtor() {
  if (this != internal_default_instance()) delete inertialsensoroffset_;
  if (this != internal_default_instance()) delete accsensoroffset_;
  if (this != internal_default_instance()) delete gyrosensoroffset_;
}

void CalibrationData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalibrationData::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CalibrationData& CalibrationData::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

CalibrationData* CalibrationData::New(::google::protobuf::Arena* arena) const {
  CalibrationData* n = new CalibrationData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CalibrationData::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.CalibrationData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(inertialsensoroffset_ != NULL);
      inertialsensoroffset_->::naothmessages::DoubleVector2::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(accsensoroffset_ != NULL);
      accsensoroffset_->::naothmessages::DoubleVector3::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(gyrosensoroffset_ != NULL);
      gyrosensoroffset_->::naothmessages::DoubleVector3::Clear();
    }
  }
  calibrated_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CalibrationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.CalibrationData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .naothmessages.DoubleVector2 inertialSensorOffset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inertialsensoroffset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector3 accSensorOffset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accsensoroffset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool calibrated = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_calibrated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &calibrated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector3 gyroSensorOffset = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gyrosensoroffset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.CalibrationData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.CalibrationData)
  return false;
#undef DO_
}

void CalibrationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.CalibrationData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.DoubleVector2 inertialSensorOffset = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->inertialsensoroffset_, output);
  }

  // optional .naothmessages.DoubleVector3 accSensorOffset = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->accsensoroffset_, output);
  }

  // required bool calibrated = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->calibrated(), output);
  }

  // optional .naothmessages.DoubleVector3 gyroSensorOffset = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->gyrosensoroffset_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.CalibrationData)
}

::google::protobuf::uint8* CalibrationData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.CalibrationData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.DoubleVector2 inertialSensorOffset = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->inertialsensoroffset_, deterministic, target);
  }

  // optional .naothmessages.DoubleVector3 accSensorOffset = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->accsensoroffset_, deterministic, target);
  }

  // required bool calibrated = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->calibrated(), target);
  }

  // optional .naothmessages.DoubleVector3 gyroSensorOffset = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->gyrosensoroffset_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.CalibrationData)
  return target;
}

size_t CalibrationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.CalibrationData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bool calibrated = 4;
  if (has_calibrated()) {
    total_size += 1 + 1;
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .naothmessages.DoubleVector2 inertialSensorOffset = 1;
    if (has_inertialsensoroffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->inertialsensoroffset_);
    }

    // optional .naothmessages.DoubleVector3 accSensorOffset = 3;
    if (has_accsensoroffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->accsensoroffset_);
    }

    // optional .naothmessages.DoubleVector3 gyroSensorOffset = 5;
    if (has_gyrosensoroffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gyrosensoroffset_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalibrationData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.CalibrationData)
  GOOGLE_DCHECK_NE(&from, this);
  const CalibrationData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CalibrationData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.CalibrationData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.CalibrationData)
    MergeFrom(*source);
  }
}

void CalibrationData::MergeFrom(const CalibrationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.CalibrationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_inertialsensoroffset()->::naothmessages::DoubleVector2::MergeFrom(from.inertialsensoroffset());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_accsensoroffset()->::naothmessages::DoubleVector3::MergeFrom(from.accsensoroffset());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_gyrosensoroffset()->::naothmessages::DoubleVector3::MergeFrom(from.gyrosensoroffset());
    }
    if (cached_has_bits & 0x00000008u) {
      calibrated_ = from.calibrated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CalibrationData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.CalibrationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrationData::CopyFrom(const CalibrationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.CalibrationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrationData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  if (has_inertialsensoroffset()) {
    if (!this->inertialsensoroffset_->IsInitialized()) return false;
  }
  if (has_accsensoroffset()) {
    if (!this->accsensoroffset_->IsInitialized()) return false;
  }
  if (has_gyrosensoroffset()) {
    if (!this->gyrosensoroffset_->IsInitialized()) return false;
  }
  return true;
}

void CalibrationData::Swap(CalibrationData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalibrationData::InternalSwap(CalibrationData* other) {
  using std::swap;
  swap(inertialsensoroffset_, other->inertialsensoroffset_);
  swap(accsensoroffset_, other->accsensoroffset_);
  swap(gyrosensoroffset_, other->gyrosensoroffset_);
  swap(calibrated_, other->calibrated_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CalibrationData::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CalibrationData

// optional .naothmessages.DoubleVector2 inertialSensorOffset = 1;
bool CalibrationData::has_inertialsensoroffset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CalibrationData::set_has_inertialsensoroffset() {
  _has_bits_[0] |= 0x00000001u;
}
void CalibrationData::clear_has_inertialsensoroffset() {
  _has_bits_[0] &= ~0x00000001u;
}
void CalibrationData::clear_inertialsensoroffset() {
  if (inertialsensoroffset_ != NULL) inertialsensoroffset_->::naothmessages::DoubleVector2::Clear();
  clear_has_inertialsensoroffset();
}
const ::naothmessages::DoubleVector2& CalibrationData::inertialsensoroffset() const {
  const ::naothmessages::DoubleVector2* p = inertialsensoroffset_;
  // @@protoc_insertion_point(field_get:naothmessages.CalibrationData.inertialSensorOffset)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* CalibrationData::mutable_inertialsensoroffset() {
  set_has_inertialsensoroffset();
  if (inertialsensoroffset_ == NULL) {
    inertialsensoroffset_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.CalibrationData.inertialSensorOffset)
  return inertialsensoroffset_;
}
::naothmessages::DoubleVector2* CalibrationData::release_inertialsensoroffset() {
  // @@protoc_insertion_point(field_release:naothmessages.CalibrationData.inertialSensorOffset)
  clear_has_inertialsensoroffset();
  ::naothmessages::DoubleVector2* temp = inertialsensoroffset_;
  inertialsensoroffset_ = NULL;
  return temp;
}
void CalibrationData::set_allocated_inertialsensoroffset(::naothmessages::DoubleVector2* inertialsensoroffset) {
  delete inertialsensoroffset_;
  inertialsensoroffset_ = inertialsensoroffset;
  if (inertialsensoroffset) {
    set_has_inertialsensoroffset();
  } else {
    clear_has_inertialsensoroffset();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.CalibrationData.inertialSensorOffset)
}

// optional .naothmessages.DoubleVector3 gyroSensorOffset = 5;
bool CalibrationData::has_gyrosensoroffset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CalibrationData::set_has_gyrosensoroffset() {
  _has_bits_[0] |= 0x00000004u;
}
void CalibrationData::clear_has_gyrosensoroffset() {
  _has_bits_[0] &= ~0x00000004u;
}
void CalibrationData::clear_gyrosensoroffset() {
  if (gyrosensoroffset_ != NULL) gyrosensoroffset_->::naothmessages::DoubleVector3::Clear();
  clear_has_gyrosensoroffset();
}
const ::naothmessages::DoubleVector3& CalibrationData::gyrosensoroffset() const {
  const ::naothmessages::DoubleVector3* p = gyrosensoroffset_;
  // @@protoc_insertion_point(field_get:naothmessages.CalibrationData.gyroSensorOffset)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
::naothmessages::DoubleVector3* CalibrationData::mutable_gyrosensoroffset() {
  set_has_gyrosensoroffset();
  if (gyrosensoroffset_ == NULL) {
    gyrosensoroffset_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.CalibrationData.gyroSensorOffset)
  return gyrosensoroffset_;
}
::naothmessages::DoubleVector3* CalibrationData::release_gyrosensoroffset() {
  // @@protoc_insertion_point(field_release:naothmessages.CalibrationData.gyroSensorOffset)
  clear_has_gyrosensoroffset();
  ::naothmessages::DoubleVector3* temp = gyrosensoroffset_;
  gyrosensoroffset_ = NULL;
  return temp;
}
void CalibrationData::set_allocated_gyrosensoroffset(::naothmessages::DoubleVector3* gyrosensoroffset) {
  delete gyrosensoroffset_;
  gyrosensoroffset_ = gyrosensoroffset;
  if (gyrosensoroffset) {
    set_has_gyrosensoroffset();
  } else {
    clear_has_gyrosensoroffset();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.CalibrationData.gyroSensorOffset)
}

// optional .naothmessages.DoubleVector3 accSensorOffset = 3;
bool CalibrationData::has_accsensoroffset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CalibrationData::set_has_accsensoroffset() {
  _has_bits_[0] |= 0x00000002u;
}
void CalibrationData::clear_has_accsensoroffset() {
  _has_bits_[0] &= ~0x00000002u;
}
void CalibrationData::clear_accsensoroffset() {
  if (accsensoroffset_ != NULL) accsensoroffset_->::naothmessages::DoubleVector3::Clear();
  clear_has_accsensoroffset();
}
const ::naothmessages::DoubleVector3& CalibrationData::accsensoroffset() const {
  const ::naothmessages::DoubleVector3* p = accsensoroffset_;
  // @@protoc_insertion_point(field_get:naothmessages.CalibrationData.accSensorOffset)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
::naothmessages::DoubleVector3* CalibrationData::mutable_accsensoroffset() {
  set_has_accsensoroffset();
  if (accsensoroffset_ == NULL) {
    accsensoroffset_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.CalibrationData.accSensorOffset)
  return accsensoroffset_;
}
::naothmessages::DoubleVector3* CalibrationData::release_accsensoroffset() {
  // @@protoc_insertion_point(field_release:naothmessages.CalibrationData.accSensorOffset)
  clear_has_accsensoroffset();
  ::naothmessages::DoubleVector3* temp = accsensoroffset_;
  accsensoroffset_ = NULL;
  return temp;
}
void CalibrationData::set_allocated_accsensoroffset(::naothmessages::DoubleVector3* accsensoroffset) {
  delete accsensoroffset_;
  accsensoroffset_ = accsensoroffset;
  if (accsensoroffset) {
    set_has_accsensoroffset();
  } else {
    clear_has_accsensoroffset();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.CalibrationData.accSensorOffset)
}

// required bool calibrated = 4;
bool CalibrationData::has_calibrated() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CalibrationData::set_has_calibrated() {
  _has_bits_[0] |= 0x00000008u;
}
void CalibrationData::clear_has_calibrated() {
  _has_bits_[0] &= ~0x00000008u;
}
void CalibrationData::clear_calibrated() {
  calibrated_ = false;
  clear_has_calibrated();
}
bool CalibrationData::calibrated() const {
  // @@protoc_insertion_point(field_get:naothmessages.CalibrationData.calibrated)
  return calibrated_;
}
void CalibrationData::set_calibrated(bool value) {
  set_has_calibrated();
  calibrated_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CalibrationData.calibrated)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InertialModel::kOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InertialModel::InertialModel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.InertialModel)
}
InertialModel::InertialModel(const InertialModel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_orientation()) {
    orientation_ = new ::naothmessages::DoubleVector2(*from.orientation_);
  } else {
    orientation_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:naothmessages.InertialModel)
}

void InertialModel::SharedCtor() {
  _cached_size_ = 0;
  orientation_ = NULL;
}

InertialModel::~InertialModel() {
  // @@protoc_insertion_point(destructor:naothmessages.InertialModel)
  SharedDtor();
}

void InertialModel::SharedDtor() {
  if (this != internal_default_instance()) delete orientation_;
}

void InertialModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InertialModel::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InertialModel& InertialModel::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

InertialModel* InertialModel::New(::google::protobuf::Arena* arena) const {
  InertialModel* n = new InertialModel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InertialModel::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.InertialModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_orientation()) {
    GOOGLE_DCHECK(orientation_ != NULL);
    orientation_->::naothmessages::DoubleVector2::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InertialModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.InertialModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .naothmessages.DoubleVector2 orientation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.InertialModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.InertialModel)
  return false;
#undef DO_
}

void InertialModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.InertialModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.DoubleVector2 orientation = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->orientation_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.InertialModel)
}

::google::protobuf::uint8* InertialModel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.InertialModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.DoubleVector2 orientation = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->orientation_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.InertialModel)
  return target;
}

size_t InertialModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.InertialModel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .naothmessages.DoubleVector2 orientation = 1;
  if (has_orientation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InertialModel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.InertialModel)
  GOOGLE_DCHECK_NE(&from, this);
  const InertialModel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InertialModel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.InertialModel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.InertialModel)
    MergeFrom(*source);
  }
}

void InertialModel::MergeFrom(const InertialModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.InertialModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_orientation()) {
    mutable_orientation()->::naothmessages::DoubleVector2::MergeFrom(from.orientation());
  }
}

void InertialModel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.InertialModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InertialModel::CopyFrom(const InertialModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.InertialModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InertialModel::IsInitialized() const {
  if (has_orientation()) {
    if (!this->orientation_->IsInitialized()) return false;
  }
  return true;
}

void InertialModel::Swap(InertialModel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InertialModel::InternalSwap(InertialModel* other) {
  using std::swap;
  swap(orientation_, other->orientation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InertialModel::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InertialModel

// optional .naothmessages.DoubleVector2 orientation = 1;
bool InertialModel::has_orientation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InertialModel::set_has_orientation() {
  _has_bits_[0] |= 0x00000001u;
}
void InertialModel::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000001u;
}
void InertialModel::clear_orientation() {
  if (orientation_ != NULL) orientation_->::naothmessages::DoubleVector2::Clear();
  clear_has_orientation();
}
const ::naothmessages::DoubleVector2& InertialModel::orientation() const {
  const ::naothmessages::DoubleVector2* p = orientation_;
  // @@protoc_insertion_point(field_get:naothmessages.InertialModel.orientation)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* InertialModel::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) {
    orientation_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.InertialModel.orientation)
  return orientation_;
}
::naothmessages::DoubleVector2* InertialModel::release_orientation() {
  // @@protoc_insertion_point(field_release:naothmessages.InertialModel.orientation)
  clear_has_orientation();
  ::naothmessages::DoubleVector2* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
void InertialModel::set_allocated_orientation(::naothmessages::DoubleVector2* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.InertialModel.orientation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraMatrixCalibration::kCorrectionOffsetFieldNumber;
const int CameraMatrixCalibration::kCorrectionOffsetBodyFieldNumber;
const int CameraMatrixCalibration::kCorrectionOffsetHeadFieldNumber;
const int CameraMatrixCalibration::kCorrectionOffsetCamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraMatrixCalibration::CameraMatrixCalibration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.CameraMatrixCalibration)
}
CameraMatrixCalibration::CameraMatrixCalibration(const CameraMatrixCalibration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      correctionoffset_(from.correctionoffset_),
      correctionoffsetcam_(from.correctionoffsetcam_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_correctionoffsetbody()) {
    correctionoffsetbody_ = new ::naothmessages::DoubleVector2(*from.correctionoffsetbody_);
  } else {
    correctionoffsetbody_ = NULL;
  }
  if (from.has_correctionoffsethead()) {
    correctionoffsethead_ = new ::naothmessages::DoubleVector3(*from.correctionoffsethead_);
  } else {
    correctionoffsethead_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:naothmessages.CameraMatrixCalibration)
}

void CameraMatrixCalibration::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&correctionoffsetbody_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&correctionoffsethead_) -
      reinterpret_cast<char*>(&correctionoffsetbody_)) + sizeof(correctionoffsethead_));
}

CameraMatrixCalibration::~CameraMatrixCalibration() {
  // @@protoc_insertion_point(destructor:naothmessages.CameraMatrixCalibration)
  SharedDtor();
}

void CameraMatrixCalibration::SharedDtor() {
  if (this != internal_default_instance()) delete correctionoffsetbody_;
  if (this != internal_default_instance()) delete correctionoffsethead_;
}

void CameraMatrixCalibration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraMatrixCalibration::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraMatrixCalibration& CameraMatrixCalibration::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

CameraMatrixCalibration* CameraMatrixCalibration::New(::google::protobuf::Arena* arena) const {
  CameraMatrixCalibration* n = new CameraMatrixCalibration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraMatrixCalibration::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.CameraMatrixCalibration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  correctionoffset_.Clear();
  correctionoffsetcam_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(correctionoffsetbody_ != NULL);
      correctionoffsetbody_->::naothmessages::DoubleVector2::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(correctionoffsethead_ != NULL);
      correctionoffsethead_->::naothmessages::DoubleVector3::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CameraMatrixCalibration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.CameraMatrixCalibration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .naothmessages.DoubleVector2 correctionOffset = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_correctionoffset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector2 correctionOffsetBody = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_correctionoffsetbody()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector3 correctionOffsetHead = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_correctionoffsethead()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .naothmessages.DoubleVector3 correctionOffsetCam = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_correctionoffsetcam()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.CameraMatrixCalibration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.CameraMatrixCalibration)
  return false;
#undef DO_
}

void CameraMatrixCalibration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.CameraMatrixCalibration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .naothmessages.DoubleVector2 correctionOffset = 1 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->correctionoffset_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->correctionoffset(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.DoubleVector2 correctionOffsetBody = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->correctionoffsetbody_, output);
  }

  // optional .naothmessages.DoubleVector3 correctionOffsetHead = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->correctionoffsethead_, output);
  }

  // repeated .naothmessages.DoubleVector3 correctionOffsetCam = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->correctionoffsetcam_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->correctionoffsetcam(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.CameraMatrixCalibration)
}

::google::protobuf::uint8* CameraMatrixCalibration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.CameraMatrixCalibration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .naothmessages.DoubleVector2 correctionOffset = 1 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->correctionoffset_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->correctionoffset(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.DoubleVector2 correctionOffsetBody = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->correctionoffsetbody_, deterministic, target);
  }

  // optional .naothmessages.DoubleVector3 correctionOffsetHead = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->correctionoffsethead_, deterministic, target);
  }

  // repeated .naothmessages.DoubleVector3 correctionOffsetCam = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->correctionoffsetcam_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->correctionoffsetcam(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.CameraMatrixCalibration)
  return target;
}

size_t CameraMatrixCalibration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.CameraMatrixCalibration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .naothmessages.DoubleVector2 correctionOffset = 1 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->correctionoffset_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->correctionoffset(static_cast<int>(i)));
    }
  }

  // repeated .naothmessages.DoubleVector3 correctionOffsetCam = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->correctionoffsetcam_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->correctionoffsetcam(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .naothmessages.DoubleVector2 correctionOffsetBody = 2;
    if (has_correctionoffsetbody()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->correctionoffsetbody_);
    }

    // optional .naothmessages.DoubleVector3 correctionOffsetHead = 3;
    if (has_correctionoffsethead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->correctionoffsethead_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraMatrixCalibration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.CameraMatrixCalibration)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraMatrixCalibration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraMatrixCalibration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.CameraMatrixCalibration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.CameraMatrixCalibration)
    MergeFrom(*source);
  }
}

void CameraMatrixCalibration::MergeFrom(const CameraMatrixCalibration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.CameraMatrixCalibration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  correctionoffset_.MergeFrom(from.correctionoffset_);
  correctionoffsetcam_.MergeFrom(from.correctionoffsetcam_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_correctionoffsetbody()->::naothmessages::DoubleVector2::MergeFrom(from.correctionoffsetbody());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_correctionoffsethead()->::naothmessages::DoubleVector3::MergeFrom(from.correctionoffsethead());
    }
  }
}

void CameraMatrixCalibration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.CameraMatrixCalibration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraMatrixCalibration::CopyFrom(const CameraMatrixCalibration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.CameraMatrixCalibration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraMatrixCalibration::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->correctionoffset())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->correctionoffsetcam())) return false;
  if (has_correctionoffsetbody()) {
    if (!this->correctionoffsetbody_->IsInitialized()) return false;
  }
  if (has_correctionoffsethead()) {
    if (!this->correctionoffsethead_->IsInitialized()) return false;
  }
  return true;
}

void CameraMatrixCalibration::Swap(CameraMatrixCalibration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraMatrixCalibration::InternalSwap(CameraMatrixCalibration* other) {
  using std::swap;
  correctionoffset_.InternalSwap(&other->correctionoffset_);
  correctionoffsetcam_.InternalSwap(&other->correctionoffsetcam_);
  swap(correctionoffsetbody_, other->correctionoffsetbody_);
  swap(correctionoffsethead_, other->correctionoffsethead_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraMatrixCalibration::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CameraMatrixCalibration

// repeated .naothmessages.DoubleVector2 correctionOffset = 1 [deprecated = true];
int CameraMatrixCalibration::correctionoffset_size() const {
  return correctionoffset_.size();
}
void CameraMatrixCalibration::clear_correctionoffset() {
  correctionoffset_.Clear();
}
const ::naothmessages::DoubleVector2& CameraMatrixCalibration::correctionoffset(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraMatrixCalibration.correctionOffset)
  return correctionoffset_.Get(index);
}
::naothmessages::DoubleVector2* CameraMatrixCalibration::mutable_correctionoffset(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.CameraMatrixCalibration.correctionOffset)
  return correctionoffset_.Mutable(index);
}
::naothmessages::DoubleVector2* CameraMatrixCalibration::add_correctionoffset() {
  // @@protoc_insertion_point(field_add:naothmessages.CameraMatrixCalibration.correctionOffset)
  return correctionoffset_.Add();
}
::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 >*
CameraMatrixCalibration::mutable_correctionoffset() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.CameraMatrixCalibration.correctionOffset)
  return &correctionoffset_;
}
const ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 >&
CameraMatrixCalibration::correctionoffset() const {
  // @@protoc_insertion_point(field_list:naothmessages.CameraMatrixCalibration.correctionOffset)
  return correctionoffset_;
}

// optional .naothmessages.DoubleVector2 correctionOffsetBody = 2;
bool CameraMatrixCalibration::has_correctionoffsetbody() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CameraMatrixCalibration::set_has_correctionoffsetbody() {
  _has_bits_[0] |= 0x00000001u;
}
void CameraMatrixCalibration::clear_has_correctionoffsetbody() {
  _has_bits_[0] &= ~0x00000001u;
}
void CameraMatrixCalibration::clear_correctionoffsetbody() {
  if (correctionoffsetbody_ != NULL) correctionoffsetbody_->::naothmessages::DoubleVector2::Clear();
  clear_has_correctionoffsetbody();
}
const ::naothmessages::DoubleVector2& CameraMatrixCalibration::correctionoffsetbody() const {
  const ::naothmessages::DoubleVector2* p = correctionoffsetbody_;
  // @@protoc_insertion_point(field_get:naothmessages.CameraMatrixCalibration.correctionOffsetBody)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* CameraMatrixCalibration::mutable_correctionoffsetbody() {
  set_has_correctionoffsetbody();
  if (correctionoffsetbody_ == NULL) {
    correctionoffsetbody_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.CameraMatrixCalibration.correctionOffsetBody)
  return correctionoffsetbody_;
}
::naothmessages::DoubleVector2* CameraMatrixCalibration::release_correctionoffsetbody() {
  // @@protoc_insertion_point(field_release:naothmessages.CameraMatrixCalibration.correctionOffsetBody)
  clear_has_correctionoffsetbody();
  ::naothmessages::DoubleVector2* temp = correctionoffsetbody_;
  correctionoffsetbody_ = NULL;
  return temp;
}
void CameraMatrixCalibration::set_allocated_correctionoffsetbody(::naothmessages::DoubleVector2* correctionoffsetbody) {
  delete correctionoffsetbody_;
  correctionoffsetbody_ = correctionoffsetbody;
  if (correctionoffsetbody) {
    set_has_correctionoffsetbody();
  } else {
    clear_has_correctionoffsetbody();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.CameraMatrixCalibration.correctionOffsetBody)
}

// optional .naothmessages.DoubleVector3 correctionOffsetHead = 3;
bool CameraMatrixCalibration::has_correctionoffsethead() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CameraMatrixCalibration::set_has_correctionoffsethead() {
  _has_bits_[0] |= 0x00000002u;
}
void CameraMatrixCalibration::clear_has_correctionoffsethead() {
  _has_bits_[0] &= ~0x00000002u;
}
void CameraMatrixCalibration::clear_correctionoffsethead() {
  if (correctionoffsethead_ != NULL) correctionoffsethead_->::naothmessages::DoubleVector3::Clear();
  clear_has_correctionoffsethead();
}
const ::naothmessages::DoubleVector3& CameraMatrixCalibration::correctionoffsethead() const {
  const ::naothmessages::DoubleVector3* p = correctionoffsethead_;
  // @@protoc_insertion_point(field_get:naothmessages.CameraMatrixCalibration.correctionOffsetHead)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
::naothmessages::DoubleVector3* CameraMatrixCalibration::mutable_correctionoffsethead() {
  set_has_correctionoffsethead();
  if (correctionoffsethead_ == NULL) {
    correctionoffsethead_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.CameraMatrixCalibration.correctionOffsetHead)
  return correctionoffsethead_;
}
::naothmessages::DoubleVector3* CameraMatrixCalibration::release_correctionoffsethead() {
  // @@protoc_insertion_point(field_release:naothmessages.CameraMatrixCalibration.correctionOffsetHead)
  clear_has_correctionoffsethead();
  ::naothmessages::DoubleVector3* temp = correctionoffsethead_;
  correctionoffsethead_ = NULL;
  return temp;
}
void CameraMatrixCalibration::set_allocated_correctionoffsethead(::naothmessages::DoubleVector3* correctionoffsethead) {
  delete correctionoffsethead_;
  correctionoffsethead_ = correctionoffsethead;
  if (correctionoffsethead) {
    set_has_correctionoffsethead();
  } else {
    clear_has_correctionoffsethead();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.CameraMatrixCalibration.correctionOffsetHead)
}

// repeated .naothmessages.DoubleVector3 correctionOffsetCam = 4;
int CameraMatrixCalibration::correctionoffsetcam_size() const {
  return correctionoffsetcam_.size();
}
void CameraMatrixCalibration::clear_correctionoffsetcam() {
  correctionoffsetcam_.Clear();
}
const ::naothmessages::DoubleVector3& CameraMatrixCalibration::correctionoffsetcam(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraMatrixCalibration.correctionOffsetCam)
  return correctionoffsetcam_.Get(index);
}
::naothmessages::DoubleVector3* CameraMatrixCalibration::mutable_correctionoffsetcam(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.CameraMatrixCalibration.correctionOffsetCam)
  return correctionoffsetcam_.Mutable(index);
}
::naothmessages::DoubleVector3* CameraMatrixCalibration::add_correctionoffsetcam() {
  // @@protoc_insertion_point(field_add:naothmessages.CameraMatrixCalibration.correctionOffsetCam)
  return correctionoffsetcam_.Add();
}
::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector3 >*
CameraMatrixCalibration::mutable_correctionoffsetcam() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.CameraMatrixCalibration.correctionOffsetCam)
  return &correctionoffsetcam_;
}
const ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector3 >&
CameraMatrixCalibration::correctionoffsetcam() const {
  // @@protoc_insertion_point(field_list:naothmessages.CameraMatrixCalibration.correctionOffsetCam)
  return correctionoffsetcam_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BallCandidates_Patch::kMinFieldNumber;
const int BallCandidates_Patch::kMaxFieldNumber;
const int BallCandidates_Patch::kTypeFieldNumber;
const int BallCandidates_Patch::kDataFieldNumber;
const int BallCandidates_Patch::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BallCandidates_Patch::BallCandidates_Patch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.BallCandidates.Patch)
}
BallCandidates_Patch::BallCandidates_Patch(const BallCandidates_Patch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_min()) {
    min_ = new ::naothmessages::IntVector2(*from.min_);
  } else {
    min_ = NULL;
  }
  if (from.has_max()) {
    max_ = new ::naothmessages::IntVector2(*from.max_);
  } else {
    max_ = NULL;
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&value_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.BallCandidates.Patch)
}

void BallCandidates_Patch::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&min_)) + sizeof(type_));
}

BallCandidates_Patch::~BallCandidates_Patch() {
  // @@protoc_insertion_point(destructor:naothmessages.BallCandidates.Patch)
  SharedDtor();
}

void BallCandidates_Patch::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete min_;
  if (this != internal_default_instance()) delete max_;
}

void BallCandidates_Patch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BallCandidates_Patch::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BallCandidates_Patch& BallCandidates_Patch::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

BallCandidates_Patch* BallCandidates_Patch::New(::google::protobuf::Arena* arena) const {
  BallCandidates_Patch* n = new BallCandidates_Patch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BallCandidates_Patch::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.BallCandidates.Patch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(min_ != NULL);
      min_->::naothmessages::IntVector2::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(max_ != NULL);
      max_->::naothmessages::IntVector2::Clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&value_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BallCandidates_Patch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.BallCandidates.Patch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .naothmessages.IntVector2 min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .naothmessages.IntVector2 max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.BallCandidates.Patch.Type type = 3 [default = Y];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::naothmessages::BallCandidates_Patch_Type_IsValid(value)) {
            set_type(static_cast< ::naothmessages::BallCandidates_Patch_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double value = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.BallCandidates.Patch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.BallCandidates.Patch)
  return false;
#undef DO_
}

void BallCandidates_Patch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.BallCandidates.Patch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.IntVector2 min = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->min_, output);
  }

  // required .naothmessages.IntVector2 max = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->max_, output);
  }

  // optional .naothmessages.BallCandidates.Patch.Type type = 3 [default = Y];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // required bytes data = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  // optional double value = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.BallCandidates.Patch)
}

::google::protobuf::uint8* BallCandidates_Patch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.BallCandidates.Patch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.IntVector2 min = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->min_, deterministic, target);
  }

  // required .naothmessages.IntVector2 max = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->max_, deterministic, target);
  }

  // optional .naothmessages.BallCandidates.Patch.Type type = 3 [default = Y];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // required bytes data = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  // optional double value = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.BallCandidates.Patch)
  return target;
}

size_t BallCandidates_Patch::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:naothmessages.BallCandidates.Patch)
  size_t total_size = 0;

  if (has_data()) {
    // required bytes data = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (has_min()) {
    // required .naothmessages.IntVector2 min = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->min_);
  }

  if (has_max()) {
    // required .naothmessages.IntVector2 max = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->max_);
  }

  return total_size;
}
size_t BallCandidates_Patch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.BallCandidates.Patch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes data = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

    // required .naothmessages.IntVector2 min = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->min_);

    // required .naothmessages.IntVector2 max = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->max_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 24u) {
    // optional double value = 6;
    if (has_value()) {
      total_size += 1 + 8;
    }

    // optional .naothmessages.BallCandidates.Patch.Type type = 3 [default = Y];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BallCandidates_Patch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.BallCandidates.Patch)
  GOOGLE_DCHECK_NE(&from, this);
  const BallCandidates_Patch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BallCandidates_Patch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.BallCandidates.Patch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.BallCandidates.Patch)
    MergeFrom(*source);
  }
}

void BallCandidates_Patch::MergeFrom(const BallCandidates_Patch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.BallCandidates.Patch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_min()->::naothmessages::IntVector2::MergeFrom(from.min());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_max()->::naothmessages::IntVector2::MergeFrom(from.max());
    }
    if (cached_has_bits & 0x00000008u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BallCandidates_Patch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.BallCandidates.Patch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallCandidates_Patch::CopyFrom(const BallCandidates_Patch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.BallCandidates.Patch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallCandidates_Patch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_min()) {
    if (!this->min_->IsInitialized()) return false;
  }
  if (has_max()) {
    if (!this->max_->IsInitialized()) return false;
  }
  return true;
}

void BallCandidates_Patch::Swap(BallCandidates_Patch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BallCandidates_Patch::InternalSwap(BallCandidates_Patch* other) {
  using std::swap;
  data_.Swap(&other->data_);
  swap(min_, other->min_);
  swap(max_, other->max_);
  swap(value_, other->value_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BallCandidates_Patch::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BallCandidates_Patch

// required .naothmessages.IntVector2 min = 1;
bool BallCandidates_Patch::has_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BallCandidates_Patch::set_has_min() {
  _has_bits_[0] |= 0x00000002u;
}
void BallCandidates_Patch::clear_has_min() {
  _has_bits_[0] &= ~0x00000002u;
}
void BallCandidates_Patch::clear_min() {
  if (min_ != NULL) min_->::naothmessages::IntVector2::Clear();
  clear_has_min();
}
const ::naothmessages::IntVector2& BallCandidates_Patch::min() const {
  const ::naothmessages::IntVector2* p = min_;
  // @@protoc_insertion_point(field_get:naothmessages.BallCandidates.Patch.min)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::IntVector2*>(
      &::naothmessages::_IntVector2_default_instance_);
}
::naothmessages::IntVector2* BallCandidates_Patch::mutable_min() {
  set_has_min();
  if (min_ == NULL) {
    min_ = new ::naothmessages::IntVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.BallCandidates.Patch.min)
  return min_;
}
::naothmessages::IntVector2* BallCandidates_Patch::release_min() {
  // @@protoc_insertion_point(field_release:naothmessages.BallCandidates.Patch.min)
  clear_has_min();
  ::naothmessages::IntVector2* temp = min_;
  min_ = NULL;
  return temp;
}
void BallCandidates_Patch::set_allocated_min(::naothmessages::IntVector2* min) {
  delete min_;
  min_ = min;
  if (min) {
    set_has_min();
  } else {
    clear_has_min();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.BallCandidates.Patch.min)
}

// required .naothmessages.IntVector2 max = 2;
bool BallCandidates_Patch::has_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BallCandidates_Patch::set_has_max() {
  _has_bits_[0] |= 0x00000004u;
}
void BallCandidates_Patch::clear_has_max() {
  _has_bits_[0] &= ~0x00000004u;
}
void BallCandidates_Patch::clear_max() {
  if (max_ != NULL) max_->::naothmessages::IntVector2::Clear();
  clear_has_max();
}
const ::naothmessages::IntVector2& BallCandidates_Patch::max() const {
  const ::naothmessages::IntVector2* p = max_;
  // @@protoc_insertion_point(field_get:naothmessages.BallCandidates.Patch.max)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::IntVector2*>(
      &::naothmessages::_IntVector2_default_instance_);
}
::naothmessages::IntVector2* BallCandidates_Patch::mutable_max() {
  set_has_max();
  if (max_ == NULL) {
    max_ = new ::naothmessages::IntVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.BallCandidates.Patch.max)
  return max_;
}
::naothmessages::IntVector2* BallCandidates_Patch::release_max() {
  // @@protoc_insertion_point(field_release:naothmessages.BallCandidates.Patch.max)
  clear_has_max();
  ::naothmessages::IntVector2* temp = max_;
  max_ = NULL;
  return temp;
}
void BallCandidates_Patch::set_allocated_max(::naothmessages::IntVector2* max) {
  delete max_;
  max_ = max;
  if (max) {
    set_has_max();
  } else {
    clear_has_max();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.BallCandidates.Patch.max)
}

// optional .naothmessages.BallCandidates.Patch.Type type = 3 [default = Y];
bool BallCandidates_Patch::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BallCandidates_Patch::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void BallCandidates_Patch::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void BallCandidates_Patch::clear_type() {
  type_ = 0;
  clear_has_type();
}
::naothmessages::BallCandidates_Patch_Type BallCandidates_Patch::type() const {
  // @@protoc_insertion_point(field_get:naothmessages.BallCandidates.Patch.type)
  return static_cast< ::naothmessages::BallCandidates_Patch_Type >(type_);
}
void BallCandidates_Patch::set_type(::naothmessages::BallCandidates_Patch_Type value) {
  assert(::naothmessages::BallCandidates_Patch_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BallCandidates.Patch.type)
}

// required bytes data = 5;
bool BallCandidates_Patch::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BallCandidates_Patch::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void BallCandidates_Patch::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void BallCandidates_Patch::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& BallCandidates_Patch::data() const {
  // @@protoc_insertion_point(field_get:naothmessages.BallCandidates.Patch.data)
  return data_.GetNoArena();
}
void BallCandidates_Patch::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naothmessages.BallCandidates.Patch.data)
}
#if LANG_CXX11
void BallCandidates_Patch::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:naothmessages.BallCandidates.Patch.data)
}
#endif
void BallCandidates_Patch::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naothmessages.BallCandidates.Patch.data)
}
void BallCandidates_Patch::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naothmessages.BallCandidates.Patch.data)
}
::std::string* BallCandidates_Patch::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:naothmessages.BallCandidates.Patch.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BallCandidates_Patch::release_data() {
  // @@protoc_insertion_point(field_release:naothmessages.BallCandidates.Patch.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BallCandidates_Patch::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:naothmessages.BallCandidates.Patch.data)
}

// optional double value = 6;
bool BallCandidates_Patch::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BallCandidates_Patch::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
void BallCandidates_Patch::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
void BallCandidates_Patch::clear_value() {
  value_ = 0;
  clear_has_value();
}
double BallCandidates_Patch::value() const {
  // @@protoc_insertion_point(field_get:naothmessages.BallCandidates.Patch.value)
  return value_;
}
void BallCandidates_Patch::set_value(double value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.BallCandidates.Patch.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BallCandidates::kPatchesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BallCandidates::BallCandidates()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.BallCandidates)
}
BallCandidates::BallCandidates(const BallCandidates& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      patches_(from.patches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:naothmessages.BallCandidates)
}

void BallCandidates::SharedCtor() {
  _cached_size_ = 0;
}

BallCandidates::~BallCandidates() {
  // @@protoc_insertion_point(destructor:naothmessages.BallCandidates)
  SharedDtor();
}

void BallCandidates::SharedDtor() {
}

void BallCandidates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BallCandidates::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BallCandidates& BallCandidates::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

BallCandidates* BallCandidates::New(::google::protobuf::Arena* arena) const {
  BallCandidates* n = new BallCandidates;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BallCandidates::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.BallCandidates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  patches_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BallCandidates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.BallCandidates)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .naothmessages.BallCandidates.Patch patches = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_patches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.BallCandidates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.BallCandidates)
  return false;
#undef DO_
}

void BallCandidates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.BallCandidates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .naothmessages.BallCandidates.Patch patches = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->patches_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->patches(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.BallCandidates)
}

::google::protobuf::uint8* BallCandidates::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.BallCandidates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .naothmessages.BallCandidates.Patch patches = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->patches_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->patches(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.BallCandidates)
  return target;
}

size_t BallCandidates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.BallCandidates)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .naothmessages.BallCandidates.Patch patches = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->patches_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->patches(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BallCandidates::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.BallCandidates)
  GOOGLE_DCHECK_NE(&from, this);
  const BallCandidates* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BallCandidates>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.BallCandidates)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.BallCandidates)
    MergeFrom(*source);
  }
}

void BallCandidates::MergeFrom(const BallCandidates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.BallCandidates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  patches_.MergeFrom(from.patches_);
}

void BallCandidates::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.BallCandidates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallCandidates::CopyFrom(const BallCandidates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.BallCandidates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallCandidates::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->patches())) return false;
  return true;
}

void BallCandidates::Swap(BallCandidates* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BallCandidates::InternalSwap(BallCandidates* other) {
  using std::swap;
  patches_.InternalSwap(&other->patches_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BallCandidates::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BallCandidates

// repeated .naothmessages.BallCandidates.Patch patches = 1;
int BallCandidates::patches_size() const {
  return patches_.size();
}
void BallCandidates::clear_patches() {
  patches_.Clear();
}
const ::naothmessages::BallCandidates_Patch& BallCandidates::patches(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.BallCandidates.patches)
  return patches_.Get(index);
}
::naothmessages::BallCandidates_Patch* BallCandidates::mutable_patches(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.BallCandidates.patches)
  return patches_.Mutable(index);
}
::naothmessages::BallCandidates_Patch* BallCandidates::add_patches() {
  // @@protoc_insertion_point(field_add:naothmessages.BallCandidates.patches)
  return patches_.Add();
}
::google::protobuf::RepeatedPtrField< ::naothmessages::BallCandidates_Patch >*
BallCandidates::mutable_patches() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.BallCandidates.patches)
  return &patches_;
}
const ::google::protobuf::RepeatedPtrField< ::naothmessages::BallCandidates_Patch >&
BallCandidates::patches() const {
  // @@protoc_insertion_point(field_list:naothmessages.BallCandidates.patches)
  return patches_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoteControlCommand::kControlModeFieldNumber;
const int RemoteControlCommand::kActionFieldNumber;
const int RemoteControlCommand::kSecondActionFieldNumber;
const int RemoteControlCommand::kTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoteControlCommand::RemoteControlCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.RemoteControlCommand)
}
RemoteControlCommand::RemoteControlCommand(const RemoteControlCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_target()) {
    target_ = new ::naothmessages::Pose2D(*from.target_);
  } else {
    target_ = NULL;
  }
  ::memcpy(&controlmode_, &from.controlmode_,
    static_cast<size_t>(reinterpret_cast<char*>(&second_action_) -
    reinterpret_cast<char*>(&controlmode_)) + sizeof(second_action_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.RemoteControlCommand)
}

void RemoteControlCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&second_action_) -
      reinterpret_cast<char*>(&target_)) + sizeof(second_action_));
}

RemoteControlCommand::~RemoteControlCommand() {
  // @@protoc_insertion_point(destructor:naothmessages.RemoteControlCommand)
  SharedDtor();
}

void RemoteControlCommand::SharedDtor() {
  if (this != internal_default_instance()) delete target_;
}

void RemoteControlCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteControlCommand::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RemoteControlCommand& RemoteControlCommand::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

RemoteControlCommand* RemoteControlCommand::New(::google::protobuf::Arena* arena) const {
  RemoteControlCommand* n = new RemoteControlCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemoteControlCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.RemoteControlCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_target()) {
    GOOGLE_DCHECK(target_ != NULL);
    target_->::naothmessages::Pose2D::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 14u) {
    ::memset(&controlmode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&second_action_) -
        reinterpret_cast<char*>(&controlmode_)) + sizeof(second_action_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RemoteControlCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.RemoteControlCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .naothmessages.RemoteControlCommand.ControlMode controlMode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::naothmessages::RemoteControlCommand_ControlMode_IsValid(value)) {
            set_controlmode(static_cast< ::naothmessages::RemoteControlCommand_ControlMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.RemoteControlCommand.ActionType action = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::naothmessages::RemoteControlCommand_ActionType_IsValid(value)) {
            set_action(static_cast< ::naothmessages::RemoteControlCommand_ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.RemoteControlCommand.SecondActionType second_action = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::naothmessages::RemoteControlCommand_SecondActionType_IsValid(value)) {
            set_second_action(static_cast< ::naothmessages::RemoteControlCommand_SecondActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.Pose2D target = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.RemoteControlCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.RemoteControlCommand)
  return false;
#undef DO_
}

void RemoteControlCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.RemoteControlCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.RemoteControlCommand.ControlMode controlMode = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->controlmode(), output);
  }

  // optional .naothmessages.RemoteControlCommand.ActionType action = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->action(), output);
  }

  // optional .naothmessages.RemoteControlCommand.SecondActionType second_action = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->second_action(), output);
  }

  // optional .naothmessages.Pose2D target = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->target_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.RemoteControlCommand)
}

::google::protobuf::uint8* RemoteControlCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.RemoteControlCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.RemoteControlCommand.ControlMode controlMode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->controlmode(), target);
  }

  // optional .naothmessages.RemoteControlCommand.ActionType action = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->action(), target);
  }

  // optional .naothmessages.RemoteControlCommand.SecondActionType second_action = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->second_action(), target);
  }

  // optional .naothmessages.Pose2D target = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->target_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.RemoteControlCommand)
  return target;
}

size_t RemoteControlCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.RemoteControlCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .naothmessages.Pose2D target = 4;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->target_);
    }

    // optional .naothmessages.RemoteControlCommand.ControlMode controlMode = 1;
    if (has_controlmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->controlmode());
    }

    // optional .naothmessages.RemoteControlCommand.ActionType action = 2;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional .naothmessages.RemoteControlCommand.SecondActionType second_action = 3;
    if (has_second_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->second_action());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteControlCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.RemoteControlCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteControlCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemoteControlCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.RemoteControlCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.RemoteControlCommand)
    MergeFrom(*source);
  }
}

void RemoteControlCommand::MergeFrom(const RemoteControlCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.RemoteControlCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_target()->::naothmessages::Pose2D::MergeFrom(from.target());
    }
    if (cached_has_bits & 0x00000002u) {
      controlmode_ = from.controlmode_;
    }
    if (cached_has_bits & 0x00000004u) {
      action_ = from.action_;
    }
    if (cached_has_bits & 0x00000008u) {
      second_action_ = from.second_action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RemoteControlCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.RemoteControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteControlCommand::CopyFrom(const RemoteControlCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.RemoteControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteControlCommand::IsInitialized() const {
  if (has_target()) {
    if (!this->target_->IsInitialized()) return false;
  }
  return true;
}

void RemoteControlCommand::Swap(RemoteControlCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoteControlCommand::InternalSwap(RemoteControlCommand* other) {
  using std::swap;
  swap(target_, other->target_);
  swap(controlmode_, other->controlmode_);
  swap(action_, other->action_);
  swap(second_action_, other->second_action_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RemoteControlCommand::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemoteControlCommand

// optional .naothmessages.RemoteControlCommand.ControlMode controlMode = 1;
bool RemoteControlCommand::has_controlmode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RemoteControlCommand::set_has_controlmode() {
  _has_bits_[0] |= 0x00000002u;
}
void RemoteControlCommand::clear_has_controlmode() {
  _has_bits_[0] &= ~0x00000002u;
}
void RemoteControlCommand::clear_controlmode() {
  controlmode_ = 0;
  clear_has_controlmode();
}
::naothmessages::RemoteControlCommand_ControlMode RemoteControlCommand::controlmode() const {
  // @@protoc_insertion_point(field_get:naothmessages.RemoteControlCommand.controlMode)
  return static_cast< ::naothmessages::RemoteControlCommand_ControlMode >(controlmode_);
}
void RemoteControlCommand::set_controlmode(::naothmessages::RemoteControlCommand_ControlMode value) {
  assert(::naothmessages::RemoteControlCommand_ControlMode_IsValid(value));
  set_has_controlmode();
  controlmode_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.RemoteControlCommand.controlMode)
}

// optional .naothmessages.RemoteControlCommand.ActionType action = 2;
bool RemoteControlCommand::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RemoteControlCommand::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
void RemoteControlCommand::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
void RemoteControlCommand::clear_action() {
  action_ = 0;
  clear_has_action();
}
::naothmessages::RemoteControlCommand_ActionType RemoteControlCommand::action() const {
  // @@protoc_insertion_point(field_get:naothmessages.RemoteControlCommand.action)
  return static_cast< ::naothmessages::RemoteControlCommand_ActionType >(action_);
}
void RemoteControlCommand::set_action(::naothmessages::RemoteControlCommand_ActionType value) {
  assert(::naothmessages::RemoteControlCommand_ActionType_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.RemoteControlCommand.action)
}

// optional .naothmessages.RemoteControlCommand.SecondActionType second_action = 3;
bool RemoteControlCommand::has_second_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RemoteControlCommand::set_has_second_action() {
  _has_bits_[0] |= 0x00000008u;
}
void RemoteControlCommand::clear_has_second_action() {
  _has_bits_[0] &= ~0x00000008u;
}
void RemoteControlCommand::clear_second_action() {
  second_action_ = 0;
  clear_has_second_action();
}
::naothmessages::RemoteControlCommand_SecondActionType RemoteControlCommand::second_action() const {
  // @@protoc_insertion_point(field_get:naothmessages.RemoteControlCommand.second_action)
  return static_cast< ::naothmessages::RemoteControlCommand_SecondActionType >(second_action_);
}
void RemoteControlCommand::set_second_action(::naothmessages::RemoteControlCommand_SecondActionType value) {
  assert(::naothmessages::RemoteControlCommand_SecondActionType_IsValid(value));
  set_has_second_action();
  second_action_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.RemoteControlCommand.second_action)
}

// optional .naothmessages.Pose2D target = 4;
bool RemoteControlCommand::has_target() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RemoteControlCommand::set_has_target() {
  _has_bits_[0] |= 0x00000001u;
}
void RemoteControlCommand::clear_has_target() {
  _has_bits_[0] &= ~0x00000001u;
}
void RemoteControlCommand::clear_target() {
  if (target_ != NULL) target_->::naothmessages::Pose2D::Clear();
  clear_has_target();
}
const ::naothmessages::Pose2D& RemoteControlCommand::target() const {
  const ::naothmessages::Pose2D* p = target_;
  // @@protoc_insertion_point(field_get:naothmessages.RemoteControlCommand.target)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::Pose2D*>(
      &::naothmessages::_Pose2D_default_instance_);
}
::naothmessages::Pose2D* RemoteControlCommand::mutable_target() {
  set_has_target();
  if (target_ == NULL) {
    target_ = new ::naothmessages::Pose2D;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.RemoteControlCommand.target)
  return target_;
}
::naothmessages::Pose2D* RemoteControlCommand::release_target() {
  // @@protoc_insertion_point(field_release:naothmessages.RemoteControlCommand.target)
  clear_has_target();
  ::naothmessages::Pose2D* temp = target_;
  target_ = NULL;
  return temp;
}
void RemoteControlCommand::set_allocated_target(::naothmessages::Pose2D* target) {
  delete target_;
  target_ = target;
  if (target) {
    set_has_target();
  } else {
    clear_has_target();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.RemoteControlCommand.target)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroundContactModel::kLeftGroundContactFieldNumber;
const int GroundContactModel::kRightGroundContactFieldNumber;
const int GroundContactModel::kSupportFootFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroundContactModel::GroundContactModel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.GroundContactModel)
}
GroundContactModel::GroundContactModel(const GroundContactModel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&leftgroundcontact_, &from.leftgroundcontact_,
    static_cast<size_t>(reinterpret_cast<char*>(&supportfoot_) -
    reinterpret_cast<char*>(&leftgroundcontact_)) + sizeof(supportfoot_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.GroundContactModel)
}

void GroundContactModel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&leftgroundcontact_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&supportfoot_) -
      reinterpret_cast<char*>(&leftgroundcontact_)) + sizeof(supportfoot_));
}

GroundContactModel::~GroundContactModel() {
  // @@protoc_insertion_point(destructor:naothmessages.GroundContactModel)
  SharedDtor();
}

void GroundContactModel::SharedDtor() {
}

void GroundContactModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroundContactModel::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GroundContactModel& GroundContactModel::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

GroundContactModel* GroundContactModel::New(::google::protobuf::Arena* arena) const {
  GroundContactModel* n = new GroundContactModel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroundContactModel::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.GroundContactModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&leftgroundcontact_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&supportfoot_) -
        reinterpret_cast<char*>(&leftgroundcontact_)) + sizeof(supportfoot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GroundContactModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.GroundContactModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool leftGroundContact = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_leftgroundcontact();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leftgroundcontact_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool rightGroundContact = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_rightgroundcontact();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rightgroundcontact_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .naothmessages.GroundContactModel.Foot supportFoot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::naothmessages::GroundContactModel_Foot_IsValid(value)) {
            set_supportfoot(static_cast< ::naothmessages::GroundContactModel_Foot >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.GroundContactModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.GroundContactModel)
  return false;
#undef DO_
}

void GroundContactModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.GroundContactModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool leftGroundContact = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->leftgroundcontact(), output);
  }

  // required bool rightGroundContact = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->rightgroundcontact(), output);
  }

  // required .naothmessages.GroundContactModel.Foot supportFoot = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->supportfoot(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.GroundContactModel)
}

::google::protobuf::uint8* GroundContactModel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.GroundContactModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool leftGroundContact = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->leftgroundcontact(), target);
  }

  // required bool rightGroundContact = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->rightgroundcontact(), target);
  }

  // required .naothmessages.GroundContactModel.Foot supportFoot = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->supportfoot(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.GroundContactModel)
  return target;
}

size_t GroundContactModel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:naothmessages.GroundContactModel)
  size_t total_size = 0;

  if (has_leftgroundcontact()) {
    // required bool leftGroundContact = 1;
    total_size += 1 + 1;
  }

  if (has_rightgroundcontact()) {
    // required bool rightGroundContact = 2;
    total_size += 1 + 1;
  }

  if (has_supportfoot()) {
    // required .naothmessages.GroundContactModel.Foot supportFoot = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->supportfoot());
  }

  return total_size;
}
size_t GroundContactModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.GroundContactModel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bool leftGroundContact = 1;
    total_size += 1 + 1;

    // required bool rightGroundContact = 2;
    total_size += 1 + 1;

    // required .naothmessages.GroundContactModel.Foot supportFoot = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->supportfoot());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroundContactModel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.GroundContactModel)
  GOOGLE_DCHECK_NE(&from, this);
  const GroundContactModel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GroundContactModel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.GroundContactModel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.GroundContactModel)
    MergeFrom(*source);
  }
}

void GroundContactModel::MergeFrom(const GroundContactModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.GroundContactModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      leftgroundcontact_ = from.leftgroundcontact_;
    }
    if (cached_has_bits & 0x00000002u) {
      rightgroundcontact_ = from.rightgroundcontact_;
    }
    if (cached_has_bits & 0x00000004u) {
      supportfoot_ = from.supportfoot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GroundContactModel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.GroundContactModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroundContactModel::CopyFrom(const GroundContactModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.GroundContactModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroundContactModel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void GroundContactModel::Swap(GroundContactModel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroundContactModel::InternalSwap(GroundContactModel* other) {
  using std::swap;
  swap(leftgroundcontact_, other->leftgroundcontact_);
  swap(rightgroundcontact_, other->rightgroundcontact_);
  swap(supportfoot_, other->supportfoot_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GroundContactModel::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroundContactModel

// required bool leftGroundContact = 1;
bool GroundContactModel::has_leftgroundcontact() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GroundContactModel::set_has_leftgroundcontact() {
  _has_bits_[0] |= 0x00000001u;
}
void GroundContactModel::clear_has_leftgroundcontact() {
  _has_bits_[0] &= ~0x00000001u;
}
void GroundContactModel::clear_leftgroundcontact() {
  leftgroundcontact_ = false;
  clear_has_leftgroundcontact();
}
bool GroundContactModel::leftgroundcontact() const {
  // @@protoc_insertion_point(field_get:naothmessages.GroundContactModel.leftGroundContact)
  return leftgroundcontact_;
}
void GroundContactModel::set_leftgroundcontact(bool value) {
  set_has_leftgroundcontact();
  leftgroundcontact_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.GroundContactModel.leftGroundContact)
}

// required bool rightGroundContact = 2;
bool GroundContactModel::has_rightgroundcontact() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GroundContactModel::set_has_rightgroundcontact() {
  _has_bits_[0] |= 0x00000002u;
}
void GroundContactModel::clear_has_rightgroundcontact() {
  _has_bits_[0] &= ~0x00000002u;
}
void GroundContactModel::clear_rightgroundcontact() {
  rightgroundcontact_ = false;
  clear_has_rightgroundcontact();
}
bool GroundContactModel::rightgroundcontact() const {
  // @@protoc_insertion_point(field_get:naothmessages.GroundContactModel.rightGroundContact)
  return rightgroundcontact_;
}
void GroundContactModel::set_rightgroundcontact(bool value) {
  set_has_rightgroundcontact();
  rightgroundcontact_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.GroundContactModel.rightGroundContact)
}

// required .naothmessages.GroundContactModel.Foot supportFoot = 3;
bool GroundContactModel::has_supportfoot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GroundContactModel::set_has_supportfoot() {
  _has_bits_[0] |= 0x00000004u;
}
void GroundContactModel::clear_has_supportfoot() {
  _has_bits_[0] &= ~0x00000004u;
}
void GroundContactModel::clear_supportfoot() {
  supportfoot_ = 0;
  clear_has_supportfoot();
}
::naothmessages::GroundContactModel_Foot GroundContactModel::supportfoot() const {
  // @@protoc_insertion_point(field_get:naothmessages.GroundContactModel.supportFoot)
  return static_cast< ::naothmessages::GroundContactModel_Foot >(supportfoot_);
}
void GroundContactModel::set_supportfoot(::naothmessages::GroundContactModel_Foot value) {
  assert(::naothmessages::GroundContactModel_Foot_IsValid(value));
  set_has_supportfoot();
  supportfoot_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.GroundContactModel.supportFoot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CollisionPercept::kTimeCollisionArmLeftFieldNumber;
const int CollisionPercept::kTimeCollisionArmRightFieldNumber;
const int CollisionPercept::kIsCollisionLeftBumperFieldNumber;
const int CollisionPercept::kIsCollisionRightBumperFieldNumber;
const int CollisionPercept::kLastComputedCollisionLeftFieldNumber;
const int CollisionPercept::kLastComputedCollisionRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CollisionPercept::CollisionPercept()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.CollisionPercept)
}
CollisionPercept::CollisionPercept(const CollisionPercept& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timecollisionarmleft_, &from.timecollisionarmleft_,
    static_cast<size_t>(reinterpret_cast<char*>(&iscollisionrightbumper_) -
    reinterpret_cast<char*>(&timecollisionarmleft_)) + sizeof(iscollisionrightbumper_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.CollisionPercept)
}

void CollisionPercept::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&timecollisionarmleft_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iscollisionrightbumper_) -
      reinterpret_cast<char*>(&timecollisionarmleft_)) + sizeof(iscollisionrightbumper_));
}

CollisionPercept::~CollisionPercept() {
  // @@protoc_insertion_point(destructor:naothmessages.CollisionPercept)
  SharedDtor();
}

void CollisionPercept::SharedDtor() {
}

void CollisionPercept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollisionPercept::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CollisionPercept& CollisionPercept::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

CollisionPercept* CollisionPercept::New(::google::protobuf::Arena* arena) const {
  CollisionPercept* n = new CollisionPercept;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CollisionPercept::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.CollisionPercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&timecollisionarmleft_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&iscollisionrightbumper_) -
        reinterpret_cast<char*>(&timecollisionarmleft_)) + sizeof(iscollisionrightbumper_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CollisionPercept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.CollisionPercept)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 timeCollisionArmLeft = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timecollisionarmleft();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timecollisionarmleft_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 timeCollisionArmRight = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_timecollisionarmright();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timecollisionarmright_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool isCollisionLeftBumper = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_iscollisionleftbumper();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscollisionleftbumper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool isCollisionRightBumper = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_iscollisionrightbumper();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscollisionrightbumper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double lastComputedCollisionLeft = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_lastcomputedcollisionleft();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lastcomputedcollisionleft_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double lastComputedCollisionRight = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_lastcomputedcollisionright();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lastcomputedcollisionright_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.CollisionPercept)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.CollisionPercept)
  return false;
#undef DO_
}

void CollisionPercept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.CollisionPercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 timeCollisionArmLeft = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timecollisionarmleft(), output);
  }

  // required uint32 timeCollisionArmRight = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timecollisionarmright(), output);
  }

  // required bool isCollisionLeftBumper = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->iscollisionleftbumper(), output);
  }

  // required bool isCollisionRightBumper = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->iscollisionrightbumper(), output);
  }

  // required double lastComputedCollisionLeft = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lastcomputedcollisionleft(), output);
  }

  // required double lastComputedCollisionRight = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->lastcomputedcollisionright(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.CollisionPercept)
}

::google::protobuf::uint8* CollisionPercept::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.CollisionPercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 timeCollisionArmLeft = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timecollisionarmleft(), target);
  }

  // required uint32 timeCollisionArmRight = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timecollisionarmright(), target);
  }

  // required bool isCollisionLeftBumper = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->iscollisionleftbumper(), target);
  }

  // required bool isCollisionRightBumper = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->iscollisionrightbumper(), target);
  }

  // required double lastComputedCollisionLeft = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lastcomputedcollisionleft(), target);
  }

  // required double lastComputedCollisionRight = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->lastcomputedcollisionright(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.CollisionPercept)
  return target;
}

size_t CollisionPercept::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:naothmessages.CollisionPercept)
  size_t total_size = 0;

  if (has_timecollisionarmleft()) {
    // required uint32 timeCollisionArmLeft = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timecollisionarmleft());
  }

  if (has_timecollisionarmright()) {
    // required uint32 timeCollisionArmRight = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timecollisionarmright());
  }

  if (has_lastcomputedcollisionleft()) {
    // required double lastComputedCollisionLeft = 5;
    total_size += 1 + 8;
  }

  if (has_lastcomputedcollisionright()) {
    // required double lastComputedCollisionRight = 6;
    total_size += 1 + 8;
  }

  if (has_iscollisionleftbumper()) {
    // required bool isCollisionLeftBumper = 3;
    total_size += 1 + 1;
  }

  if (has_iscollisionrightbumper()) {
    // required bool isCollisionRightBumper = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CollisionPercept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.CollisionPercept)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required uint32 timeCollisionArmLeft = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timecollisionarmleft());

    // required uint32 timeCollisionArmRight = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timecollisionarmright());

    // required double lastComputedCollisionLeft = 5;
    total_size += 1 + 8;

    // required double lastComputedCollisionRight = 6;
    total_size += 1 + 8;

    // required bool isCollisionLeftBumper = 3;
    total_size += 1 + 1;

    // required bool isCollisionRightBumper = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollisionPercept::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.CollisionPercept)
  GOOGLE_DCHECK_NE(&from, this);
  const CollisionPercept* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CollisionPercept>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.CollisionPercept)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.CollisionPercept)
    MergeFrom(*source);
  }
}

void CollisionPercept::MergeFrom(const CollisionPercept& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.CollisionPercept)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      timecollisionarmleft_ = from.timecollisionarmleft_;
    }
    if (cached_has_bits & 0x00000002u) {
      timecollisionarmright_ = from.timecollisionarmright_;
    }
    if (cached_has_bits & 0x00000004u) {
      lastcomputedcollisionleft_ = from.lastcomputedcollisionleft_;
    }
    if (cached_has_bits & 0x00000008u) {
      lastcomputedcollisionright_ = from.lastcomputedcollisionright_;
    }
    if (cached_has_bits & 0x00000010u) {
      iscollisionleftbumper_ = from.iscollisionleftbumper_;
    }
    if (cached_has_bits & 0x00000020u) {
      iscollisionrightbumper_ = from.iscollisionrightbumper_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CollisionPercept::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.CollisionPercept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollisionPercept::CopyFrom(const CollisionPercept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.CollisionPercept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollisionPercept::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void CollisionPercept::Swap(CollisionPercept* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CollisionPercept::InternalSwap(CollisionPercept* other) {
  using std::swap;
  swap(timecollisionarmleft_, other->timecollisionarmleft_);
  swap(timecollisionarmright_, other->timecollisionarmright_);
  swap(lastcomputedcollisionleft_, other->lastcomputedcollisionleft_);
  swap(lastcomputedcollisionright_, other->lastcomputedcollisionright_);
  swap(iscollisionleftbumper_, other->iscollisionleftbumper_);
  swap(iscollisionrightbumper_, other->iscollisionrightbumper_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CollisionPercept::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CollisionPercept

// required uint32 timeCollisionArmLeft = 1;
bool CollisionPercept::has_timecollisionarmleft() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CollisionPercept::set_has_timecollisionarmleft() {
  _has_bits_[0] |= 0x00000001u;
}
void CollisionPercept::clear_has_timecollisionarmleft() {
  _has_bits_[0] &= ~0x00000001u;
}
void CollisionPercept::clear_timecollisionarmleft() {
  timecollisionarmleft_ = 0u;
  clear_has_timecollisionarmleft();
}
::google::protobuf::uint32 CollisionPercept::timecollisionarmleft() const {
  // @@protoc_insertion_point(field_get:naothmessages.CollisionPercept.timeCollisionArmLeft)
  return timecollisionarmleft_;
}
void CollisionPercept::set_timecollisionarmleft(::google::protobuf::uint32 value) {
  set_has_timecollisionarmleft();
  timecollisionarmleft_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CollisionPercept.timeCollisionArmLeft)
}

// required uint32 timeCollisionArmRight = 2;
bool CollisionPercept::has_timecollisionarmright() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CollisionPercept::set_has_timecollisionarmright() {
  _has_bits_[0] |= 0x00000002u;
}
void CollisionPercept::clear_has_timecollisionarmright() {
  _has_bits_[0] &= ~0x00000002u;
}
void CollisionPercept::clear_timecollisionarmright() {
  timecollisionarmright_ = 0u;
  clear_has_timecollisionarmright();
}
::google::protobuf::uint32 CollisionPercept::timecollisionarmright() const {
  // @@protoc_insertion_point(field_get:naothmessages.CollisionPercept.timeCollisionArmRight)
  return timecollisionarmright_;
}
void CollisionPercept::set_timecollisionarmright(::google::protobuf::uint32 value) {
  set_has_timecollisionarmright();
  timecollisionarmright_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CollisionPercept.timeCollisionArmRight)
}

// required bool isCollisionLeftBumper = 3;
bool CollisionPercept::has_iscollisionleftbumper() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CollisionPercept::set_has_iscollisionleftbumper() {
  _has_bits_[0] |= 0x00000010u;
}
void CollisionPercept::clear_has_iscollisionleftbumper() {
  _has_bits_[0] &= ~0x00000010u;
}
void CollisionPercept::clear_iscollisionleftbumper() {
  iscollisionleftbumper_ = false;
  clear_has_iscollisionleftbumper();
}
bool CollisionPercept::iscollisionleftbumper() const {
  // @@protoc_insertion_point(field_get:naothmessages.CollisionPercept.isCollisionLeftBumper)
  return iscollisionleftbumper_;
}
void CollisionPercept::set_iscollisionleftbumper(bool value) {
  set_has_iscollisionleftbumper();
  iscollisionleftbumper_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CollisionPercept.isCollisionLeftBumper)
}

// required bool isCollisionRightBumper = 4;
bool CollisionPercept::has_iscollisionrightbumper() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CollisionPercept::set_has_iscollisionrightbumper() {
  _has_bits_[0] |= 0x00000020u;
}
void CollisionPercept::clear_has_iscollisionrightbumper() {
  _has_bits_[0] &= ~0x00000020u;
}
void CollisionPercept::clear_iscollisionrightbumper() {
  iscollisionrightbumper_ = false;
  clear_has_iscollisionrightbumper();
}
bool CollisionPercept::iscollisionrightbumper() const {
  // @@protoc_insertion_point(field_get:naothmessages.CollisionPercept.isCollisionRightBumper)
  return iscollisionrightbumper_;
}
void CollisionPercept::set_iscollisionrightbumper(bool value) {
  set_has_iscollisionrightbumper();
  iscollisionrightbumper_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CollisionPercept.isCollisionRightBumper)
}

// required double lastComputedCollisionLeft = 5;
bool CollisionPercept::has_lastcomputedcollisionleft() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CollisionPercept::set_has_lastcomputedcollisionleft() {
  _has_bits_[0] |= 0x00000004u;
}
void CollisionPercept::clear_has_lastcomputedcollisionleft() {
  _has_bits_[0] &= ~0x00000004u;
}
void CollisionPercept::clear_lastcomputedcollisionleft() {
  lastcomputedcollisionleft_ = 0;
  clear_has_lastcomputedcollisionleft();
}
double CollisionPercept::lastcomputedcollisionleft() const {
  // @@protoc_insertion_point(field_get:naothmessages.CollisionPercept.lastComputedCollisionLeft)
  return lastcomputedcollisionleft_;
}
void CollisionPercept::set_lastcomputedcollisionleft(double value) {
  set_has_lastcomputedcollisionleft();
  lastcomputedcollisionleft_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CollisionPercept.lastComputedCollisionLeft)
}

// required double lastComputedCollisionRight = 6;
bool CollisionPercept::has_lastcomputedcollisionright() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CollisionPercept::set_has_lastcomputedcollisionright() {
  _has_bits_[0] |= 0x00000008u;
}
void CollisionPercept::clear_has_lastcomputedcollisionright() {
  _has_bits_[0] &= ~0x00000008u;
}
void CollisionPercept::clear_lastcomputedcollisionright() {
  lastcomputedcollisionright_ = 0;
  clear_has_lastcomputedcollisionright();
}
double CollisionPercept::lastcomputedcollisionright() const {
  // @@protoc_insertion_point(field_get:naothmessages.CollisionPercept.lastComputedCollisionRight)
  return lastcomputedcollisionright_;
}
void CollisionPercept::set_lastcomputedcollisionright(double value) {
  set_has_lastcomputedcollisionright();
  lastcomputedcollisionright_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CollisionPercept.lastComputedCollisionRight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMUData::kLocationFieldNumber;
const int IMUData::kVelocityFieldNumber;
const int IMUData::kAccelerationFieldNumber;
const int IMUData::kAccelerationSensorFieldNumber;
const int IMUData::kRotationFieldNumber;
const int IMUData::kRotationalVelocityFieldNumber;
const int IMUData::kRotationalVelocitySensorFieldNumber;
const int IMUData::kOrientationFieldNumber;
const int IMUData::kOrientationRotvecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMUData::IMUData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.IMUData)
}
IMUData::IMUData(const IMUData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::naothmessages::DoubleVector3(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::naothmessages::DoubleVector3(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  if (from.has_acceleration()) {
    acceleration_ = new ::naothmessages::DoubleVector3(*from.acceleration_);
  } else {
    acceleration_ = NULL;
  }
  if (from.has_acceleration_sensor()) {
    acceleration_sensor_ = new ::naothmessages::DoubleVector3(*from.acceleration_sensor_);
  } else {
    acceleration_sensor_ = NULL;
  }
  if (from.has_rotation()) {
    rotation_ = new ::naothmessages::DoubleVector3(*from.rotation_);
  } else {
    rotation_ = NULL;
  }
  if (from.has_rotational_velocity()) {
    rotational_velocity_ = new ::naothmessages::DoubleVector3(*from.rotational_velocity_);
  } else {
    rotational_velocity_ = NULL;
  }
  if (from.has_rotational_velocity_sensor()) {
    rotational_velocity_sensor_ = new ::naothmessages::DoubleVector3(*from.rotational_velocity_sensor_);
  } else {
    rotational_velocity_sensor_ = NULL;
  }
  if (from.has_orientation()) {
    orientation_ = new ::naothmessages::DoubleVector2(*from.orientation_);
  } else {
    orientation_ = NULL;
  }
  if (from.has_orientation_rotvec()) {
    orientation_rotvec_ = new ::naothmessages::DoubleVector3(*from.orientation_rotvec_);
  } else {
    orientation_rotvec_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:naothmessages.IMUData)
}

void IMUData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_rotvec_) -
      reinterpret_cast<char*>(&location_)) + sizeof(orientation_rotvec_));
}

IMUData::~IMUData() {
  // @@protoc_insertion_point(destructor:naothmessages.IMUData)
  SharedDtor();
}

void IMUData::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete acceleration_;
  if (this != internal_default_instance()) delete acceleration_sensor_;
  if (this != internal_default_instance()) delete rotation_;
  if (this != internal_default_instance()) delete rotational_velocity_;
  if (this != internal_default_instance()) delete rotational_velocity_sensor_;
  if (this != internal_default_instance()) delete orientation_;
  if (this != internal_default_instance()) delete orientation_rotvec_;
}

void IMUData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMUData::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMUData& IMUData::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMUData* IMUData::New(::google::protobuf::Arena* arena) const {
  IMUData* n = new IMUData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMUData::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.IMUData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(location_ != NULL);
      location_->::naothmessages::DoubleVector3::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(velocity_ != NULL);
      velocity_->::naothmessages::DoubleVector3::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(acceleration_ != NULL);
      acceleration_->::naothmessages::DoubleVector3::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(acceleration_sensor_ != NULL);
      acceleration_sensor_->::naothmessages::DoubleVector3::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(rotation_ != NULL);
      rotation_->::naothmessages::DoubleVector3::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(rotational_velocity_ != NULL);
      rotational_velocity_->::naothmessages::DoubleVector3::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(rotational_velocity_sensor_ != NULL);
      rotational_velocity_sensor_->::naothmessages::DoubleVector3::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(orientation_ != NULL);
      orientation_->::naothmessages::DoubleVector2::Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(orientation_rotvec_ != NULL);
    orientation_rotvec_->::naothmessages::DoubleVector3::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IMUData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.IMUData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .naothmessages.DoubleVector3 location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .naothmessages.DoubleVector3 velocity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .naothmessages.DoubleVector3 acceleration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector3 acceleration_sensor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceleration_sensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .naothmessages.DoubleVector3 rotation = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .naothmessages.DoubleVector3 rotational_velocity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotational_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector3 rotational_velocity_sensor = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotational_velocity_sensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .naothmessages.DoubleVector2 orientation = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .naothmessages.DoubleVector3 orientation_rotvec = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation_rotvec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.IMUData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.IMUData)
  return false;
#undef DO_
}

void IMUData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.IMUData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.DoubleVector3 location = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->location_, output);
  }

  // required .naothmessages.DoubleVector3 velocity = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->velocity_, output);
  }

  // required .naothmessages.DoubleVector3 acceleration = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->acceleration_, output);
  }

  // optional .naothmessages.DoubleVector3 acceleration_sensor = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->acceleration_sensor_, output);
  }

  // required .naothmessages.DoubleVector3 rotation = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->rotation_, output);
  }

  // required .naothmessages.DoubleVector3 rotational_velocity = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->rotational_velocity_, output);
  }

  // optional .naothmessages.DoubleVector3 rotational_velocity_sensor = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->rotational_velocity_sensor_, output);
  }

  // required .naothmessages.DoubleVector2 orientation = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->orientation_, output);
  }

  // required .naothmessages.DoubleVector3 orientation_rotvec = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->orientation_rotvec_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.IMUData)
}

::google::protobuf::uint8* IMUData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.IMUData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.DoubleVector3 location = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->location_, deterministic, target);
  }

  // required .naothmessages.DoubleVector3 velocity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->velocity_, deterministic, target);
  }

  // required .naothmessages.DoubleVector3 acceleration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->acceleration_, deterministic, target);
  }

  // optional .naothmessages.DoubleVector3 acceleration_sensor = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->acceleration_sensor_, deterministic, target);
  }

  // required .naothmessages.DoubleVector3 rotation = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->rotation_, deterministic, target);
  }

  // required .naothmessages.DoubleVector3 rotational_velocity = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->rotational_velocity_, deterministic, target);
  }

  // optional .naothmessages.DoubleVector3 rotational_velocity_sensor = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->rotational_velocity_sensor_, deterministic, target);
  }

  // required .naothmessages.DoubleVector2 orientation = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->orientation_, deterministic, target);
  }

  // required .naothmessages.DoubleVector3 orientation_rotvec = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->orientation_rotvec_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.IMUData)
  return target;
}

size_t IMUData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:naothmessages.IMUData)
  size_t total_size = 0;

  if (has_location()) {
    // required .naothmessages.DoubleVector3 location = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  if (has_velocity()) {
    // required .naothmessages.DoubleVector3 velocity = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->velocity_);
  }

  if (has_acceleration()) {
    // required .naothmessages.DoubleVector3 acceleration = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->acceleration_);
  }

  if (has_rotation()) {
    // required .naothmessages.DoubleVector3 rotation = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rotation_);
  }

  if (has_rotational_velocity()) {
    // required .naothmessages.DoubleVector3 rotational_velocity = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rotational_velocity_);
  }

  if (has_orientation()) {
    // required .naothmessages.DoubleVector2 orientation = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);
  }

  if (has_orientation_rotvec()) {
    // required .naothmessages.DoubleVector3 orientation_rotvec = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_rotvec_);
  }

  return total_size;
}
size_t IMUData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.IMUData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001b7) ^ 0x000001b7) == 0) {  // All required fields are present.
    // required .naothmessages.DoubleVector3 location = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);

    // required .naothmessages.DoubleVector3 velocity = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->velocity_);

    // required .naothmessages.DoubleVector3 acceleration = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->acceleration_);

    // required .naothmessages.DoubleVector3 rotation = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rotation_);

    // required .naothmessages.DoubleVector3 rotational_velocity = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rotational_velocity_);

    // required .naothmessages.DoubleVector2 orientation = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);

    // required .naothmessages.DoubleVector3 orientation_rotvec = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_rotvec_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .naothmessages.DoubleVector3 acceleration_sensor = 4;
  if (has_acceleration_sensor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->acceleration_sensor_);
  }

  // optional .naothmessages.DoubleVector3 rotational_velocity_sensor = 7;
  if (has_rotational_velocity_sensor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rotational_velocity_sensor_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.IMUData)
  GOOGLE_DCHECK_NE(&from, this);
  const IMUData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMUData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.IMUData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.IMUData)
    MergeFrom(*source);
  }
}

void IMUData::MergeFrom(const IMUData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.IMUData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::naothmessages::DoubleVector3::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_velocity()->::naothmessages::DoubleVector3::MergeFrom(from.velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_acceleration()->::naothmessages::DoubleVector3::MergeFrom(from.acceleration());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_acceleration_sensor()->::naothmessages::DoubleVector3::MergeFrom(from.acceleration_sensor());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_rotation()->::naothmessages::DoubleVector3::MergeFrom(from.rotation());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_rotational_velocity()->::naothmessages::DoubleVector3::MergeFrom(from.rotational_velocity());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_rotational_velocity_sensor()->::naothmessages::DoubleVector3::MergeFrom(from.rotational_velocity_sensor());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_orientation()->::naothmessages::DoubleVector2::MergeFrom(from.orientation());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    mutable_orientation_rotvec()->::naothmessages::DoubleVector3::MergeFrom(from.orientation_rotvec());
  }
}

void IMUData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.IMUData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMUData::CopyFrom(const IMUData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.IMUData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUData::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001b7) != 0x000001b7) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  if (has_velocity()) {
    if (!this->velocity_->IsInitialized()) return false;
  }
  if (has_acceleration()) {
    if (!this->acceleration_->IsInitialized()) return false;
  }
  if (has_acceleration_sensor()) {
    if (!this->acceleration_sensor_->IsInitialized()) return false;
  }
  if (has_rotation()) {
    if (!this->rotation_->IsInitialized()) return false;
  }
  if (has_rotational_velocity()) {
    if (!this->rotational_velocity_->IsInitialized()) return false;
  }
  if (has_rotational_velocity_sensor()) {
    if (!this->rotational_velocity_sensor_->IsInitialized()) return false;
  }
  if (has_orientation()) {
    if (!this->orientation_->IsInitialized()) return false;
  }
  if (has_orientation_rotvec()) {
    if (!this->orientation_rotvec_->IsInitialized()) return false;
  }
  return true;
}

void IMUData::Swap(IMUData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMUData::InternalSwap(IMUData* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(velocity_, other->velocity_);
  swap(acceleration_, other->acceleration_);
  swap(acceleration_sensor_, other->acceleration_sensor_);
  swap(rotation_, other->rotation_);
  swap(rotational_velocity_, other->rotational_velocity_);
  swap(rotational_velocity_sensor_, other->rotational_velocity_sensor_);
  swap(orientation_, other->orientation_);
  swap(orientation_rotvec_, other->orientation_rotvec_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMUData::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMUData

// required .naothmessages.DoubleVector3 location = 1;
bool IMUData::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMUData::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void IMUData::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMUData::clear_location() {
  if (location_ != NULL) location_->::naothmessages::DoubleVector3::Clear();
  clear_has_location();
}
const ::naothmessages::DoubleVector3& IMUData::location() const {
  const ::naothmessages::DoubleVector3* p = location_;
  // @@protoc_insertion_point(field_get:naothmessages.IMUData.location)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
::naothmessages::DoubleVector3* IMUData::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.IMUData.location)
  return location_;
}
::naothmessages::DoubleVector3* IMUData::release_location() {
  // @@protoc_insertion_point(field_release:naothmessages.IMUData.location)
  clear_has_location();
  ::naothmessages::DoubleVector3* temp = location_;
  location_ = NULL;
  return temp;
}
void IMUData::set_allocated_location(::naothmessages::DoubleVector3* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.IMUData.location)
}

// required .naothmessages.DoubleVector3 velocity = 2;
bool IMUData::has_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMUData::set_has_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
void IMUData::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMUData::clear_velocity() {
  if (velocity_ != NULL) velocity_->::naothmessages::DoubleVector3::Clear();
  clear_has_velocity();
}
const ::naothmessages::DoubleVector3& IMUData::velocity() const {
  const ::naothmessages::DoubleVector3* p = velocity_;
  // @@protoc_insertion_point(field_get:naothmessages.IMUData.velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
::naothmessages::DoubleVector3* IMUData::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.IMUData.velocity)
  return velocity_;
}
::naothmessages::DoubleVector3* IMUData::release_velocity() {
  // @@protoc_insertion_point(field_release:naothmessages.IMUData.velocity)
  clear_has_velocity();
  ::naothmessages::DoubleVector3* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
void IMUData::set_allocated_velocity(::naothmessages::DoubleVector3* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.IMUData.velocity)
}

// required .naothmessages.DoubleVector3 acceleration = 3;
bool IMUData::has_acceleration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMUData::set_has_acceleration() {
  _has_bits_[0] |= 0x00000004u;
}
void IMUData::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMUData::clear_acceleration() {
  if (acceleration_ != NULL) acceleration_->::naothmessages::DoubleVector3::Clear();
  clear_has_acceleration();
}
const ::naothmessages::DoubleVector3& IMUData::acceleration() const {
  const ::naothmessages::DoubleVector3* p = acceleration_;
  // @@protoc_insertion_point(field_get:naothmessages.IMUData.acceleration)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
::naothmessages::DoubleVector3* IMUData::mutable_acceleration() {
  set_has_acceleration();
  if (acceleration_ == NULL) {
    acceleration_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.IMUData.acceleration)
  return acceleration_;
}
::naothmessages::DoubleVector3* IMUData::release_acceleration() {
  // @@protoc_insertion_point(field_release:naothmessages.IMUData.acceleration)
  clear_has_acceleration();
  ::naothmessages::DoubleVector3* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
void IMUData::set_allocated_acceleration(::naothmessages::DoubleVector3* acceleration) {
  delete acceleration_;
  acceleration_ = acceleration;
  if (acceleration) {
    set_has_acceleration();
  } else {
    clear_has_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.IMUData.acceleration)
}

// optional .naothmessages.DoubleVector3 acceleration_sensor = 4;
bool IMUData::has_acceleration_sensor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IMUData::set_has_acceleration_sensor() {
  _has_bits_[0] |= 0x00000008u;
}
void IMUData::clear_has_acceleration_sensor() {
  _has_bits_[0] &= ~0x00000008u;
}
void IMUData::clear_acceleration_sensor() {
  if (acceleration_sensor_ != NULL) acceleration_sensor_->::naothmessages::DoubleVector3::Clear();
  clear_has_acceleration_sensor();
}
const ::naothmessages::DoubleVector3& IMUData::acceleration_sensor() const {
  const ::naothmessages::DoubleVector3* p = acceleration_sensor_;
  // @@protoc_insertion_point(field_get:naothmessages.IMUData.acceleration_sensor)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
::naothmessages::DoubleVector3* IMUData::mutable_acceleration_sensor() {
  set_has_acceleration_sensor();
  if (acceleration_sensor_ == NULL) {
    acceleration_sensor_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.IMUData.acceleration_sensor)
  return acceleration_sensor_;
}
::naothmessages::DoubleVector3* IMUData::release_acceleration_sensor() {
  // @@protoc_insertion_point(field_release:naothmessages.IMUData.acceleration_sensor)
  clear_has_acceleration_sensor();
  ::naothmessages::DoubleVector3* temp = acceleration_sensor_;
  acceleration_sensor_ = NULL;
  return temp;
}
void IMUData::set_allocated_acceleration_sensor(::naothmessages::DoubleVector3* acceleration_sensor) {
  delete acceleration_sensor_;
  acceleration_sensor_ = acceleration_sensor;
  if (acceleration_sensor) {
    set_has_acceleration_sensor();
  } else {
    clear_has_acceleration_sensor();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.IMUData.acceleration_sensor)
}

// required .naothmessages.DoubleVector3 rotation = 5;
bool IMUData::has_rotation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void IMUData::set_has_rotation() {
  _has_bits_[0] |= 0x00000010u;
}
void IMUData::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000010u;
}
void IMUData::clear_rotation() {
  if (rotation_ != NULL) rotation_->::naothmessages::DoubleVector3::Clear();
  clear_has_rotation();
}
const ::naothmessages::DoubleVector3& IMUData::rotation() const {
  const ::naothmessages::DoubleVector3* p = rotation_;
  // @@protoc_insertion_point(field_get:naothmessages.IMUData.rotation)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
::naothmessages::DoubleVector3* IMUData::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) {
    rotation_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.IMUData.rotation)
  return rotation_;
}
::naothmessages::DoubleVector3* IMUData::release_rotation() {
  // @@protoc_insertion_point(field_release:naothmessages.IMUData.rotation)
  clear_has_rotation();
  ::naothmessages::DoubleVector3* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
void IMUData::set_allocated_rotation(::naothmessages::DoubleVector3* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    set_has_rotation();
  } else {
    clear_has_rotation();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.IMUData.rotation)
}

// required .naothmessages.DoubleVector3 rotational_velocity = 6;
bool IMUData::has_rotational_velocity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void IMUData::set_has_rotational_velocity() {
  _has_bits_[0] |= 0x00000020u;
}
void IMUData::clear_has_rotational_velocity() {
  _has_bits_[0] &= ~0x00000020u;
}
void IMUData::clear_rotational_velocity() {
  if (rotational_velocity_ != NULL) rotational_velocity_->::naothmessages::DoubleVector3::Clear();
  clear_has_rotational_velocity();
}
const ::naothmessages::DoubleVector3& IMUData::rotational_velocity() const {
  const ::naothmessages::DoubleVector3* p = rotational_velocity_;
  // @@protoc_insertion_point(field_get:naothmessages.IMUData.rotational_velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
::naothmessages::DoubleVector3* IMUData::mutable_rotational_velocity() {
  set_has_rotational_velocity();
  if (rotational_velocity_ == NULL) {
    rotational_velocity_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.IMUData.rotational_velocity)
  return rotational_velocity_;
}
::naothmessages::DoubleVector3* IMUData::release_rotational_velocity() {
  // @@protoc_insertion_point(field_release:naothmessages.IMUData.rotational_velocity)
  clear_has_rotational_velocity();
  ::naothmessages::DoubleVector3* temp = rotational_velocity_;
  rotational_velocity_ = NULL;
  return temp;
}
void IMUData::set_allocated_rotational_velocity(::naothmessages::DoubleVector3* rotational_velocity) {
  delete rotational_velocity_;
  rotational_velocity_ = rotational_velocity;
  if (rotational_velocity) {
    set_has_rotational_velocity();
  } else {
    clear_has_rotational_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.IMUData.rotational_velocity)
}

// optional .naothmessages.DoubleVector3 rotational_velocity_sensor = 7;
bool IMUData::has_rotational_velocity_sensor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void IMUData::set_has_rotational_velocity_sensor() {
  _has_bits_[0] |= 0x00000040u;
}
void IMUData::clear_has_rotational_velocity_sensor() {
  _has_bits_[0] &= ~0x00000040u;
}
void IMUData::clear_rotational_velocity_sensor() {
  if (rotational_velocity_sensor_ != NULL) rotational_velocity_sensor_->::naothmessages::DoubleVector3::Clear();
  clear_has_rotational_velocity_sensor();
}
const ::naothmessages::DoubleVector3& IMUData::rotational_velocity_sensor() const {
  const ::naothmessages::DoubleVector3* p = rotational_velocity_sensor_;
  // @@protoc_insertion_point(field_get:naothmessages.IMUData.rotational_velocity_sensor)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
::naothmessages::DoubleVector3* IMUData::mutable_rotational_velocity_sensor() {
  set_has_rotational_velocity_sensor();
  if (rotational_velocity_sensor_ == NULL) {
    rotational_velocity_sensor_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.IMUData.rotational_velocity_sensor)
  return rotational_velocity_sensor_;
}
::naothmessages::DoubleVector3* IMUData::release_rotational_velocity_sensor() {
  // @@protoc_insertion_point(field_release:naothmessages.IMUData.rotational_velocity_sensor)
  clear_has_rotational_velocity_sensor();
  ::naothmessages::DoubleVector3* temp = rotational_velocity_sensor_;
  rotational_velocity_sensor_ = NULL;
  return temp;
}
void IMUData::set_allocated_rotational_velocity_sensor(::naothmessages::DoubleVector3* rotational_velocity_sensor) {
  delete rotational_velocity_sensor_;
  rotational_velocity_sensor_ = rotational_velocity_sensor;
  if (rotational_velocity_sensor) {
    set_has_rotational_velocity_sensor();
  } else {
    clear_has_rotational_velocity_sensor();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.IMUData.rotational_velocity_sensor)
}

// required .naothmessages.DoubleVector2 orientation = 8;
bool IMUData::has_orientation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void IMUData::set_has_orientation() {
  _has_bits_[0] |= 0x00000080u;
}
void IMUData::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000080u;
}
void IMUData::clear_orientation() {
  if (orientation_ != NULL) orientation_->::naothmessages::DoubleVector2::Clear();
  clear_has_orientation();
}
const ::naothmessages::DoubleVector2& IMUData::orientation() const {
  const ::naothmessages::DoubleVector2* p = orientation_;
  // @@protoc_insertion_point(field_get:naothmessages.IMUData.orientation)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* IMUData::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) {
    orientation_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.IMUData.orientation)
  return orientation_;
}
::naothmessages::DoubleVector2* IMUData::release_orientation() {
  // @@protoc_insertion_point(field_release:naothmessages.IMUData.orientation)
  clear_has_orientation();
  ::naothmessages::DoubleVector2* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
void IMUData::set_allocated_orientation(::naothmessages::DoubleVector2* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.IMUData.orientation)
}

// required .naothmessages.DoubleVector3 orientation_rotvec = 9;
bool IMUData::has_orientation_rotvec() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void IMUData::set_has_orientation_rotvec() {
  _has_bits_[0] |= 0x00000100u;
}
void IMUData::clear_has_orientation_rotvec() {
  _has_bits_[0] &= ~0x00000100u;
}
void IMUData::clear_orientation_rotvec() {
  if (orientation_rotvec_ != NULL) orientation_rotvec_->::naothmessages::DoubleVector3::Clear();
  clear_has_orientation_rotvec();
}
const ::naothmessages::DoubleVector3& IMUData::orientation_rotvec() const {
  const ::naothmessages::DoubleVector3* p = orientation_rotvec_;
  // @@protoc_insertion_point(field_get:naothmessages.IMUData.orientation_rotvec)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
::naothmessages::DoubleVector3* IMUData::mutable_orientation_rotvec() {
  set_has_orientation_rotvec();
  if (orientation_rotvec_ == NULL) {
    orientation_rotvec_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.IMUData.orientation_rotvec)
  return orientation_rotvec_;
}
::naothmessages::DoubleVector3* IMUData::release_orientation_rotvec() {
  // @@protoc_insertion_point(field_release:naothmessages.IMUData.orientation_rotvec)
  clear_has_orientation_rotvec();
  ::naothmessages::DoubleVector3* temp = orientation_rotvec_;
  orientation_rotvec_ = NULL;
  return temp;
}
void IMUData::set_allocated_orientation_rotvec(::naothmessages::DoubleVector3* orientation_rotvec) {
  delete orientation_rotvec_;
  orientation_rotvec_ = orientation_rotvec;
  if (orientation_rotvec) {
    set_has_orientation_rotvec();
  } else {
    clear_has_orientation_rotvec();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.IMUData.orientation_rotvec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CentreOfPressure::kInAndOnlyLeftFootCopFieldNumber;
const int CentreOfPressure::kInAndOnlyLeftFootMagnitudeFieldNumber;
const int CentreOfPressure::kInAndOnlyLeftFootValidFieldNumber;
const int CentreOfPressure::kInAndOnlyRightFootCopFieldNumber;
const int CentreOfPressure::kInAndOnlyRightFootMagnitudeFieldNumber;
const int CentreOfPressure::kInAndOnlyRightFootValidFieldNumber;
const int CentreOfPressure::kInKinematicChainOriginCopFieldNumber;
const int CentreOfPressure::kInKinematicChainOriginMagnitudeFieldNumber;
const int CentreOfPressure::kInKinematicChainOriginValidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CentreOfPressure::CentreOfPressure()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.CentreOfPressure)
}
CentreOfPressure::CentreOfPressure(const CentreOfPressure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_in_and_only_left_foot_cop()) {
    in_and_only_left_foot_cop_ = new ::naothmessages::DoubleVector3(*from.in_and_only_left_foot_cop_);
  } else {
    in_and_only_left_foot_cop_ = NULL;
  }
  if (from.has_in_and_only_right_foot_cop()) {
    in_and_only_right_foot_cop_ = new ::naothmessages::DoubleVector3(*from.in_and_only_right_foot_cop_);
  } else {
    in_and_only_right_foot_cop_ = NULL;
  }
  if (from.has_in_kinematic_chain_origin_cop()) {
    in_kinematic_chain_origin_cop_ = new ::naothmessages::DoubleVector3(*from.in_kinematic_chain_origin_cop_);
  } else {
    in_kinematic_chain_origin_cop_ = NULL;
  }
  ::memcpy(&in_and_only_left_foot_magnitude_, &from.in_and_only_left_foot_magnitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&in_kinematic_chain_origin_valid_) -
    reinterpret_cast<char*>(&in_and_only_left_foot_magnitude_)) + sizeof(in_kinematic_chain_origin_valid_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.CentreOfPressure)
}

void CentreOfPressure::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&in_and_only_left_foot_cop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_kinematic_chain_origin_valid_) -
      reinterpret_cast<char*>(&in_and_only_left_foot_cop_)) + sizeof(in_kinematic_chain_origin_valid_));
}

CentreOfPressure::~CentreOfPressure() {
  // @@protoc_insertion_point(destructor:naothmessages.CentreOfPressure)
  SharedDtor();
}

void CentreOfPressure::SharedDtor() {
  if (this != internal_default_instance()) delete in_and_only_left_foot_cop_;
  if (this != internal_default_instance()) delete in_and_only_right_foot_cop_;
  if (this != internal_default_instance()) delete in_kinematic_chain_origin_cop_;
}

void CentreOfPressure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CentreOfPressure::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CentreOfPressure& CentreOfPressure::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

CentreOfPressure* CentreOfPressure::New(::google::protobuf::Arena* arena) const {
  CentreOfPressure* n = new CentreOfPressure;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CentreOfPressure::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.CentreOfPressure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(in_and_only_left_foot_cop_ != NULL);
      in_and_only_left_foot_cop_->::naothmessages::DoubleVector3::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(in_and_only_right_foot_cop_ != NULL);
      in_and_only_right_foot_cop_->::naothmessages::DoubleVector3::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(in_kinematic_chain_origin_cop_ != NULL);
      in_kinematic_chain_origin_cop_->::naothmessages::DoubleVector3::Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&in_and_only_left_foot_magnitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&in_and_only_right_foot_valid_) -
        reinterpret_cast<char*>(&in_and_only_left_foot_magnitude_)) + sizeof(in_and_only_right_foot_valid_));
  }
  in_kinematic_chain_origin_valid_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CentreOfPressure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.CentreOfPressure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .naothmessages.DoubleVector3 in_and_only_left_foot_cop = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_in_and_only_left_foot_cop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double in_and_only_left_foot_magnitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_in_and_only_left_foot_magnitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &in_and_only_left_foot_magnitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool in_and_only_left_foot_valid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_in_and_only_left_foot_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_and_only_left_foot_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .naothmessages.DoubleVector3 in_and_only_right_foot_cop = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_in_and_only_right_foot_cop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double in_and_only_right_foot_magnitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_in_and_only_right_foot_magnitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &in_and_only_right_foot_magnitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool in_and_only_right_foot_valid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_in_and_only_right_foot_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_and_only_right_foot_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .naothmessages.DoubleVector3 in_kinematic_chain_origin_cop = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_in_kinematic_chain_origin_cop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double in_kinematic_chain_origin_magnitude = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_in_kinematic_chain_origin_magnitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &in_kinematic_chain_origin_magnitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool in_kinematic_chain_origin_valid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_in_kinematic_chain_origin_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_kinematic_chain_origin_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.CentreOfPressure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.CentreOfPressure)
  return false;
#undef DO_
}

void CentreOfPressure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.CentreOfPressure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.DoubleVector3 in_and_only_left_foot_cop = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->in_and_only_left_foot_cop_, output);
  }

  // required double in_and_only_left_foot_magnitude = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->in_and_only_left_foot_magnitude(), output);
  }

  // required bool in_and_only_left_foot_valid = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->in_and_only_left_foot_valid(), output);
  }

  // required .naothmessages.DoubleVector3 in_and_only_right_foot_cop = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->in_and_only_right_foot_cop_, output);
  }

  // required double in_and_only_right_foot_magnitude = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->in_and_only_right_foot_magnitude(), output);
  }

  // required bool in_and_only_right_foot_valid = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->in_and_only_right_foot_valid(), output);
  }

  // required .naothmessages.DoubleVector3 in_kinematic_chain_origin_cop = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->in_kinematic_chain_origin_cop_, output);
  }

  // required double in_kinematic_chain_origin_magnitude = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->in_kinematic_chain_origin_magnitude(), output);
  }

  // required bool in_kinematic_chain_origin_valid = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->in_kinematic_chain_origin_valid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.CentreOfPressure)
}

::google::protobuf::uint8* CentreOfPressure::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.CentreOfPressure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.DoubleVector3 in_and_only_left_foot_cop = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->in_and_only_left_foot_cop_, deterministic, target);
  }

  // required double in_and_only_left_foot_magnitude = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->in_and_only_left_foot_magnitude(), target);
  }

  // required bool in_and_only_left_foot_valid = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->in_and_only_left_foot_valid(), target);
  }

  // required .naothmessages.DoubleVector3 in_and_only_right_foot_cop = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->in_and_only_right_foot_cop_, deterministic, target);
  }

  // required double in_and_only_right_foot_magnitude = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->in_and_only_right_foot_magnitude(), target);
  }

  // required bool in_and_only_right_foot_valid = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->in_and_only_right_foot_valid(), target);
  }

  // required .naothmessages.DoubleVector3 in_kinematic_chain_origin_cop = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->in_kinematic_chain_origin_cop_, deterministic, target);
  }

  // required double in_kinematic_chain_origin_magnitude = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->in_kinematic_chain_origin_magnitude(), target);
  }

  // required bool in_kinematic_chain_origin_valid = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->in_kinematic_chain_origin_valid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.CentreOfPressure)
  return target;
}

size_t CentreOfPressure::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:naothmessages.CentreOfPressure)
  size_t total_size = 0;

  if (has_in_and_only_left_foot_cop()) {
    // required .naothmessages.DoubleVector3 in_and_only_left_foot_cop = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->in_and_only_left_foot_cop_);
  }

  if (has_in_and_only_right_foot_cop()) {
    // required .naothmessages.DoubleVector3 in_and_only_right_foot_cop = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->in_and_only_right_foot_cop_);
  }

  if (has_in_kinematic_chain_origin_cop()) {
    // required .naothmessages.DoubleVector3 in_kinematic_chain_origin_cop = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->in_kinematic_chain_origin_cop_);
  }

  if (has_in_and_only_left_foot_magnitude()) {
    // required double in_and_only_left_foot_magnitude = 2;
    total_size += 1 + 8;
  }

  if (has_in_and_only_right_foot_magnitude()) {
    // required double in_and_only_right_foot_magnitude = 5;
    total_size += 1 + 8;
  }

  if (has_in_kinematic_chain_origin_magnitude()) {
    // required double in_kinematic_chain_origin_magnitude = 8;
    total_size += 1 + 8;
  }

  if (has_in_and_only_left_foot_valid()) {
    // required bool in_and_only_left_foot_valid = 3;
    total_size += 1 + 1;
  }

  if (has_in_and_only_right_foot_valid()) {
    // required bool in_and_only_right_foot_valid = 6;
    total_size += 1 + 1;
  }

  if (has_in_kinematic_chain_origin_valid()) {
    // required bool in_kinematic_chain_origin_valid = 9;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CentreOfPressure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.CentreOfPressure)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required .naothmessages.DoubleVector3 in_and_only_left_foot_cop = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->in_and_only_left_foot_cop_);

    // required .naothmessages.DoubleVector3 in_and_only_right_foot_cop = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->in_and_only_right_foot_cop_);

    // required .naothmessages.DoubleVector3 in_kinematic_chain_origin_cop = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->in_kinematic_chain_origin_cop_);

    // required double in_and_only_left_foot_magnitude = 2;
    total_size += 1 + 8;

    // required double in_and_only_right_foot_magnitude = 5;
    total_size += 1 + 8;

    // required double in_kinematic_chain_origin_magnitude = 8;
    total_size += 1 + 8;

    // required bool in_and_only_left_foot_valid = 3;
    total_size += 1 + 1;

    // required bool in_and_only_right_foot_valid = 6;
    total_size += 1 + 1;

    // required bool in_kinematic_chain_origin_valid = 9;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CentreOfPressure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.CentreOfPressure)
  GOOGLE_DCHECK_NE(&from, this);
  const CentreOfPressure* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CentreOfPressure>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.CentreOfPressure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.CentreOfPressure)
    MergeFrom(*source);
  }
}

void CentreOfPressure::MergeFrom(const CentreOfPressure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.CentreOfPressure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_in_and_only_left_foot_cop()->::naothmessages::DoubleVector3::MergeFrom(from.in_and_only_left_foot_cop());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_in_and_only_right_foot_cop()->::naothmessages::DoubleVector3::MergeFrom(from.in_and_only_right_foot_cop());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_in_kinematic_chain_origin_cop()->::naothmessages::DoubleVector3::MergeFrom(from.in_kinematic_chain_origin_cop());
    }
    if (cached_has_bits & 0x00000008u) {
      in_and_only_left_foot_magnitude_ = from.in_and_only_left_foot_magnitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      in_and_only_right_foot_magnitude_ = from.in_and_only_right_foot_magnitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      in_kinematic_chain_origin_magnitude_ = from.in_kinematic_chain_origin_magnitude_;
    }
    if (cached_has_bits & 0x00000040u) {
      in_and_only_left_foot_valid_ = from.in_and_only_left_foot_valid_;
    }
    if (cached_has_bits & 0x00000080u) {
      in_and_only_right_foot_valid_ = from.in_and_only_right_foot_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_in_kinematic_chain_origin_valid(from.in_kinematic_chain_origin_valid());
  }
}

void CentreOfPressure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.CentreOfPressure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CentreOfPressure::CopyFrom(const CentreOfPressure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.CentreOfPressure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CentreOfPressure::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  if (has_in_and_only_left_foot_cop()) {
    if (!this->in_and_only_left_foot_cop_->IsInitialized()) return false;
  }
  if (has_in_and_only_right_foot_cop()) {
    if (!this->in_and_only_right_foot_cop_->IsInitialized()) return false;
  }
  if (has_in_kinematic_chain_origin_cop()) {
    if (!this->in_kinematic_chain_origin_cop_->IsInitialized()) return false;
  }
  return true;
}

void CentreOfPressure::Swap(CentreOfPressure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CentreOfPressure::InternalSwap(CentreOfPressure* other) {
  using std::swap;
  swap(in_and_only_left_foot_cop_, other->in_and_only_left_foot_cop_);
  swap(in_and_only_right_foot_cop_, other->in_and_only_right_foot_cop_);
  swap(in_kinematic_chain_origin_cop_, other->in_kinematic_chain_origin_cop_);
  swap(in_and_only_left_foot_magnitude_, other->in_and_only_left_foot_magnitude_);
  swap(in_and_only_right_foot_magnitude_, other->in_and_only_right_foot_magnitude_);
  swap(in_kinematic_chain_origin_magnitude_, other->in_kinematic_chain_origin_magnitude_);
  swap(in_and_only_left_foot_valid_, other->in_and_only_left_foot_valid_);
  swap(in_and_only_right_foot_valid_, other->in_and_only_right_foot_valid_);
  swap(in_kinematic_chain_origin_valid_, other->in_kinematic_chain_origin_valid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CentreOfPressure::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CentreOfPressure

// required .naothmessages.DoubleVector3 in_and_only_left_foot_cop = 1;
bool CentreOfPressure::has_in_and_only_left_foot_cop() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CentreOfPressure::set_has_in_and_only_left_foot_cop() {
  _has_bits_[0] |= 0x00000001u;
}
void CentreOfPressure::clear_has_in_and_only_left_foot_cop() {
  _has_bits_[0] &= ~0x00000001u;
}
void CentreOfPressure::clear_in_and_only_left_foot_cop() {
  if (in_and_only_left_foot_cop_ != NULL) in_and_only_left_foot_cop_->::naothmessages::DoubleVector3::Clear();
  clear_has_in_and_only_left_foot_cop();
}
const ::naothmessages::DoubleVector3& CentreOfPressure::in_and_only_left_foot_cop() const {
  const ::naothmessages::DoubleVector3* p = in_and_only_left_foot_cop_;
  // @@protoc_insertion_point(field_get:naothmessages.CentreOfPressure.in_and_only_left_foot_cop)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
::naothmessages::DoubleVector3* CentreOfPressure::mutable_in_and_only_left_foot_cop() {
  set_has_in_and_only_left_foot_cop();
  if (in_and_only_left_foot_cop_ == NULL) {
    in_and_only_left_foot_cop_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.CentreOfPressure.in_and_only_left_foot_cop)
  return in_and_only_left_foot_cop_;
}
::naothmessages::DoubleVector3* CentreOfPressure::release_in_and_only_left_foot_cop() {
  // @@protoc_insertion_point(field_release:naothmessages.CentreOfPressure.in_and_only_left_foot_cop)
  clear_has_in_and_only_left_foot_cop();
  ::naothmessages::DoubleVector3* temp = in_and_only_left_foot_cop_;
  in_and_only_left_foot_cop_ = NULL;
  return temp;
}
void CentreOfPressure::set_allocated_in_and_only_left_foot_cop(::naothmessages::DoubleVector3* in_and_only_left_foot_cop) {
  delete in_and_only_left_foot_cop_;
  in_and_only_left_foot_cop_ = in_and_only_left_foot_cop;
  if (in_and_only_left_foot_cop) {
    set_has_in_and_only_left_foot_cop();
  } else {
    clear_has_in_and_only_left_foot_cop();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.CentreOfPressure.in_and_only_left_foot_cop)
}

// required double in_and_only_left_foot_magnitude = 2;
bool CentreOfPressure::has_in_and_only_left_foot_magnitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CentreOfPressure::set_has_in_and_only_left_foot_magnitude() {
  _has_bits_[0] |= 0x00000008u;
}
void CentreOfPressure::clear_has_in_and_only_left_foot_magnitude() {
  _has_bits_[0] &= ~0x00000008u;
}
void CentreOfPressure::clear_in_and_only_left_foot_magnitude() {
  in_and_only_left_foot_magnitude_ = 0;
  clear_has_in_and_only_left_foot_magnitude();
}
double CentreOfPressure::in_and_only_left_foot_magnitude() const {
  // @@protoc_insertion_point(field_get:naothmessages.CentreOfPressure.in_and_only_left_foot_magnitude)
  return in_and_only_left_foot_magnitude_;
}
void CentreOfPressure::set_in_and_only_left_foot_magnitude(double value) {
  set_has_in_and_only_left_foot_magnitude();
  in_and_only_left_foot_magnitude_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CentreOfPressure.in_and_only_left_foot_magnitude)
}

// required bool in_and_only_left_foot_valid = 3;
bool CentreOfPressure::has_in_and_only_left_foot_valid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CentreOfPressure::set_has_in_and_only_left_foot_valid() {
  _has_bits_[0] |= 0x00000040u;
}
void CentreOfPressure::clear_has_in_and_only_left_foot_valid() {
  _has_bits_[0] &= ~0x00000040u;
}
void CentreOfPressure::clear_in_and_only_left_foot_valid() {
  in_and_only_left_foot_valid_ = false;
  clear_has_in_and_only_left_foot_valid();
}
bool CentreOfPressure::in_and_only_left_foot_valid() const {
  // @@protoc_insertion_point(field_get:naothmessages.CentreOfPressure.in_and_only_left_foot_valid)
  return in_and_only_left_foot_valid_;
}
void CentreOfPressure::set_in_and_only_left_foot_valid(bool value) {
  set_has_in_and_only_left_foot_valid();
  in_and_only_left_foot_valid_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CentreOfPressure.in_and_only_left_foot_valid)
}

// required .naothmessages.DoubleVector3 in_and_only_right_foot_cop = 4;
bool CentreOfPressure::has_in_and_only_right_foot_cop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CentreOfPressure::set_has_in_and_only_right_foot_cop() {
  _has_bits_[0] |= 0x00000002u;
}
void CentreOfPressure::clear_has_in_and_only_right_foot_cop() {
  _has_bits_[0] &= ~0x00000002u;
}
void CentreOfPressure::clear_in_and_only_right_foot_cop() {
  if (in_and_only_right_foot_cop_ != NULL) in_and_only_right_foot_cop_->::naothmessages::DoubleVector3::Clear();
  clear_has_in_and_only_right_foot_cop();
}
const ::naothmessages::DoubleVector3& CentreOfPressure::in_and_only_right_foot_cop() const {
  const ::naothmessages::DoubleVector3* p = in_and_only_right_foot_cop_;
  // @@protoc_insertion_point(field_get:naothmessages.CentreOfPressure.in_and_only_right_foot_cop)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
::naothmessages::DoubleVector3* CentreOfPressure::mutable_in_and_only_right_foot_cop() {
  set_has_in_and_only_right_foot_cop();
  if (in_and_only_right_foot_cop_ == NULL) {
    in_and_only_right_foot_cop_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.CentreOfPressure.in_and_only_right_foot_cop)
  return in_and_only_right_foot_cop_;
}
::naothmessages::DoubleVector3* CentreOfPressure::release_in_and_only_right_foot_cop() {
  // @@protoc_insertion_point(field_release:naothmessages.CentreOfPressure.in_and_only_right_foot_cop)
  clear_has_in_and_only_right_foot_cop();
  ::naothmessages::DoubleVector3* temp = in_and_only_right_foot_cop_;
  in_and_only_right_foot_cop_ = NULL;
  return temp;
}
void CentreOfPressure::set_allocated_in_and_only_right_foot_cop(::naothmessages::DoubleVector3* in_and_only_right_foot_cop) {
  delete in_and_only_right_foot_cop_;
  in_and_only_right_foot_cop_ = in_and_only_right_foot_cop;
  if (in_and_only_right_foot_cop) {
    set_has_in_and_only_right_foot_cop();
  } else {
    clear_has_in_and_only_right_foot_cop();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.CentreOfPressure.in_and_only_right_foot_cop)
}

// required double in_and_only_right_foot_magnitude = 5;
bool CentreOfPressure::has_in_and_only_right_foot_magnitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CentreOfPressure::set_has_in_and_only_right_foot_magnitude() {
  _has_bits_[0] |= 0x00000010u;
}
void CentreOfPressure::clear_has_in_and_only_right_foot_magnitude() {
  _has_bits_[0] &= ~0x00000010u;
}
void CentreOfPressure::clear_in_and_only_right_foot_magnitude() {
  in_and_only_right_foot_magnitude_ = 0;
  clear_has_in_and_only_right_foot_magnitude();
}
double CentreOfPressure::in_and_only_right_foot_magnitude() const {
  // @@protoc_insertion_point(field_get:naothmessages.CentreOfPressure.in_and_only_right_foot_magnitude)
  return in_and_only_right_foot_magnitude_;
}
void CentreOfPressure::set_in_and_only_right_foot_magnitude(double value) {
  set_has_in_and_only_right_foot_magnitude();
  in_and_only_right_foot_magnitude_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CentreOfPressure.in_and_only_right_foot_magnitude)
}

// required bool in_and_only_right_foot_valid = 6;
bool CentreOfPressure::has_in_and_only_right_foot_valid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CentreOfPressure::set_has_in_and_only_right_foot_valid() {
  _has_bits_[0] |= 0x00000080u;
}
void CentreOfPressure::clear_has_in_and_only_right_foot_valid() {
  _has_bits_[0] &= ~0x00000080u;
}
void CentreOfPressure::clear_in_and_only_right_foot_valid() {
  in_and_only_right_foot_valid_ = false;
  clear_has_in_and_only_right_foot_valid();
}
bool CentreOfPressure::in_and_only_right_foot_valid() const {
  // @@protoc_insertion_point(field_get:naothmessages.CentreOfPressure.in_and_only_right_foot_valid)
  return in_and_only_right_foot_valid_;
}
void CentreOfPressure::set_in_and_only_right_foot_valid(bool value) {
  set_has_in_and_only_right_foot_valid();
  in_and_only_right_foot_valid_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CentreOfPressure.in_and_only_right_foot_valid)
}

// required .naothmessages.DoubleVector3 in_kinematic_chain_origin_cop = 7;
bool CentreOfPressure::has_in_kinematic_chain_origin_cop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CentreOfPressure::set_has_in_kinematic_chain_origin_cop() {
  _has_bits_[0] |= 0x00000004u;
}
void CentreOfPressure::clear_has_in_kinematic_chain_origin_cop() {
  _has_bits_[0] &= ~0x00000004u;
}
void CentreOfPressure::clear_in_kinematic_chain_origin_cop() {
  if (in_kinematic_chain_origin_cop_ != NULL) in_kinematic_chain_origin_cop_->::naothmessages::DoubleVector3::Clear();
  clear_has_in_kinematic_chain_origin_cop();
}
const ::naothmessages::DoubleVector3& CentreOfPressure::in_kinematic_chain_origin_cop() const {
  const ::naothmessages::DoubleVector3* p = in_kinematic_chain_origin_cop_;
  // @@protoc_insertion_point(field_get:naothmessages.CentreOfPressure.in_kinematic_chain_origin_cop)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
::naothmessages::DoubleVector3* CentreOfPressure::mutable_in_kinematic_chain_origin_cop() {
  set_has_in_kinematic_chain_origin_cop();
  if (in_kinematic_chain_origin_cop_ == NULL) {
    in_kinematic_chain_origin_cop_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.CentreOfPressure.in_kinematic_chain_origin_cop)
  return in_kinematic_chain_origin_cop_;
}
::naothmessages::DoubleVector3* CentreOfPressure::release_in_kinematic_chain_origin_cop() {
  // @@protoc_insertion_point(field_release:naothmessages.CentreOfPressure.in_kinematic_chain_origin_cop)
  clear_has_in_kinematic_chain_origin_cop();
  ::naothmessages::DoubleVector3* temp = in_kinematic_chain_origin_cop_;
  in_kinematic_chain_origin_cop_ = NULL;
  return temp;
}
void CentreOfPressure::set_allocated_in_kinematic_chain_origin_cop(::naothmessages::DoubleVector3* in_kinematic_chain_origin_cop) {
  delete in_kinematic_chain_origin_cop_;
  in_kinematic_chain_origin_cop_ = in_kinematic_chain_origin_cop;
  if (in_kinematic_chain_origin_cop) {
    set_has_in_kinematic_chain_origin_cop();
  } else {
    clear_has_in_kinematic_chain_origin_cop();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.CentreOfPressure.in_kinematic_chain_origin_cop)
}

// required double in_kinematic_chain_origin_magnitude = 8;
bool CentreOfPressure::has_in_kinematic_chain_origin_magnitude() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CentreOfPressure::set_has_in_kinematic_chain_origin_magnitude() {
  _has_bits_[0] |= 0x00000020u;
}
void CentreOfPressure::clear_has_in_kinematic_chain_origin_magnitude() {
  _has_bits_[0] &= ~0x00000020u;
}
void CentreOfPressure::clear_in_kinematic_chain_origin_magnitude() {
  in_kinematic_chain_origin_magnitude_ = 0;
  clear_has_in_kinematic_chain_origin_magnitude();
}
double CentreOfPressure::in_kinematic_chain_origin_magnitude() const {
  // @@protoc_insertion_point(field_get:naothmessages.CentreOfPressure.in_kinematic_chain_origin_magnitude)
  return in_kinematic_chain_origin_magnitude_;
}
void CentreOfPressure::set_in_kinematic_chain_origin_magnitude(double value) {
  set_has_in_kinematic_chain_origin_magnitude();
  in_kinematic_chain_origin_magnitude_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CentreOfPressure.in_kinematic_chain_origin_magnitude)
}

// required bool in_kinematic_chain_origin_valid = 9;
bool CentreOfPressure::has_in_kinematic_chain_origin_valid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CentreOfPressure::set_has_in_kinematic_chain_origin_valid() {
  _has_bits_[0] |= 0x00000100u;
}
void CentreOfPressure::clear_has_in_kinematic_chain_origin_valid() {
  _has_bits_[0] &= ~0x00000100u;
}
void CentreOfPressure::clear_in_kinematic_chain_origin_valid() {
  in_kinematic_chain_origin_valid_ = false;
  clear_has_in_kinematic_chain_origin_valid();
}
bool CentreOfPressure::in_kinematic_chain_origin_valid() const {
  // @@protoc_insertion_point(field_get:naothmessages.CentreOfPressure.in_kinematic_chain_origin_valid)
  return in_kinematic_chain_origin_valid_;
}
void CentreOfPressure::set_in_kinematic_chain_origin_valid(bool value) {
  set_has_in_kinematic_chain_origin_valid();
  in_kinematic_chain_origin_valid_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CentreOfPressure.in_kinematic_chain_origin_valid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalibrationDataCMC_CalibrationDataSampleV3::kChestPoseFieldNumber;
const int CalibrationDataCMC_CalibrationDataSampleV3::kEdgelsInImageFieldNumber;
const int CalibrationDataCMC_CalibrationDataSampleV3::kEdgelsInImageTopFieldNumber;
const int CalibrationDataCMC_CalibrationDataSampleV3::kOrientationFieldNumber;
const int CalibrationDataCMC_CalibrationDataSampleV3::kHeadYawFieldNumber;
const int CalibrationDataCMC_CalibrationDataSampleV3::kHeadPitchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalibrationDataCMC_CalibrationDataSampleV3::CalibrationDataCMC_CalibrationDataSampleV3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3)
}
CalibrationDataCMC_CalibrationDataSampleV3::CalibrationDataCMC_CalibrationDataSampleV3(const CalibrationDataCMC_CalibrationDataSampleV3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      edgelsinimage_(from.edgelsinimage_),
      edgelsinimagetop_(from.edgelsinimagetop_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_chestpose()) {
    chestpose_ = new ::naothmessages::Pose3D(*from.chestpose_);
  } else {
    chestpose_ = NULL;
  }
  if (from.has_orientation()) {
    orientation_ = new ::naothmessages::DoubleVector2(*from.orientation_);
  } else {
    orientation_ = NULL;
  }
  ::memcpy(&headyaw_, &from.headyaw_,
    static_cast<size_t>(reinterpret_cast<char*>(&headpitch_) -
    reinterpret_cast<char*>(&headyaw_)) + sizeof(headpitch_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3)
}

void CalibrationDataCMC_CalibrationDataSampleV3::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chestpose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&headpitch_) -
      reinterpret_cast<char*>(&chestpose_)) + sizeof(headpitch_));
}

CalibrationDataCMC_CalibrationDataSampleV3::~CalibrationDataCMC_CalibrationDataSampleV3() {
  // @@protoc_insertion_point(destructor:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3)
  SharedDtor();
}

void CalibrationDataCMC_CalibrationDataSampleV3::SharedDtor() {
  if (this != internal_default_instance()) delete chestpose_;
  if (this != internal_default_instance()) delete orientation_;
}

void CalibrationDataCMC_CalibrationDataSampleV3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalibrationDataCMC_CalibrationDataSampleV3::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CalibrationDataCMC_CalibrationDataSampleV3& CalibrationDataCMC_CalibrationDataSampleV3::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

CalibrationDataCMC_CalibrationDataSampleV3* CalibrationDataCMC_CalibrationDataSampleV3::New(::google::protobuf::Arena* arena) const {
  CalibrationDataCMC_CalibrationDataSampleV3* n = new CalibrationDataCMC_CalibrationDataSampleV3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CalibrationDataCMC_CalibrationDataSampleV3::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edgelsinimage_.Clear();
  edgelsinimagetop_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(chestpose_ != NULL);
      chestpose_->::naothmessages::Pose3D::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(orientation_ != NULL);
      orientation_->::naothmessages::DoubleVector2::Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&headyaw_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&headpitch_) -
        reinterpret_cast<char*>(&headyaw_)) + sizeof(headpitch_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CalibrationDataCMC_CalibrationDataSampleV3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .naothmessages.Pose3D chestPose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chestpose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .naothmessages.DoubleVector2 edgelsInImage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edgelsinimage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .naothmessages.DoubleVector2 edgelsInImageTop = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edgelsinimagetop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector2 orientation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double headYaw = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_headyaw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &headyaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double headPitch = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_headpitch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &headpitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3)
  return false;
#undef DO_
}

void CalibrationDataCMC_CalibrationDataSampleV3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.Pose3D chestPose = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->chestpose_, output);
  }

  // repeated .naothmessages.DoubleVector2 edgelsInImage = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edgelsinimage_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->edgelsinimage(static_cast<int>(i)), output);
  }

  // repeated .naothmessages.DoubleVector2 edgelsInImageTop = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edgelsinimagetop_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->edgelsinimagetop(static_cast<int>(i)), output);
  }

  // optional .naothmessages.DoubleVector2 orientation = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->orientation_, output);
  }

  // optional double headYaw = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->headyaw(), output);
  }

  // optional double headPitch = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->headpitch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3)
}

::google::protobuf::uint8* CalibrationDataCMC_CalibrationDataSampleV3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.Pose3D chestPose = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->chestpose_, deterministic, target);
  }

  // repeated .naothmessages.DoubleVector2 edgelsInImage = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edgelsinimage_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->edgelsinimage(static_cast<int>(i)), deterministic, target);
  }

  // repeated .naothmessages.DoubleVector2 edgelsInImageTop = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edgelsinimagetop_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->edgelsinimagetop(static_cast<int>(i)), deterministic, target);
  }

  // optional .naothmessages.DoubleVector2 orientation = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->orientation_, deterministic, target);
  }

  // optional double headYaw = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->headyaw(), target);
  }

  // optional double headPitch = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->headpitch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3)
  return target;
}

size_t CalibrationDataCMC_CalibrationDataSampleV3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .naothmessages.DoubleVector2 edgelsInImage = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->edgelsinimage_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->edgelsinimage(static_cast<int>(i)));
    }
  }

  // repeated .naothmessages.DoubleVector2 edgelsInImageTop = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->edgelsinimagetop_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->edgelsinimagetop(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .naothmessages.Pose3D chestPose = 1;
    if (has_chestpose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chestpose_);
    }

    // optional .naothmessages.DoubleVector2 orientation = 4;
    if (has_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->orientation_);
    }

    // optional double headYaw = 5;
    if (has_headyaw()) {
      total_size += 1 + 8;
    }

    // optional double headPitch = 6;
    if (has_headpitch()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalibrationDataCMC_CalibrationDataSampleV3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3)
  GOOGLE_DCHECK_NE(&from, this);
  const CalibrationDataCMC_CalibrationDataSampleV3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CalibrationDataCMC_CalibrationDataSampleV3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3)
    MergeFrom(*source);
  }
}

void CalibrationDataCMC_CalibrationDataSampleV3::MergeFrom(const CalibrationDataCMC_CalibrationDataSampleV3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  edgelsinimage_.MergeFrom(from.edgelsinimage_);
  edgelsinimagetop_.MergeFrom(from.edgelsinimagetop_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_chestpose()->::naothmessages::Pose3D::MergeFrom(from.chestpose());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_orientation()->::naothmessages::DoubleVector2::MergeFrom(from.orientation());
    }
    if (cached_has_bits & 0x00000004u) {
      headyaw_ = from.headyaw_;
    }
    if (cached_has_bits & 0x00000008u) {
      headpitch_ = from.headpitch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CalibrationDataCMC_CalibrationDataSampleV3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrationDataCMC_CalibrationDataSampleV3::CopyFrom(const CalibrationDataCMC_CalibrationDataSampleV3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrationDataCMC_CalibrationDataSampleV3::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->edgelsinimage())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->edgelsinimagetop())) return false;
  if (has_chestpose()) {
    if (!this->chestpose_->IsInitialized()) return false;
  }
  if (has_orientation()) {
    if (!this->orientation_->IsInitialized()) return false;
  }
  return true;
}

void CalibrationDataCMC_CalibrationDataSampleV3::Swap(CalibrationDataCMC_CalibrationDataSampleV3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalibrationDataCMC_CalibrationDataSampleV3::InternalSwap(CalibrationDataCMC_CalibrationDataSampleV3* other) {
  using std::swap;
  edgelsinimage_.InternalSwap(&other->edgelsinimage_);
  edgelsinimagetop_.InternalSwap(&other->edgelsinimagetop_);
  swap(chestpose_, other->chestpose_);
  swap(orientation_, other->orientation_);
  swap(headyaw_, other->headyaw_);
  swap(headpitch_, other->headpitch_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CalibrationDataCMC_CalibrationDataSampleV3::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CalibrationDataCMC_CalibrationDataSampleV3

// optional .naothmessages.Pose3D chestPose = 1;
bool CalibrationDataCMC_CalibrationDataSampleV3::has_chestpose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CalibrationDataCMC_CalibrationDataSampleV3::set_has_chestpose() {
  _has_bits_[0] |= 0x00000001u;
}
void CalibrationDataCMC_CalibrationDataSampleV3::clear_has_chestpose() {
  _has_bits_[0] &= ~0x00000001u;
}
void CalibrationDataCMC_CalibrationDataSampleV3::clear_chestpose() {
  if (chestpose_ != NULL) chestpose_->::naothmessages::Pose3D::Clear();
  clear_has_chestpose();
}
const ::naothmessages::Pose3D& CalibrationDataCMC_CalibrationDataSampleV3::chestpose() const {
  const ::naothmessages::Pose3D* p = chestpose_;
  // @@protoc_insertion_point(field_get:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3.chestPose)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::Pose3D*>(
      &::naothmessages::_Pose3D_default_instance_);
}
::naothmessages::Pose3D* CalibrationDataCMC_CalibrationDataSampleV3::mutable_chestpose() {
  set_has_chestpose();
  if (chestpose_ == NULL) {
    chestpose_ = new ::naothmessages::Pose3D;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3.chestPose)
  return chestpose_;
}
::naothmessages::Pose3D* CalibrationDataCMC_CalibrationDataSampleV3::release_chestpose() {
  // @@protoc_insertion_point(field_release:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3.chestPose)
  clear_has_chestpose();
  ::naothmessages::Pose3D* temp = chestpose_;
  chestpose_ = NULL;
  return temp;
}
void CalibrationDataCMC_CalibrationDataSampleV3::set_allocated_chestpose(::naothmessages::Pose3D* chestpose) {
  delete chestpose_;
  chestpose_ = chestpose;
  if (chestpose) {
    set_has_chestpose();
  } else {
    clear_has_chestpose();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3.chestPose)
}

// repeated .naothmessages.DoubleVector2 edgelsInImage = 2;
int CalibrationDataCMC_CalibrationDataSampleV3::edgelsinimage_size() const {
  return edgelsinimage_.size();
}
void CalibrationDataCMC_CalibrationDataSampleV3::clear_edgelsinimage() {
  edgelsinimage_.Clear();
}
const ::naothmessages::DoubleVector2& CalibrationDataCMC_CalibrationDataSampleV3::edgelsinimage(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3.edgelsInImage)
  return edgelsinimage_.Get(index);
}
::naothmessages::DoubleVector2* CalibrationDataCMC_CalibrationDataSampleV3::mutable_edgelsinimage(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3.edgelsInImage)
  return edgelsinimage_.Mutable(index);
}
::naothmessages::DoubleVector2* CalibrationDataCMC_CalibrationDataSampleV3::add_edgelsinimage() {
  // @@protoc_insertion_point(field_add:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3.edgelsInImage)
  return edgelsinimage_.Add();
}
::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 >*
CalibrationDataCMC_CalibrationDataSampleV3::mutable_edgelsinimage() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3.edgelsInImage)
  return &edgelsinimage_;
}
const ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 >&
CalibrationDataCMC_CalibrationDataSampleV3::edgelsinimage() const {
  // @@protoc_insertion_point(field_list:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3.edgelsInImage)
  return edgelsinimage_;
}

// repeated .naothmessages.DoubleVector2 edgelsInImageTop = 3;
int CalibrationDataCMC_CalibrationDataSampleV3::edgelsinimagetop_size() const {
  return edgelsinimagetop_.size();
}
void CalibrationDataCMC_CalibrationDataSampleV3::clear_edgelsinimagetop() {
  edgelsinimagetop_.Clear();
}
const ::naothmessages::DoubleVector2& CalibrationDataCMC_CalibrationDataSampleV3::edgelsinimagetop(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3.edgelsInImageTop)
  return edgelsinimagetop_.Get(index);
}
::naothmessages::DoubleVector2* CalibrationDataCMC_CalibrationDataSampleV3::mutable_edgelsinimagetop(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3.edgelsInImageTop)
  return edgelsinimagetop_.Mutable(index);
}
::naothmessages::DoubleVector2* CalibrationDataCMC_CalibrationDataSampleV3::add_edgelsinimagetop() {
  // @@protoc_insertion_point(field_add:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3.edgelsInImageTop)
  return edgelsinimagetop_.Add();
}
::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 >*
CalibrationDataCMC_CalibrationDataSampleV3::mutable_edgelsinimagetop() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3.edgelsInImageTop)
  return &edgelsinimagetop_;
}
const ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 >&
CalibrationDataCMC_CalibrationDataSampleV3::edgelsinimagetop() const {
  // @@protoc_insertion_point(field_list:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3.edgelsInImageTop)
  return edgelsinimagetop_;
}

// optional .naothmessages.DoubleVector2 orientation = 4;
bool CalibrationDataCMC_CalibrationDataSampleV3::has_orientation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CalibrationDataCMC_CalibrationDataSampleV3::set_has_orientation() {
  _has_bits_[0] |= 0x00000002u;
}
void CalibrationDataCMC_CalibrationDataSampleV3::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000002u;
}
void CalibrationDataCMC_CalibrationDataSampleV3::clear_orientation() {
  if (orientation_ != NULL) orientation_->::naothmessages::DoubleVector2::Clear();
  clear_has_orientation();
}
const ::naothmessages::DoubleVector2& CalibrationDataCMC_CalibrationDataSampleV3::orientation() const {
  const ::naothmessages::DoubleVector2* p = orientation_;
  // @@protoc_insertion_point(field_get:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3.orientation)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* CalibrationDataCMC_CalibrationDataSampleV3::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) {
    orientation_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3.orientation)
  return orientation_;
}
::naothmessages::DoubleVector2* CalibrationDataCMC_CalibrationDataSampleV3::release_orientation() {
  // @@protoc_insertion_point(field_release:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3.orientation)
  clear_has_orientation();
  ::naothmessages::DoubleVector2* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
void CalibrationDataCMC_CalibrationDataSampleV3::set_allocated_orientation(::naothmessages::DoubleVector2* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3.orientation)
}

// optional double headYaw = 5;
bool CalibrationDataCMC_CalibrationDataSampleV3::has_headyaw() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CalibrationDataCMC_CalibrationDataSampleV3::set_has_headyaw() {
  _has_bits_[0] |= 0x00000004u;
}
void CalibrationDataCMC_CalibrationDataSampleV3::clear_has_headyaw() {
  _has_bits_[0] &= ~0x00000004u;
}
void CalibrationDataCMC_CalibrationDataSampleV3::clear_headyaw() {
  headyaw_ = 0;
  clear_has_headyaw();
}
double CalibrationDataCMC_CalibrationDataSampleV3::headyaw() const {
  // @@protoc_insertion_point(field_get:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3.headYaw)
  return headyaw_;
}
void CalibrationDataCMC_CalibrationDataSampleV3::set_headyaw(double value) {
  set_has_headyaw();
  headyaw_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3.headYaw)
}

// optional double headPitch = 6;
bool CalibrationDataCMC_CalibrationDataSampleV3::has_headpitch() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CalibrationDataCMC_CalibrationDataSampleV3::set_has_headpitch() {
  _has_bits_[0] |= 0x00000008u;
}
void CalibrationDataCMC_CalibrationDataSampleV3::clear_has_headpitch() {
  _has_bits_[0] &= ~0x00000008u;
}
void CalibrationDataCMC_CalibrationDataSampleV3::clear_headpitch() {
  headpitch_ = 0;
  clear_has_headpitch();
}
double CalibrationDataCMC_CalibrationDataSampleV3::headpitch() const {
  // @@protoc_insertion_point(field_get:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3.headPitch)
  return headpitch_;
}
void CalibrationDataCMC_CalibrationDataSampleV3::set_headpitch(double value) {
  set_has_headpitch();
  headpitch_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CalibrationDataCMC.CalibrationDataSampleV3.headPitch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalibrationDataCMC::kCalibrationDataFieldNumber;
const int CalibrationDataCMC::kNumberOfResudialsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalibrationDataCMC::CalibrationDataCMC()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.CalibrationDataCMC)
}
CalibrationDataCMC::CalibrationDataCMC(const CalibrationDataCMC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      calibrationdata_(from.calibrationdata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  numberofresudials_ = from.numberofresudials_;
  // @@protoc_insertion_point(copy_constructor:naothmessages.CalibrationDataCMC)
}

void CalibrationDataCMC::SharedCtor() {
  _cached_size_ = 0;
  numberofresudials_ = 0u;
}

CalibrationDataCMC::~CalibrationDataCMC() {
  // @@protoc_insertion_point(destructor:naothmessages.CalibrationDataCMC)
  SharedDtor();
}

void CalibrationDataCMC::SharedDtor() {
}

void CalibrationDataCMC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalibrationDataCMC::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CalibrationDataCMC& CalibrationDataCMC::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

CalibrationDataCMC* CalibrationDataCMC::New(::google::protobuf::Arena* arena) const {
  CalibrationDataCMC* n = new CalibrationDataCMC;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CalibrationDataCMC::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.CalibrationDataCMC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  calibrationdata_.Clear();
  numberofresudials_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CalibrationDataCMC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.CalibrationDataCMC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .naothmessages.CalibrationDataCMC.CalibrationDataSampleV3 calibrationData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_calibrationdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 numberOfResudials = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_numberofresudials();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numberofresudials_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.CalibrationDataCMC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.CalibrationDataCMC)
  return false;
#undef DO_
}

void CalibrationDataCMC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.CalibrationDataCMC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .naothmessages.CalibrationDataCMC.CalibrationDataSampleV3 calibrationData = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->calibrationdata_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->calibrationdata(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 numberOfResudials = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->numberofresudials(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.CalibrationDataCMC)
}

::google::protobuf::uint8* CalibrationDataCMC::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.CalibrationDataCMC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .naothmessages.CalibrationDataCMC.CalibrationDataSampleV3 calibrationData = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->calibrationdata_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->calibrationdata(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 numberOfResudials = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->numberofresudials(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.CalibrationDataCMC)
  return target;
}

size_t CalibrationDataCMC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.CalibrationDataCMC)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .naothmessages.CalibrationDataCMC.CalibrationDataSampleV3 calibrationData = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->calibrationdata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->calibrationdata(static_cast<int>(i)));
    }
  }

  // optional uint32 numberOfResudials = 2;
  if (has_numberofresudials()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numberofresudials());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalibrationDataCMC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.CalibrationDataCMC)
  GOOGLE_DCHECK_NE(&from, this);
  const CalibrationDataCMC* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CalibrationDataCMC>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.CalibrationDataCMC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.CalibrationDataCMC)
    MergeFrom(*source);
  }
}

void CalibrationDataCMC::MergeFrom(const CalibrationDataCMC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.CalibrationDataCMC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  calibrationdata_.MergeFrom(from.calibrationdata_);
  if (from.has_numberofresudials()) {
    set_numberofresudials(from.numberofresudials());
  }
}

void CalibrationDataCMC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.CalibrationDataCMC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrationDataCMC::CopyFrom(const CalibrationDataCMC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.CalibrationDataCMC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrationDataCMC::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->calibrationdata())) return false;
  return true;
}

void CalibrationDataCMC::Swap(CalibrationDataCMC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalibrationDataCMC::InternalSwap(CalibrationDataCMC* other) {
  using std::swap;
  calibrationdata_.InternalSwap(&other->calibrationdata_);
  swap(numberofresudials_, other->numberofresudials_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CalibrationDataCMC::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CalibrationDataCMC

// repeated .naothmessages.CalibrationDataCMC.CalibrationDataSampleV3 calibrationData = 1;
int CalibrationDataCMC::calibrationdata_size() const {
  return calibrationdata_.size();
}
void CalibrationDataCMC::clear_calibrationdata() {
  calibrationdata_.Clear();
}
const ::naothmessages::CalibrationDataCMC_CalibrationDataSampleV3& CalibrationDataCMC::calibrationdata(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.CalibrationDataCMC.calibrationData)
  return calibrationdata_.Get(index);
}
::naothmessages::CalibrationDataCMC_CalibrationDataSampleV3* CalibrationDataCMC::mutable_calibrationdata(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.CalibrationDataCMC.calibrationData)
  return calibrationdata_.Mutable(index);
}
::naothmessages::CalibrationDataCMC_CalibrationDataSampleV3* CalibrationDataCMC::add_calibrationdata() {
  // @@protoc_insertion_point(field_add:naothmessages.CalibrationDataCMC.calibrationData)
  return calibrationdata_.Add();
}
::google::protobuf::RepeatedPtrField< ::naothmessages::CalibrationDataCMC_CalibrationDataSampleV3 >*
CalibrationDataCMC::mutable_calibrationdata() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.CalibrationDataCMC.calibrationData)
  return &calibrationdata_;
}
const ::google::protobuf::RepeatedPtrField< ::naothmessages::CalibrationDataCMC_CalibrationDataSampleV3 >&
CalibrationDataCMC::calibrationdata() const {
  // @@protoc_insertion_point(field_list:naothmessages.CalibrationDataCMC.calibrationData)
  return calibrationdata_;
}

// optional uint32 numberOfResudials = 2;
bool CalibrationDataCMC::has_numberofresudials() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CalibrationDataCMC::set_has_numberofresudials() {
  _has_bits_[0] |= 0x00000001u;
}
void CalibrationDataCMC::clear_has_numberofresudials() {
  _has_bits_[0] &= ~0x00000001u;
}
void CalibrationDataCMC::clear_numberofresudials() {
  numberofresudials_ = 0u;
  clear_has_numberofresudials();
}
::google::protobuf::uint32 CalibrationDataCMC::numberofresudials() const {
  // @@protoc_insertion_point(field_get:naothmessages.CalibrationDataCMC.numberOfResudials)
  return numberofresudials_;
}
void CalibrationDataCMC::set_numberofresudials(::google::protobuf::uint32 value) {
  set_has_numberofresudials();
  numberofresudials_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CalibrationDataCMC.numberOfResudials)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WhistlePercept_Whistle::kNameFieldNumber;
const int WhistlePercept_Whistle::kPositionInCaptureFieldNumber;
const int WhistlePercept_Whistle::kResponseValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WhistlePercept_Whistle::WhistlePercept_Whistle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.WhistlePercept.Whistle)
}
WhistlePercept_Whistle::WhistlePercept_Whistle(const WhistlePercept_Whistle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&positionincapture_, &from.positionincapture_,
    static_cast<size_t>(reinterpret_cast<char*>(&responsevalue_) -
    reinterpret_cast<char*>(&positionincapture_)) + sizeof(responsevalue_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.WhistlePercept.Whistle)
}

void WhistlePercept_Whistle::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&positionincapture_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&responsevalue_) -
      reinterpret_cast<char*>(&positionincapture_)) + sizeof(responsevalue_));
}

WhistlePercept_Whistle::~WhistlePercept_Whistle() {
  // @@protoc_insertion_point(destructor:naothmessages.WhistlePercept.Whistle)
  SharedDtor();
}

void WhistlePercept_Whistle::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WhistlePercept_Whistle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhistlePercept_Whistle::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WhistlePercept_Whistle& WhistlePercept_Whistle::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

WhistlePercept_Whistle* WhistlePercept_Whistle::New(::google::protobuf::Arena* arena) const {
  WhistlePercept_Whistle* n = new WhistlePercept_Whistle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WhistlePercept_Whistle::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.WhistlePercept.Whistle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&positionincapture_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&responsevalue_) -
        reinterpret_cast<char*>(&positionincapture_)) + sizeof(responsevalue_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WhistlePercept_Whistle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.WhistlePercept.Whistle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "naothmessages.WhistlePercept.Whistle.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 positionInCapture = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_positionincapture();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &positionincapture_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double responseValue = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_responsevalue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &responsevalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.WhistlePercept.Whistle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.WhistlePercept.Whistle)
  return false;
#undef DO_
}

void WhistlePercept_Whistle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.WhistlePercept.Whistle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "naothmessages.WhistlePercept.Whistle.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int64 positionInCapture = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->positionincapture(), output);
  }

  // required double responseValue = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->responsevalue(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.WhistlePercept.Whistle)
}

::google::protobuf::uint8* WhistlePercept_Whistle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.WhistlePercept.Whistle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "naothmessages.WhistlePercept.Whistle.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int64 positionInCapture = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->positionincapture(), target);
  }

  // required double responseValue = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->responsevalue(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.WhistlePercept.Whistle)
  return target;
}

size_t WhistlePercept_Whistle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:naothmessages.WhistlePercept.Whistle)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_positionincapture()) {
    // required int64 positionInCapture = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->positionincapture());
  }

  if (has_responsevalue()) {
    // required double responseValue = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t WhistlePercept_Whistle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.WhistlePercept.Whistle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required int64 positionInCapture = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->positionincapture());

    // required double responseValue = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhistlePercept_Whistle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.WhistlePercept.Whistle)
  GOOGLE_DCHECK_NE(&from, this);
  const WhistlePercept_Whistle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WhistlePercept_Whistle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.WhistlePercept.Whistle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.WhistlePercept.Whistle)
    MergeFrom(*source);
  }
}

void WhistlePercept_Whistle::MergeFrom(const WhistlePercept_Whistle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.WhistlePercept.Whistle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      positionincapture_ = from.positionincapture_;
    }
    if (cached_has_bits & 0x00000004u) {
      responsevalue_ = from.responsevalue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WhistlePercept_Whistle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.WhistlePercept.Whistle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhistlePercept_Whistle::CopyFrom(const WhistlePercept_Whistle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.WhistlePercept.Whistle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhistlePercept_Whistle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void WhistlePercept_Whistle::Swap(WhistlePercept_Whistle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WhistlePercept_Whistle::InternalSwap(WhistlePercept_Whistle* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(positionincapture_, other->positionincapture_);
  swap(responsevalue_, other->responsevalue_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WhistlePercept_Whistle::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WhistlePercept_Whistle

// required string name = 1;
bool WhistlePercept_Whistle::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WhistlePercept_Whistle::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void WhistlePercept_Whistle::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void WhistlePercept_Whistle::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& WhistlePercept_Whistle::name() const {
  // @@protoc_insertion_point(field_get:naothmessages.WhistlePercept.Whistle.name)
  return name_.GetNoArena();
}
void WhistlePercept_Whistle::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naothmessages.WhistlePercept.Whistle.name)
}
#if LANG_CXX11
void WhistlePercept_Whistle::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:naothmessages.WhistlePercept.Whistle.name)
}
#endif
void WhistlePercept_Whistle::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naothmessages.WhistlePercept.Whistle.name)
}
void WhistlePercept_Whistle::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naothmessages.WhistlePercept.Whistle.name)
}
::std::string* WhistlePercept_Whistle::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:naothmessages.WhistlePercept.Whistle.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WhistlePercept_Whistle::release_name() {
  // @@protoc_insertion_point(field_release:naothmessages.WhistlePercept.Whistle.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WhistlePercept_Whistle::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:naothmessages.WhistlePercept.Whistle.name)
}

// required int64 positionInCapture = 2;
bool WhistlePercept_Whistle::has_positionincapture() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WhistlePercept_Whistle::set_has_positionincapture() {
  _has_bits_[0] |= 0x00000002u;
}
void WhistlePercept_Whistle::clear_has_positionincapture() {
  _has_bits_[0] &= ~0x00000002u;
}
void WhistlePercept_Whistle::clear_positionincapture() {
  positionincapture_ = GOOGLE_LONGLONG(0);
  clear_has_positionincapture();
}
::google::protobuf::int64 WhistlePercept_Whistle::positionincapture() const {
  // @@protoc_insertion_point(field_get:naothmessages.WhistlePercept.Whistle.positionInCapture)
  return positionincapture_;
}
void WhistlePercept_Whistle::set_positionincapture(::google::protobuf::int64 value) {
  set_has_positionincapture();
  positionincapture_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.WhistlePercept.Whistle.positionInCapture)
}

// required double responseValue = 3;
bool WhistlePercept_Whistle::has_responsevalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WhistlePercept_Whistle::set_has_responsevalue() {
  _has_bits_[0] |= 0x00000004u;
}
void WhistlePercept_Whistle::clear_has_responsevalue() {
  _has_bits_[0] &= ~0x00000004u;
}
void WhistlePercept_Whistle::clear_responsevalue() {
  responsevalue_ = 0;
  clear_has_responsevalue();
}
double WhistlePercept_Whistle::responsevalue() const {
  // @@protoc_insertion_point(field_get:naothmessages.WhistlePercept.Whistle.responseValue)
  return responsevalue_;
}
void WhistlePercept_Whistle::set_responsevalue(double value) {
  set_has_responsevalue();
  responsevalue_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.WhistlePercept.Whistle.responseValue)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WhistlePercept::kFrameWhenWhistleDetectedFieldNumber;
const int WhistlePercept::kCaptureFileFieldNumber;
const int WhistlePercept::kRecognizedWhistlesFieldNumber;
const int WhistlePercept::kWhistleDetectedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WhistlePercept::WhistlePercept()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.WhistlePercept)
}
WhistlePercept::WhistlePercept(const WhistlePercept& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      recognizedwhistles_(from.recognizedwhistles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  capturefile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_capturefile()) {
    capturefile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.capturefile_);
  }
  ::memcpy(&framewhenwhistledetected_, &from.framewhenwhistledetected_,
    static_cast<size_t>(reinterpret_cast<char*>(&whistledetected_) -
    reinterpret_cast<char*>(&framewhenwhistledetected_)) + sizeof(whistledetected_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.WhistlePercept)
}

void WhistlePercept::SharedCtor() {
  _cached_size_ = 0;
  capturefile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&framewhenwhistledetected_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&whistledetected_) -
      reinterpret_cast<char*>(&framewhenwhistledetected_)) + sizeof(whistledetected_));
}

WhistlePercept::~WhistlePercept() {
  // @@protoc_insertion_point(destructor:naothmessages.WhistlePercept)
  SharedDtor();
}

void WhistlePercept::SharedDtor() {
  capturefile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WhistlePercept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhistlePercept::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WhistlePercept& WhistlePercept::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

WhistlePercept* WhistlePercept::New(::google::protobuf::Arena* arena) const {
  WhistlePercept* n = new WhistlePercept;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WhistlePercept::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.WhistlePercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recognizedwhistles_.Clear();
  if (has_capturefile()) {
    GOOGLE_DCHECK(!capturefile_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*capturefile_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&framewhenwhistledetected_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&whistledetected_) -
        reinterpret_cast<char*>(&framewhenwhistledetected_)) + sizeof(whistledetected_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WhistlePercept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.WhistlePercept)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 frameWhenWhistleDetected = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_framewhenwhistledetected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framewhenwhistledetected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string captureFile = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_capturefile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->capturefile().data(), static_cast<int>(this->capturefile().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "naothmessages.WhistlePercept.captureFile");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .naothmessages.WhistlePercept.Whistle recognizedWhistles = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recognizedwhistles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool whistleDetected = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_whistledetected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &whistledetected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.WhistlePercept)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.WhistlePercept)
  return false;
#undef DO_
}

void WhistlePercept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.WhistlePercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 frameWhenWhistleDetected = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->framewhenwhistledetected(), output);
  }

  // optional string captureFile = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->capturefile().data(), static_cast<int>(this->capturefile().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "naothmessages.WhistlePercept.captureFile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->capturefile(), output);
  }

  // repeated .naothmessages.WhistlePercept.Whistle recognizedWhistles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->recognizedwhistles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->recognizedwhistles(static_cast<int>(i)), output);
  }

  // optional bool whistleDetected = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->whistledetected(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.WhistlePercept)
}

::google::protobuf::uint8* WhistlePercept::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.WhistlePercept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 frameWhenWhistleDetected = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->framewhenwhistledetected(), target);
  }

  // optional string captureFile = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->capturefile().data(), static_cast<int>(this->capturefile().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "naothmessages.WhistlePercept.captureFile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->capturefile(), target);
  }

  // repeated .naothmessages.WhistlePercept.Whistle recognizedWhistles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->recognizedwhistles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->recognizedwhistles(static_cast<int>(i)), deterministic, target);
  }

  // optional bool whistleDetected = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->whistledetected(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.WhistlePercept)
  return target;
}

size_t WhistlePercept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.WhistlePercept)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .naothmessages.WhistlePercept.Whistle recognizedWhistles = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->recognizedwhistles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recognizedwhistles(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string captureFile = 2;
    if (has_capturefile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->capturefile());
    }

    // optional uint32 frameWhenWhistleDetected = 1;
    if (has_framewhenwhistledetected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framewhenwhistledetected());
    }

    // optional bool whistleDetected = 4;
    if (has_whistledetected()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhistlePercept::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.WhistlePercept)
  GOOGLE_DCHECK_NE(&from, this);
  const WhistlePercept* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WhistlePercept>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.WhistlePercept)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.WhistlePercept)
    MergeFrom(*source);
  }
}

void WhistlePercept::MergeFrom(const WhistlePercept& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.WhistlePercept)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  recognizedwhistles_.MergeFrom(from.recognizedwhistles_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_capturefile();
      capturefile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.capturefile_);
    }
    if (cached_has_bits & 0x00000002u) {
      framewhenwhistledetected_ = from.framewhenwhistledetected_;
    }
    if (cached_has_bits & 0x00000004u) {
      whistledetected_ = from.whistledetected_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WhistlePercept::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.WhistlePercept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhistlePercept::CopyFrom(const WhistlePercept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.WhistlePercept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhistlePercept::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->recognizedwhistles())) return false;
  return true;
}

void WhistlePercept::Swap(WhistlePercept* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WhistlePercept::InternalSwap(WhistlePercept* other) {
  using std::swap;
  recognizedwhistles_.InternalSwap(&other->recognizedwhistles_);
  capturefile_.Swap(&other->capturefile_);
  swap(framewhenwhistledetected_, other->framewhenwhistledetected_);
  swap(whistledetected_, other->whistledetected_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WhistlePercept::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WhistlePercept

// optional uint32 frameWhenWhistleDetected = 1;
bool WhistlePercept::has_framewhenwhistledetected() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WhistlePercept::set_has_framewhenwhistledetected() {
  _has_bits_[0] |= 0x00000002u;
}
void WhistlePercept::clear_has_framewhenwhistledetected() {
  _has_bits_[0] &= ~0x00000002u;
}
void WhistlePercept::clear_framewhenwhistledetected() {
  framewhenwhistledetected_ = 0u;
  clear_has_framewhenwhistledetected();
}
::google::protobuf::uint32 WhistlePercept::framewhenwhistledetected() const {
  // @@protoc_insertion_point(field_get:naothmessages.WhistlePercept.frameWhenWhistleDetected)
  return framewhenwhistledetected_;
}
void WhistlePercept::set_framewhenwhistledetected(::google::protobuf::uint32 value) {
  set_has_framewhenwhistledetected();
  framewhenwhistledetected_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.WhistlePercept.frameWhenWhistleDetected)
}

// optional string captureFile = 2;
bool WhistlePercept::has_capturefile() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WhistlePercept::set_has_capturefile() {
  _has_bits_[0] |= 0x00000001u;
}
void WhistlePercept::clear_has_capturefile() {
  _has_bits_[0] &= ~0x00000001u;
}
void WhistlePercept::clear_capturefile() {
  capturefile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_capturefile();
}
const ::std::string& WhistlePercept::capturefile() const {
  // @@protoc_insertion_point(field_get:naothmessages.WhistlePercept.captureFile)
  return capturefile_.GetNoArena();
}
void WhistlePercept::set_capturefile(const ::std::string& value) {
  set_has_capturefile();
  capturefile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naothmessages.WhistlePercept.captureFile)
}
#if LANG_CXX11
void WhistlePercept::set_capturefile(::std::string&& value) {
  set_has_capturefile();
  capturefile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:naothmessages.WhistlePercept.captureFile)
}
#endif
void WhistlePercept::set_capturefile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_capturefile();
  capturefile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naothmessages.WhistlePercept.captureFile)
}
void WhistlePercept::set_capturefile(const char* value, size_t size) {
  set_has_capturefile();
  capturefile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naothmessages.WhistlePercept.captureFile)
}
::std::string* WhistlePercept::mutable_capturefile() {
  set_has_capturefile();
  // @@protoc_insertion_point(field_mutable:naothmessages.WhistlePercept.captureFile)
  return capturefile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WhistlePercept::release_capturefile() {
  // @@protoc_insertion_point(field_release:naothmessages.WhistlePercept.captureFile)
  clear_has_capturefile();
  return capturefile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WhistlePercept::set_allocated_capturefile(::std::string* capturefile) {
  if (capturefile != NULL) {
    set_has_capturefile();
  } else {
    clear_has_capturefile();
  }
  capturefile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), capturefile);
  // @@protoc_insertion_point(field_set_allocated:naothmessages.WhistlePercept.captureFile)
}

// repeated .naothmessages.WhistlePercept.Whistle recognizedWhistles = 3;
int WhistlePercept::recognizedwhistles_size() const {
  return recognizedwhistles_.size();
}
void WhistlePercept::clear_recognizedwhistles() {
  recognizedwhistles_.Clear();
}
const ::naothmessages::WhistlePercept_Whistle& WhistlePercept::recognizedwhistles(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.WhistlePercept.recognizedWhistles)
  return recognizedwhistles_.Get(index);
}
::naothmessages::WhistlePercept_Whistle* WhistlePercept::mutable_recognizedwhistles(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.WhistlePercept.recognizedWhistles)
  return recognizedwhistles_.Mutable(index);
}
::naothmessages::WhistlePercept_Whistle* WhistlePercept::add_recognizedwhistles() {
  // @@protoc_insertion_point(field_add:naothmessages.WhistlePercept.recognizedWhistles)
  return recognizedwhistles_.Add();
}
::google::protobuf::RepeatedPtrField< ::naothmessages::WhistlePercept_Whistle >*
WhistlePercept::mutable_recognizedwhistles() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.WhistlePercept.recognizedWhistles)
  return &recognizedwhistles_;
}
const ::google::protobuf::RepeatedPtrField< ::naothmessages::WhistlePercept_Whistle >&
WhistlePercept::recognizedwhistles() const {
  // @@protoc_insertion_point(field_list:naothmessages.WhistlePercept.recognizedWhistles)
  return recognizedwhistles_;
}

// optional bool whistleDetected = 4;
bool WhistlePercept::has_whistledetected() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WhistlePercept::set_has_whistledetected() {
  _has_bits_[0] |= 0x00000004u;
}
void WhistlePercept::clear_has_whistledetected() {
  _has_bits_[0] &= ~0x00000004u;
}
void WhistlePercept::clear_whistledetected() {
  whistledetected_ = false;
  clear_has_whistledetected();
}
bool WhistlePercept::whistledetected() const {
  // @@protoc_insertion_point(field_get:naothmessages.WhistlePercept.whistleDetected)
  return whistledetected_;
}
void WhistlePercept::set_whistledetected(bool value) {
  set_has_whistledetected();
  whistledetected_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.WhistlePercept.whistleDetected)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugModify_ModifyValue::kNameFieldNumber;
const int DebugModify_ModifyValue::kModifyFieldNumber;
const int DebugModify_ModifyValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugModify_ModifyValue::DebugModify_ModifyValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.DebugModify.ModifyValue)
}
DebugModify_ModifyValue::DebugModify_ModifyValue(const DebugModify_ModifyValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&modify_) -
    reinterpret_cast<char*>(&value_)) + sizeof(modify_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.DebugModify.ModifyValue)
}

void DebugModify_ModifyValue::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&modify_) -
      reinterpret_cast<char*>(&value_)) + sizeof(modify_));
}

DebugModify_ModifyValue::~DebugModify_ModifyValue() {
  // @@protoc_insertion_point(destructor:naothmessages.DebugModify.ModifyValue)
  SharedDtor();
}

void DebugModify_ModifyValue::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DebugModify_ModifyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugModify_ModifyValue::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugModify_ModifyValue& DebugModify_ModifyValue::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

DebugModify_ModifyValue* DebugModify_ModifyValue::New(::google::protobuf::Arena* arena) const {
  DebugModify_ModifyValue* n = new DebugModify_ModifyValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugModify_ModifyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.DebugModify.ModifyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&modify_) -
        reinterpret_cast<char*>(&value_)) + sizeof(modify_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DebugModify_ModifyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.DebugModify.ModifyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "naothmessages.DebugModify.ModifyValue.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool modify = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_modify();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &modify_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.DebugModify.ModifyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.DebugModify.ModifyValue)
  return false;
#undef DO_
}

void DebugModify_ModifyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.DebugModify.ModifyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "naothmessages.DebugModify.ModifyValue.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bool modify = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->modify(), output);
  }

  // optional double value = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.DebugModify.ModifyValue)
}

::google::protobuf::uint8* DebugModify_ModifyValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.DebugModify.ModifyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "naothmessages.DebugModify.ModifyValue.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bool modify = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->modify(), target);
  }

  // optional double value = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.DebugModify.ModifyValue)
  return target;
}

size_t DebugModify_ModifyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.DebugModify.ModifyValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional double value = 3;
    if (has_value()) {
      total_size += 1 + 8;
    }

    // optional bool modify = 2;
    if (has_modify()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugModify_ModifyValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.DebugModify.ModifyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugModify_ModifyValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugModify_ModifyValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.DebugModify.ModifyValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.DebugModify.ModifyValue)
    MergeFrom(*source);
  }
}

void DebugModify_ModifyValue::MergeFrom(const DebugModify_ModifyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.DebugModify.ModifyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      modify_ = from.modify_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DebugModify_ModifyValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.DebugModify.ModifyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugModify_ModifyValue::CopyFrom(const DebugModify_ModifyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.DebugModify.ModifyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugModify_ModifyValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DebugModify_ModifyValue::Swap(DebugModify_ModifyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugModify_ModifyValue::InternalSwap(DebugModify_ModifyValue* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(value_, other->value_);
  swap(modify_, other->modify_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugModify_ModifyValue::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DebugModify_ModifyValue

// required string name = 1;
bool DebugModify_ModifyValue::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DebugModify_ModifyValue::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void DebugModify_ModifyValue::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void DebugModify_ModifyValue::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& DebugModify_ModifyValue::name() const {
  // @@protoc_insertion_point(field_get:naothmessages.DebugModify.ModifyValue.name)
  return name_.GetNoArena();
}
void DebugModify_ModifyValue::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naothmessages.DebugModify.ModifyValue.name)
}
#if LANG_CXX11
void DebugModify_ModifyValue::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:naothmessages.DebugModify.ModifyValue.name)
}
#endif
void DebugModify_ModifyValue::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naothmessages.DebugModify.ModifyValue.name)
}
void DebugModify_ModifyValue::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naothmessages.DebugModify.ModifyValue.name)
}
::std::string* DebugModify_ModifyValue::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:naothmessages.DebugModify.ModifyValue.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DebugModify_ModifyValue::release_name() {
  // @@protoc_insertion_point(field_release:naothmessages.DebugModify.ModifyValue.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DebugModify_ModifyValue::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:naothmessages.DebugModify.ModifyValue.name)
}

// optional bool modify = 2;
bool DebugModify_ModifyValue::has_modify() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DebugModify_ModifyValue::set_has_modify() {
  _has_bits_[0] |= 0x00000004u;
}
void DebugModify_ModifyValue::clear_has_modify() {
  _has_bits_[0] &= ~0x00000004u;
}
void DebugModify_ModifyValue::clear_modify() {
  modify_ = false;
  clear_has_modify();
}
bool DebugModify_ModifyValue::modify() const {
  // @@protoc_insertion_point(field_get:naothmessages.DebugModify.ModifyValue.modify)
  return modify_;
}
void DebugModify_ModifyValue::set_modify(bool value) {
  set_has_modify();
  modify_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.DebugModify.ModifyValue.modify)
}

// optional double value = 3;
bool DebugModify_ModifyValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DebugModify_ModifyValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void DebugModify_ModifyValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void DebugModify_ModifyValue::clear_value() {
  value_ = 0;
  clear_has_value();
}
double DebugModify_ModifyValue::value() const {
  // @@protoc_insertion_point(field_get:naothmessages.DebugModify.ModifyValue.value)
  return value_;
}
void DebugModify_ModifyValue::set_value(double value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.DebugModify.ModifyValue.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugModify::kValueMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugModify::DebugModify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.DebugModify)
}
DebugModify::DebugModify(const DebugModify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      valuemap_(from.valuemap_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:naothmessages.DebugModify)
}

void DebugModify::SharedCtor() {
  _cached_size_ = 0;
}

DebugModify::~DebugModify() {
  // @@protoc_insertion_point(destructor:naothmessages.DebugModify)
  SharedDtor();
}

void DebugModify::SharedDtor() {
}

void DebugModify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugModify::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugModify& DebugModify::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

DebugModify* DebugModify::New(::google::protobuf::Arena* arena) const {
  DebugModify* n = new DebugModify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugModify::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.DebugModify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  valuemap_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DebugModify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.DebugModify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .naothmessages.DebugModify.ModifyValue valueMap = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_valuemap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.DebugModify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.DebugModify)
  return false;
#undef DO_
}

void DebugModify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.DebugModify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .naothmessages.DebugModify.ModifyValue valueMap = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->valuemap_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->valuemap(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.DebugModify)
}

::google::protobuf::uint8* DebugModify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.DebugModify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .naothmessages.DebugModify.ModifyValue valueMap = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->valuemap_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->valuemap(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.DebugModify)
  return target;
}

size_t DebugModify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.DebugModify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .naothmessages.DebugModify.ModifyValue valueMap = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->valuemap_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->valuemap(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugModify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.DebugModify)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugModify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugModify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.DebugModify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.DebugModify)
    MergeFrom(*source);
  }
}

void DebugModify::MergeFrom(const DebugModify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.DebugModify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  valuemap_.MergeFrom(from.valuemap_);
}

void DebugModify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.DebugModify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugModify::CopyFrom(const DebugModify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.DebugModify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugModify::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->valuemap())) return false;
  return true;
}

void DebugModify::Swap(DebugModify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugModify::InternalSwap(DebugModify* other) {
  using std::swap;
  valuemap_.InternalSwap(&other->valuemap_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugModify::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DebugModify

// repeated .naothmessages.DebugModify.ModifyValue valueMap = 1;
int DebugModify::valuemap_size() const {
  return valuemap_.size();
}
void DebugModify::clear_valuemap() {
  valuemap_.Clear();
}
const ::naothmessages::DebugModify_ModifyValue& DebugModify::valuemap(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.DebugModify.valueMap)
  return valuemap_.Get(index);
}
::naothmessages::DebugModify_ModifyValue* DebugModify::mutable_valuemap(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.DebugModify.valueMap)
  return valuemap_.Mutable(index);
}
::naothmessages::DebugModify_ModifyValue* DebugModify::add_valuemap() {
  // @@protoc_insertion_point(field_add:naothmessages.DebugModify.valueMap)
  return valuemap_.Add();
}
::google::protobuf::RepeatedPtrField< ::naothmessages::DebugModify_ModifyValue >*
DebugModify::mutable_valuemap() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.DebugModify.valueMap)
  return &valuemap_;
}
const ::google::protobuf::RepeatedPtrField< ::naothmessages::DebugModify_ModifyValue >&
DebugModify::valuemap() const {
  // @@protoc_insertion_point(field_list:naothmessages.DebugModify.valueMap)
  return valuemap_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StepBuffer::kSupportFootFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StepBuffer::StepBuffer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.StepBuffer)
}
StepBuffer::StepBuffer(const StepBuffer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_support_foot()) {
    support_foot_ = new ::naothmessages::Pose3D(*from.support_foot_);
  } else {
    support_foot_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:naothmessages.StepBuffer)
}

void StepBuffer::SharedCtor() {
  _cached_size_ = 0;
  support_foot_ = NULL;
}

StepBuffer::~StepBuffer() {
  // @@protoc_insertion_point(destructor:naothmessages.StepBuffer)
  SharedDtor();
}

void StepBuffer::SharedDtor() {
  if (this != internal_default_instance()) delete support_foot_;
}

void StepBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StepBuffer::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StepBuffer& StepBuffer::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

StepBuffer* StepBuffer::New(::google::protobuf::Arena* arena) const {
  StepBuffer* n = new StepBuffer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StepBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.StepBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_support_foot()) {
    GOOGLE_DCHECK(support_foot_ != NULL);
    support_foot_->::naothmessages::Pose3D::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StepBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.StepBuffer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .naothmessages.Pose3D support_foot = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_support_foot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.StepBuffer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.StepBuffer)
  return false;
#undef DO_
}

void StepBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.StepBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.Pose3D support_foot = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->support_foot_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.StepBuffer)
}

::google::protobuf::uint8* StepBuffer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.StepBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.Pose3D support_foot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->support_foot_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.StepBuffer)
  return target;
}

size_t StepBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.StepBuffer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .naothmessages.Pose3D support_foot = 1;
  if (has_support_foot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->support_foot_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StepBuffer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.StepBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  const StepBuffer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StepBuffer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.StepBuffer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.StepBuffer)
    MergeFrom(*source);
  }
}

void StepBuffer::MergeFrom(const StepBuffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.StepBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_support_foot()) {
    mutable_support_foot()->::naothmessages::Pose3D::MergeFrom(from.support_foot());
  }
}

void StepBuffer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.StepBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepBuffer::CopyFrom(const StepBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.StepBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepBuffer::IsInitialized() const {
  if (has_support_foot()) {
    if (!this->support_foot_->IsInitialized()) return false;
  }
  return true;
}

void StepBuffer::Swap(StepBuffer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StepBuffer::InternalSwap(StepBuffer* other) {
  using std::swap;
  swap(support_foot_, other->support_foot_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StepBuffer::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StepBuffer

// optional .naothmessages.Pose3D support_foot = 1;
bool StepBuffer::has_support_foot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StepBuffer::set_has_support_foot() {
  _has_bits_[0] |= 0x00000001u;
}
void StepBuffer::clear_has_support_foot() {
  _has_bits_[0] &= ~0x00000001u;
}
void StepBuffer::clear_support_foot() {
  if (support_foot_ != NULL) support_foot_->::naothmessages::Pose3D::Clear();
  clear_has_support_foot();
}
const ::naothmessages::Pose3D& StepBuffer::support_foot() const {
  const ::naothmessages::Pose3D* p = support_foot_;
  // @@protoc_insertion_point(field_get:naothmessages.StepBuffer.support_foot)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::Pose3D*>(
      &::naothmessages::_Pose3D_default_instance_);
}
::naothmessages::Pose3D* StepBuffer::mutable_support_foot() {
  set_has_support_foot();
  if (support_foot_ == NULL) {
    support_foot_ = new ::naothmessages::Pose3D;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.StepBuffer.support_foot)
  return support_foot_;
}
::naothmessages::Pose3D* StepBuffer::release_support_foot() {
  // @@protoc_insertion_point(field_release:naothmessages.StepBuffer.support_foot)
  clear_has_support_foot();
  ::naothmessages::Pose3D* temp = support_foot_;
  support_foot_ = NULL;
  return temp;
}
void StepBuffer::set_allocated_support_foot(::naothmessages::Pose3D* support_foot) {
  delete support_foot_;
  support_foot_ = support_foot;
  if (support_foot) {
    set_has_support_foot();
  } else {
    clear_has_support_foot();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.StepBuffer.support_foot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int bodyAwareness::kIsLiftedFieldNumber;
const int bodyAwareness::kCalculatedCoMFieldNumber;
const int bodyAwareness::kCurrentCoMErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

bodyAwareness::bodyAwareness()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Representations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.bodyAwareness)
}
bodyAwareness::bodyAwareness(const bodyAwareness& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_calculatedcom()) {
    calculatedcom_ = new ::naothmessages::DoubleVector3(*from.calculatedcom_);
  } else {
    calculatedcom_ = NULL;
  }
  if (from.has_currentcomerror()) {
    currentcomerror_ = new ::naothmessages::DoubleVector3(*from.currentcomerror_);
  } else {
    currentcomerror_ = NULL;
  }
  islifted_ = from.islifted_;
  // @@protoc_insertion_point(copy_constructor:naothmessages.bodyAwareness)
}

void bodyAwareness::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&calculatedcom_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&islifted_) -
      reinterpret_cast<char*>(&calculatedcom_)) + sizeof(islifted_));
}

bodyAwareness::~bodyAwareness() {
  // @@protoc_insertion_point(destructor:naothmessages.bodyAwareness)
  SharedDtor();
}

void bodyAwareness::SharedDtor() {
  if (this != internal_default_instance()) delete calculatedcom_;
  if (this != internal_default_instance()) delete currentcomerror_;
}

void bodyAwareness::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bodyAwareness::descriptor() {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const bodyAwareness& bodyAwareness::default_instance() {
  protobuf_Representations_2eproto::InitDefaults();
  return *internal_default_instance();
}

bodyAwareness* bodyAwareness::New(::google::protobuf::Arena* arena) const {
  bodyAwareness* n = new bodyAwareness;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void bodyAwareness::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.bodyAwareness)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(calculatedcom_ != NULL);
      calculatedcom_->::naothmessages::DoubleVector3::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(currentcomerror_ != NULL);
      currentcomerror_->::naothmessages::DoubleVector3::Clear();
    }
  }
  islifted_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool bodyAwareness::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.bodyAwareness)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isLifted = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_islifted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islifted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector3 calculatedCoM = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_calculatedcom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector3 currentCoMError = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_currentcomerror()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.bodyAwareness)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.bodyAwareness)
  return false;
#undef DO_
}

void bodyAwareness::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.bodyAwareness)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool isLifted = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->islifted(), output);
  }

  // optional .naothmessages.DoubleVector3 calculatedCoM = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->calculatedcom_, output);
  }

  // optional .naothmessages.DoubleVector3 currentCoMError = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->currentcomerror_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.bodyAwareness)
}

::google::protobuf::uint8* bodyAwareness::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.bodyAwareness)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool isLifted = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->islifted(), target);
  }

  // optional .naothmessages.DoubleVector3 calculatedCoM = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->calculatedcom_, deterministic, target);
  }

  // optional .naothmessages.DoubleVector3 currentCoMError = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->currentcomerror_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.bodyAwareness)
  return target;
}

size_t bodyAwareness::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.bodyAwareness)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .naothmessages.DoubleVector3 calculatedCoM = 2;
    if (has_calculatedcom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->calculatedcom_);
    }

    // optional .naothmessages.DoubleVector3 currentCoMError = 3;
    if (has_currentcomerror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->currentcomerror_);
    }

    // optional bool isLifted = 1;
    if (has_islifted()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bodyAwareness::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.bodyAwareness)
  GOOGLE_DCHECK_NE(&from, this);
  const bodyAwareness* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const bodyAwareness>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.bodyAwareness)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.bodyAwareness)
    MergeFrom(*source);
  }
}

void bodyAwareness::MergeFrom(const bodyAwareness& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.bodyAwareness)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_calculatedcom()->::naothmessages::DoubleVector3::MergeFrom(from.calculatedcom());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_currentcomerror()->::naothmessages::DoubleVector3::MergeFrom(from.currentcomerror());
    }
    if (cached_has_bits & 0x00000004u) {
      islifted_ = from.islifted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void bodyAwareness::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.bodyAwareness)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bodyAwareness::CopyFrom(const bodyAwareness& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.bodyAwareness)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bodyAwareness::IsInitialized() const {
  if (has_calculatedcom()) {
    if (!this->calculatedcom_->IsInitialized()) return false;
  }
  if (has_currentcomerror()) {
    if (!this->currentcomerror_->IsInitialized()) return false;
  }
  return true;
}

void bodyAwareness::Swap(bodyAwareness* other) {
  if (other == this) return;
  InternalSwap(other);
}
void bodyAwareness::InternalSwap(bodyAwareness* other) {
  using std::swap;
  swap(calculatedcom_, other->calculatedcom_);
  swap(currentcomerror_, other->currentcomerror_);
  swap(islifted_, other->islifted_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata bodyAwareness::GetMetadata() const {
  protobuf_Representations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Representations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// bodyAwareness

// optional bool isLifted = 1;
bool bodyAwareness::has_islifted() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void bodyAwareness::set_has_islifted() {
  _has_bits_[0] |= 0x00000004u;
}
void bodyAwareness::clear_has_islifted() {
  _has_bits_[0] &= ~0x00000004u;
}
void bodyAwareness::clear_islifted() {
  islifted_ = false;
  clear_has_islifted();
}
bool bodyAwareness::islifted() const {
  // @@protoc_insertion_point(field_get:naothmessages.bodyAwareness.isLifted)
  return islifted_;
}
void bodyAwareness::set_islifted(bool value) {
  set_has_islifted();
  islifted_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.bodyAwareness.isLifted)
}

// optional .naothmessages.DoubleVector3 calculatedCoM = 2;
bool bodyAwareness::has_calculatedcom() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void bodyAwareness::set_has_calculatedcom() {
  _has_bits_[0] |= 0x00000001u;
}
void bodyAwareness::clear_has_calculatedcom() {
  _has_bits_[0] &= ~0x00000001u;
}
void bodyAwareness::clear_calculatedcom() {
  if (calculatedcom_ != NULL) calculatedcom_->::naothmessages::DoubleVector3::Clear();
  clear_has_calculatedcom();
}
const ::naothmessages::DoubleVector3& bodyAwareness::calculatedcom() const {
  const ::naothmessages::DoubleVector3* p = calculatedcom_;
  // @@protoc_insertion_point(field_get:naothmessages.bodyAwareness.calculatedCoM)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
::naothmessages::DoubleVector3* bodyAwareness::mutable_calculatedcom() {
  set_has_calculatedcom();
  if (calculatedcom_ == NULL) {
    calculatedcom_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.bodyAwareness.calculatedCoM)
  return calculatedcom_;
}
::naothmessages::DoubleVector3* bodyAwareness::release_calculatedcom() {
  // @@protoc_insertion_point(field_release:naothmessages.bodyAwareness.calculatedCoM)
  clear_has_calculatedcom();
  ::naothmessages::DoubleVector3* temp = calculatedcom_;
  calculatedcom_ = NULL;
  return temp;
}
void bodyAwareness::set_allocated_calculatedcom(::naothmessages::DoubleVector3* calculatedcom) {
  delete calculatedcom_;
  calculatedcom_ = calculatedcom;
  if (calculatedcom) {
    set_has_calculatedcom();
  } else {
    clear_has_calculatedcom();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.bodyAwareness.calculatedCoM)
}

// optional .naothmessages.DoubleVector3 currentCoMError = 3;
bool bodyAwareness::has_currentcomerror() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void bodyAwareness::set_has_currentcomerror() {
  _has_bits_[0] |= 0x00000002u;
}
void bodyAwareness::clear_has_currentcomerror() {
  _has_bits_[0] &= ~0x00000002u;
}
void bodyAwareness::clear_currentcomerror() {
  if (currentcomerror_ != NULL) currentcomerror_->::naothmessages::DoubleVector3::Clear();
  clear_has_currentcomerror();
}
const ::naothmessages::DoubleVector3& bodyAwareness::currentcomerror() const {
  const ::naothmessages::DoubleVector3* p = currentcomerror_;
  // @@protoc_insertion_point(field_get:naothmessages.bodyAwareness.currentCoMError)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
::naothmessages::DoubleVector3* bodyAwareness::mutable_currentcomerror() {
  set_has_currentcomerror();
  if (currentcomerror_ == NULL) {
    currentcomerror_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.bodyAwareness.currentCoMError)
  return currentcomerror_;
}
::naothmessages::DoubleVector3* bodyAwareness::release_currentcomerror() {
  // @@protoc_insertion_point(field_release:naothmessages.bodyAwareness.currentCoMError)
  clear_has_currentcomerror();
  ::naothmessages::DoubleVector3* temp = currentcomerror_;
  currentcomerror_ = NULL;
  return temp;
}
void bodyAwareness::set_allocated_currentcomerror(::naothmessages::DoubleVector3* currentcomerror) {
  delete currentcomerror_;
  currentcomerror_ = currentcomerror;
  if (currentcomerror) {
    set_has_currentcomerror();
  } else {
    clear_has_currentcomerror();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.bodyAwareness.currentCoMError)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace naothmessages

// @@protoc_insertion_point(global_scope)
