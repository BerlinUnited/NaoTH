package naothmessages;
option java_package= "de.naoth.rc.messages";

import "CommonTypes.proto";
import "Framework-Representations.proto";

// Representations //

message CameraMatrix {
  required Pose3D pose = 1;
  optional CameraID cameraID = 2 [default=bottom];
  optional bool valid = 3;
  optional uint32 timestamp = 4;
}

message BallPercept {
  optional bool ballWasSeen = 1;
  optional DoubleVector2 centerInImage = 2;
  optional double radiusInImage = 3;
  optional Color ballColor = 4;
  optional DoubleVector2 bearingBasedOffsetOnField = 5;
  optional FrameInfo frameInfoWhenBallWasSeen = 6;
}

message MultiBallPercept {
  message BallPercept {
    optional DoubleVector2 centerInImage = 1;
    optional double radiusInImage = 2;
    optional DoubleVector2 positionOnField = 3;
    optional CameraID cameraId = 4;
  }

  optional FrameInfo frameInfoWhenBallWasSeen = 1;
  repeated BallPercept percepts = 2;
}

message GoalPercept {
  message GoalPost {
    enum PostType
    {
      rightPost = 0;
      leftPost = 1;
      unknownPost = 2;
    };

    optional IntVector2 basePoint = 1;
    optional DoubleVector2 position = 2;
    optional Color color = 3;
    optional PostType type = 4;
    optional bool positionReliable = 5;
    optional double seenHeight = 6;
  }

  optional double angleToSeenGoal = 1;
  optional DoubleVector3 goalCentroid = 2;
  optional int32 numberOfSeenPosts = 3;
  repeated GoalPost post = 4;
}

message HeadMotionRequest {
  required uint32 id = 1;
  required uint32 cameraID = 2;
  optional DoubleVector2 targetJointPosition = 3;
  optional DoubleVector2 targetPointInImage = 4;
  optional DoubleVector3 targetPointInTheWorld = 5;
  optional DoubleVector3 searchCenter = 6;
  optional DoubleVector3 searchSize = 7;
  optional bool searchDirection = 8;
  optional DoubleVector2 targetPointOnTheGround = 9;
  optional uint32 coordinate = 10;
  optional double velocity = 11;
}

message StepControlRequest
{
  enum StepType {
	WALKSTEP = 0;
	KICKSTEP = 1;
	ZEROSTEP = 2;
  };

  required uint32 stepID = 1;
  required bool moveLeftFoot = 2;
  required Pose2D target = 3;
  required uint32 time = 4;
  required double speedDirection = 5;
  required double scale = 6;
  required StepType steptype = 7;
  
  enum RestrictionMode {
	HARD = 0;
	SOFT = 1;
  };
  
  required RestrictionMode restriction = 8;
  required bool isProtected = 9;
  required uint32 stepRequestID = 10;
}

message WalkRequest {
  required uint32 coordinate = 1;
  required double character = 2;
  required Pose2D target = 3;
  optional StepControlRequest stepControl = 4;
  required Pose2D offset = 5;
}

message KickRequest {
  required DoubleVector3 kickPoint = 1;
  required double kickDirection = 2;
  required int32 kickFoot = 3;
  required bool finishKick = 4;
}

message GraspRequest {
  required DoubleVector3 graspingPoint = 1;
  required uint32 graspingState = 2;
  required uint32 graspDistState = 3;
  required uint32 graspStiffState = 4;
}

message ArmMotionRequest {
  required uint32 id = 1;
  optional DoubleVector2 lShoulderPosition = 2;
  optional DoubleVector2 lShoulderStiffness = 3;
  optional DoubleVector2 lElbowPosition = 4;
  optional DoubleVector2 lElbowStiffness = 5;
  optional DoubleVector2 rShoulderPosition = 6;
  optional DoubleVector2 rShoulderStiffness = 7;
  optional DoubleVector2 rElbowPosition = 8;
  optional DoubleVector2 rElbowStiffness = 9;
}

message MotionRequest {
  required uint32 id = 1;
  required uint32 time = 2;
  required bool forced = 3;
  optional WalkRequest walkRequest = 4;
  optional bool starndardStand = 5;
  optional KickRequest kickRequest = 6;
  optional double standHeight = 7;
  optional bool calibrateFootTouchDetector = 8;
  optional uint32 cognitionFrameNumber = 9;
  optional GraspRequest graspRequest = 10;
  optional ArmMotionRequest armMotionRequest = 11;
}


message LinePercept {
  message FieldLineSegment {
    optional LineSegment lineInImage = 1;
    optional LineSegment lineOnField = 2;
    optional int32 beginExtendCount = 3;
    optional int32 endExtendCount = 4;
    optional double thickness = 5;
    optional double slope = 6;
    optional double angle = 7;

    optional bool valid = 8;
  }

  repeated FieldLineSegment lines = 1;
  repeated Intersection intersections = 2;
  optional DoubleVector2 middleCircleCenter = 3;
}

message ScanLineEndPoint {
  required IntVector2 posInImage = 1;
  required DoubleVector2 posOnField = 2;
  required Color color = 3;
  required uint32 ScanLineID = 4;
}

message DoubleEdgel {
  required DoubleVector2 point = 1;
  required DoubleVector2 direction = 2;
}

message Edgel {
  required IntVector2 point = 1;
  required DoubleVector2 direction = 2;
}

message EdgelPair {
  required int32 begin = 1;
  required int32 end = 2;
  required int32 id = 3;
}

message ScanLineEdgelPercept {
  repeated Edgel edgels = 1;
  repeated EdgelPair pairs = 3;
  repeated ScanLineEndPoint endPoints = 2;
}

message LineGraphPercept {
  repeated Edgel edgelsOnField = 1;
  
  repeated DoubleEdgel edgelsInImageTop = 2;
  repeated DoubleEdgel edgelsInImage = 3;
}

message StepControlStatus
{
  required uint32 stepID = 1;
  required uint32 moveableFoot = 2;
  required uint32 stepRequestID = 3;
}

message MotionStatus
{
  required uint32 time = 1;
  required uint32 lastMotion = 2;
  required uint32 currentMotion = 3;
  required uint32 headMotion = 4;
  required uint32 currentMotionState = 5;
  required Pose2D plannedMotionLeftFoot = 6;
  required Pose2D plannedMotionRightFoot = 7;
  required Pose2D plannedMotionHip = 8;
  optional StepControlStatus stepControlStatus = 9;
}

message OdometryData
{
  required Pose2D pose = 1;
}

message BodyState
{
  optional bool isLiftedUp = 1;
}

message BodyStatus
{
  repeated double currentSum = 1;
  //repeated double currentSumFiltered = 2;
  required uint32 timestamp = 3;
}

message CalibrationData
{
  optional DoubleVector2 inertialSensorOffset = 1;
  //optional DoubleVector3 inertialSensorOffset = 6;
  //optional DoubleVector2 gyroSensorOffset = 2;
  optional DoubleVector3 gyroSensorOffset = 5;
  optional DoubleVector3 accSensorOffset = 3;
  required bool calibrated = 4;
}

message InertialModel
{
  optional DoubleVector2 orientation = 1;
}

enum TeamColor
{
  blueTeam = 0; redTeam = 1; yellowTeam = 2; blackTeam = 3; invalidTeam = 255;
}

message TeamMessage
{
  message Data
  {
    optional uint32 playerNum = 1 [default=0];
    optional TeamColor teamColor = 11 [default=blueTeam,deprecated=true];
    optional Pose2D pose = 3;
    optional int32 ballAge = 4 [default=-1];
    optional DoubleVector2 ballPosition = 5;
    optional DoubleVector2 ballVelocity = 6;
    optional bool fallen = 10 [default=false];
    optional BUUserTeamMessage user = 8;
    optional FrameInfo frameInfo = 9;
    optional uint32 teamNumber = 12 [default=0];
  }
  repeated Data data = 1;
}

message BUUserTeamMessage
{
  optional string bodyID = 1 [default="unknown"];
  optional uint32 timeToBall = 2;
  optional bool wasStriker = 3 [default=false];
  optional bool isPenalized = 4 [default=false];
  repeated Opponent opponents = 5;
  optional uint32 teamNumber = 6 [default=0,deprecated=true];
  optional float batteryCharge = 7 [default=1.0];
  optional float temperature = 8 [default=0.0];
  optional uint64 timestamp = 9 [default=0];
  optional bool wantsToBeStriker = 10 [default=false];
  optional float cpuTemperature = 11 [default=0.0];
  optional bool whistleDetected = 12 [default=false];
  optional int32 whistleCount = 13 [default=0];
  // only for visualizing teamball position in RC
  optional DoubleVector2 teamBall = 14;
  optional string key = 100 [default="none"];
}

message Opponent {
  required int32 playerNum = 1 [default=0];
  optional Pose2D poseOnField = 2;
}


message CameraMatrixCalibration
{
  repeated DoubleVector2 correctionOffset = 1;
  optional DoubleVector2 correctionOffsetBody = 2;
  optional DoubleVector3 correctionOffsetHead = 3;
  repeated DoubleVector3 correctionOffsetCam  = 4;
}

message BallCandidates
{
  message Patch
  {
    enum Type {
      Y = 0;
      YUV = 1;
      YUVC = 2;
    }
    required IntVector2 min = 1;
    required IntVector2 max = 2;
    optional Type type = 3 [default=Y];
    required bytes data = 5;
  }

  repeated Patch patches = 1;
}

message RemoteControlCommand {
  enum ControlMode
  {
    DIRECT_CONTROL = 0;
    LOCK_CONTROL = 1;
  }

  enum ActionType {
    NONE = 0;
    STAND = 1;
    WALK = 2;
    KICK_RIGHT = 3;
    KICK_LEFT = 4;
    KICK_FORWARD_LEFT = 5;
    KICK_FORWARD_RIGHT = 6;
  }

  enum SecondActionType
  {
    SECOND_NONE = 0;
    BLINK = 1;
    SAY = 2;
  }

  optional ControlMode controlMode = 1;
  optional ActionType action = 2;
  optional SecondActionType second_action = 3;

  optional Pose2D target = 4;
}

message GroundContactModel {
  enum Foot {
    LEFT = 0;
    RIGHT = 1;
    NONE = 2;
  }

  required bool leftGroundContact = 1;
  required bool rightGroundContact = 2;
  required Foot supportFoot = 3;
}


message CollisionPercept {
  required uint32 timeCollisionArmLeft = 1;
  required uint32 timeCollisionArmRight = 2;
}
