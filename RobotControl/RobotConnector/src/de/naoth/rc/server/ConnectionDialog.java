/*
 * 
 */

/*
 * ConnectionDialog.java
 *
 * Created on 01.06.2009, 10:57:03
 */
package de.naoth.rc.server;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;

/**
 *
 * @author thomas
 */
public class ConnectionDialog extends javax.swing.JDialog
{

  private MessageServer messageServer;
  private IMessageServerParent messageServerParent;
  private ArrayList<String> addressReqistry;

  /** Creates new form ConnectionDialog */
  public ConnectionDialog(java.awt.Frame parent, IMessageServerParent messageServerParent)
  {
    super(parent, true);
    initComponents();
    this.messageServerParent = messageServerParent;
    this.messageServer = messageServerParent.getMessageServer();

    String host = messageServerParent.getConfig().getProperty("hostname");
    if(host != null)
    {
      cbHost.setSelectedItem(host);
    }

    String port = messageServerParent.getConfig().getProperty("port");
    if(port != null)
    {
      txtPort.setText(port);
    }

    addressReqistry = new ArrayList<String>(cbHost.getItemCount());
    for(int i = 0; i < cbHost.getItemCount(); i++)
    {
      Object item = cbHost.getItemAt(i);
      if(item instanceof String) // :)
        addressReqistry.add((String)item);
    }//end for

    this.getRootPane().setDefaultButton(this.btConnect);

    /*
    Toolkit tk = Toolkit.getDefaultToolkit();
    Dimension screenSize = tk.getScreenSize();
    int screenHeight = screenSize.height;
    int screenWidth = screenSize.width;
    setLocation((screenWidth / 2) - (this.getWidth() / 2), (screenHeight / 2) - (this.getHeight() / 2));
     * */


    // close by pressing esc
    ActionListener actionListener = new ActionListener() {
      public void actionPerformed(ActionEvent actionEvent) {
        dispose();
      }
    };

    KeyStroke stroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
    this.getRootPane().registerKeyboardAction(actionListener, stroke, JComponent.WHEN_IN_FOCUSED_WINDOW);
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    cbHost = new javax.swing.JComboBox();
    jLabel1 = new javax.swing.JLabel();
    txtPort = new javax.swing.JTextField();
    btConnect = new javax.swing.JButton();
    btAuto = new javax.swing.JButton();
    btCancel = new javax.swing.JButton();

    setTitle("Connect");
    setLocationByPlatform(true);

    cbHost.setEditable(true);
    cbHost.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "localhost" }));

    jLabel1.setText(":");

    txtPort.setText("5401");

    btConnect.setMnemonic('c');
    btConnect.setText("Connect");
    btConnect.setToolTipText("Connect with this IP and port");
    btConnect.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btConnectActionPerformed(evt);
      }
    });

    btAuto.setMnemonic('a');
    btAuto.setText("Auto");
    btAuto.setToolTipText("Connect and choose port automaticly");
    btAuto.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btAutoActionPerformed(evt);
      }
    });

    btCancel.setMnemonic('e');
    btCancel.setText("Cancel");
    btCancel.setToolTipText("Do not connect and close this dialog");
    btCancel.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btCancelActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(cbHost, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(layout.createSequentialGroup()
            .addComponent(btConnect)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(btAuto)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
            .addComponent(btCancel)))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1)
          .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(cbHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(btConnect)
          .addComponent(btAuto)
          .addComponent(btCancel))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void btCancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btCancelActionPerformed
    {//GEN-HEADEREND:event_btCancelActionPerformed

      this.setVisible(false);

    }//GEN-LAST:event_btCancelActionPerformed

    private void btConnectActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btConnectActionPerformed
    {//GEN-HEADEREND:event_btConnectActionPerformed
      try
      {
        String host = (String) cbHost.getSelectedItem();
        int port = Integer.parseInt(txtPort.getText());
        
        messageServer.connect(host, port);

        messageServerParent.getConfig().put("hostname", host);
        messageServerParent.getConfig().put("port", "" + port);

        DefaultComboBoxModel model = (DefaultComboBoxModel) cbHost.getModel();
        if(!addressReqistry.contains(host))
        {
          addressReqistry.add(host);
          model.addElement(host);
        }

        setVisible(false);
      }
      catch(IOException ex)
      {

        JOptionPane.showMessageDialog(this,
          "Etablishing connection failed: " + ex.getLocalizedMessage(), "ERROR",
          JOptionPane.ERROR_MESSAGE);
      }
    }//GEN-LAST:event_btConnectActionPerformed

    private void btAutoActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btAutoActionPerformed
    {//GEN-HEADEREND:event_btAutoActionPerformed
     
      String host = (String) cbHost.getSelectedItem();
      boolean wasConnected = false;
      for(int currentPort = 5400; !wasConnected && currentPort <= 5403; currentPort++)
      {
        try
        {
          txtPort.setText("" + currentPort);
          messageServer.connect(host, currentPort);

          wasConnected = true;

        }
        catch(IOException ex)
        {
          // ignore
        }
      }//end for

      for(int currentPort = 5500; !wasConnected && currentPort <= 5503; currentPort++)
      {
        try
        {
          txtPort.setText("" + currentPort);
          messageServer.connect(host, currentPort);

          wasConnected = true;

        }
        catch(IOException ex)
        {
          // ignore
        }
      }//end for

      if(wasConnected)
      {
        messageServerParent.getConfig().put("hostname", (String) cbHost.getSelectedItem());
        messageServerParent.getConfig().put("port", txtPort.getText());

        DefaultComboBoxModel model = (DefaultComboBoxModel) cbHost.getModel();
        model.addElement(host);

        setVisible(false);

      }
      else
      {

        JOptionPane.showMessageDialog(this,
          "Auto-Etablishing connection failed.", "ERROR", JOptionPane.ERROR_MESSAGE);
      }

    }//GEN-LAST:event_btAutoActionPerformed

 

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton btAuto;
  private javax.swing.JButton btCancel;
  private javax.swing.JButton btConnect;
  private javax.swing.JComboBox cbHost;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JTextField txtPort;
  // End of variables declaration//GEN-END:variables
}
