package de.hu_berlin.informatik.ki.nao.dialogs;

import de.hu_berlin.informatik.ki.nao.Dialog;
import de.hu_berlin.informatik.ki.nao.Helper;
import de.hu_berlin.informatik.ki.nao.Main;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import javax.swing.Icon;
import javax.swing.JFileChooser;
import javax.swing.JPanel;

public class LogfilePlayer extends javax.swing.JPanel implements Dialog
{

  final private String cmd_play = "p";
  final private String cmd_loop = "l";
  final private String cmd_forward = "d";
  final private String cmd_backward = "a";
  final private String cmd_jump_to_begin = "w";
  final private String cmd_jump = "g";
  final private String cmd_jump_to_end = "s";
  final private String cmd_quit = "q";
  final private String host = "localhost";
  final private int port = 5401;
  final private Icon icon_play;
  final private Icon icon_pause;
  private Process process = null;
  private OutputStream out = null;
  private boolean playing = false;
  private boolean looping = false;
  private Main parent = null;
  private JFileChooser fileChooser = new JFileChooser();
  final private String working_dir_conf_key = "logsimulator_working_dir";
  final private String default_working_dir = "../NaoController/Platforms/LogSimulator/dist";
  private Thread outputThread = null;

  /** Creates new form LogfilePlayer */
  public LogfilePlayer()
  {
    initComponents();

    icon_play = btPlay.getIcon();
    icon_pause = new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/media/Pause24.gif"));

    fileChooser.setFileFilter(new LogFileFilter());
    setButtonsEnabled(false);
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jToolBar1 = new javax.swing.JToolBar();
    btOpen = new javax.swing.JButton();
    btQuit = new javax.swing.JButton();
    btJumpToBegin = new javax.swing.JButton();
    btBackward = new javax.swing.JButton();
    btPlay = new javax.swing.JButton();
    btForward = new javax.swing.JButton();
    btJumpToEnd = new javax.swing.JButton();
    tbLoop = new javax.swing.JToggleButton();
    btJump = new javax.swing.JButton();
    ftfJump = new javax.swing.JFormattedTextField();
    btOption = new javax.swing.JButton();
    jScrollPane1 = new javax.swing.JScrollPane();
    textOutput = new javax.swing.JTextArea();

    jToolBar1.setRollover(true);

    btOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Open24.gif"))); // NOI18N
    btOpen.setToolTipText("Open a logfile");
    btOpen.setFocusable(false);
    btOpen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btOpen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btOpen.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btOpenActionPerformed(evt);
      }
    });
    jToolBar1.add(btOpen);

    btQuit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/media/Stop24.gif"))); // NOI18N
    btQuit.setToolTipText("Stop");
    btQuit.setFocusable(false);
    btQuit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btQuit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btQuit.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btQuitActionPerformed(evt);
      }
    });
    jToolBar1.add(btQuit);

    btJumpToBegin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/media/Rewind24.gif"))); // NOI18N
    btJumpToBegin.setToolTipText("Jump to the beginning");
    btJumpToBegin.setFocusable(false);
    btJumpToBegin.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btJumpToBegin.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btJumpToBegin.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btJumpToBeginActionPerformed(evt);
      }
    });
    jToolBar1.add(btJumpToBegin);

    btBackward.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/media/StepBack24.gif"))); // NOI18N
    btBackward.setToolTipText("Backward one step");
    btBackward.setFocusable(false);
    btBackward.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btBackward.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btBackward.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btBackwardActionPerformed(evt);
      }
    });
    jToolBar1.add(btBackward);

    btPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/media/Play24.gif"))); // NOI18N
    btPlay.setToolTipText("Play / Pause");
    btPlay.setFocusable(false);
    btPlay.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btPlay.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btPlay.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btPlayActionPerformed(evt);
      }
    });
    jToolBar1.add(btPlay);

    btForward.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/media/StepForward24.gif"))); // NOI18N
    btForward.setToolTipText("Forward one step");
    btForward.setFocusable(false);
    btForward.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btForward.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btForward.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btForwardActionPerformed(evt);
      }
    });
    jToolBar1.add(btForward);

    btJumpToEnd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/media/FastForward24.gif"))); // NOI18N
    btJumpToEnd.setToolTipText("Jump to the ending");
    btJumpToEnd.setFocusable(false);
    btJumpToEnd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btJumpToEnd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btJumpToEnd.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btJumpToEndActionPerformed(evt);
      }
    });
    jToolBar1.add(btJumpToEnd);

    tbLoop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Refresh24.gif"))); // NOI18N
    tbLoop.setToolTipText("play looply");
    tbLoop.setFocusable(false);
    tbLoop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    tbLoop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    tbLoop.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        tbLoopActionPerformed(evt);
      }
    });
    jToolBar1.add(tbLoop);

    btJump.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Find24.gif"))); // NOI18N
    btJump.setToolTipText("Go to");
    btJump.setFocusable(false);
    btJump.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btJump.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btJump.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btJumpActionPerformed(evt);
      }
    });
    jToolBar1.add(btJump);

    ftfJump.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
    ftfJump.setToolTipText("Input the number to be jump to");
    jToolBar1.add(ftfJump);

    btOption.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Preferences24.gif"))); // NOI18N
    btOption.setToolTipText("set working directory");
    btOption.setFocusable(false);
    btOption.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btOption.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btOption.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btOptionActionPerformed(evt);
      }
    });
    jToolBar1.add(btOption);

    textOutput.setColumns(20);
    textOutput.setLineWrap(true);
    textOutput.setRows(5);
    textOutput.setWrapStyleWord(true);
    textOutput.setAutoscrolls(true);
    textOutput.setDoubleBuffered(true);
    jScrollPane1.setViewportView(textOutput);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, Short.MAX_VALUE)
      .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void addOutput(String s)
  {
    textOutput.append(s);
    textOutput.setCaretPosition(textOutput.getDocument().getLength() - 1);
  }

  private void open(String filename)
  { 
    textOutput.setText("");
    try
    {
      File dir = new File(parent.getConfig().getProperty(working_dir_conf_key, default_working_dir));

      String cmd = "logsimulator";

      String osName = System.getProperty("os.name");
      if (osName.equals("Linux"))
      {
        cmd = "./" + cmd;
      }

      String[] envp = new String[0];
      process = Runtime.getRuntime().exec(cmd + " -b " + filename, envp, dir);
      final InputStream in = process.getInputStream();
      final InputStream err = process.getErrorStream();
      out = process.getOutputStream();
      outputThread = new Thread(new Runnable()
      {

        public void run()
        {
          while (true)
          {
            try
            {
              int inLen = in.available();
              if ( inLen > 0)
              {
                try
                {
                  byte[] data = new byte[inLen];
                  in.read(data);
                  addOutput(new String(data));
                } catch (IOException ex)
                {
                  Helper.handleException(ex);
                }
              }
              int errLen = err.available();
              if ( errLen > 0)
              {
                try
                {
                  byte[] data = new byte[errLen];
                  err.read(data);
                  addOutput(new String(data));
                } catch (IOException ex)
                {
                  Helper.handleException(ex);
                }
              }
            } catch (IOException ex)
            {
              Helper.handleException(ex);
            }
          }
        }
      });
      outputThread.start();

      setButtonsEnabled(true);
    } catch (IOException ex)
    {
      Helper.handleException(ex);
    }
  }

  private boolean sendCommand(String cmd)
  {
    if ( null != outputThread && null != out)
    {
      try
      {
        out.write(cmd.getBytes());
        out.flush();
      } catch (IOException ex)
      {
        Helper.handleException(ex);
      }
      return true;
    }
    return false;
  }

  private void quit()
  {
    if (outputThread != null)
    {
      System.out.print("LogfilePlayer quit...");
      parent.disconnect();
      
      pause();

      if (sendCommand(cmd_quit))
      {
        playing = false;
        btPlay.setIcon(icon_play);

        setButtonsEnabled(false);
        System.out.print(" ok\n");
      }

      outputThread = null;
    }
  }

  private void setButtonsEnabled(boolean v)
  {
    btOpen.setEnabled(!v);
    btJumpToBegin.setEnabled(v);
    btBackward.setEnabled(v);
    btPlay.setEnabled(v);
    btQuit.setEnabled(v);
    btForward.setEnabled(v);
    btJumpToEnd.setEnabled(v);
    tbLoop.setEnabled(v);
    btJump.setEnabled(v);
    ftfJump.setEnabled(v);
  }

  private void pause()
  {
    if (playing || looping)
    {
      if (sendCommand(cmd_play))
      {
        playing = false;
        btPlay.setIcon(icon_play);
      }
    }
  }

  private void play()
  {
    if (!playing)
    {
      if (sendCommand(cmd_play))
      {
        playing = true;
        looping = false;
        btPlay.setIcon(icon_pause);
      }
    }
  }

  private void loop()
  {
    if (!looping)
    {
      if (sendCommand(cmd_loop))
      {
        playing = false;
        looping = true;
        btPlay.setIcon(icon_pause);
      }
    }
  }

    private void btOpenActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btOpenActionPerformed
    {//GEN-HEADEREND:event_btOpenActionPerformed
      int result = fileChooser.showOpenDialog(this);
      if (result == JFileChooser.APPROVE_OPTION)
      {
        try
        {
          String fileName = fileChooser.getSelectedFile().getCanonicalPath();
          open(fileName);
          // auto connect to the logsimulator
          Thread.sleep(1000);//sleep for 1000 ms
          parent.connect(host, port);
          System.out.print("LogfilePlayer open logfile: ");
          System.out.println(fileName);
        } catch (InterruptedException ex)
        {
          Helper.handleException(ex);
        } catch (IOException ex)
        {
          Helper.handleException(ex);
        }
      }
    }//GEN-LAST:event_btOpenActionPerformed

    private void btPlayActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btPlayActionPerformed
    {//GEN-HEADEREND:event_btPlayActionPerformed
      if (btPlay.getIcon() == icon_pause)
      {
        pause();
      } else
      {
        if (tbLoop.isSelected())
        {
          loop();
        } else
        {
          play();
        }
      }
    }//GEN-LAST:event_btPlayActionPerformed

    private void btQuitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btQuitActionPerformed
    {//GEN-HEADEREND:event_btQuitActionPerformed
      quit();
    }//GEN-LAST:event_btQuitActionPerformed

    private void btForwardActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btForwardActionPerformed
    {//GEN-HEADEREND:event_btForwardActionPerformed
      pause();
      sendCommand(cmd_forward);
    }//GEN-LAST:event_btForwardActionPerformed

    private void btJumpToEndActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btJumpToEndActionPerformed
    {//GEN-HEADEREND:event_btJumpToEndActionPerformed
      pause();
      sendCommand(cmd_jump_to_end);
    }//GEN-LAST:event_btJumpToEndActionPerformed

    private void btBackwardActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btBackwardActionPerformed
    {//GEN-HEADEREND:event_btBackwardActionPerformed
      pause();
      sendCommand(cmd_backward);
    }//GEN-LAST:event_btBackwardActionPerformed

    private void btJumpToBeginActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btJumpToBeginActionPerformed
    {//GEN-HEADEREND:event_btJumpToBeginActionPerformed
      pause();
      sendCommand(cmd_jump_to_begin);
    }//GEN-LAST:event_btJumpToBeginActionPerformed

    private void tbLoopActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_tbLoopActionPerformed
    {//GEN-HEADEREND:event_tbLoopActionPerformed
      if (playing)
      {
        pause();
        if (sendCommand(tbLoop.isSelected() ? cmd_loop : cmd_play))
        {
          playing = true;
          btPlay.setIcon(icon_pause);
        }
      }
    }//GEN-LAST:event_tbLoopActionPerformed

    private void btJumpActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btJumpActionPerformed
    {//GEN-HEADEREND:event_btJumpActionPerformed
      String n = ftfJump.getText();
      pause();
      sendCommand(cmd_jump);
      sendCommand(" " + n + "\n");
    }//GEN-LAST:event_btJumpActionPerformed

    private void btOptionActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btOptionActionPerformed
    {//GEN-HEADEREND:event_btOptionActionPerformed
      String workingDir = parent.getConfig().getProperty(working_dir_conf_key, default_working_dir);
      JFileChooser jfc = new JFileChooser(workingDir);
      jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      int result = jfc.showOpenDialog(this);
      if (result == JFileChooser.APPROVE_OPTION)
      {
        workingDir = jfc.getSelectedFile().getPath();
        parent.getConfig().setProperty(working_dir_conf_key, workingDir);
      }
    }//GEN-LAST:event_btOptionActionPerformed
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton btBackward;
  private javax.swing.JButton btForward;
  private javax.swing.JButton btJump;
  private javax.swing.JButton btJumpToBegin;
  private javax.swing.JButton btJumpToEnd;
  private javax.swing.JButton btOpen;
  private javax.swing.JButton btOption;
  private javax.swing.JButton btPlay;
  private javax.swing.JButton btQuit;
  private javax.swing.JFormattedTextField ftfJump;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JToolBar jToolBar1;
  private javax.swing.JToggleButton tbLoop;
  private javax.swing.JTextArea textOutput;
  // End of variables declaration//GEN-END:variables

  public void init(Main parent)
  {
    this.parent = parent;

    textOutput.setEditable(false);
    textOutput.addKeyListener(new KeyListener() {

      public void keyTyped(KeyEvent e)
      {
      }

      public void keyPressed(KeyEvent e)
      {
        String key = String.valueOf(e.getKeyChar());
        if (key.equals(cmd_quit))
        {
          quit();
        } else if ( key.equals(cmd_play) )
        {
          if (playing) pause();
          else play();
        } else if ( key.equals(cmd_loop))
        {
          if (looping) pause();
          else loop();
        }
        else
        {
          sendCommand(key);
        }
      }

      public void keyReleased(KeyEvent e)
      {
      }
    });
  }

  @Override
  protected void finalize()
  {
    quit();

    if ( process != null)
      process.destroy();
  }

  public JPanel getPanel()
  {
    return this;
  }

  private class LogFileFilter extends javax.swing.filechooser.FileFilter
  {

    public boolean accept(File file)
    {
      if (file.isDirectory())
      {
        return true;
      }
      String filename = file.getName();
      return filename.toLowerCase().endsWith(".log");
    }

    public String getDescription()
    {
      return "Logfile (*.log)";
    }

    @Override
    public String toString()
    {
      return ".log";
    }
  }//end class LogFileFilter

  public void dispose()
  {
    quit();
  }//end dispose
}
