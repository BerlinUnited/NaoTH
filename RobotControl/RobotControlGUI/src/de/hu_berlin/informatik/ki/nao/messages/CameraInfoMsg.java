// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CameraInfo.proto

package de.hu_berlin.informatik.ki.nao.messages;

public final class CameraInfoMsg {
  private CameraInfoMsg() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class CameraInfo extends
      com.google.protobuf.GeneratedMessage {
    // Use CameraInfo.newBuilder() to construct.
    private CameraInfo() {
      initFields();
    }
    private CameraInfo(boolean noInit) {}
    
    private static final CameraInfo defaultInstance;
    public static CameraInfo getDefaultInstance() {
      return defaultInstance;
    }
    
    public CameraInfo getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.internal_static_naothmessages_CameraInfo_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.internal_static_naothmessages_CameraInfo_fieldAccessorTable;
    }
    
    public enum CameraID
        implements com.google.protobuf.ProtocolMessageEnum {
      top(0, 0),
      bottom(1, 1),
      ;
      
      
      public final int getNumber() { return value; }
      
      public static CameraID valueOf(int value) {
        switch (value) {
          case 0: return top;
          case 1: return bottom;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<CameraID>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<CameraID>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<CameraID>() {
              public CameraID findValueByNumber(int number) {
                return CameraID.valueOf(number)
      ;        }
            };
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo.getDescriptor().getEnumTypes().get(0);
      }
      
      private static final CameraID[] VALUES = {
        top, bottom, 
      };
      public static CameraID valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      private final int index;
      private final int value;
      private CameraID(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      static {
        de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.getDescriptor();
      }
      
      // @@protoc_insertion_point(enum_scope:naothmessages.CameraInfo.CameraID)
    }
    
    // required int32 resolutionWidth = 1;
    public static final int RESOLUTIONWIDTH_FIELD_NUMBER = 1;
    private boolean hasResolutionWidth;
    private int resolutionWidth_ = 0;
    public boolean hasResolutionWidth() { return hasResolutionWidth; }
    public int getResolutionWidth() { return resolutionWidth_; }
    
    // required int32 resolutionHeight = 2;
    public static final int RESOLUTIONHEIGHT_FIELD_NUMBER = 2;
    private boolean hasResolutionHeight;
    private int resolutionHeight_ = 0;
    public boolean hasResolutionHeight() { return hasResolutionHeight; }
    public int getResolutionHeight() { return resolutionHeight_; }
    
    // optional .naothmessages.CameraInfo.CameraID cameraID = 4 [default = bottom];
    public static final int CAMERAID_FIELD_NUMBER = 4;
    private boolean hasCameraID;
    private de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo.CameraID cameraID_;
    public boolean hasCameraID() { return hasCameraID; }
    public de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo.CameraID getCameraID() { return cameraID_; }
    
    // optional double focalLength = 5;
    public static final int FOCALLENGTH_FIELD_NUMBER = 5;
    private boolean hasFocalLength;
    private double focalLength_ = 0D;
    public boolean hasFocalLength() { return hasFocalLength; }
    public double getFocalLength() { return focalLength_; }
    
    // optional double openingAngleWidth = 6;
    public static final int OPENINGANGLEWIDTH_FIELD_NUMBER = 6;
    private boolean hasOpeningAngleWidth;
    private double openingAngleWidth_ = 0D;
    public boolean hasOpeningAngleWidth() { return hasOpeningAngleWidth; }
    public double getOpeningAngleWidth() { return openingAngleWidth_; }
    
    // optional double openingAngleHeight = 7;
    public static final int OPENINGANGLEHEIGHT_FIELD_NUMBER = 7;
    private boolean hasOpeningAngleHeight;
    private double openingAngleHeight_ = 0D;
    public boolean hasOpeningAngleHeight() { return hasOpeningAngleHeight; }
    public double getOpeningAngleHeight() { return openingAngleHeight_; }
    
    // optional double opticalCenterX = 8;
    public static final int OPTICALCENTERX_FIELD_NUMBER = 8;
    private boolean hasOpticalCenterX;
    private double opticalCenterX_ = 0D;
    public boolean hasOpticalCenterX() { return hasOpticalCenterX; }
    public double getOpticalCenterX() { return opticalCenterX_; }
    
    // optional double opticalCenterY = 9;
    public static final int OPTICALCENTERY_FIELD_NUMBER = 9;
    private boolean hasOpticalCenterY;
    private double opticalCenterY_ = 0D;
    public boolean hasOpticalCenterY() { return hasOpticalCenterY; }
    public double getOpticalCenterY() { return opticalCenterY_; }
    
    // optional int64 size = 10;
    public static final int SIZE_FIELD_NUMBER = 10;
    private boolean hasSize;
    private long size_ = 0L;
    public boolean hasSize() { return hasSize; }
    public long getSize() { return size_; }
    
    // optional int64 memorysize = 11;
    public static final int MEMORYSIZE_FIELD_NUMBER = 11;
    private boolean hasMemorysize;
    private long memorysize_ = 0L;
    public boolean hasMemorysize() { return hasMemorysize; }
    public long getMemorysize() { return memorysize_; }
    
    // optional double cameraRollOffset = 12;
    public static final int CAMERAROLLOFFSET_FIELD_NUMBER = 12;
    private boolean hasCameraRollOffset;
    private double cameraRollOffset_ = 0D;
    public boolean hasCameraRollOffset() { return hasCameraRollOffset; }
    public double getCameraRollOffset() { return cameraRollOffset_; }
    
    // optional double cameraTiltOffset = 13;
    public static final int CAMERATILTOFFSET_FIELD_NUMBER = 13;
    private boolean hasCameraTiltOffset;
    private double cameraTiltOffset_ = 0D;
    public boolean hasCameraTiltOffset() { return hasCameraTiltOffset; }
    public double getCameraTiltOffset() { return cameraTiltOffset_; }
    
    private void initFields() {
      cameraID_ = de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo.CameraID.bottom;
    }
    public final boolean isInitialized() {
      if (!hasResolutionWidth) return false;
      if (!hasResolutionHeight) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasResolutionWidth()) {
        output.writeInt32(1, getResolutionWidth());
      }
      if (hasResolutionHeight()) {
        output.writeInt32(2, getResolutionHeight());
      }
      if (hasCameraID()) {
        output.writeEnum(4, getCameraID().getNumber());
      }
      if (hasFocalLength()) {
        output.writeDouble(5, getFocalLength());
      }
      if (hasOpeningAngleWidth()) {
        output.writeDouble(6, getOpeningAngleWidth());
      }
      if (hasOpeningAngleHeight()) {
        output.writeDouble(7, getOpeningAngleHeight());
      }
      if (hasOpticalCenterX()) {
        output.writeDouble(8, getOpticalCenterX());
      }
      if (hasOpticalCenterY()) {
        output.writeDouble(9, getOpticalCenterY());
      }
      if (hasSize()) {
        output.writeInt64(10, getSize());
      }
      if (hasMemorysize()) {
        output.writeInt64(11, getMemorysize());
      }
      if (hasCameraRollOffset()) {
        output.writeDouble(12, getCameraRollOffset());
      }
      if (hasCameraTiltOffset()) {
        output.writeDouble(13, getCameraTiltOffset());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasResolutionWidth()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getResolutionWidth());
      }
      if (hasResolutionHeight()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getResolutionHeight());
      }
      if (hasCameraID()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, getCameraID().getNumber());
      }
      if (hasFocalLength()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, getFocalLength());
      }
      if (hasOpeningAngleWidth()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, getOpeningAngleWidth());
      }
      if (hasOpeningAngleHeight()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, getOpeningAngleHeight());
      }
      if (hasOpticalCenterX()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, getOpticalCenterX());
      }
      if (hasOpticalCenterY()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(9, getOpticalCenterY());
      }
      if (hasSize()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(10, getSize());
      }
      if (hasMemorysize()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(11, getMemorysize());
      }
      if (hasCameraRollOffset()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(12, getCameraRollOffset());
      }
      if (hasCameraTiltOffset()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(13, getCameraTiltOffset());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo result;
      
      // Construct using de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo();
        return builder;
      }
      
      protected de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo.getDescriptor();
      }
      
      public de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo getDefaultInstanceForType() {
        return de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo) {
          return mergeFrom((de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo other) {
        if (other == de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo.getDefaultInstance()) return this;
        if (other.hasResolutionWidth()) {
          setResolutionWidth(other.getResolutionWidth());
        }
        if (other.hasResolutionHeight()) {
          setResolutionHeight(other.getResolutionHeight());
        }
        if (other.hasCameraID()) {
          setCameraID(other.getCameraID());
        }
        if (other.hasFocalLength()) {
          setFocalLength(other.getFocalLength());
        }
        if (other.hasOpeningAngleWidth()) {
          setOpeningAngleWidth(other.getOpeningAngleWidth());
        }
        if (other.hasOpeningAngleHeight()) {
          setOpeningAngleHeight(other.getOpeningAngleHeight());
        }
        if (other.hasOpticalCenterX()) {
          setOpticalCenterX(other.getOpticalCenterX());
        }
        if (other.hasOpticalCenterY()) {
          setOpticalCenterY(other.getOpticalCenterY());
        }
        if (other.hasSize()) {
          setSize(other.getSize());
        }
        if (other.hasMemorysize()) {
          setMemorysize(other.getMemorysize());
        }
        if (other.hasCameraRollOffset()) {
          setCameraRollOffset(other.getCameraRollOffset());
        }
        if (other.hasCameraTiltOffset()) {
          setCameraTiltOffset(other.getCameraTiltOffset());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setResolutionWidth(input.readInt32());
              break;
            }
            case 16: {
              setResolutionHeight(input.readInt32());
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo.CameraID value = de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo.CameraID.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                setCameraID(value);
              }
              break;
            }
            case 41: {
              setFocalLength(input.readDouble());
              break;
            }
            case 49: {
              setOpeningAngleWidth(input.readDouble());
              break;
            }
            case 57: {
              setOpeningAngleHeight(input.readDouble());
              break;
            }
            case 65: {
              setOpticalCenterX(input.readDouble());
              break;
            }
            case 73: {
              setOpticalCenterY(input.readDouble());
              break;
            }
            case 80: {
              setSize(input.readInt64());
              break;
            }
            case 88: {
              setMemorysize(input.readInt64());
              break;
            }
            case 97: {
              setCameraRollOffset(input.readDouble());
              break;
            }
            case 105: {
              setCameraTiltOffset(input.readDouble());
              break;
            }
          }
        }
      }
      
      
      // required int32 resolutionWidth = 1;
      public boolean hasResolutionWidth() {
        return result.hasResolutionWidth();
      }
      public int getResolutionWidth() {
        return result.getResolutionWidth();
      }
      public Builder setResolutionWidth(int value) {
        result.hasResolutionWidth = true;
        result.resolutionWidth_ = value;
        return this;
      }
      public Builder clearResolutionWidth() {
        result.hasResolutionWidth = false;
        result.resolutionWidth_ = 0;
        return this;
      }
      
      // required int32 resolutionHeight = 2;
      public boolean hasResolutionHeight() {
        return result.hasResolutionHeight();
      }
      public int getResolutionHeight() {
        return result.getResolutionHeight();
      }
      public Builder setResolutionHeight(int value) {
        result.hasResolutionHeight = true;
        result.resolutionHeight_ = value;
        return this;
      }
      public Builder clearResolutionHeight() {
        result.hasResolutionHeight = false;
        result.resolutionHeight_ = 0;
        return this;
      }
      
      // optional .naothmessages.CameraInfo.CameraID cameraID = 4 [default = bottom];
      public boolean hasCameraID() {
        return result.hasCameraID();
      }
      public de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo.CameraID getCameraID() {
        return result.getCameraID();
      }
      public Builder setCameraID(de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo.CameraID value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasCameraID = true;
        result.cameraID_ = value;
        return this;
      }
      public Builder clearCameraID() {
        result.hasCameraID = false;
        result.cameraID_ = de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo.CameraID.bottom;
        return this;
      }
      
      // optional double focalLength = 5;
      public boolean hasFocalLength() {
        return result.hasFocalLength();
      }
      public double getFocalLength() {
        return result.getFocalLength();
      }
      public Builder setFocalLength(double value) {
        result.hasFocalLength = true;
        result.focalLength_ = value;
        return this;
      }
      public Builder clearFocalLength() {
        result.hasFocalLength = false;
        result.focalLength_ = 0D;
        return this;
      }
      
      // optional double openingAngleWidth = 6;
      public boolean hasOpeningAngleWidth() {
        return result.hasOpeningAngleWidth();
      }
      public double getOpeningAngleWidth() {
        return result.getOpeningAngleWidth();
      }
      public Builder setOpeningAngleWidth(double value) {
        result.hasOpeningAngleWidth = true;
        result.openingAngleWidth_ = value;
        return this;
      }
      public Builder clearOpeningAngleWidth() {
        result.hasOpeningAngleWidth = false;
        result.openingAngleWidth_ = 0D;
        return this;
      }
      
      // optional double openingAngleHeight = 7;
      public boolean hasOpeningAngleHeight() {
        return result.hasOpeningAngleHeight();
      }
      public double getOpeningAngleHeight() {
        return result.getOpeningAngleHeight();
      }
      public Builder setOpeningAngleHeight(double value) {
        result.hasOpeningAngleHeight = true;
        result.openingAngleHeight_ = value;
        return this;
      }
      public Builder clearOpeningAngleHeight() {
        result.hasOpeningAngleHeight = false;
        result.openingAngleHeight_ = 0D;
        return this;
      }
      
      // optional double opticalCenterX = 8;
      public boolean hasOpticalCenterX() {
        return result.hasOpticalCenterX();
      }
      public double getOpticalCenterX() {
        return result.getOpticalCenterX();
      }
      public Builder setOpticalCenterX(double value) {
        result.hasOpticalCenterX = true;
        result.opticalCenterX_ = value;
        return this;
      }
      public Builder clearOpticalCenterX() {
        result.hasOpticalCenterX = false;
        result.opticalCenterX_ = 0D;
        return this;
      }
      
      // optional double opticalCenterY = 9;
      public boolean hasOpticalCenterY() {
        return result.hasOpticalCenterY();
      }
      public double getOpticalCenterY() {
        return result.getOpticalCenterY();
      }
      public Builder setOpticalCenterY(double value) {
        result.hasOpticalCenterY = true;
        result.opticalCenterY_ = value;
        return this;
      }
      public Builder clearOpticalCenterY() {
        result.hasOpticalCenterY = false;
        result.opticalCenterY_ = 0D;
        return this;
      }
      
      // optional int64 size = 10;
      public boolean hasSize() {
        return result.hasSize();
      }
      public long getSize() {
        return result.getSize();
      }
      public Builder setSize(long value) {
        result.hasSize = true;
        result.size_ = value;
        return this;
      }
      public Builder clearSize() {
        result.hasSize = false;
        result.size_ = 0L;
        return this;
      }
      
      // optional int64 memorysize = 11;
      public boolean hasMemorysize() {
        return result.hasMemorysize();
      }
      public long getMemorysize() {
        return result.getMemorysize();
      }
      public Builder setMemorysize(long value) {
        result.hasMemorysize = true;
        result.memorysize_ = value;
        return this;
      }
      public Builder clearMemorysize() {
        result.hasMemorysize = false;
        result.memorysize_ = 0L;
        return this;
      }
      
      // optional double cameraRollOffset = 12;
      public boolean hasCameraRollOffset() {
        return result.hasCameraRollOffset();
      }
      public double getCameraRollOffset() {
        return result.getCameraRollOffset();
      }
      public Builder setCameraRollOffset(double value) {
        result.hasCameraRollOffset = true;
        result.cameraRollOffset_ = value;
        return this;
      }
      public Builder clearCameraRollOffset() {
        result.hasCameraRollOffset = false;
        result.cameraRollOffset_ = 0D;
        return this;
      }
      
      // optional double cameraTiltOffset = 13;
      public boolean hasCameraTiltOffset() {
        return result.hasCameraTiltOffset();
      }
      public double getCameraTiltOffset() {
        return result.getCameraTiltOffset();
      }
      public Builder setCameraTiltOffset(double value) {
        result.hasCameraTiltOffset = true;
        result.cameraTiltOffset_ = value;
        return this;
      }
      public Builder clearCameraTiltOffset() {
        result.hasCameraTiltOffset = false;
        result.cameraTiltOffset_ = 0D;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:naothmessages.CameraInfo)
    }
    
    static {
      defaultInstance = new CameraInfo(true);
      de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:naothmessages.CameraInfo)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_naothmessages_CameraInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_naothmessages_CameraInfo_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\020CameraInfo.proto\022\rnaothmessages\"\360\002\n\nCa" +
      "meraInfo\022\027\n\017resolutionWidth\030\001 \002(\005\022\030\n\020res" +
      "olutionHeight\030\002 \002(\005\022<\n\010cameraID\030\004 \001(\0162\"." +
      "naothmessages.CameraInfo.CameraID:\006botto" +
      "m\022\023\n\013focalLength\030\005 \001(\001\022\031\n\021openingAngleWi" +
      "dth\030\006 \001(\001\022\032\n\022openingAngleHeight\030\007 \001(\001\022\026\n" +
      "\016opticalCenterX\030\010 \001(\001\022\026\n\016opticalCenterY\030" +
      "\t \001(\001\022\014\n\004size\030\n \001(\003\022\022\n\nmemorysize\030\013 \001(\003\022" +
      "\030\n\020cameraRollOffset\030\014 \001(\001\022\030\n\020cameraTiltO" +
      "ffset\030\r \001(\001\"\037\n\010CameraID\022\007\n\003top\020\000\022\n\n\006bott",
      "om\020\001B8\n\'de.hu_berlin.informatik.ki.nao.m" +
      "essagesB\rCameraInfoMsg"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_naothmessages_CameraInfo_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_naothmessages_CameraInfo_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_naothmessages_CameraInfo_descriptor,
              new java.lang.String[] { "ResolutionWidth", "ResolutionHeight", "CameraID", "FocalLength", "OpeningAngleWidth", "OpeningAngleHeight", "OpticalCenterX", "OpticalCenterY", "Size", "Memorysize", "CameraRollOffset", "CameraTiltOffset", },
              de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo.class,
              de.hu_berlin.informatik.ki.nao.messages.CameraInfoMsg.CameraInfo.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
