/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DebugRequestPanel.java
 *
 * Created on 29.10.2010, 15:15:34
 */
package de.hu_berlin.informatik.ki.nao.dialogs;

import de.hu_berlin.informatik.ki.nao.Dialog;
import de.hu_berlin.informatik.ki.nao.RobotControlGUI;
import de.hu_berlin.informatik.ki.nao.checkboxtree.CheckboxTree;
import de.hu_berlin.informatik.ki.nao.checkboxtree.SelectableTreeNode;
import de.hu_berlin.informatik.ki.nao.interfaces.MessageServerProvider;
import de.hu_berlin.informatik.ki.nao.manager.DebugRequestManager;
import de.hu_berlin.informatik.ki.nao.manager.ObjectListener;
import de.hu_berlin.informatik.ki.nao.server.Command;
import de.hu_berlin.informatik.ki.nao.server.CommandSender;
import java.awt.BorderLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JPanel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import net.xeoh.plugins.base.annotations.PluginImplementation;
import net.xeoh.plugins.base.annotations.events.Init;
import net.xeoh.plugins.base.annotations.injections.InjectPlugin;

/**
 *
 * @author thomas
 */
@PluginImplementation
public class DebugRequestPanel extends javax.swing.JPanel
  implements CommandSender, Dialog, ObjectListener<String[]>
{

  @InjectPlugin
  public RobotControlGUI parent;
  @InjectPlugin
  public MessageServerProvider msgServer;
  @InjectPlugin
  public DebugRequestManager dbgRequestManager;
  private CheckboxTree debugRequestTree;

  /** Creates new form DebugRequestPanel */
  public DebugRequestPanel()
  {
    initComponents();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    toolbarMain = new javax.swing.JToolBar();
    btRefresh = new javax.swing.JToggleButton();

    setLayout(new java.awt.BorderLayout());

    toolbarMain.setRollover(true);

    btRefresh.setText("Refresh");
    btRefresh.setFocusable(false);
    btRefresh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btRefresh.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btRefresh.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btRefreshActionPerformed(evt);
      }
    });
    toolbarMain.add(btRefresh);

    add(toolbarMain, java.awt.BorderLayout.PAGE_START);
  }// </editor-fold>//GEN-END:initComponents

  private void btRefreshActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btRefreshActionPerformed
  {//GEN-HEADEREND:event_btRefreshActionPerformed
    
    if (btRefresh.isSelected())
    {
      if (parent.checkConnected())
      {
        dbgRequestManager.addListener(this);
        debugRequestTree.clear();
      }
      else
      {
        btRefresh.setSelected(false);
      }
    }
    else
    {
      dbgRequestManager.removeListener(this);
    }

  }//GEN-LAST:event_btRefreshActionPerformed
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JToggleButton btRefresh;
  private javax.swing.JToolBar toolbarMain;
  // End of variables declaration//GEN-END:variables

  @Init
  public void init()
  {
    debugRequestTree = new CheckboxTree();

    debugRequestTree.insertPath("trajectory/mypath/debug_request1");
    debugRequestTree.insertPath("trajectory/mypath/debug_request2");
    debugRequestTree.insertPath("debug/mypath/debug_request1");

    add(debugRequestTree, BorderLayout.CENTER);

    debugRequestTree.addMouseListener(new MouseAdapter()
    {

      @Override
      public void mouseClicked(MouseEvent e)
      {
        TreePath path = debugRequestTree.getPathForLocation(e.getX(), e.getY());
        if(path != null)
        {
          SelectableTreeNode node = (SelectableTreeNode) path.getLastPathComponent();
          sendCommand(path, node.isSelected());
        }
      }

    });
  }

  private void sendCommand(TreePath treePath, boolean enable)
  {
    Object[] path = treePath.getPath();
    if (path.length < 2)
    {
      return;
    }
    String debugRequestName = path[1].toString();

    for (int i = 2; i < path.length; i++)
    {
      debugRequestName += ":" + path[i];
    }//end for

    Command command = new Command();
    command.setName(debugRequestName);
    String arg = enable ? "on" : "off";
    command.addArg(arg);

    System.err.println(debugRequestName + " " + arg);
    send(command);
  }

  private void send(Command command)
  {
    if (parent.checkConnected())
    {
      msgServer.getMessageServer().executeSingleCommand(this, command);
    }
  }

  @Override
  public JPanel getPanel()
  {
    return this;
  }

  @Override
  public void dispose()
  {
    remove(debugRequestTree);
  }

  @Override
  public void handleResponse(byte[] result, Command originalCommand)
  {
    System.out.println("handleResponse: " + new String(result));
  }

  @Override
  public void handleError(int code)
  {
    // TODO: handle errors
    System.err.println("handleError: " + code);
  }

  @Override
  public Command getCurrentCommand()
  {
    return new Command("ping");
  }

  @Override
  public void newObjectReceived(String[] object)
  {
    //extendedCheckboxTree.getCheckingModel().setCheckingMode(CheckingMode.SIMPLE);
    for (String str : object)
    {
      String[] tokens = str.split("\\|");

      String tooltip = "NO COMMENT";
      if (tokens.length >= 3)
      {
        tooltip = tokens[2];

      }
      if (tokens.length >= 2)
      {
        boolean selected = tokens[1].equals("1");
        debugRequestTree.insertPath(tokens[0], ':');
        SelectableTreeNode n = debugRequestTree.getNode(tokens[0], ':');
        n.setSelected(selected);
        //extendedCheckboxTree.addPath(tokens[0], tooltip, selected);
      }
    }//end for
    //extendedCheckboxTree.getCheckingModel().setCheckingMode(CheckingMode.PROPAGATE_PRESERVING_UNCHECK);

    btRefresh.setSelected(false);
    dbgRequestManager.removeListener(this);
  }

  @Override
  public void errorOccured(String cause)
  {
    // TODO: handle error
  }
}
