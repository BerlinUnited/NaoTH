/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DebugRequestPanel.java
 *
 * Created on 29.10.2010, 15:15:34
 */
package de.hu_berlin.informatik.ki.nao.dialogs;

import de.hu_berlin.informatik.ki.nao.Dialog;
import de.hu_berlin.informatik.ki.nao.RobotControlGUI;
import de.hu_berlin.informatik.ki.nao.checkboxtree.CheckboxTree;
import de.hu_berlin.informatik.ki.nao.checkboxtree.SelectableTreeNode;
import de.hu_berlin.informatik.ki.nao.interfaces.MessageServerProvider;
import de.hu_berlin.informatik.ki.nao.server.Command;
import de.hu_berlin.informatik.ki.nao.server.CommandSender;
import java.awt.BorderLayout;
import javax.swing.JPanel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import net.xeoh.plugins.base.annotations.PluginImplementation;
import net.xeoh.plugins.base.annotations.events.Init;
import net.xeoh.plugins.base.annotations.injections.InjectPlugin;

/**
 *
 * @author thomas
 */
@PluginImplementation
public class DebugRequestPanel extends javax.swing.JPanel 
  implements CommandSender, Dialog
{

  @InjectPlugin
  public RobotControlGUI parent;
  @InjectPlugin
  public MessageServerProvider msgServer;

  private CheckboxTree debugRequestTree;

  /** Creates new form DebugRequestPanel */
  public DebugRequestPanel()
  {
    initComponents();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    setLayout(new java.awt.BorderLayout());
  }// </editor-fold>//GEN-END:initComponents
  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables

  @Init
  public void init()
  {
    debugRequestTree = new CheckboxTree();

    debugRequestTree.insertPath("trajectory/mypath/debug_request1");
    debugRequestTree.insertPath("trajectory/mypath/debug_request2");
    debugRequestTree.insertPath("debug/mypath/debug_request1");

    add(debugRequestTree, BorderLayout.CENTER);
    debugRequestTree.addTreeSelectionListener(new TreeSelectionListener()
    {

      @Override
      public void valueChanged(TreeSelectionEvent e)
      {
        SelectableTreeNode node = (SelectableTreeNode) e.getPath().getLastPathComponent();
        sendCommand(e.getPath(), node.isSelected());
      }
    });
  }

  private void sendCommand(TreePath treePath, boolean enable)
  {
    Object[] path = treePath.getPath();
    if (path.length < 2)
    {
      return;
    }
    String debugRequestName = path[1].toString();

    for (int i = 2; i < path.length; i++)
    {
      debugRequestName += ":" + path[i];
    }//end for

    Command command = new Command();
    command.setName(debugRequestName);
    String arg = enable ? "on" : "off";
    command.addArg(arg);

    System.err.println(debugRequestName + " " + arg);
    send(command);
  }

  private void send(Command command)
  {
    if (parent.checkConnected())
    {
      msgServer.getMessageServer().executeSingleCommand(this, command);
    }
  }

  @Override
  public JPanel getPanel()
  {
    return this;
  }

  @Override
  public void dispose()
  {
    remove(debugRequestTree);
  }

  @Override
  public void handleResponse(byte[] result, Command originalCommand)
  {
  }

  @Override
  public void handleError(int code)
  {
    // TODO: handle errors
  }

  @Override
  public Command getCurrentCommand()
  {
    return new Command("ping");
  }
}
