/*
 * Modify.java
 *
 * Created on 28.06.2009, 22:00:10
 */

package de.naoth.rc.dialogs;


import com.google.protobuf.InvalidProtocolBufferException;
import de.naoth.rc.RobotControl;
import de.naoth.rc.components.treetable.ModifyDataModel;
import de.naoth.rc.components.treetable.ModifyDataModel.ModifyDataNode;
import de.naoth.rc.components.treetable.TreeTable;
import de.naoth.rc.core.dialog.AbstractDialog;
import de.naoth.rc.core.dialog.DialogPlugin;
import de.naoth.rc.core.dialog.RCDialog;
import de.naoth.rc.core.manager.ObjectListener;
import de.naoth.rc.core.manager.SwingCommandExecutor;
import de.naoth.rc.manager.GenericManagerFactory;
import de.naoth.rc.messages.Representations;

import de.naoth.rc.server.Command;
import java.awt.Color;
import java.awt.Component;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import net.xeoh.plugins.base.annotations.PluginImplementation;
import net.xeoh.plugins.base.annotations.injections.InjectPlugin;

/**
 *
 * @author heinrich
 */
public class Modify extends AbstractDialog
{
    private static final Command commandCognitionModifyList = new Command("Cognition:representation:get").addArg("DebugModify");
    private static final Command commandMotionModifyList = new Command("Motion:representation:get").addArg("DebugModify");
    
    Command commandToExecute = null;

    @RCDialog(category = RCDialog.Category.Debug, name = "Modify")
    @PluginImplementation
    public static class Plugin extends DialogPlugin<Modify>
    {
        @InjectPlugin
        public static RobotControl parent;
        @InjectPlugin
        public static SwingCommandExecutor commandExecutor;
        @InjectPlugin
        public static GenericManagerFactory genericManagerFactory;
    }

    private ModifyDataModel treeTableModel = new ModifyDataModel();
    private TreeTable myTreeTable = new TreeTable(treeTableModel);
    
    ModifyUpdater modifyUpdaterCognition = new ModifyUpdater("Cognition");
    ModifyUpdater modifyUpdaterMotion = new ModifyUpdater("Motion");
    
    /** Creates new form Modify */
    public Modify() {
      initComponents();
      
      jScrollPane2.setViewportView(myTreeTable);

      TableColumn modifyColumn = myTreeTable.getColumn("Modify");
      modifyColumn.setMaxWidth(50);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        btRefresh = new javax.swing.JToggleButton();
        jScrollPane2 = new javax.swing.JScrollPane();

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        btRefresh.setText("Refresh");
        btRefresh.setFocusable(false);
        btRefresh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btRefresh.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRefreshActionPerformed(evt);
            }
        });
        jToolBar1.add(btRefresh);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRefreshActionPerformed
  
      if(btRefresh.isSelected())
      {
        if(Plugin.parent.checkConnected())
        {
          // HACK: recreate the whole table
          treeTableModel = new ModifyDataModel();
          myTreeTable = new TreeTable(treeTableModel);
          myTreeTable.getColumn("Modify").setMaxWidth(50);
          //myTreeTable.getTree().setRootVisible(false);
          jScrollPane2.setViewportView(myTreeTable);
      
          Plugin.genericManagerFactory.getManager(commandCognitionModifyList).addListener(modifyUpdaterCognition);
          Plugin.genericManagerFactory.getManager(commandMotionModifyList).addListener(modifyUpdaterMotion);
        } else {
          btRefresh.setSelected(false);
        }
      }
      else
      {
        Plugin.genericManagerFactory.getManager(commandCognitionModifyList).removeListener(modifyUpdaterCognition);
        Plugin.genericManagerFactory.getManager(commandMotionModifyList).removeListener(modifyUpdaterMotion);
      }
    }//GEN-LAST:event_btRefreshActionPerformed


  private class FlagModifiedListener implements ModifyDataModel.ValueChangedListener
  {
      private final String name;
      private final String prefix;
      
      FlagModifiedListener(String name, String prefix)
      {
          this.name = name;
          this.prefix = prefix;
      }
      
    @Override
    public void valueChanged(boolean enabled, double value)
    {
        Command command = new Command(prefix + ":representation:set").addArg("DebugModify",
            Representations.DebugModify.newBuilder().addValueMap(
                Representations.DebugModify.ModifyValue.newBuilder().setName(name).setModify(enabled).setValue(value)
            ).build().toByteArray()
        );
            
        Plugin.commandExecutor.executeCommand(new PrintObjectListener(), command);
    }
  }//end class FlagModifiedListener


  class ModifyUpdater implements ObjectListener<byte[]>
  {
    String rootName;

    public ModifyUpdater(String rootName) {
        this.rootName = rootName;
    }
    
    private void updateTree(Representations.DebugModify debugModify) {
        for(Representations.DebugModify.ModifyValue v: debugModify.getValueMapList()) 
        {
            ModifyDataNode node = treeTableModel.insertPath(String.format("[%s]:%s",rootName,v.getName()), ':');

            if(v.hasModify()) {
                node.enabled = v.getModify();
            }

            if(v.hasValue()) {
                node.value = v.getValue();
            }

            if (node.enabledListener == null) {
                node.enabledListener = new FlagModifiedListener(v.getName(), rootName);
            }
        }
        
        myTreeTable.expandRoot();
        myTreeTable.revalidate();
        myTreeTable.repaint();
    }

       @Override
      public void newObjectReceived(byte[] object) 
      {
          try {
            Representations.DebugModify debugModify = Representations.DebugModify.parseFrom(object);
            SwingUtilities.invokeLater(()->updateTree(debugModify));
          } catch (InvalidProtocolBufferException e) {
              dispose();
              Logger.getLogger(Modify.class.getName()).log(Level.SEVERE, new String(object), e);
              JOptionPane.showMessageDialog(Modify.this, e.getLocalizedMessage(), "Error", JOptionPane.ERROR_MESSAGE);
          }
          
        //myTreeTable.getTree().expandPath(new TreePath(myTreeTable.getTree().getModel().getRoot()));
      }

        @Override
        public void errorOccured(String cause)
        {
          dispose();
        }
  }
  
  class PrintObjectListener implements ObjectListener<byte[]>
  {
        @Override
        public void newObjectReceived(byte[] object) {
            System.out.println(new String(object));
        }

        @Override
        public void errorOccured(String cause) {
            System.err.println(cause);
        }
  }
  

  class ColorRenderer extends DefaultTableCellRenderer
  {
    public ColorRenderer() {
      setOpaque(true);
    }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value,boolean isSelected, boolean hasFocus, int row, int column)
    {
      Component comp = super.getTableCellRendererComponent(
                      table,  value, isSelected, hasFocus, row, column);

      boolean columnValue = ((Boolean)table.getValueAt(row, table.getColumnModel().getColumnIndex("Modify")));

      if (columnValue) {
        setBackground(new Color(1.0f,0.8f,1.0f));
      } else {
        setBackground(null);
      }
      return comp;
    }//end getTableCellRendererComponent
  }//end ColorRenderer

  @Override
  public void dispose()
  {
    Plugin.genericManagerFactory.getManager(commandCognitionModifyList).removeListener(modifyUpdaterCognition);
    Plugin.genericManagerFactory.getManager(commandMotionModifyList).removeListener(modifyUpdaterMotion);
    this.btRefresh.setSelected(false);
  }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btRefresh;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

}
