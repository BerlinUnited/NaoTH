/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Modify.java
 *
 * Created on 28.06.2009, 22:00:10
 */

package de.naoth.rc.dialogs;


import de.naoth.rc.RobotControl;
import de.naoth.rc.components.treetable.ModifyDataModel;
import de.naoth.rc.components.treetable.ModifyDataModel.ModifyDataNode;
import de.naoth.rc.components.treetable.TreeTable;
import de.naoth.rc.core.dialog.AbstractDialog;
import de.naoth.rc.core.dialog.Dialog;
import de.naoth.rc.core.dialog.DialogPlugin;
import de.naoth.rc.core.manager.ObjectListener;
import de.naoth.rc.manager.GenericManagerFactory;

import de.naoth.rc.server.Command;
import de.naoth.rc.server.CommandSender;
import java.awt.Color;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.tree.TreePath;
import net.xeoh.plugins.base.annotations.PluginImplementation;
import net.xeoh.plugins.base.annotations.injections.InjectPlugin;

/**
 *
 * @author admin
 */
public class Modify extends AbstractDialog
        implements Dialog, ObjectListener<byte[]>, CommandSender
{
    private static final Command getModifyCommand = new Command("modify:list");
    private static final Command setModifyCommand = new Command("modify:set");
    private static final Command releaseModifyCommand = new Command("modify:release");

    Command commandToExecute = null;

    @PluginImplementation
    public static class Plugin extends DialogPlugin<Modify>
    {
        @InjectPlugin
        public static RobotControl parent;
        @InjectPlugin
        public static GenericManagerFactory genericManagerFactory;
    }

    private ModifyDataModel treeTableModel = new ModifyDataModel();
    private TreeTable myTreeTable = new TreeTable(treeTableModel);
    
    /** Creates new form Modify */
    public Modify() {
      initComponents();
      
      jScrollPane2.setViewportView(myTreeTable);

      TableColumn modifyColumn = myTreeTable.getColumn("Modify");
      modifyColumn.setMaxWidth(50);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        btRefresh = new javax.swing.JToggleButton();
        jScrollPane2 = new javax.swing.JScrollPane();

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        btRefresh.setText("Refresh");
        btRefresh.setFocusable(false);
        btRefresh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btRefresh.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRefreshActionPerformed(evt);
            }
        });
        jToolBar1.add(btRefresh);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRefreshActionPerformed
  
      if(btRefresh.isSelected())
      {
        if(Plugin.parent.checkConnected())
        {
          // HACK: recreate the whole table
          treeTableModel = new ModifyDataModel();
          myTreeTable = new TreeTable(treeTableModel);
          myTreeTable.getColumn("Modify").setMaxWidth(50);
          jScrollPane2.setViewportView(myTreeTable);
      
          Plugin.genericManagerFactory.getManager(getModifyCommand).addListener(this);
        } else {
          btRefresh.setSelected(false);
        }
      }
      else
      {
        Plugin.genericManagerFactory.getManager(getModifyCommand).removeListener(this);
      }
    }//GEN-LAST:event_btRefreshActionPerformed

  @Override
  public JPanel getPanel()
  {
    return this;
  }


  private class FlagModifiedListener implements ModifyDataModel.ValueChangedListener
  {
      private String name;
      
      FlagModifiedListener(String name)
      {
          this.name = name;
      }
      
    @Override
    public void valueChanged(boolean enabled, double value)
    {
        if(!enabled)
        {
            Command command = new Command("modify:release").addArg(name, "");
            sendCommand(command);
        }
        else
        {
            Command command = new Command("modify:set").addArg(name, ""+value);
            sendCommand(command);
        }
    }
  }//end class FlagModifiedListener


  @Override
  public void errorOccured(String cause)
  {
    btRefresh.setSelected(false);
    Plugin.genericManagerFactory.getManager(getModifyCommand).removeListener(this);
  }

  @Override
  public void newObjectReceived(byte[] object)
  {
    String str = new String(object);
    String[] modifies = str.split("(\n|\t| |\r)+");

    try{
      for(String msg: modifies)
      {
        String[] s = msg.split("(( |\t)*=( |\t)*)|;");

        ModifyDataNode node = treeTableModel.insertPath(s[1], ':');
        node.enabled = Integer.parseInt(s[0]) > 0;
        node.value = Double.parseDouble(s[2]);

        if(node.enabledListener == null) {
            node.enabledListener = new FlagModifiedListener(s[1]);
        }
      }//end for
    }catch(Exception e)
    {
      JOptionPane.showMessageDialog(null, e, "Error", JOptionPane.ERROR_MESSAGE);
      dispose();
    }

    myTreeTable.getTree().expandPath(new TreePath(myTreeTable.getTree().getModel().getRoot()));
    myTreeTable.getTree().setRootVisible(false);
    myTreeTable.revalidate();
    myTreeTable.repaint();
  }//end newObjectReceived
  int k = 0;

  private void sendCommand(Command command)
  {
    commandToExecute = command;
    Plugin.parent.getMessageServer().executeSingleCommand(this, command);
  }

  @Override
  public Command getCurrentCommand() {
    return commandToExecute;
  }

  @Override
  public void handleError(int code) {
    this.btRefresh.setSelected(false);
    JOptionPane.showMessageDialog(this,
              "Error occured, code " + code, "ERROR", JOptionPane.ERROR_MESSAGE);
  }

  @Override
  public void handleResponse(byte[] result, Command originalCommand) {
    System.out.println(new String(result));
    if(originalCommand.getName().equals(setModifyCommand.getName()))
    {
      System.out.println(new String(result));
    }else if(originalCommand.getName().equals(releaseModifyCommand.getName()))
    {
      
    }
  }

  class ColorRenderer extends DefaultTableCellRenderer
  {
    public ColorRenderer() {
      setOpaque(true);
    }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value,boolean isSelected, boolean hasFocus, int row, int column)
    {
      Component comp = super.getTableCellRendererComponent(
                      table,  value, isSelected, hasFocus, row, column);

      boolean columnValue = ((Boolean)table.getValueAt(row, table.getColumnModel().getColumnIndex("Modify"))).booleanValue();

      if (columnValue) {
        setBackground(new Color(1.0f,0.8f,1.0f));
      } else {
        setBackground(null);
      }
      return comp;
    }//end getTableCellRendererComponent
  }//end ColorRenderer

  @Override
  public void dispose()
  {
    Plugin.genericManagerFactory.getManager(getModifyCommand).removeListener(this);
  }//end dispose

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btRefresh;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

}
