/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Modify.java
 *
 * Created on 28.06.2009, 22:00:10
 */

package de.naoth.rc.dialogs;

import de.naoth.rc.AbstractDialog;
import de.naoth.rc.Dialog;
import de.naoth.rc.RobotControl;
import de.naoth.rc.manager.GenericManagerFactory;
import de.naoth.rc.manager.ObjectListener;
import de.naoth.rc.server.Command;
import de.naoth.rc.server.CommandSender;
import java.awt.Color;
import java.awt.Component;
import javax.swing.CellEditor;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import net.xeoh.plugins.base.annotations.PluginImplementation;
import net.xeoh.plugins.base.annotations.injections.InjectPlugin;

/**
 *
 * @author admin
 */
@PluginImplementation
public class Modify extends AbstractDialog
        implements Dialog, ObjectListener<byte[]>, CommandSender
{

    private static Command getModifyCommand = new Command("modify:list");
    private static Command setModifyCommand = new Command("modify:set");
    private static Command releaseModifyCommand = new Command("modify:release");

    Command commandToExecute = null;

    
    @InjectPlugin
    public RobotControl parent;
    @InjectPlugin
    public GenericManagerFactory genericManagerFactory;



    /** Creates new form Modify */
    public Modify() {
      initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jToolBar1 = new javax.swing.JToolBar();
    btRefresh = new javax.swing.JToggleButton();
    jScrollPane1 = new javax.swing.JScrollPane();
    modifyTable = new javax.swing.JTable();

    jToolBar1.setRollover(true);

    btRefresh.setText("Refresh");
    btRefresh.setFocusable(false);
    btRefresh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btRefresh.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btRefresh.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btRefreshActionPerformed(evt);
      }
    });
    jToolBar1.add(btRefresh);

    modifyTable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {

      },
      new String [] {
        "Modify", "Name", "Value"
      }
    ) {
      Class[] types = new Class [] {
        java.lang.Boolean.class, java.lang.String.class, java.lang.Double.class
      };
      boolean[] canEdit = new boolean [] {
        true, false, true
      };

      public Class getColumnClass(int columnIndex) {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
      }
    });
    modifyTable.setRowSelectionAllowed(false);
    modifyTable.getTableHeader().setReorderingAllowed(false);
    jScrollPane1.setViewportView(modifyTable);
    modifyTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    modifyTable.getColumnModel().getColumn(0).setResizable(false);
    modifyTable.getColumnModel().getColumn(0).setPreferredWidth(50);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
      .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

    private void btRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRefreshActionPerformed

      if(btRefresh.isSelected())
      {
        if(parent.checkConnected())
        {
          genericManagerFactory.getManager(getModifyCommand).addListener(this);
          //parent.getGenericManager(getModifyCommand).addListener(this);
        }
        else
        {
          btRefresh.setSelected(false);
        }
      }
      else
      {
        genericManagerFactory.getManager(getModifyCommand).removeListener(this);
        //parent.getGenericManager(getModifyCommand).removeListener(this);
      }
    }//GEN-LAST:event_btRefreshActionPerformed

  @Override
  public JPanel getPanel()
  {
    return this;
  }

  public void init()
  {
  }//end init

  
  private class ValueModifiedListener implements CellEditorListener
  {
    @Override
    public void editingStopped(ChangeEvent e) {
      String name = (String) modifyTable.getValueAt(modifyTable.getSelectedRow(), 1);
      Object value = ((CellEditor)e.getSource()).getCellEditorValue();

      Command command = new Command("modify:set").addArg(name, ""+value);
      sendCommand(command);
    }

    @Override
    public void editingCanceled(ChangeEvent e) {
      // do nothing
    }
  }//end class ValueModifiedListener


  private class FlagModifiedListener implements CellEditorListener
  {
    @Override
    public void editingStopped(ChangeEvent e) {
      String name = (String) modifyTable.getValueAt(modifyTable.getSelectedRow(), 1);
      boolean fixed = ((Boolean)((CellEditor)e.getSource()).getCellEditorValue()).booleanValue();

      if(!fixed)
      {
        Command command = new Command("modify:release").addArg(name, "");
        sendCommand(command);
      }
      else
      {
        Object value = modifyTable.getValueAt(modifyTable.getSelectedRow(), 2);
        Command command = new Command("modify:set").addArg(name, ""+value);
        sendCommand(command);
      }
    }

    @Override
    public void editingCanceled(ChangeEvent e) {
      // do nothing
    }
  }//end class FlagModifiedListener

  

  private void addModify(boolean modified, String name, double value)
  {
    for(int i = 0; i < this.modifyTable.getRowCount(); i++)
    {
      String field = ((String)this.modifyTable.getValueAt(i, 1));
      
      if(field != null && field.equals(name))
      {
        this.modifyTable.setValueAt(value, i, 2);
        this.modifyTable.setValueAt(modified, i, 0);
        return;
      }//end if
    }//end for

    Object[] rowData = new Object[]{modified, name, value};
    ((DefaultTableModel)this.modifyTable.getModel()).addRow(rowData);

    if(this.modifyTable.getRowCount() == 1)
    {
      this.modifyTable.getCellEditor(this.modifyTable.getRowCount()-1, 0).addCellEditorListener(new FlagModifiedListener());
      this.modifyTable.getCellEditor(this.modifyTable.getRowCount()-1, 2).addCellEditorListener(new ValueModifiedListener());
    }
  }//end addModify

  @Override
  public void errorOccured(String cause)
  {
    btRefresh.setSelected(false);
    genericManagerFactory.getManager(getModifyCommand).removeListener(this);
    //parent.getGenericManager(getModifyCommand).removeListener(this);

    JOptionPane.showMessageDialog(null,
      cause, "Error", JOptionPane.ERROR_MESSAGE);
  }//end errorOccured

  @Override
  public void newObjectReceived(byte[] object)
  {
    String str = new String(object);
    String[] modifies = str.split("(\n|\t| |\r)+");

    try{
      for(String msg: modifies)
      {
        String[] s = msg.split("(( |\t)*=( |\t)*)|;");
        addModify(Integer.parseInt(s[0]) > 0, s[1], Double.parseDouble(s[2]));
      }//end for
    }catch(Exception e)
    {
      JOptionPane.showMessageDialog(null, e, "Error", JOptionPane.ERROR_MESSAGE);
      dispose();
    }
  }//end newObjectReceived

  private void sendCommand(Command command)
  {
    commandToExecute = command;
    parent.getMessageServer().executeSingleCommand(this, command);
  }

  @Override
  public Command getCurrentCommand() {
    return commandToExecute;
  }

  @Override
  public void handleError(int code) {
    this.btRefresh.setSelected(false);
    JOptionPane.showMessageDialog(this,
              "Error occured, code " + code, "ERROR", JOptionPane.ERROR_MESSAGE);
  }

  @Override
  public void handleResponse(byte[] result, Command originalCommand) {
    System.out.println(new String(result));
    if(originalCommand.getName().equals(setModifyCommand.getName()))
    {
      System.out.println(new String(result));
    }else if(originalCommand.getName().equals(releaseModifyCommand.getName()))
    {
      
    }
  }




  class ColorRenderer extends DefaultTableCellRenderer
  {
    public ColorRenderer()
    {
      setOpaque(true);
    }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value,boolean isSelected, boolean hasFocus, int row, int column)
    {
      Component comp = super.getTableCellRendererComponent(
                      table,  value, isSelected, hasFocus, row, column);

      boolean columnValue = ((Boolean)table.getValueAt(row, table.getColumnModel().getColumnIndex("Modify"))).booleanValue();

      if (columnValue)
      {
        setBackground(new Color(1.0f,0.8f,1.0f));
      }
      else
      {
        setBackground(null);
      }
      return comp;
    }//end getTableCellRendererComponent
  }//end ColorRenderer

  @Override
  public void dispose()
  {
    genericManagerFactory.getManager(getModifyCommand).removeListener(this);
    //System.out.println("Dispose is not implemented for: " + this.getClass().getName());
  }//end dispose

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JToggleButton btRefresh;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JToolBar jToolBar1;
  private javax.swing.JTable modifyTable;
  // End of variables declaration//GEN-END:variables

}
