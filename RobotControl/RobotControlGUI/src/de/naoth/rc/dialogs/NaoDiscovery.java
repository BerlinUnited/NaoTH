/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NaoDiscovery.java
 *
 * Created on 20.01.2012, 20:05:44
 */
package de.naoth.rc.dialogs;

import javax.jmdns.ServiceEvent;
import de.naoth.rc.AbstractDialog;
import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Logger;
import javax.jmdns.ServiceInfo;
import javax.jmdns.ServiceListener;
import net.jcores.jre.interfaces.functions.F0R;
import de.naoth.rc.naodiscovery.NaoWrapper;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import javax.jmdns.JmDNS;
import javax.swing.DefaultListModel;
import net.xeoh.plugins.base.annotations.PluginImplementation;
import static net.jcores.jre.CoreKeeper.$;

/**
 *
 * @author thomas
 */
@PluginImplementation
public class NaoDiscovery  extends AbstractDialog implements ServiceListener
{

  private JmDNS jmdns;
  private List<NaoWrapper> services;
  private final DefaultListModel naoModel;
  
  /** Creates new form NaoDiscovery */
  public NaoDiscovery()
  {
    initComponents();
    
    naoModel = new DefaultListModel();
    lstNaos.setModel(naoModel);

    services = Collections.synchronizedList(new ArrayList<NaoWrapper>());
    try
    {
      jmdns = JmDNS.create();

      jmdns.addServiceListener("_nao._tcp.local.", (ServiceListener) this);

      $.async(new F0R<String>()
      {

        @Override
        public String f()
        {
          for (ServiceInfo info : jmdns.list("_nao._tcp.local.", 1000))
          {
            services.add(new NaoWrapper(info));
          }
          updateList();
          return "";
        }
      });
    }
    catch (IOException ex)
    {
      Logger.getLogger(NaoDiscovery.class.getName()).log(Level.SEVERE, null, ex);
    }
  }
  
  private void updateList()
  {
    synchronized (naoModel)
    {
      naoModel.clear();
      for (NaoWrapper nao : services)
      {
        if (nao.isValid())
        {
          naoModel.addElement(nao);
        }
      }

    }
  }
  
  @Override
  public void serviceAdded(ServiceEvent event)
  {
    services.add(new NaoWrapper(event.getInfo()));
    updateList();
  }

  @Override
  public void serviceRemoved(ServiceEvent event)
  {
    services.remove(new NaoWrapper(event.getInfo()));
    updateList();
  }

  @Override
  public void serviceResolved(ServiceEvent event)
  {
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstNaos = new javax.swing.JList();

        jScrollPane1.setViewportView(lstNaos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList lstNaos;
    // End of variables declaration//GEN-END:variables
}
