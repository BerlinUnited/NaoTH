/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NaoDiscovery.java
 *
 * Created on 20.01.2012, 20:05:44
 */
package de.naoth.rc.dialogs;

import java.io.BufferedInputStream;
import com.jcraft.jsch.JSchException;
import javax.jmdns.ServiceEvent;
import de.naoth.rc.AbstractDialog;
import de.naoth.rc.ExceptionDialog;
import de.naoth.rc.Helper;
import de.naoth.rc.RobotControl;
import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Logger;
import javax.jmdns.ServiceInfo;
import javax.jmdns.ServiceListener;
import net.jcores.jre.interfaces.functions.F0R;
import de.naoth.rc.naodiscovery.NaoWrapper;
import de.naoth.rc.scp.Scp;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.logging.Level;
import javax.jmdns.JmDNS;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import net.xeoh.plugins.base.annotations.PluginImplementation;
import net.xeoh.plugins.base.annotations.injections.InjectPlugin;
import static net.jcores.jre.CoreKeeper.$;
import net.xeoh.plugins.base.annotations.events.Init;

/**
 *
 * @author thomas
 */
@PluginImplementation
public class NaoDiscovery extends AbstractDialog implements ServiceListener
{

  @InjectPlugin
  public RobotControl robotControl;
  private JmDNS jmdns;
  private List<NaoWrapper> services;
  private final DefaultListModel naoModel;

  /**
   * Creates new form NaoDiscovery
   */
  public NaoDiscovery()
  {
    initComponents();

    naoModel = new DefaultListModel();
    lstNaos.setModel(naoModel);

    services = Collections.synchronizedList(new ArrayList<NaoWrapper>());

  }

  private void updateList()
  {
    synchronized(naoModel)
    {
      naoModel.clear();
      for(NaoWrapper nao : services)
      {
        if(nao.isValid())
        {
          naoModel.addElement(nao);
        }
      }

    }
  }

  @Override
  public void init()
  {
    super.init();
    
    
    final NaoDiscovery finalThis = this;

    $.async(new F0R<String>()
    {

      @Override
      public String f()
      {
        try
        {
          jmdns = JmDNS.create();

          jmdns.addServiceListener("_nao._tcp.local.", (ServiceListener) finalThis);


          for(ServiceInfo info : jmdns.list("_nao._tcp.local.", 1000))
          {
            services.add(new NaoWrapper(info));
          }
          updateList();
        }
        catch(IOException ex)
        {
          Logger.getLogger(NaoDiscovery.class.getName()).log(Level.SEVERE, null, ex);
        }
        return "";
      }
    });
  }
  
  

  @Override
  public void serviceAdded(ServiceEvent event)
  {
    services.add(new NaoWrapper(event.getInfo()));
    updateList();
  }

  @Override
  public void serviceRemoved(ServiceEvent event)
  {
    services.remove(new NaoWrapper(event.getInfo()));
    updateList();
  }

  @Override
  public void serviceResolved(ServiceEvent event)
  {
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstNaos = new javax.swing.JList();
        btConnect = new javax.swing.JButton();
        btInit = new javax.swing.JButton();
        panelStatus = new de.naoth.rc.dialogs.panels.StatusPanel();

        lstNaos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstNaosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lstNaos);

        btConnect.setText("Connect");
        btConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConnectActionPerformed(evt);
            }
        });

        btInit.setText("Initialize");
        btInit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btInitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btConnect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btInit)
                .addContainerGap(309, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
            .addComponent(panelStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btConnect)
                    .addComponent(btInit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

  private void connect()
  {
    synchronized(naoModel)
    {
      int i = lstNaos.getSelectedIndex();
      if(i >= 0)
      {
        NaoWrapper w = (NaoWrapper) naoModel.get(i);

        if(robotControl != null)
        {
          try
          {
            robotControl.getMessageServer().connect(
              w.getInfo().getHostAddresses()[0], 5432);
          }
          catch(IOException ex)
          {
            Helper.handleException("Could not connect to robot.", ex);
          }
        }
      }
      else
      {
        JOptionPane.showMessageDialog(this, "No robot selected");
      }
    }
  }

  private void btInitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btInitActionPerformed
  {//GEN-HEADEREND:event_btInitActionPerformed

    synchronized(naoModel)
    {
      int i = lstNaos.getSelectedIndex();
      if(i >= 0)
      {
        final NaoWrapper w = (NaoWrapper) naoModel.get(i);
        int confirmation = JOptionPane.showConfirmDialog(this,
          "Do you really want to reset the robot and initialize it?",
          "Initialize", JOptionPane.YES_NO_OPTION);
        if(confirmation == JOptionPane.YES_OPTION)
        {
          $.async(new F0R<String>()
          {

            @Override
            public String f()
            {
              Scp scp = null;
              try
              {
                panelStatus.setMaxProgress(3);
                panelStatus.setStatus("Connecting", 0);
                scp = new Scp(w.getInfo().getHostAddresses()[0]);

                panelStatus.setStatus("Uploading script", 1);

                // copy a resource to the temporary file
                File tmpScript = File.createTempFile("init", ".sh");
                tmpScript.deleteOnExit();

                BufferedInputStream isScript =
                  new BufferedInputStream(RobotControl.class.getResourceAsStream(
                  "res/init.sh"));
                BufferedOutputStream out =
                  new BufferedOutputStream(new FileOutputStream(tmpScript));
                int c;
                while((c = isScript.read()) > -1)
                {
                  out.write(c);
                }
                out.close();

                scp.recursiveSftpPut(tmpScript, "/tmp/");

                // TODO: copy staging area libs

                // TODO: execute the script


                panelStatus.setStatus("success", 3);
              }
              catch(Exception ex)
              {
                panelStatus.setStatus("failed", 0);
                Helper.handleException(ex);
              }
              finally
              {
                if(scp != null)
                {
                  scp.shutdown();
                }
              }
              return "";
            }
          });

        }
      }
      else
      {
        JOptionPane.showMessageDialog(this, "No robot selected");
      }
    }

  }//GEN-LAST:event_btInitActionPerformed

  private void lstNaosMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_lstNaosMouseClicked
  {//GEN-HEADEREND:event_lstNaosMouseClicked

    if(evt.getClickCount() == 2)
    {
      connect();
    }

  }//GEN-LAST:event_lstNaosMouseClicked

  private void btConnectActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btConnectActionPerformed
  {//GEN-HEADEREND:event_btConnectActionPerformed
    connect();
  }//GEN-LAST:event_btConnectActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btConnect;
    private javax.swing.JButton btInit;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList lstNaos;
    private de.naoth.rc.dialogs.panels.StatusPanel panelStatus;
    // End of variables declaration//GEN-END:variables
}
