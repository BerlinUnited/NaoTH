/*
 * LogfileInspector.java
 *
 * Created on 06.08.2010, 17:01:29
 */

package de.naoth.rc.dialogs;

import de.naoth.rc.AbstractDialog;
import de.naoth.rc.LogSimulator;
import java.io.File;
import javax.swing.JFileChooser;
import net.xeoh.plugins.base.annotations.PluginImplementation;

/**
 *
 * @author Heinrich Mellmann
 */
@PluginImplementation
public class LogfilePlayer extends AbstractDialog 
{
  LogSimulator logSimulator = new LogSimulator();
  
  public LogfilePlayer() {
      initComponents();

      this.fileChooser.setFileFilter(new LogFileFilter());
  }

  @Override
  public void dispose() 
  {
    System.out.println("Dispose is not implemented for: " + this.getClass().getName());
  }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jToolBar1 = new javax.swing.JToolBar();
        openButton = new javax.swing.JButton();
        logSlider = new javax.swing.JSlider();
        fileNameLabel = new javax.swing.JLabel();

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        openButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Open24.gif"))); // NOI18N
        openButton.setToolTipText("Open");
        openButton.setFocusable(false);
        openButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(openButton);

        logSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        logSlider.setEnabled(false);
        logSlider.setPreferredSize(new java.awt.Dimension(480, 23));
        logSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                logSliderStateChanged(evt);
            }
        });
        jToolBar1.add(logSlider);

        fileNameLabel.setText("no file selected");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 637, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fileNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileNameLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
      if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
      {
        this.logSlider.setEnabled(false);
       
        File openedFile = fileChooser.getSelectedFile();
        if(openedFile != null && openedFile.exists()) 
        {
            this.fileNameLabel.setText(openedFile.getAbsolutePath());
            this.logSimulator.openLogFile(openedFile.getAbsolutePath());
            this.logSlider.setMinimum(logSimulator.getMinFrame());
            this.logSlider.setMaximum(logSimulator.getMaxFrame());
            this.logSlider.setEnabled(true);
        }
      }
    }//GEN-LAST:event_openButtonActionPerformed

    private void logSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_logSliderStateChanged
        this.logSimulator.jumpTo(this.logSlider.getValue());
    }//GEN-LAST:event_logSliderStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel fileNameLabel;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JSlider logSlider;
    private javax.swing.JButton openButton;
    // End of variables declaration//GEN-END:variables


  private class LogFileFilter extends javax.swing.filechooser.FileFilter
  {
    @Override
    public boolean accept(File file)
    {
      if (file.isDirectory())
      {
        return true;
      }
      String filename = file.getName();
      return filename.toLowerCase().endsWith(".log");
    }

    @Override
    public String getDescription()
    {
      return "Logfile (*.log)";
    }

    @Override
    public String toString()
    {
      return ".log";
    }
  }//end class LogFileFilter
}//end class LogfileInspector
