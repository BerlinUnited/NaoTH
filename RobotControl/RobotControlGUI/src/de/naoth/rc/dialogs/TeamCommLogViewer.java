/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.naoth.rc.dialogs;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.stream.JsonReader;
import com.google.gson.*;
import de.naoth.rc.RobotControl;
import de.naoth.rc.core.dialog.AbstractDialog;
import de.naoth.rc.core.dialog.DialogPlugin;
import de.naoth.rc.dataformats.SPLMessage;
import de.naoth.rc.drawingmanager.DrawingEventManager;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TreeModelEvent;
import javax.swing.event.TreeModelListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import net.xeoh.plugins.base.annotations.PluginImplementation;
import net.xeoh.plugins.base.annotations.injections.InjectPlugin;

/**
 *
 * @author philipp
 */
public class TeamCommLogViewer extends AbstractDialog {

    @PluginImplementation
    public static class Plugin extends DialogPlugin<TeamCommLogViewer> {

        @InjectPlugin
        public static RobotControl parent;
//        @InjectPlugin
//        public static DrawingEventManager drawingEventManager;
    }//end Plugin
    
    private TreeMap<Long, ArrayList<TeamCommMessage>> messages;
    private DefaultListModel listMessages = new DefaultListModel();
    
    private DefaultMutableTreeNode treeRootNode;
    private DefaultTreeModel treeModel;
    
    
    /**
     * Creates new form TeamCommLogViewer
     */
    public TeamCommLogViewer() {
        initComponents();
        treeRootNode = new DefaultMutableTreeNode("Messages in Timestamp");
        treeModel = new DefaultTreeModel(treeRootNode);
        treeModel.addTreeModelListener(new TreeUpdater());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        teamCommFileChooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        timestampList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        messageTree = new javax.swing.JTree();
        jToolBar1 = new javax.swing.JToolBar();
        btnTCLF = new javax.swing.JButton();

        jPanel1.setLayout(new java.awt.BorderLayout());

        timestampList.setModel(listMessages);
        timestampList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        timestampList.setToolTipText("Message timestamps");
        jScrollPane1.setViewportView(timestampList);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.LINE_START);

        jScrollPane2.setViewportView(messageTree);

        jPanel1.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        btnTCLF.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Open24.gif"))); // NOI18N
        btnTCLF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTCLFActionPerformed(evt);
            }
        });
        jToolBar1.add(btnTCLF);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnTCLFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTCLFActionPerformed
        if(teamCommFileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File f = teamCommFileChooser.getSelectedFile();
            Gson json = new GsonBuilder().create();
            try {
                messages = new TreeMap<>();
                int message_cnt = 0;
                FileReader fr = new FileReader(f);
                JsonReader jr = new JsonReader(fr);
                // TODO: show loading icon / progress bar
                jr.beginArray();
                while (jr.hasNext()) {
                    TeamCommMessage p = json.fromJson(jr, TeamCommMessage.class);
                    if(messages.containsKey(p.timestamp)) {
                        messages.get(p.timestamp).add(p);
                    } else {
                        messages.put(p.timestamp, new ArrayList<TeamCommMessage>(Arrays.asList(p)));
                    }
                    message_cnt++;
                }
                jr.endArray();
                // TODO: show somewhere on the UI?!
                System.out.println("Unique timestamps: " + messages.size() + "; Total messages: " + message_cnt);
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "File not found!", "Not found", JOptionPane.WARNING_MESSAGE);
            } catch (IOException ex) {
                Logger.getLogger(TeamCommLogViewer.class.getName()).log(Level.SEVERE, null, ex);
            }
            showMessages();
        }
    }//GEN-LAST:event_btnTCLFActionPerformed

    private void showMessages() {
        // clear previous loaded messages
        listMessages.clear();
        timestampList.clearSelection();
        timestampList.addListSelectionListener(new SelectionListener());
        
        // add all messages to list (if available)
        if(messages == null || messages.size() == 0) {
            JOptionPane.showMessageDialog(null, "No messeges read ...", "No messages", JOptionPane.INFORMATION_MESSAGE);
        } else {
            for (Map.Entry<Long, ArrayList<TeamCommMessage>> entry : messages.entrySet()) {
                listMessages.addElement(entry.getKey());
            }
        }
    }
    
    public class TeamCommMessage {

        public long timestamp;
        public SPLMessage message;
        public boolean isOpponent;

    }
    
    private class SelectionListener implements ListSelectionListener {
        @Override
        public void valueChanged(ListSelectionEvent lse) {
//            System.out.println(lse.getSource()); // JList
            
            System.out.println(lse.getFirstIndex());
            System.out.println(((JList)lse.getSource()).getSelectedValue());
            
//            messageTree.
        }
    }
    
    private class TreeUpdater implements TreeModelListener {

        @Override
        public void treeNodesChanged(TreeModelEvent tme) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void treeNodesInserted(TreeModelEvent tme) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void treeNodesRemoved(TreeModelEvent tme) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void treeStructureChanged(TreeModelEvent tme) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTCLF;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTree messageTree;
    private javax.swing.JFileChooser teamCommFileChooser;
    private javax.swing.JList<String> timestampList;
    // End of variables declaration//GEN-END:variables
}
