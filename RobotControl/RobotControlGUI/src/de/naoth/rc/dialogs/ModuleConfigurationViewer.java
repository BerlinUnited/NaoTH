/*
 * 
 */

/*
 * ModuleConfigurationViewer.java
 *
 * Created on 02.12.2008, 19:09:17
 */
package de.naoth.rc.dialogs;

import de.naoth.rc.RobotControl;
import de.naoth.rc.components.S20BinaryLookup;
import de.naoth.rc.components.checkboxtree.SelectableTreeNode;
import de.naoth.rc.core.dialog.AbstractDialog;
import de.naoth.rc.core.dialog.DialogPlugin;
import de.naoth.rc.core.manager.ObjectListener;
import de.naoth.rc.dataformats.ModuleConfiguration;
import de.naoth.rc.dataformats.ModuleConfiguration.Node;
import de.naoth.rc.manager.GenericManagerFactory;
import de.naoth.rc.manager.ModuleConfigurationManager;
import de.naoth.rc.server.Command;
import de.naoth.rc.server.CommandSender;
import java.awt.Component;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Scanner;
import javax.swing.JPanel;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import net.xeoh.plugins.base.annotations.events.Init;
import net.xeoh.plugins.base.annotations.PluginImplementation;
import net.xeoh.plugins.base.annotations.injections.InjectPlugin;

/**
 *
 * @author Heinrich Mellmann
 */
public class ModuleConfigurationViewer extends AbstractDialog
        implements ObjectListener<ModuleConfiguration>
{

    @PluginImplementation
    public static class Plugin extends DialogPlugin<ModuleConfigurationViewer>
    {

        @InjectPlugin
        public static RobotControl parent;
        @InjectPlugin
        public static ModuleConfigurationManager moduleConfigurationManager;
        @InjectPlugin
        public static GenericManagerFactory genericManagerFactory;
    }//end Plugin

    private final String commandStringStoreModules = "modules:store";
    private final String commandStringSetModules = "modules:set";

    ModuleConfiguration moduleGraph = null;

    private final S20BinaryLookup cbModulesSearch;
    private final S20BinaryLookup cbRepresentationsSearch;

    public ModuleConfigurationViewer()
    {
        initComponents();

        // search within the comboboxes
        this.cbModulesSearch = new S20BinaryLookup(this.cbModules);
        this.cbRepresentationsSearch = new S20BinaryLookup(this.cbRepresentations);
        // only the leafe nodes can be modified
        this.moduleConfigTree.setNonLeafNodesEditable(false);

        this.modulePanel.setTree(moduleConfigTree);
        this.modulePanel.setProcessName((String) cbProcess.getSelectedItem());

    }

    @Init
    @Override
    public void init()
    {
        Plugin.moduleConfigurationManager.setModuleOwner((String) cbProcess.getSelectedItem());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        fileChooser = new de.naoth.rc.components.ExtendedFileChooser();
        jToolBar1 = new javax.swing.JToolBar();
        jToggleButtonRefresh = new javax.swing.JToggleButton();
        btExport = new javax.swing.JButton();
        btSave = new javax.swing.JButton();
        btSend = new javax.swing.JButton();
        cbProcess = new javax.swing.JComboBox();
        cbModules = new javax.swing.JComboBox();
        cbRepresentations = new javax.swing.JComboBox();
        errorIgnoreToggle = new javax.swing.JToggleButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        modulePanel = new de.naoth.rc.components.SimpleModulePanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jSplitPane3 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        errorList = new javax.swing.JList();
        jScrollPane1 = new javax.swing.JScrollPane();
        checkDescription = new javax.swing.JTextArea();
        jScrollPane = new javax.swing.JScrollPane();
        moduleConfigTree = new de.naoth.rc.components.checkboxtree.CheckboxTree();

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jToggleButtonRefresh.setText("Refresh");
        jToggleButtonRefresh.setFocusable(false);
        jToggleButtonRefresh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonRefresh.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonRefresh.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jToggleButtonRefreshActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButtonRefresh);

        btExport.setText("Export");
        btExport.setToolTipText("export modules graph");
        btExport.setFocusable(false);
        btExport.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btExport.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btExport.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btExportActionPerformed(evt);
            }
        });
        jToolBar1.add(btExport);

        btSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Save24.gif"))); // NOI18N
        btSave.setToolTipText("save the module configuration localy");
        btSave.setFocusable(false);
        btSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btSave.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btSaveActionPerformed(evt);
            }
        });
        jToolBar1.add(btSave);

        btSend.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Export24.gif"))); // NOI18N
        btSend.setToolTipText("save the module configuration on the robot");
        btSend.setFocusable(false);
        btSend.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btSend.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btSend.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btSendActionPerformed(evt);
            }
        });
        jToolBar1.add(btSend);

        cbProcess.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cognition", "Motion" }));
        cbProcess.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cbProcessActionPerformed(evt);
            }
        });
        jToolBar1.add(cbProcess);

        cbModules.setEditable(true);
        cbModules.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<empty>" }));
        cbModules.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cbModulesActionPerformed(evt);
            }
        });
        jToolBar1.add(cbModules);

        cbRepresentations.setEditable(true);
        cbRepresentations.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<empty>" }));
        cbRepresentations.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cbRepresentationsActionPerformed(evt);
            }
        });
        jToolBar1.add(cbRepresentations);

        errorIgnoreToggle.setSelected(true);
        errorIgnoreToggle.setText("ignorelist enabled");
        errorIgnoreToggle.setFocusable(false);
        errorIgnoreToggle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        errorIgnoreToggle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        errorIgnoreToggle.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                errorIgnoreToggleActionPerformed(evt);
            }
        });
        jToolBar1.add(errorIgnoreToggle);

        jSplitPane1.setDividerLocation(600);
        jSplitPane1.setResizeWeight(1.0);
        jSplitPane1.setLeftComponent(modulePanel);

        jSplitPane2.setDividerLocation(300);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jSplitPane3.setDividerLocation(240);
        jSplitPane3.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        errorList.setToolTipText("");
        errorList.setSelectionBackground(new java.awt.Color(255, 255, 255));
        errorList.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                errorListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(errorList);

        jSplitPane3.setLeftComponent(jScrollPane2);

        checkDescription.setColumns(20);
        checkDescription.setRows(5);
        checkDescription.setText("<not connected>");
        jScrollPane1.setViewportView(checkDescription);

        jSplitPane3.setRightComponent(jScrollPane1);

        jSplitPane2.setTopComponent(jSplitPane3);

        jScrollPane.setBorder(null);
        jScrollPane.setPreferredSize(new java.awt.Dimension(200, 322));
        jScrollPane.setViewportView(moduleConfigTree);

        jSplitPane2.setRightComponent(jScrollPane);

        jSplitPane1.setRightComponent(jSplitPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 639, Short.MAX_VALUE)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonRefreshActionPerformed
        if (Plugin.parent.checkConnected())
        {
            if (jToggleButtonRefresh.isSelected())
            {
                Plugin.moduleConfigurationManager.addListener(this);
            }
            else
            {
                Plugin.moduleConfigurationManager.removeListener(this);
            }
        }
        else
        {
            jToggleButtonRefresh.setSelected(false);
        }
}//GEN-LAST:event_jToggleButtonRefreshActionPerformed

    private void btExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExportActionPerformed
        //ExportDialog export = new ExportDialog();
        //export.showExportDialog(this, "Export view as ...", this.vv, "export");
    }//GEN-LAST:event_btExportActionPerformed

    private void btSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveActionPerformed
        JOptionPane.showMessageDialog(this,
                "This doesn't work now.", "INFO", JOptionPane.INFORMATION_MESSAGE);
        /*
         fileChooser.showSaveDialog(this);
         File selectedFile = fileChooser.getSelectedFile();

         if(selectedFile == null) {
         return;
         }
      
      
         try
         {
         FileWriter fileWriter = new FileWriter(selectedFile, false);
         fileWriter.write("[modules]\n");
        
         for(Component comp: moduleConfigPanel.getComponents())
         {
         JCheckBox box = (JCheckBox)comp;
         String str = box.getText() + "=" + (box.isSelected()?"true":"false");
         fileWriter.write(str + "\n");
         //System.out.println(str);
         }//end for
        
         //fileWriter.write(buffer, 0, buffer.length);
         fileWriter.close();
         }
         catch(IOException e)
         {
         JOptionPane.showMessageDialog(this,
         e.toString(), "The file could not be written.", JOptionPane.ERROR_MESSAGE);
         }//end catch
         * 
         */
    }//GEN-LAST:event_btSaveActionPerformed

    private void btSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSendActionPerformed
        sendCommand(new Command((String) cbProcess.getSelectedItem() + ":" + commandStringStoreModules));
    }//GEN-LAST:event_btSendActionPerformed

    private void cbProcessActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cbProcessActionPerformed
    {//GEN-HEADEREND:event_cbProcessActionPerformed
        String process = (String) cbProcess.getSelectedItem();
        Plugin.moduleConfigurationManager.setModuleOwner(process);
        this.moduleConfigTree.clear();

        this.modulePanel.setProcessName(process);
        this.modulePanel.setNode(null);
    }//GEN-LAST:event_cbProcessActionPerformed

    private void cbModulesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbModulesActionPerformed
        Node node = (Node) this.cbModules.getSelectedItem();
        if (this.moduleGraph == null || node == null)
        {
            return;
        }
        for (ModuleConfiguration.Node n : this.moduleGraph.getNodeList())
        {
            if (node.equals(n))
            {
                this.modulePanel.setNode(n);
                break;
            }
        }
    }//GEN-LAST:event_cbModulesActionPerformed

    private void cbRepresentationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRepresentationsActionPerformed
        Node node = (Node) this.cbRepresentations.getSelectedItem();
        if (this.moduleGraph == null || node == null)
        {
            return;
        }
        for (ModuleConfiguration.Node n : this.moduleGraph.getNodeList())
        {
            if (node.equals(n))
            {
                this.modulePanel.setNode(n);
                break;
            }
        }
    }//GEN-LAST:event_cbRepresentationsActionPerformed

    private void errorListMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_errorListMouseClicked
    {//GEN-HEADEREND:event_errorListMouseClicked
        if (errorList.getSelectedValue() != null)
        {
            ListComponent c = (ListComponent) errorList.getSelectedValue();
            modulePanel.setNode(c.getNode());
        }
    }//GEN-LAST:event_errorListMouseClicked

    private void errorIgnoreToggleActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_errorIgnoreToggleActionPerformed
    {//GEN-HEADEREND:event_errorIgnoreToggleActionPerformed
        if (errorIgnoreToggle.isSelected())
        {
            errorIgnoreToggle.setText("ignorelist enabled");
        }
        else
        {
            errorIgnoreToggle.setText("ignorelist disabled");
        }
        if (Plugin.parent.checkConnected())
        {
            makeCheck();
        }
    }//GEN-LAST:event_errorIgnoreToggleActionPerformed

    @Override
    public JPanel getPanel()
    {
        return this;
    }//end getPanel

    @Override
    public void errorOccured(String cause)
    {
        Plugin.moduleConfigurationManager.removeListener(this);
    }

    @Override
    public void newObjectReceived(final ModuleConfiguration graph
    )
    {
        this.moduleGraph = graph;

        this.cbModules.removeAllItems();
        this.cbRepresentations.removeAllItems();

        ArrayList<Node> modules = new ArrayList<Node>();
        ArrayList<Node> representations = new ArrayList<Node>();

        Plugin.moduleConfigurationManager.removeListener(this);
        this.jToggleButtonRefresh.setSelected(false);
        String processName = (String) cbProcess.getSelectedItem();

        // update list and remove unused modules from graph
        ArrayList<Node> nodes = graph.getNodeList();
        for (ModuleConfiguration.Node n : nodes)
        {
            if (n.getType() == ModuleConfiguration.NodeType.Module)
            {
                String path = n.getCleanPathForProcess(processName);

                SelectableTreeNode node = moduleConfigTree.insertPath(path, ':');
                node.setSelected(n.isEnabled());
                node.setTooltip(n.getName());
                node.getComponent().addActionListener(
                        new ModuleCheckBoxListener(node.getComponent(),
                                processName + ":" + commandStringSetModules, n));

                modules.add(n);
            }
            else if (n.getType() == ModuleConfiguration.NodeType.Represenation)
            {
                representations.add(n);
            }
        }//end for

        // update the combo boxes
        Collections.sort(modules, new CormpareIgnoreCase());
        Collections.sort(representations, new CormpareIgnoreCase());
        this.cbModules.setModel(new javax.swing.DefaultComboBoxModel(modules.toArray()));
        this.cbRepresentations.setModel(new javax.swing.DefaultComboBoxModel(representations.toArray()));
        this.cbModulesSearch.revalidateModel();
        this.cbRepresentationsSearch.revalidateModel();

        moduleConfigTree.expandPath(processName, ':');
        moduleConfigTree.repaint();

        //check for unprovided or not required Representations
        makeCheck();
    }//end newObjectReceived

    /**
     * checks for references in the module config trees that are not required or
     * provided by any modules
     */
    public void makeCheck()
    {
        IgnoreList ignore = new IgnoreList();
        errorList.removeAll();
        ArrayList<ListComponent> notRequired = new ArrayList<ListComponent>();
        ArrayList<ListComponent> notProvided = new ArrayList<ListComponent>();
        ArrayList<ListComponent> notRequiredButEx = new ArrayList<ListComponent>();
        ArrayList<ListComponent> notProvidedButEx = new ArrayList<ListComponent>();
        ArrayList<ListComponent> fatalErrors = new ArrayList<ListComponent>();
        int counterErr = 0;
        int counterRep = 0;
        int counter = 0;            //counters for the different types of errors and warnings for the description
        int counterPro = 0;
        int counterReq = 0;
        for (Node n : this.moduleGraph.getNodeList())
        {
            if (n.isEnabled() && (n.getType() == ModuleConfiguration.NodeType.Represenation))
            {
                counterRep++;
                if (!ignore.isOnIgnorelist(n.getName()))
                {
                    boolean req = n.isProvide();
                    boolean prov = n.isRequire();
                    if (!req && !prov)
                    {
                        //nor provided nor required
                        counterErr++;
                        fatalErrors.add(new ListComponent(n, ("FATAL ERROR: " + n.getName() + " is nor provided nor required")));
                    }
                    else
                    {
                        if (!prov)
                        {
                            //not provided
                            counterPro++;
                            counter++;
                            if (n.require.isEmpty())
                            {
                                notProvided.add(new ListComponent(n, ("Code Error: " + n.getName() + " is not provided (no existing modules)")));
                            }
                            else
                            {
                                notProvidedButEx.add(new ListComponent(n, ("Config Error: " + n.getName() + " is not provided (all modules deactivated)")));
                            }

                        }
                        if (!req)
                        {
                            //not required
                            counterReq++;
                            counter++;
                            if (n.provide.isEmpty())
                            {
                                notRequired.add(new ListComponent(n, ("Code Warning: " + n.getName() + " is not required (no existing modules)")));
                            }
                            else
                            {
                                notProvidedButEx.add(new ListComponent(n, ("Config Warning: " + n.getName() + " is not required (all modules deactivated)")));
                            }
                        }
                    }
                }

                //put data into errorList
                ArrayList<ListComponent> listComponents = new ArrayList<ListComponent>();
                listComponents.addAll(fatalErrors);
                listComponents.addAll(notProvided);
                listComponents.addAll(notProvidedButEx);
                listComponents.addAll(notRequired);
                listComponents.addAll(notRequiredButEx);
                errorList.setListData(listComponents.toArray());

                //description
                String s = "";
                if (counter != 0)
                {
                    s = "[" + counter + " Issues: " + counterPro + " not provided, " + counterReq + " not required]\n" + s;
                }
                if (counterErr != 0)
                {
                    s = "[" + counterErr + " FATAL ERRORS]\n" + s;
                }
                s = "[" + counterRep + " enabled Representations checked]\n" + s;
                s = String.format(s);
                checkDescription.setText(s);
            }
        }

    }

    public boolean isOnIgnorelist(String name)
    {
        return false;
    }

    /**
     * saves a warning for a nor required or not provided representation and a
     * reference to this representation
     */
    class ListComponent
    {

        private Node n;
        private String message;

        public ListComponent(Node n, String message)
        {
            this.n = n;
            this.message = message;
        }

        public Node getNode()
        {
            return n;
        }

        @Override
        public String toString()
        {
            return message;
        }
    }

    class IgnoreList
    {

        ArrayList<String> ignorelist;

        public IgnoreList()
        {
            ignorelist = new ArrayList<String>();

            updateIgnorelist("src/de/naoth/rc/dialogs/moduleIntergretyIgnorelist");
        }

        public boolean isOnIgnorelist(String name)
        {
            if (!errorIgnoreToggle.isSelected())
            {
                return false;
            }
            if (ignorelist.isEmpty())
            {
                return false;
            }
            return ignorelist.contains(name);
        }

        public void updateIgnorelist(String s)
        {
            Scanner scanner;
            scanner = getScanner(s);
            if (scanner != null)
            {
                while (scanner.hasNextLine())
                {
                    ignorelist.add(scanner.nextLine());
                }
            }
            else
            {
                System.out.println("sth went wrong here");
            }
        }

        private Scanner getScanner(String s)
        {
            Scanner scanner;
            String charsetName = "ISO-8859-1";
            try
            {
                // first try to read file from local file system
                File file = new File(s);
                if (file.exists())
                {
                    scanner = new Scanner(file, charsetName);
                    scanner.useLocale(java.util.Locale.US);
                    return scanner;
                }

                // next try for files included in jar
                URL url = getClass().getResource(s);

                // or URL from web
                if (url == null)
                {
                    url = new URL(s);
                }

                URLConnection site = url.openConnection();
                InputStream is = site.getInputStream();
                scanner = new Scanner(is, charsetName);
                scanner.useLocale(java.util.Locale.US);
                return scanner;
            }
            catch (IOException ioe)
            {
                System.err.println("Could not open " + s);
                return null;
            }
        }

    }

    public class CormpareIgnoreCase implements Comparator<Object>
    {

        public int compare(Object o1, Object o2)
        {
            String s1 = o1.toString().toLowerCase();
            String s2 = o2.toString().toLowerCase();
            return s1.compareTo(s2);
        }
    }

    private void sendCommand(Command command)
    {
        if (!Plugin.parent.checkConnected())
        {
            return;
        }

        Plugin.parent.getMessageServer().executeSingleCommand(new DialogCommandSender(this, command)
        {
            @Override
            public void handleResponse(byte[] result, Command originalCommand)
            {
                handleResponseSaveModules(result, originalCommand);
            }
        });

    }//end sendCommand

    abstract class DialogCommandSender implements CommandSender
    {

        private final Command command;
        private final Component parent;

        DialogCommandSender(Component parent, Command command)
        {
            this.command = command;
            this.parent = parent;
        }

        @Override
        public void handleError(int code)
        {
            JOptionPane.showMessageDialog(parent,
                    "Error occure while comunication, code " + code,
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }

        @Override
        public Command getCurrentCommand()
        {
            return command;
        }
    }//end DialogCommandSender

    public void handleResponseSaveModules(byte[] result, Command originalCommand)
    {
        String response = new String(result);

        if (response.startsWith("ERROR"))
        {
            JOptionPane.showMessageDialog(this,
                    response.substring(6), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            JOptionPane.showMessageDialog(this,
                    response, "INFO", JOptionPane.INFORMATION_MESSAGE);

        }
    }

    class ModuleCheckBoxListener implements ActionListener, ObjectListener<byte[]>
    {

        JCheckBox checkBox;
        Command currentCommand;
        String commandString;
        Node node;

        public ModuleCheckBoxListener(JCheckBox checkBox, String commandString, Node node)
        {
            this.checkBox = checkBox;
            this.currentCommand = null;
            this.commandString = commandString;
            this.node = node;
        }

        @Override
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
            if (currentCommand != null)
            {
                Plugin.genericManagerFactory.getManager(currentCommand).removeListener(this);
            }

            currentCommand = new Command(commandString);
            currentCommand.addArg(checkBox.getText(), checkBox.isSelected() ? "on" : "off");

            Plugin.genericManagerFactory.getManager(currentCommand).addListener(this);

            // update the module panel
            modulePanel.setNode(node);
        }//end actionPerformed

        @Override
        public void errorOccured(String cause)
        {
            if (currentCommand != null)
            {
                Plugin.genericManagerFactory.getManager(currentCommand).removeListener(this);
            }
            currentCommand = null;
            System.err.println(cause);
        }//end errorOccured

        @Override
        public void newObjectReceived(byte[] object)
        {
            String str = new String(object);
            String[] res = str.split("( |\n|\r|\t)+");

            if (res.length == 3
                    && res[0].equals("set")
                    && res[1].equals(checkBox.getText()))
            {
                this.checkBox.setSelected(res[2].equals("on"));
            }
            else
            {
                errorOccured(str);
            }

            if (currentCommand != null)
            {
                Plugin.genericManagerFactory.getManager(currentCommand).removeListener(this);
            }
            currentCommand = null;
        }//end newObjectReceived
    }//end ModuleCheckBoxListener

    @Override
    public void dispose()
    {
        System.out.println("Dispose is not implemented for: " + this.getClass().getName());
    }//end dispose

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btExport;
    private javax.swing.JButton btSave;
    private javax.swing.JButton btSend;
    private javax.swing.JComboBox cbModules;
    private javax.swing.JComboBox cbProcess;
    private javax.swing.JComboBox cbRepresentations;
    private javax.swing.JTextArea checkDescription;
    private javax.swing.JToggleButton errorIgnoreToggle;
    private javax.swing.JList errorList;
    private de.naoth.rc.components.ExtendedFileChooser fileChooser;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JToggleButton jToggleButtonRefresh;
    private javax.swing.JToolBar jToolBar1;
    private de.naoth.rc.components.checkboxtree.CheckboxTree moduleConfigTree;
    private de.naoth.rc.components.SimpleModulePanel modulePanel;
    // End of variables declaration//GEN-END:variables
}//end class ModuleConfigurationViewer
