/**
 * @author <a href="xu@informatik.hu-berlin.de">Xu, Yuan</a>
 */
package de.naoth.rc.dialogs;

import com.sun.j3d.exp.swing.JCanvas3D;
import de.naoth.rc.AbstractDialog;
import de.naoth.rc.DialogPlugin;
import de.naoth.rc.Helper;
import de.naoth.rc.RobotControl;
import de.naoth.rc.dataformats.JanusImage;
import de.naoth.rc.dialogs.drawings.three_dimension.ColorTable;
import de.naoth.rc.dialogs.drawings.three_dimension.OrbitBehavior;
import de.naoth.rc.dialogs.drawings.three_dimension.Scene;
import de.naoth.rc.dialogs.drawings.three_dimension.VirtualWorld;
import de.naoth.rc.manager.ImageManager;
import de.naoth.rc.manager.ObjectListener;
import de.naoth.rc.manager.ThreeDimensionSceneManager;
import de.naoth.rc.server.Command;
import de.naoth.rc.server.CommandSender;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.media.j3d.BoundingSphere;
import javax.media.j3d.BranchGroup;
import javax.media.j3d.GraphicsConfigTemplate3D;
import javax.media.j3d.PhysicalBody;
import javax.media.j3d.PhysicalEnvironment;
import javax.media.j3d.TransformGroup;
import javax.media.j3d.View;
import javax.media.j3d.ViewPlatform;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.vecmath.Point3d;
import javax.vecmath.Vector3d;
import javax.vecmath.Vector3f;
import net.xeoh.plugins.base.annotations.PluginImplementation;
import net.xeoh.plugins.base.annotations.injections.InjectPlugin;

//@PluginImplementation
public class ThreeDimensionViewer extends AbstractDialog
        implements ObjectListener<Scene>
{
    
  
  @PluginImplementation
  public static class Plugin extends DialogPlugin<ThreeDimensionViewer>
  {
      @InjectPlugin
      public static RobotControl parent;
      @InjectPlugin
      public static ThreeDimensionSceneManager threeDimensionSceneManager;
      @InjectPlugin
      public static ImageManager imageManager;
  }//end Plugin
  
  
  private VirtualWorld vw;
  private JCanvas3D canvas;
  private final BoundingSphere globalBounds = new BoundingSphere(new Point3d(0, 0, 0), Double.MAX_VALUE);
  // Entities
  private Scene activeScene;
  private static boolean java3dAvailable = true;
  private final Command getColorTableCommand =
    new Command("representation:get").addArg("ColorTable64");
  private ObjectListener imageListener;
  private JanusImage image;

  /** Creates new form ThreeDimensionViewer */
  public ThreeDimensionViewer()
  {
    super();
    initComponents();
    if (java3dAvailable)
    {
      try
      {
        vw = VirtualWorld.get();
//        GraphicsConfigTemplate3D template = new GraphicsConfigTemplate3D();
//
//        GraphicsConfiguration gconf = GraphicsEnvironment.getLocalGraphicsEnvironment()
//          .getDefaultScreenDevice().getBestConfiguration(template);
//
//        canvas = new Canvas3D(gconf);
        canvas = new JCanvas3D(new GraphicsConfigTemplate3D());
      } catch (java.lang.UnsatisfiedLinkError e)
      {
        Helper.handleException("Java 3D is not installed!\n" +
                "Visit https://java3d.dev.java.net", new Exception(e));
        java3dAvailable = false;
      }
    }
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jPanelCanvas = new javax.swing.JPanel();
    jToolBar = new javax.swing.JToolBar();
    jToggleButtonUpdate = new javax.swing.JToggleButton();
    jCheckBoxField = new javax.swing.JCheckBox();
    jCheckBoxImage = new javax.swing.JCheckBox();
    jToggleButtonGetColorTable = new javax.swing.JToggleButton();

    javax.swing.GroupLayout jPanelCanvasLayout = new javax.swing.GroupLayout(jPanelCanvas);
    jPanelCanvas.setLayout(jPanelCanvasLayout);
    jPanelCanvasLayout.setHorizontalGroup(
      jPanelCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 400, Short.MAX_VALUE)
    );
    jPanelCanvasLayout.setVerticalGroup(
      jPanelCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 269, Short.MAX_VALUE)
    );

    jToolBar.setRollover(true);

    jToggleButtonUpdate.setText("Update");
    jToggleButtonUpdate.setToolTipText("Update scene from robot.");
    jToggleButtonUpdate.setFocusable(false);
    jToggleButtonUpdate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jToggleButtonUpdate.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jToggleButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jToggleButtonUpdateActionPerformed(evt);
      }
    });
    jToolBar.add(jToggleButtonUpdate);

    jCheckBoxField.setSelected(true);
    jCheckBoxField.setText("Field");
    jCheckBoxField.setToolTipText("Show the soccer field.");
    jCheckBoxField.setFocusable(false);
    jCheckBoxField.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
    jCheckBoxField.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCheckBoxFieldActionPerformed(evt);
      }
    });
    jToolBar.add(jCheckBoxField);

    jCheckBoxImage.setText("Image");
    jCheckBoxImage.setToolTipText("Receive image from camera of robot.");
    jCheckBoxImage.setFocusable(false);
    jCheckBoxImage.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
    jCheckBoxImage.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jCheckBoxImage.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCheckBoxImageActionPerformed(evt);
      }
    });
    jToolBar.add(jCheckBoxImage);

    jToggleButtonGetColorTable.setText("GetColorTable");
    jToggleButtonGetColorTable.setToolTipText("Get color table from robot & show it.");
    jToggleButtonGetColorTable.setFocusable(false);
    jToggleButtonGetColorTable.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jToggleButtonGetColorTable.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jToggleButtonGetColorTable.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jToggleButtonGetColorTableActionPerformed(evt);
      }
    });
    jToolBar.add(jToggleButtonGetColorTable);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
      .addComponent(jPanelCanvas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(jToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jPanelCanvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void jCheckBoxFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jCheckBoxFieldActionPerformed
  {//GEN-HEADEREND:event_jCheckBoxFieldActionPerformed
    vw.enableField(jCheckBoxField.isSelected());
  }//GEN-LAST:event_jCheckBoxFieldActionPerformed

  private void jToggleButtonUpdateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jToggleButtonUpdateActionPerformed
  {//GEN-HEADEREND:event_jToggleButtonUpdateActionPerformed
    if (jToggleButtonUpdate.isSelected())
    {
      if (Plugin.parent.checkConnected())
      {
        Plugin.threeDimensionSceneManager.addListener(this);
      } else
      {
        jToggleButtonUpdate.setSelected(false);
      }
    } else
    {
      Plugin.threeDimensionSceneManager.removeListener(this);
    }
  }//GEN-LAST:event_jToggleButtonUpdateActionPerformed

  private void jToggleButtonGetColorTableActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jToggleButtonGetColorTableActionPerformed
  {//GEN-HEADEREND:event_jToggleButtonGetColorTableActionPerformed
    if (!jToggleButtonGetColorTable.isSelected())
    {
      return;
    }

    if (!Plugin.parent.checkConnected())
    {
      jToggleButtonGetColorTable.setSelected(false);
      return;
    }

    // hide all scene objects
    jCheckBoxField.setSelected(false);
    jCheckBoxFieldActionPerformed(evt);
    jToggleButtonUpdate.setSelected(false);
    jToggleButtonUpdateActionPerformed(evt);

    final ThreeDimensionViewer thisFinal = this;
    // get the color table from robot
    Plugin.parent.getMessageServer().executeSingleCommand(new CommandSender()
    {

      @Override
      public void handleResponse(byte[] result, Command originalCommand)
      {
        Scene s = new Scene();
        try
        {
          s.addChild(new ColorTable(result));
        } catch (Exception ex)
        {
          Logger.getLogger(ThreeDimensionViewer.class.getName()).log(Level.SEVERE, null, ex);
        }
        newObjectReceived(s);
      }

      @Override
      public void handleError(int code)
      {
        JOptionPane.showMessageDialog(thisFinal,
                "Could not get colortable, code " + code, "ERROR", JOptionPane.ERROR_MESSAGE);
      }

      @Override
      public Command getCurrentCommand()
      {
        return getColorTableCommand;
      }
    },
            getColorTableCommand);

    jToggleButtonGetColorTable.setSelected(false);
  }//GEN-LAST:event_jToggleButtonGetColorTableActionPerformed

  private void jCheckBoxImageActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jCheckBoxImageActionPerformed
  {//GEN-HEADEREND:event_jCheckBoxImageActionPerformed
    if (jCheckBoxImage.isSelected())
    {
      if (Plugin.parent.checkConnected())
      {
        Plugin.imageManager.addListener(imageListener);
      } else
      {
        jCheckBoxImage.setSelected(false);
      }
    } else
    {
      Plugin.imageManager.removeListener(imageListener);
      image = null;
    }
  }//GEN-LAST:event_jCheckBoxImageActionPerformed

  @Override
  public void init()
  {
    if (!java3dAvailable)
    {
      jToggleButtonUpdate.setEnabled(false);
      jCheckBoxField.setEnabled(false);
      return;
    }

    jPanelCanvas.add(canvas);
    canvas.setSize(1, 1);
    jPanelCanvas.addComponentListener(new ComponentListener()
    {

      @Override
      public void componentResized(ComponentEvent e)
      {
        try
        {
          canvas.setSize(jPanelCanvas.getSize());
        } catch (IllegalArgumentException ex)
        {
        }
      }

      @Override
      public void componentMoved(ComponentEvent e){}

      @Override
      public void componentShown(ComponentEvent e){}

      @Override
      public void componentHidden(ComponentEvent e){}
    });


    createViewBranch(new Vector3f(2, 0, 0.5f));

    imageListener = new ObjectListener<JanusImage>()
    {

      @Override
      public void newObjectReceived(JanusImage object)
      {
        image = object;
      }

      @Override
      public void errorOccured(String cause)
      {
        jCheckBoxImage.setSelected(false);
        ThreeDimensionViewer.Plugin.imageManager.removeListener(imageListener);
        image = null;
        Helper.handleException(cause, null);
      }
    };
  }

  private void createViewBranch(Vector3f homeViewPos)
  {
    BranchGroup viewBranch = new BranchGroup();

    TransformGroup viewTG = new TransformGroup();
    viewTG.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);

    ViewPlatform vp = new ViewPlatform();

    View view = new View();
    view.setPhysicalBody(new PhysicalBody());
    view.setPhysicalEnvironment(new PhysicalEnvironment());

    view.attachViewPlatform(vp);
    // View renders into the off-screen Canvas3D
    view.addCanvas3D(canvas.getOffscreenCanvas3D());

    OrbitBehavior orbit = new OrbitBehavior(canvas, viewTG, view);
    orbit.setSchedulingBounds(globalBounds);
    orbit.setClippingEnabled(false);

    orbit.setViewingTransform(new Point3d(homeViewPos), new Point3d(0, 0, 0),
            new Vector3d(0, 0, 1), new Point3d(0, 0, 0));

    viewTG.addChild(vp);
    viewTG.addChild(orbit);

    viewBranch.addChild(viewTG);
    vw.add(viewBranch);
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JCheckBox jCheckBoxField;
  private javax.swing.JCheckBox jCheckBoxImage;
  private javax.swing.JPanel jPanelCanvas;
  private javax.swing.JToggleButton jToggleButtonGetColorTable;
  private javax.swing.JToggleButton jToggleButtonUpdate;
  private javax.swing.JToolBar jToolBar;
  // End of variables declaration//GEN-END:variables

  @Override
  public void newObjectReceived(Scene object)
  {
    if (object == activeScene)
    {
      return;
    }

    // attach the image of camera
    object.addCameraImage(image);

    vw.add(object);
    if (activeScene != null)
    {
      activeScene.detach();
    }
    activeScene = object;
  }

  @Override
  public void errorOccured(String cause)
  {
    jToggleButtonUpdate.setSelected(false);
    Plugin.threeDimensionSceneManager.removeListener(this);
//    Helper.handleException(cause, null);
  }

  @Override
  public void dispose()
  {
    Plugin.threeDimensionSceneManager.removeListener(this);
    Plugin.imageManager.removeListener(imageListener);
    //System.out.println("Dispose is not implemented for: " + this.getClass().getName());
  }//end dispose
}
