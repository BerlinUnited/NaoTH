package de.naoth.rc.dialogs;

import com.google.protobuf.InvalidProtocolBufferException;
import de.naoth.rc.AbstractDialog;
import de.naoth.rc.DialogPlugin;
import de.naoth.rc.LogSimulator;
import de.naoth.rc.LogSimulator.LogSimulatorManager;
import de.naoth.rc.RobotControl;
import de.naoth.rc.manager.GenericManagerFactory;
import de.naoth.rc.messages.Representations;
import java.awt.Color;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import net.xeoh.plugins.base.annotations.PluginImplementation;
import net.xeoh.plugins.base.annotations.injections.InjectPlugin;
import org.apache.commons.collections4.map.LinkedMap;

/**
 *
 * @author Heinrich
 * @author Peter
 */
public class GroundTruthReader extends AbstractDialog {
    
     private Map<Integer, Boolean> topBall,
            bottomBall;
     private Map<Integer, Integer> topGoal,
            bottomGoal;
     DefaultListModel listModel;
     private LogSimulatorManager logSimManager;

    private class MissmatchSaver{
        int frame;
        Boolean topBall = null,
            bottomBall = null,
            missingFrame = false;
        Integer  topGoalGT = null,
            bottomGoalGT = null,
                topGoalSeen = null,
                bottomGoalSeen = null;        
        
        @Override
        public String toString() {
            String back = "[" +frame +"] ";
            if (missingFrame){
                back += "missingFrame ";
            }
            if (topBall!=null) {
                if (topBall) back += "missed topBall ";
                else back+= "false topBall ";
            }
            if (bottomBall!=null) {
                if (bottomBall) back += "missed bottomBall ";
                else back+= "false bottomBall ";
            }
            if (topGoalGT != null) {
                back += "Top goalPostsGT: " +topGoalGT +" goalPostsSeen: " +topGoalSeen +" ";
            }
            if (bottomGoalGT != null) {
                back += "Bottom goalPostsGT: " +bottomGoalGT +" goalPostsSeen: " +bottomGoalSeen +" ";
            }            
            return back;
        } 
    }
    Map<Integer,MissmatchSaver> missmatches;
   

    @PluginImplementation
    public static class Plugin extends DialogPlugin<GroundTruthReader> {

        @InjectPlugin
        public static RobotControl parent;
        @InjectPlugin
        public static GenericManagerFactory genericManagerFactory;
        /*  @InjectPlugin
         public static Representation frameworkRepresentation;
         */
    }//end Plugin
  
    private final GroundTruthReader.LogPerceptListener logPerceptListener = new GroundTruthReader.LogPerceptListener();

    public GroundTruthReader() {
        this.logSimManager = LogSimulatorManager.getInstance();
        this.listModel = new DefaultListModel();
        initComponents();
        LogSimulator.LogSimulatorManager.getInstance().addListener(logPerceptListener);
        missmatches = new LinkedMap<>(); 

    }

     private boolean openFile() {
       // if (!this.jToggleButton3.isSelected()) return;        
        String fileName = LogfilePlayer.getFileName();
        if (fileName.equals("")) {
            JOptionPane.showMessageDialog(null, "No opened logfile", "Error", JOptionPane.ERROR_MESSAGE);
            this.jToggleButton3.setSelected(false);
            return false;
        }
        fileName = fileName.substring(0, fileName.lastIndexOf(".") + 1) + "gts";
        ObjectInputStream o;
        try {

            o = new ObjectInputStream(new FileInputStream(fileName));
            topBall = (Map<Integer, Boolean>) o.readObject();
            bottomBall = (Map<Integer, Boolean>) o.readObject();
            topGoal = (Map<Integer, Integer>) o.readObject();
            bottomGoal = (Map<Integer, Integer>) o.readObject();

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "No Groundtruth for this logfile", "Error", JOptionPane.ERROR_MESSAGE);
            this.jToggleButton3.setSelected(false);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GroundTruthReader.class.getName()).log(Level.SEVERE, null, ex);
        }
        //missmatches = new LinkedMap<>();
        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jToggleButton3 = new javax.swing.JToggleButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jToggleButton3.setText("listen");
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });

        jList1.setModel(listModel);
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jList1);

        jButton1.setText("report");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("clear");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jToggleButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jToggleButton3)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
        if (jToggleButton3.isSelected()) {         
            if (openFile()) toogleButtons();
        } else {
            toogleButtons();
        }
    }//GEN-LAST:event_jToggleButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        report();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        listModel.clear();
        missmatches.clear();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseClicked

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        if (evt.getClickCount()==2) {
            MissmatchSaver missmatch = (MissmatchSaver) this.jList1.getSelectedValue();
            logSimManager.jumpTo(missmatch.frame);
        }
    }//GEN-LAST:event_jList1MouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToggleButton jToggleButton3;
    // End of variables declaration//GEN-END:variables

    class LogPerceptListener implements LogSimulator.LogSimulatorActionListener {      
        @Override
        public void frameChanged(LogSimulator.BlackBoard b, int frameNumber) {
            if (!GroundTruthReader.this.jToggleButton3.isSelected()) {
                return;
            }
            MissmatchSaver missmatch = new MissmatchSaver();
            boolean foundMissmatch = false;
            try {               
                /**
                 * ************BallPercept*****************************************************
                 */
                byte[]data = b.getRepresentation("BallPercept");
                Representations.BallPercept ballPercept = Representations.BallPercept.parseFrom(data);
                Boolean ballHere = bottomBall.get(frameNumber); 
                missmatch.frame = frameNumber;
                if (ballHere == null) {
                    missmatch.missingFrame = true;
                    foundMissmatch=true;                    
                } else {
                    if (ballHere != ballPercept.getBallWasSeen()) {
                        if (ballHere) {
                            missmatch.bottomBall = true;
                            foundMissmatch=true;  
                        } else {
                            missmatch.bottomBall = false;
                            foundMissmatch=true;
                        }
                    }
                }
                /**
                 * ************BallPercept*****************************************************
                 */
                /**
                 * ************BallPerceptTop**************************************************
                 */
                data = b.getRepresentation("BallPerceptTop");
                ballPercept = Representations.BallPercept.parseFrom(data);
                ballHere = topBall.get(frameNumber);
                if (ballHere == null) {
                    missmatch.missingFrame = true;
                    foundMissmatch=true; 
                } else {
                    if (ballHere != ballPercept.getBallWasSeen()) {
                        if (ballHere) {
                            missmatch.topBall = true;
                            foundMissmatch=true;
                        } else {
                            missmatch.topBall = false;
                            foundMissmatch=true;
                        }
                    }
                }
                /**
                 * ************BallPerceptTop**************************************************
                 */
                /**
                 * ************GoalPercept**************************************************
                 */
                data = b.getRepresentation("GoalPercept");
                Representations.GoalPercept goalPercept = Representations.GoalPercept.parseFrom(data);
                int postCount = goalPercept.getPostCount();
                Integer goalHere = bottomGoal.get(frameNumber);
                if (goalHere == null) {
                    missmatch.missingFrame = true;
                    foundMissmatch=true; 
                } else if (goalHere != postCount) {
                    missmatch.bottomGoalGT = goalHere;
                    missmatch.bottomGoalSeen = postCount;
                    foundMissmatch=true;
                } 
                /**
                 * ************GoalPercept**************************************************
                 */
                /**
                 * ************GoalPerceptTop***********************************************
                 */
                data = b.getRepresentation("GoalPerceptTop");
                Representations.GoalPercept goalPerceptTop = Representations.GoalPercept.parseFrom(data);
                postCount = goalPerceptTop.getPostCount();
                goalHere = topGoal.get(frameNumber);
                if (goalHere == null) {
                    missmatch.missingFrame = true;
                    foundMissmatch=true; 
                } else if (goalHere != postCount) {
                    missmatch.topGoalGT = goalHere;
                    missmatch.topGoalSeen = postCount;
                    foundMissmatch=true;
                }
                /**
                 * ************GoalPerceptTop***********************************************
                 */

            } catch (InvalidProtocolBufferException ex) {
                ex.printStackTrace(System.err);
            }
            if (foundMissmatch) {
                if (!missmatches.containsKey(missmatch.frame)) {
                    missmatches.put(missmatch.frame, missmatch);               
                    listModel.addElement(missmatch);
                }
            }
        }

        @Override
        public void logfileOpened(LogSimulator.BlackBoard b, String path) {
            listModel.clear();
            missmatches.clear();
            if (GroundTruthReader.this.jToggleButton3.isSelected()) {
                GroundTruthReader.this.jToggleButton3.setSelected(false);
                GroundTruthReader.this.toogleButtons();
            }
        }
    }
    
    public void report() {
        int intervall = 10;
               int step = 0;       
        int     topMissedBalls=0,topFalseBalls=0, topMissedGP=0, topFalseGP=0, 
                bottomMissedBalls=0,bottomFalseBalls=0, bottomMissedGP=0,bottomFalseGP=0,
                topMissedBallsInv=0,topFalseBallsInv=0,topMissedGPInv=0, topFalseGPInv=0, topGTBallsInv=0, topGTGPInv=0,
                bottomMissedBallsInv=0,bottomFalseBallsInv=0, bottomMissedGPInv=0,bottomFalseGPInv=0, bottomGTBallsInv=0, bottomGTGPInv=0;
                
        
       List<Integer>  topMissedBallsInvList = new LinkedList<>(),topFalseBallsInvList = new LinkedList<>(), topGTBallsInvList = new LinkedList<>(),
               topFalseGPInvList = new LinkedList<>(),topMissedGPInvList = new LinkedList<>(), topGTGPInvList = new LinkedList<>(),
               bottomMissedBallsInvList = new LinkedList<>(), bottomFalseBallsInvList = new LinkedList<>(), bottomGTBallsInvList = new LinkedList<>(),
               bottomMissedGPInvList = new LinkedList<>(), bottomFalseGPInvList = new LinkedList<>(), bottomGTGPInvList = new LinkedList<>();
      
        int minFrame = GroundTruthReader.this.logSimManager.getMinFrame(),
                maxFrame = GroundTruthReader.this.logSimManager.getMaxFrame();
        /*************************Dialog*********************************/
        
        JTextField intervallTF = new JTextField();
        intervallTF.setText(String.valueOf(intervall));
        JTextField fileNameAdd = new JTextField();
        Object[] message = {"EvaluationIntervall", intervallTF, 
                "Please enter custom Filenameaddition", fileNameAdd};
        JOptionPane pane = new JOptionPane( message, 
                                        JOptionPane.PLAIN_MESSAGE, 
                                        JOptionPane.OK_CANCEL_OPTION);
        boolean badInput = true;
        while (badInput) {
            pane.createDialog(null, "ReportDialog").setVisible(true);
            Object selectedValue = pane.getValue();
            if(selectedValue == null || (selectedValue instanceof Integer && (Integer) selectedValue == JOptionPane.CANCEL_OPTION))
            {
                return;
            }            
            try {
                intervall = Integer.parseInt(intervallTF.getText());  
                if (intervall<1) throw new NumberFormatException();
                badInput = false;
            } catch (NumberFormatException ex) {
                intervallTF.setBackground(Color.red);
            }
        }
        /*************************Dialog*********************************/
        String fileTestName = LogfilePlayer.getFileName();        
        fileTestName = fileTestName.substring(0,fileTestName.lastIndexOf(".")+1) + "gts" ;
        File f = new File(fileTestName);
        if (f.exists()) {
            Object[] options = {"Yes, please",
                    "No!!!"};
            int n = JOptionPane.showOptionDialog(this,
                "ReportFile already exists override it?",
                "Question",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[1]);           
            if (n!=0) return;
        }
        for (int i=minFrame; i<=maxFrame; i++){
            step++;
            if (step==intervall){
                step=0;
                topMissedBallsInvList.add(topMissedBallsInv);
                topFalseBallsInvList.add(topFalseBallsInv);
                bottomMissedBallsInvList.add(bottomMissedBallsInv);
                bottomFalseBallsInvList.add(bottomFalseBallsInv);
                topMissedGPInvList.add(topMissedGPInv);
                topFalseGPInvList.add(topFalseGPInv);
                bottomMissedGPInvList.add(bottomMissedGPInv);
                bottomFalseGPInvList.add(bottomFalseGPInv);
                topMissedBallsInv=0;
                topFalseBallsInv=0;
                topMissedGPInv=0;
                topFalseGPInv=0;
                bottomMissedBallsInv=0;
                bottomFalseBallsInv=0;
                bottomMissedGPInv=0;
                bottomFalseGPInv=0;
             }
            MissmatchSaver missmatch = missmatches.get(i);
            if (missmatch!=null)
            {
                if(missmatch.bottomBall!=null) {
                    if (missmatch.bottomBall) {
                        bottomMissedBalls++;
                        bottomMissedBallsInv++;
                    }
                    else {
                        bottomFalseBalls++;
                        bottomFalseBallsInv++;
                    }
                }
                if(missmatch.topBall!=null) {
                    if (missmatch.topBall) {
                        topMissedBalls++;
                        topMissedBallsInv++;
                    }
                    else {
                        topFalseBalls++;
                        topFalseBallsInv++;
                    }
                }
                if(missmatch.bottomGoalGT!=null) {
                    bottomMissedGP += missmatch.bottomGoalGT-missmatch.bottomGoalSeen>0?missmatch.bottomGoalGT-missmatch.bottomGoalSeen:0;
                    bottomFalseGP += missmatch.bottomGoalSeen-missmatch.bottomGoalGT>0?missmatch.bottomGoalSeen-missmatch.bottomGoalGT:0;
                    bottomMissedGPInv += missmatch.bottomGoalGT-missmatch.bottomGoalSeen>0?missmatch.bottomGoalGT-missmatch.bottomGoalSeen:0;
                    bottomFalseGPInv += missmatch.bottomGoalSeen-missmatch.bottomGoalGT>0?missmatch.bottomGoalSeen-missmatch.bottomGoalGT:0;
                }
                if(missmatch.topGoalGT!=null) {
                    topMissedGP += missmatch.topGoalGT-missmatch.topGoalSeen>0?missmatch.topGoalGT-missmatch.topGoalSeen:0;
                    topFalseGP += missmatch.topGoalSeen-missmatch.topGoalGT>0?missmatch.topGoalSeen-missmatch.topGoalGT:0;
                    topMissedGPInv += missmatch.topGoalGT-missmatch.topGoalSeen>0?missmatch.topGoalGT-missmatch.topGoalSeen:0;
                    topFalseGPInv += missmatch.topGoalSeen-missmatch.topGoalGT>0?missmatch.topGoalSeen-missmatch.topGoalGT:0;
                }
            }
        }
        String fileName = LogfilePlayer.getFileName();
        fileName = fileName.substring(0, fileName.length()-4);
        fileName += fileNameAdd.getText()+".txt";
        BufferedWriter writer;
        try {
            File reportFile = new File(fileName);
            writer = new BufferedWriter(new FileWriter(reportFile));
            writer.write("GroundTruthReportFile: \r\n");
            writer.write("TotalMissedBalls: " +(topMissedBalls+bottomMissedBalls) +" TotalFalseBalls: " +(topFalseBalls+bottomFalseBalls) +"\r\n");
            writer.write("TopMissedBalls: " +topMissedBalls +" TopFalseBalls: " +topFalseBalls +"\r\n");
            writer.write("BottomMissedBalls: " +bottomMissedBalls +" bottomFalseBalls: " +bottomFalseBalls +"\r\n");          
            writer.write("TotalMissedGoalPosts: " +(topMissedGP+bottomMissedGP) +" TotalFalseGoalPosts: " +(topFalseGP+bottomFalseGP) +"\r\n");
            writer.write("TopMissedGoalPosts: " +topMissedGP +" TopFalseGoalPosts: " +topFalseGP +"\r\n");
            writer.write("BottomMissedGoalPosts: " +bottomMissedGP +" BottomFalseGoalPosts: " +bottomFalseGP +"\r\n");            
            prmGraphicOutput(writer, "Topcamera Ball Missed", topMissedBallsInvList);
            prmGraphicOutput(writer, "topcamera Ball False", topFalseBallsInvList);
            prmGraphicOutput(writer, "bottomcamera Ball Missed", bottomMissedBallsInvList);
            prmGraphicOutput(writer, "bottomcamera Ball False", bottomFalseBallsInvList);
            prmGraphicOutput(writer, "topcamera Goalposts Missed", topMissedGPInvList);
            prmGraphicOutput(writer, "topcamera Goalposts False", topFalseGPInvList);
            prmGraphicOutput(writer, "bottomcamera GoalPosts Missed", bottomMissedGPInvList);
            prmGraphicOutput(writer, "bottomcamera GoalPosts False", bottomFalseGPInvList);
            writer.close();
        } catch (IOException ex) {
             ex.printStackTrace(System.err);
        }             
    }
    
    public void prmGraphicOutput(BufferedWriter writer,String label, List<Integer> dataList) throws IOException {
        int dataMax=0;
        String outSpacer="";
        for (int data: dataList){
            if (data>dataMax) dataMax=data;
        }
        for (int i=0; i<=dataList.size(); i++) {
            outSpacer+="-";
        }
        outSpacer+="\r\n";
        writer.write(outSpacer);
        writer.write(label+":\r\n");
        for (int i=0; i<=dataMax; i++) {
            String out="";
            for (int data: dataList){
                out += dataMax-i<=data?"*":" ";
            }
            writer.write(out+(dataMax-i)+"\r\n");
        }
        writer.write(outSpacer);
    }
    
    public void toogleButtons () {
        boolean enabled = true;
        if (this.jButton2.isEnabled()) {
            enabled = false;
        }                
        this.jButton2.setEnabled(enabled);
        this.jButton1.setEnabled(enabled);
    }

}//end class GroundTruthCreator

