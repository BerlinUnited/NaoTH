/*
 * 
 */

/*
 * DebugRequestPanel.java
 *
 * Created on 29.10.2010, 15:15:34
 */
package de.naoth.rc.dialogs;

import de.naoth.rc.AbstractDialog;
import de.naoth.rc.DialogPlugin;
import de.naoth.rc.RobotControl;
import de.naoth.rc.checkboxtree.SelectableTreeNode;
import de.naoth.rc.manager.DebugRequestManager;
import de.naoth.rc.manager.ObjectListener;
import de.naoth.rc.server.Command;
import de.naoth.rc.server.CommandSender;
import de.naoth.rc.server.ConnectionStatusEvent;
import de.naoth.rc.server.ConnectionStatusListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JPanel;
import javax.swing.ToolTipManager;
import net.xeoh.plugins.base.annotations.PluginImplementation;
import net.xeoh.plugins.base.annotations.injections.InjectPlugin;

/**
 *
 * @author thomas
 */
public class SimpleDebugRequestPanel extends AbstractDialog
  implements CommandSender, ObjectListener<String[]>
{

    @PluginImplementation
    public static class Plugin extends DialogPlugin<SimpleDebugRequestPanel>
    {
        @InjectPlugin
        public static RobotControl parent;
        @InjectPlugin
        public static DebugRequestManager dbgRequestManager;
        
        @Override
        public String getDisplayName()
        {
          return "Debug Requests";
        }
    }

  /** Creates new form DebugRequestPanel */
  public SimpleDebugRequestPanel()
  {
    initComponents();
    
    ToolTipManager.sharedInstance().setDismissDelay(60000);
    
    // NOTE: experimental auto update on connect
    /*
    Plugin.parent.getMessageServer().addConnectionStatusListener(new ConnectionStatusListener() 
    {
        @Override
        public void connected(ConnectionStatusEvent event) {
            Plugin.dbgRequestManager.addListener(SimpleDebugRequestPanel.this);
        }
        @Override
        public void disconnected(ConnectionStatusEvent event) {
        }
    });
    */
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolbarMain = new javax.swing.JToolBar();
        btUpdate = new javax.swing.JToggleButton();
        btRefresh = new javax.swing.JToggleButton();
        jScrollPane = new javax.swing.JScrollPane();
        debugRequestTree = new de.naoth.rc.checkboxtree.CheckboxTree();

        setLayout(new java.awt.BorderLayout());

        toolbarMain.setFloatable(false);
        toolbarMain.setRollover(true);

        btUpdate.setText("Update");
        btUpdate.setFocusable(false);
        btUpdate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btUpdate.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUpdateActionPerformed(evt);
            }
        });
        toolbarMain.add(btUpdate);

        btRefresh.setText("Reload");
        btRefresh.setFocusable(false);
        btRefresh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btRefresh.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRefreshActionPerformed(evt);
            }
        });
        toolbarMain.add(btRefresh);

        add(toolbarMain, java.awt.BorderLayout.PAGE_START);

        jScrollPane.setBorder(null);
        jScrollPane.setViewportView(debugRequestTree);

        add(jScrollPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

  private void btRefreshActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btRefreshActionPerformed
  {//GEN-HEADEREND:event_btRefreshActionPerformed

    this.debugRequestTree.clear();
            
    if (btRefresh.isSelected())
    {
      if (Plugin.parent.checkConnected()) {
        Plugin.dbgRequestManager.addListener(this);
      } else {
        btRefresh.setSelected(false);
      }
    } else {
      Plugin.dbgRequestManager.removeListener(this);
    }

  }//GEN-LAST:event_btRefreshActionPerformed

    private void btUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUpdateActionPerformed
        if (btUpdate.isSelected())
        {
          if (Plugin.parent.checkConnected()) {
            Plugin.dbgRequestManager.addListener(this);
          } else {
            btUpdate.setSelected(false);
          }
        } else {
          Plugin.dbgRequestManager.removeListener(this);
        }
    }//GEN-LAST:event_btUpdateActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btRefresh;
    private javax.swing.JToggleButton btUpdate;
    private de.naoth.rc.checkboxtree.CheckboxTree debugRequestTree;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JToolBar toolbarMain;
    // End of variables declaration//GEN-END:variables

  private void sendCommand(String path, boolean enable)
  {
    Command command = new Command();
    command.setName(path);
    String arg = enable ? "on" : "off";
    command.addArg(arg);

    System.err.println(path + " " + arg);
    send(command);
  }

  private void send(Command command)
  {
    if (Plugin.parent.checkConnected()) {
      Plugin.parent.getMessageServer().executeSingleCommand(this, command);
    }
  }

  @Override
  public JPanel getPanel() {
    return this;
  }

  @Override
  public void dispose() {
    remove(debugRequestTree);
  }

  @Override
  public void handleResponse(byte[] result, Command originalCommand)
  {
    System.out.println("handleResponse: " + new String(result));
  }

  @Override
  public void handleError(int code)
  {
    // TODO: handle errors
    System.err.println("handleError: " + code);
  }

  @Override
  public Command getCurrentCommand()
  {
    return new Command("ping");
  }

  @Override
  public void newObjectReceived(String[] object)
  {
    for (String str : object)
    {
      String[] tokens = str.split("\\|");

      String tooltip = "NO COMMENT";
      if (tokens.length >= 4) {
        tooltip = "<html>" + tokens[2] + "<br>" + tokens[3] + "</html>";
      } else if(tokens.length >= 3) {
          tooltip = tokens[2];
      }
      
      if (tokens.length >= 2)
      {
        boolean selected = tokens[1].equals("1");
        final String path = tokens[0];
        
        final SelectableTreeNode node = this.debugRequestTree.insertPath(path, ':');
        node.setSelected(selected);
        node.setTooltip(tooltip);

        node.getComponent().addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sendCommand(path, node.isSelected());
            }
        });
      }
    }//end for
    
    this.debugRequestTree.repaint();
    btRefresh.setSelected(false);
    btUpdate.setSelected(false);
    Plugin.dbgRequestManager.removeListener(this);
  }

  @Override
  public void errorOccured(String cause)
  {
    btRefresh.setSelected(false);
    btUpdate.setSelected(false);
    Plugin.dbgRequestManager.removeListener(this);
  }
}
