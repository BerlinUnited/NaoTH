/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.naoth.rc.dialogs;

import de.naoth.rc.RobotControl;
import de.naoth.rc.core.dialog.AbstractDialog;
import de.naoth.rc.core.dialog.DialogPlugin;
import de.naoth.rc.dataformats.SPLMessage;
import de.naoth.rc.dataformats.Sexp;
import de.naoth.rc.dataformats.SimsparkState;
import de.naoth.rc.dialogs.TeamCommViewer.TeamCommMessage;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.Base64;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import javax.swing.table.TableModel;
import javax.swing.text.DefaultCaret;
import net.xeoh.plugins.base.annotations.PluginImplementation;
import net.xeoh.plugins.base.annotations.injections.InjectPlugin;

/**
 *
 * @author Philipp Strobel <philippstrobel@posteo.de>
 */
public class TeamCommViewerSimspark extends AbstractDialog {

    @PluginImplementation
    public static class Plugin extends DialogPlugin<TeamCommViewerSimspark> {
        @InjectPlugin
        public static RobotControl parent;
//        @InjectPlugin
//        public static TeamCommViewer teamComm;
    }//end Plugin
    
//    private final int port = 3100; // agent = 3100; monitor = 3200
    private final int port_agent = 3100;
    private final int port_monitor = 3200;
    
    private final String host = "127.0.0.1";
    private Simspark simspark_comm;
    private final SimsparkState sim_state = new SimsparkState();
    
    /**
     * Creates new form TeamCommViewerSimspark
     */
    public TeamCommViewerSimspark() {
        initComponents();
        DefaultCaret caret = (DefaultCaret) jTextArea1.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        addTableContent();
        jTable1.getColumnModel().getColumn(0).setWidth(20);
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(20);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSendCommand = new javax.swing.JButton();
        btnConnect = new javax.swing.JToggleButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmd_ball_x = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cmd_ball_y = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cmd_ball_z = new javax.swing.JTextField();
        cmd_ball_vx = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cmd_ball_vy = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        cmd_ball_vz = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        cmd_play_mode = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        cmd = new javax.swing.JComboBox<>();
        jButton4 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();

        btnSendCommand.setText("Send Command");
        btnSendCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendCommandActionPerformed(evt);
            }
        });

        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Name", "Data"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        jScrollPane2.setViewportView(jTable1);

        jTabbedPane1.addTab("MonitorInfo", jScrollPane2);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTabbedPane1.addTab("MonitorCommunication", jScrollPane1);

        jScrollPane3.setEnabled(false);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setText("Ballposition");
        jLabel1.setToolTipText("(ball (pos <x> <y> <z>)(vel <x> <y> <z>))");

        cmd_ball_x.setColumns(3);
        cmd_ball_x.setText("0");

        jLabel2.setText("X=");

        jLabel4.setText("Y=");

        cmd_ball_y.setColumns(3);
        cmd_ball_y.setText("0");

        jLabel3.setText("Z=");

        cmd_ball_z.setColumns(3);
        cmd_ball_z.setText("0");

        cmd_ball_vx.setColumns(3);
        cmd_ball_vx.setText("0");

        jLabel5.setText("Vx=");

        jLabel6.setText("Vy=");

        cmd_ball_vy.setColumns(3);
        cmd_ball_vy.setText("0");

        jLabel7.setText("Vz=");

        cmd_ball_vz.setColumns(3);
        cmd_ball_vz.setText("0");

        jButton1.setText("Send");
        jButton1.setPreferredSize(new java.awt.Dimension(70, 19));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(1, 1, 1)
                .addComponent(cmd_ball_x, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(1, 1, 1)
                .addComponent(cmd_ball_y, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(1, 1, 1)
                .addComponent(cmd_ball_z, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGap(4, 4, 4)
                .addComponent(cmd_ball_vx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addGap(1, 1, 1)
                .addComponent(cmd_ball_vy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addGap(1, 1, 1)
                .addComponent(cmd_ball_vz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(cmd_ball_vz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(cmd_ball_vy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(cmd_ball_vx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(cmd_ball_z, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(cmd_ball_y, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2)
                        .addComponent(cmd_ball_x, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(4, 4, 4))
        );

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel8.setText("Playmode");
        jLabel8.setToolTipText("(ball (pos <x> <y> <z>)(vel <x> <y> <z>))");

        jButton2.setText("Send");
        jButton2.setPreferredSize(new java.awt.Dimension(70, 19));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmd_play_mode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel8)
                .addComponent(cmd_play_mode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel9.setText("Drop ball");
        jLabel9.setToolTipText("(ball (pos <x> <y> <z>)(vel <x> <y> <z>))");

        jButton3.setText("Send");
        jButton3.setPreferredSize(new java.awt.Dimension(70, 19));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel9)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(259, Short.MAX_VALUE))
        );

        jScrollPane3.setViewportView(jPanel1);

        jTabbedPane1.addTab("MonitorCommands", jScrollPane3);

        cmd.setEditable(true);
        cmd.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "(ball (pos 0 0 0))", "(ball (pos 0 0 0)(vel 0 0 0))", "(dropBall)", "(playMode )", "(agent (unum <num>) (team <team>) (pos <x> <y> <z>))", "(agent (unum <num>) (team <team>) (move <x> <y> <z> <rot>))", "(agent (unum <num>) (team <team>) (battery <batterylevel>))", "(agent (unum <num>) (team <team>) (temperature <temperature>))", "(agent (unum <num>) (team <team>) (pos <x> <y> <z>)(move <x> <y> <z> <rot>)(battery <batterylevel>)(temperature <temperature>))", "(kickOff <team>)", "(select (unum <num>) (team <team>))", "(kill)", "(kill (unum <num>) (team <team>))", "(repos)", "(repos (unum <num>) (team <team>))", "(time <time>)", "(score (left <score>) (right <score>))", "(reqfullstate)" }));
        cmd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdActionPerformed(evt);
            }
        });

        jButton4.setText("Clear");
        jButton4.setToolTipText("Clears the MonitorCommunication tab.");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jCheckBox1.setSelected(true);
        jCheckBox1.setToolTipText("Show monitor messages in MonitorCommunication tab.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnConnect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmd, 0, 1, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSendCommand, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 679, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnConnect)
                        .addComponent(btnSendCommand)
                        .addComponent(cmd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton4))
                    .addComponent(jCheckBox1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSendCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendCommandActionPerformed
        if(!((String)cmd.getSelectedItem()).isEmpty() && simspark_comm != null && simspark_comm.isAlive()) {
            simspark_comm.sendAgentMessage(((String)cmd.getSelectedItem()).trim());
        }
    }//GEN-LAST:event_btnSendCommandActionPerformed

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        if (btnConnect.isSelected()) {
            try {
                System.out.println("...");
                
                if (simspark_comm != null) {
                    simspark_comm.disconnect();
                    simspark_comm.join();
                }
                
//                simspark_comm = new SimsparkAgent();
//                simspark_comm.connect(host, port_agent);
                simspark_comm = new SimsparkMonitor();
                simspark_comm.connect(host, port_monitor);
                simspark_comm.start();
                
            } catch (IOException | InterruptedException ex) {
                Logger.getLogger(TeamCommViewerSimspark.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            if (simspark_comm != null) {
                try {
                    simspark_comm.disconnect();
                    simspark_comm.join();
                } catch (InterruptedException | IOException ex) {
                    Logger.getLogger(TeamCommViewerSimspark.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            simspark_comm = null;
        }
    }//GEN-LAST:event_btnConnectActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(simspark_comm != null && simspark_comm.isAlive()) {
            String command = String.format("(ball (pos %f %f %f)(vel %f %f %f))", 
                checkInputDouble(cmd_ball_x.getText(), .0),
                checkInputDouble(cmd_ball_y.getText(), .0),
                checkInputDouble(cmd_ball_z.getText(), .0),
                checkInputDouble(cmd_ball_vx.getText(), .0),
                checkInputDouble(cmd_ball_vy.getText(), .0),
                checkInputDouble(cmd_ball_vz.getText(), .0)
            );
            simspark_comm.sendAgentMessage(command);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(simspark_comm != null && simspark_comm.isAlive()) {
            String command = String.format("(playMode %s)", cmd_play_mode.getSelectedItem());
            simspark_comm.sendAgentMessage(command);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if(simspark_comm != null && simspark_comm.isAlive()) {
            String command = "(dropBall)";
            simspark_comm.sendAgentMessage(command);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void cmdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        jTextArea1.setText("");
    }//GEN-LAST:event_jButton4ActionPerformed

    private void addTableContent() {
        TableModel model = jTable1.getModel();
        model.setValueAt("time",        0, 0);
        model.setValueAt("play_mode",   1, 0);
        model.setValueAt("score_left",  2, 0);
        model.setValueAt("score_right", 3, 0);
        model.setValueAt("half",        4, 0);
        model.setValueAt("FieldLength", 5, 0);
        model.setValueAt("FieldWidth",  6, 0);
        model.setValueAt("FieldHeight", 7, 0);
        model.setValueAt("GoalWidth",   8, 0);
        model.setValueAt("GoalDepth",   9, 0);
        model.setValueAt("GoalHeight", 10, 0);
        model.setValueAt("BorderSize", 11, 0);
        model.setValueAt("FreeKickDistance", 12, 0);
        model.setValueAt("WaitBeforeKickOff",13, 0);
        model.setValueAt("AgentRadius",14, 0);
        model.setValueAt("BallRadius", 15, 0);
        model.setValueAt("BallMass",   16, 0);
        model.setValueAt("RuleGoalPauseTime",17, 0);
        model.setValueAt("RuleKickInPauseTime", 18, 0);
        model.setValueAt("RuleHalfTime",     19, 0);
        model.setValueAt("play_modes",       20, 0);
    }
    
    private Double checkInputDouble(String input, Double default_val) {
        try {
            return Double.parseDouble(input);
        } catch(NumberFormatException e) {
        }
        return default_val;
    }
    
    private class Simspark extends Thread {
        protected DataInputStream in;
        protected DataOutputStream out;
        protected Socket socket;
        protected boolean isRunning;
        
        public Simspark() {
        }
        
        public void connect(String host, int port) throws IOException {
            socket = new Socket(host, port);
//            this.socket.setTcpNoDelay(true);

            in = new DataInputStream(socket.getInputStream());
            out = new DataOutputStream(socket.getOutputStream());

            isRunning = true;
        }
        
        public void disconnect() throws IOException {
            isRunning = false;
            in.close();
            out.close();
            socket.close();
        }

        /**
         * Sends an agent message to the server.
         * <p/>
         * This method formats an agent message (String of SimSpark effector
         * messages) according to the network protocol and sends it to the
         * server.
         * <p/>
         * The content of the agent message is not validated.
         *
         * @param msg Agent message with effector commands.
         * @param out
         */
        public void sendAgentMessage(String msg) {

            byte[] body = msg.getBytes();

            //comments by the authors of magma from Offenburg:
            // FIXME: this is to compensate a server bug that clients responding too
            // quickly get problems
            // long runtime = 0;
            // boolean slowedDown = false;
            // long slowDownTime = 0;
            // int minWaitTime = 1000000;
            // do {
            // runtime = System.nanoTime() - startTime;
            // if (runtime < minWaitTime && !slowedDown) {
            // slowDownTime = minWaitTime - runtime;
            // slowedDown = true;
            // }
            // } while (runtime < minWaitTime);
            // if (slowedDown) {
            // logger.log(Level.FINE, "slowedDown sending message by: {0}",
            // slowDownTime);
            // }
            // Header of the message, specifies the length of the message:
            // "The length prefix is a 32 bit unsigned integer in network order, i.e. big 
            // endian notation with the most significant bits transferred first." 
            // (cited from 
            // http://simspark.sourceforge.net/wiki/index.php/Network_Protocol, 14.1.2012)
            int len = body.length;
            int byte0 = (len >> 24) & 0xFF;
            int byte1 = (len >> 16) & 0xFF;
            int byte2 = (len >> 8) & 0xFF;
            int byte3 = len & 0xFF;

            try {
                out.writeByte((byte) byte0);
                out.writeByte((byte) byte1);
                out.writeByte((byte) byte2);
                out.writeByte((byte) byte3);
                out.write(body);
                out.flush();
            } catch (IOException e) {
                System.out.println("Error writing to socket. Has the server been shut down?");
            }
            if(msg != "(syn)") {
                System.out.println("sended msg: "+msg);
            }
        }

        /**
         * Receives a server message and returns it.
         * <p/>
         * This method listens (blocking) for the next SimSpark message from the
         * server, removes the header concerning the SimSpark network protocol
         * and returns the server message (String of perceptor messages). <br>
         * If the server has sent more then one message since the last call of
         * this method, the oldest is returned, that means the messages are
         * provided always in chronological order.
         * <p/>
         * @param in
         * @return The raw server message (String of concatenated perceptor
         * messages).
         */
        public String getServerMessage() {
            String msg = "keine Nachricht";
            byte[] result;
            int length;

            try {
                if(in.available() == 0) { return null; }
                int byte0 = in.read();
                int byte1 = in.read();
                int byte2 = in.read();
                int byte3 = in.read();
                length = byte0 << 24 | byte1 << 16 | byte2 << 8 | byte3; // analyzes
                // the header
                int total = 0;

                if (length < 0) {
                    // server was shutdown
                    System.out.println("Server ist down.");
                }

                result = new byte[length];
                while (total < length) {
                    total += in.read(result, total, length - total);
                }
                msg = new String(result, 0, length, "UTF-8");
            } catch (IOException e) {
                System.out.println("Error when reading from socket. Has the server been shut down?");
                return null;
            }
            return msg;
        }
    } // end class Simspark
    
    private class SimsparkAgent extends Simspark {
        public void run() {
            if(socket == null) { return; }
            // use another rsg... ?
            sendAgentMessage("(scene rsg/agent/nao/nao.rsg 0)(syn)");
            System.out.println(getServerMessage());
            sendAgentMessage("(init (unum 0)(teamname NaoTH))(syn)");
            System.out.println(getServerMessage());
            
            
            System.out.println("listening");
            
            while(isRunning) {
                try {
                    sleep(1);
                    
//                    System.out.println("next ...");
                    sendAgentMessage("(syn)");
                    String msg = getServerMessage();
                    if (msg != null) {
                        jTextArea1.append(msg + "\n");
//                        jScrollPane1.
//                        System.out.println(msg);
                    }
                } catch (InterruptedException ex) {
                    Logger.getLogger(TeamCommViewerSimspark.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    } // end class SimsparkAgent
    
    private class SimsparkMonitor extends Simspark {

        public void run() {
            if(socket == null) { return; }
            
            while(isRunning) {
                try {
                    sleep(1);
                    final String msg = getServerMessage();
                    if (msg != null) {
                        SimsparkStateUpdater r = new SimsparkStateUpdater(msg);
                        SwingUtilities.invokeLater(r);
                    }
                } catch (InterruptedException ex) {
                    Logger.getLogger(TeamCommViewerSimspark.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    } // end class SimsparkMonitor
    
    private class SimsparkStateUpdater implements Runnable {

        private final ByteBuffer readBuffer;
        private final String msg;
        
        public SimsparkStateUpdater(String msg) {
            this.readBuffer = ByteBuffer.allocateDirect(SPLMessage.SPL_STANDARD_MESSAGE_SIZE);
            this.readBuffer.order(ByteOrder.LITTLE_ENDIAN);
            this.msg = msg;
        }
        
        @Override
        public void run() {
            Sexp parser = new Sexp(msg);
            if (jCheckBox1.isSelected()) {
                jTextArea1.append(msg + "\n");
            }
            List<Object> attributes = parser.parseSexp();
            updateInfo(attributes);
            updateTable();
        }

        public void updateInfo(List<Object> info) {
            if (!info.isEmpty()) {
                Object o = info.get(0);
                if (o instanceof String) {
                    sim_state.set((String) o, info.size() == 1 ? true : (info.size() == 2 ? info.get(1) : info.subList(1, info.size())));
//                    System.out.println("|"+o+"|");
//                    System.out.println((((String) o).equals("messages")));
                    if(((String) o).equals("messages")) {
                        updateTeamComm(info.subList(1, info.size()));
                    }
                } else {
                    for (Object object : info) {
                        updateInfo((List<Object>) object);
                    }
                }
            }
        }

        public void updateTable() {
            TableModel model = jTable1.getModel();
            for (int i = 0; i < model.getRowCount(); i++) {
                model.setValueAt(sim_state.get(model.getValueAt(i, 0)), i, 1);
            }

            if (cmd_play_mode.getItemCount() == 0 && sim_state.get("play_modes") != null) {
                for (String item : (List<String>) sim_state.get("play_modes")) {
                    cmd_play_mode.addItem(item);
                }
            }
        }

        public void updateTeamComm(List<Object> l) {
//            System.out.println("parse?");
            for (Object object : l) {
                String message = (String)object;
//                ByteBuffer b = ByteBuffer.wrap(Base64.getDecoder().decode(message));
//                System.out.println(message + "" + (char)b.get());
                try {
                    byte[] b = Base64.getDecoder().decode(message);
                    this.readBuffer.clear();
                    this.readBuffer.put(b);
                    this.readBuffer.flip();
                    SPLMessage spl = new SPLMessage(this.readBuffer);
                    // TODO: add spl msg to TeamCommViewer ?!?
//                    TeamCommMessage tc_msg = Plugin.teamComm.new TeamCommMessage(System.currentTimeMillis(), spl, false);
//                    Plugin.teamComm.messageMap.put("127.0.0.1",tc_msg);
                } catch (Exception ex) {
                    Logger.getLogger(TeamCommViewerSimspark.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    } // end class SimsparkStateUpdater

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnConnect;
    private javax.swing.JButton btnSendCommand;
    private javax.swing.JComboBox<String> cmd;
    private javax.swing.JTextField cmd_ball_vx;
    private javax.swing.JTextField cmd_ball_vy;
    private javax.swing.JTextField cmd_ball_vz;
    private javax.swing.JTextField cmd_ball_x;
    private javax.swing.JTextField cmd_ball_y;
    private javax.swing.JTextField cmd_ball_z;
    private javax.swing.JComboBox<String> cmd_play_mode;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
