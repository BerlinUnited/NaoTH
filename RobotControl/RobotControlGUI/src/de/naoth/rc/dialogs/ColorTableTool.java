package de.naoth.rc.dialogs;

import de.naoth.rc.AbstractDialog;
import de.naoth.rc.RobotControl;
import de.naoth.rc.dataformats.JanusImage;
import de.naoth.rc.dialogs.Tools.ColorTable;
import de.naoth.rc.dialogs.Tools.Colors;
import de.naoth.rc.dialogs.drawings.Box;
import de.naoth.rc.dialogs.drawings.Drawable;
import de.naoth.rc.dialogs.panels.DynamicCanvasPanel;
import de.naoth.rc.manager.ImageManager;
import de.naoth.rc.manager.ObjectListener;
import de.naoth.rc.server.Command;
import de.naoth.rc.server.CommandSender;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import java.awt.geom.Point2D.Float;
import javax.imageio.ImageIO;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import net.xeoh.plugins.base.annotations.PluginImplementation;
import net.xeoh.plugins.base.annotations.events.Init;
import net.xeoh.plugins.base.annotations.injections.InjectPlugin;

/**
 *
 * @author  thomas
 */
@PluginImplementation
public class ColorTableTool extends AbstractDialog
  implements ObjectListener<JanusImage>
{

  @InjectPlugin
  public RobotControl parent;
  @InjectPlugin
  public ImageManager imageManager;

  private ImagePanel imageCanvas;
  private ColorClassifiedImagePanel colorClassifiedImageCanvas;
  private ColorSpaceImagePanel colorSpaceImagePanel;
  private ColorTable currentColorTable;
  private boolean currentColorTableWasModified;
  public final static int NUM_OF_CT_REVISIONS = 50;
  private ArrayList<ColorTable> colorTableRevisions;
  private int lastX;
  private int lastY;
  
  private final Command getColorTableCommand = new Command("representation:get").addArg("ColorTable64");
  private final String setColorTableCommandBase = "file::write";
  private final Command reloadColorTableCommand = new Command("colortable:load");
  private final Command pathColorTableCommand = new Command("colortable:file_path");
  
  private final String defaultColorTablePath = "../NaoController/Config/colortable";
  private final String cameraAutoParam = "camera:switch_auto_parameters";
  private String lastPath;

  /** Creates new form ImageViewer */
  public ColorTableTool()
  {
    initComponents();
  }

  @Init
  public void init()
  {
    //this.parent = parent;
    //this.messageServer = parent.getMessageServer();

    this.currentColorTable = new ColorTable();
    this.currentColorTableWasModified = false;
    this.colorTableRevisions = new ArrayList<ColorTable>(NUM_OF_CT_REVISIONS);

    // setup the image-views
    imageCanvas = new ImagePanel();
    this.imagePanel.add(imageCanvas);

    colorClassifiedImageCanvas = new ColorClassifiedImagePanel();
    this.colorClassifiedImagePanel.add(colorClassifiedImageCanvas);

    ColorMarker cm = new ColorMarker();

    imageCanvas.addMouseMotionListener(colorClassifiedImageCanvas);
    imageCanvas.addMouseWheelListener(colorClassifiedImageCanvas);
    imageCanvas.addMouseListener(colorClassifiedImageCanvas);
    imageCanvas.addMouseListener(cm);

    colorClassifiedImageCanvas.addMouseMotionListener(imageCanvas);
    colorClassifiedImageCanvas.addMouseWheelListener(imageCanvas);
    colorClassifiedImageCanvas.addMouseListener(imageCanvas);
    colorClassifiedImageCanvas.addMouseListener(cm);


    colorSpaceImagePanel = new ColorSpaceImagePanel();
    colorSpaceImagePanel.addMouseListener(new SimpleColorMarker());
    this.colorChanell_uv.add(colorSpaceImagePanel);
    

    // set the default directory containing color table
    File defaultColorTableFile = new File(defaultColorTablePath);
    if(defaultColorTableFile.exists() && defaultColorTableFile.isDirectory())
    {
      this.fileChooser.setCurrentDirectory(defaultColorTableFile);
    }
    else
    {
      this.fileChooser.setCurrentDirectory(new File("."));
    }
    this.fileChooser.setFileFilter(new FileNameExtensionFilter("ColorTable64 File (*.c64)", "c64"));
  }//end init

  @Override
  public JPanel getPanel()
  {
    return this;
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    fileChooser = new de.naoth.rc.dialogs.panels.ExtendedFileChooser();
    colorPopUp = new javax.swing.JDialog();
    currentColor = new javax.swing.JLabel();
    jToolBar1 = new javax.swing.JToolBar();
    btReceiveImages = new javax.swing.JToggleButton();
    newMenuButton = new javax.swing.JButton();
    openMenuButton = new javax.swing.JButton();
    saveMenuButton = new javax.swing.JButton();
    jButtonSend = new javax.swing.JButton();
    jButtonGetFromRobot = new javax.swing.JButton();
    btUndo = new javax.swing.JButton();
    btAutoCameraParameters = new javax.swing.JToggleButton();
    jPanel3 = new javax.swing.JPanel();
    originalImageContainer = new javax.swing.JPanel();
    imagePanel = new javax.swing.JPanel();
    classifiedImageContainer = new javax.swing.JPanel();
    colorClassifiedImagePanel = new javax.swing.JPanel();
    toolsPanel = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    jSpinnerMaxCSDistance = new javax.swing.JSpinner();
    jCheckBoxUseYUVDistance = new javax.swing.JCheckBox();
    jLabel2 = new javax.swing.JLabel();
    colorBlobSizeSpinner = new javax.swing.JSpinner();
    colorChooserPanel1 = new de.naoth.rc.dialogs.panels.ColorChooserPanel();
    jSlider1 = new javax.swing.JSlider();
    colorChanell_uv_Container = new javax.swing.JPanel();
    colorChanell_uv = new javax.swing.JPanel();

    colorPopUp.setAlwaysOnTop(true);
    colorPopUp.setEnabled(false);
    colorPopUp.setFocusCycleRoot(false);
    colorPopUp.setFocusable(false);
    colorPopUp.setFocusableWindowState(false);
    colorPopUp.setMinimumSize(new java.awt.Dimension(30, 30));
    colorPopUp.setName("colorPopUp"); // NOI18N
    colorPopUp.setResizable(false);
    colorPopUp.setUndecorated(true);

    currentColor.setBackground(java.awt.Color.gray);
    currentColor.setToolTipText("Current Color");
    currentColor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    currentColor.setOpaque(true);
    currentColor.setPreferredSize(new java.awt.Dimension(30, 30));

    javax.swing.GroupLayout colorPopUpLayout = new javax.swing.GroupLayout(colorPopUp.getContentPane());
    colorPopUp.getContentPane().setLayout(colorPopUpLayout);
    colorPopUpLayout.setHorizontalGroup(
      colorPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(currentColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
    );
    colorPopUpLayout.setVerticalGroup(
      colorPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(currentColor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
    );

    setPreferredSize(new java.awt.Dimension(800, 363));
    addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        formMouseClicked(evt);
      }
    });

    jToolBar1.setFloatable(false);
    jToolBar1.setRollover(true);

    btReceiveImages.setText("Receive Images");
    btReceiveImages.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btReceiveImagesActionPerformed(evt);
      }
    });
    jToolBar1.add(btReceiveImages);

    newMenuButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/New24.gif"))); // NOI18N
    newMenuButton.setToolTipText("New");
    newMenuButton.setFocusable(false);
    newMenuButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    newMenuButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    newMenuButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        newMenuButtonActionPerformed(evt);
      }
    });
    jToolBar1.add(newMenuButton);

    openMenuButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Open24.gif"))); // NOI18N
    openMenuButton.setToolTipText("Open");
    openMenuButton.setFocusable(false);
    openMenuButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    openMenuButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    openMenuButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        openMenuButtonActionPerformed(evt);
      }
    });
    jToolBar1.add(openMenuButton);

    saveMenuButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Save24.gif"))); // NOI18N
    saveMenuButton.setToolTipText("Save");
    saveMenuButton.setFocusable(false);
    saveMenuButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    saveMenuButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    saveMenuButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        saveMenuButtonActionPerformed(evt);
      }
    });
    jToolBar1.add(saveMenuButton);

    jButtonSend.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Export24.gif"))); // NOI18N
    jButtonSend.setToolTipText("Send To Robot");
    jButtonSend.setFocusable(false);
    jButtonSend.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jButtonSend.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jButtonSend.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonSendActionPerformed(evt);
      }
    });
    jToolBar1.add(jButtonSend);

    jButtonGetFromRobot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Import24.gif"))); // NOI18N
    jButtonGetFromRobot.setToolTipText("Get From Robot");
    jButtonGetFromRobot.setFocusable(false);
    jButtonGetFromRobot.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jButtonGetFromRobot.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jButtonGetFromRobot.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonGetFromRobotActionPerformed(evt);
      }
    });
    jToolBar1.add(jButtonGetFromRobot);

    btUndo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Undo24.gif"))); // NOI18N
    btUndo.setToolTipText("Undo");
    btUndo.setFocusable(false);
    btUndo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btUndo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btUndo.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btUndoActionPerformed(evt);
      }
    });
    jToolBar1.add(btUndo);

    btAutoCameraParameters.setText("Auto Camera Params");
    btAutoCameraParameters.setFocusable(false);
    btAutoCameraParameters.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btAutoCameraParameters.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btAutoCameraParameters.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btAutoCameraParametersActionPerformed(evt);
      }
    });
    jToolBar1.add(btAutoCameraParameters);

    originalImageContainer.setBackground(java.awt.Color.gray);
    originalImageContainer.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    originalImageContainer.setPreferredSize(new java.awt.Dimension(320, 240));
    originalImageContainer.setLayout(new java.awt.BorderLayout());

    imagePanel.setBackground(java.awt.Color.gray);
    imagePanel.setOpaque(false);
    imagePanel.setPreferredSize(new java.awt.Dimension(320, 240));
    imagePanel.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        imagePanelMouseClicked(evt);
      }
    });
    imagePanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
      public void mouseMoved(java.awt.event.MouseEvent evt) {
        imagePanelMouseMoved(evt);
      }
    });

    javax.swing.GroupLayout imagePanelLayout = new javax.swing.GroupLayout(imagePanel);
    imagePanel.setLayout(imagePanelLayout);
    imagePanelLayout.setHorizontalGroup(
      imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 318, Short.MAX_VALUE)
    );
    imagePanelLayout.setVerticalGroup(
      imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 238, Short.MAX_VALUE)
    );

    originalImageContainer.add(imagePanel, java.awt.BorderLayout.CENTER);

    classifiedImageContainer.setBackground(java.awt.Color.gray);
    classifiedImageContainer.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    classifiedImageContainer.setPreferredSize(new java.awt.Dimension(320, 240));
    classifiedImageContainer.setLayout(new java.awt.BorderLayout());

    colorClassifiedImagePanel.setBackground(java.awt.Color.gray);
    colorClassifiedImagePanel.setOpaque(false);
    colorClassifiedImagePanel.setPreferredSize(new java.awt.Dimension(320, 240));

    javax.swing.GroupLayout colorClassifiedImagePanelLayout = new javax.swing.GroupLayout(colorClassifiedImagePanel);
    colorClassifiedImagePanel.setLayout(colorClassifiedImagePanelLayout);
    colorClassifiedImagePanelLayout.setHorizontalGroup(
      colorClassifiedImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 318, Short.MAX_VALUE)
    );
    colorClassifiedImagePanelLayout.setVerticalGroup(
      colorClassifiedImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 240, Short.MAX_VALUE)
    );

    classifiedImageContainer.add(colorClassifiedImagePanel, java.awt.BorderLayout.PAGE_START);

    toolsPanel.setBackground(new java.awt.Color(255, 51, 102));
    toolsPanel.setOpaque(false);
    toolsPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

    jLabel1.setText("Max color space distance:");
    toolsPanel.add(jLabel1);

    jSpinnerMaxCSDistance.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 100.0d, 1.0d));
    jSpinnerMaxCSDistance.setToolTipText("the max distance in colorspace for region growth");
    toolsPanel.add(jSpinnerMaxCSDistance);

    jCheckBoxUseYUVDistance.setSelected(true);
    jCheckBoxUseYUVDistance.setText("use distance in uv-plane");
    jCheckBoxUseYUVDistance.setToolTipText("use distance on uv-plane instead in RGB space");
    jCheckBoxUseYUVDistance.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
    jCheckBoxUseYUVDistance.setPreferredSize(new java.awt.Dimension(141, 18));
    toolsPanel.add(jCheckBoxUseYUVDistance);

    jLabel2.setText("Blocksize:");
    toolsPanel.add(jLabel2);

    colorBlobSizeSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
    colorBlobSizeSpinner.setToolTipText("the blocksize to mark in colortable");
    colorBlobSizeSpinner.setMinimumSize(new java.awt.Dimension(47, 20));
    colorBlobSizeSpinner.setPreferredSize(new java.awt.Dimension(47, 20));
    toolsPanel.add(colorBlobSizeSpinner);

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
      jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel3Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
          .addComponent(toolsPanel, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
          .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
            .addComponent(originalImageContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(classifiedImageContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jPanel3Layout.setVerticalGroup(
      jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel3Layout.createSequentialGroup()
        .addComponent(toolsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(originalImageContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(classifiedImageContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jSlider1.setMaximum(64);
    jSlider1.setOrientation(javax.swing.JSlider.VERTICAL);
    jSlider1.setPaintTicks(true);
    jSlider1.setSnapToTicks(true);
    jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        jSlider1StateChanged(evt);
      }
    });

    colorChanell_uv_Container.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    colorChanell_uv_Container.setPreferredSize(new java.awt.Dimension(192, 192));
    colorChanell_uv_Container.setLayout(new java.awt.BorderLayout());

    colorChanell_uv.setPreferredSize(new java.awt.Dimension(192, 192));

    javax.swing.GroupLayout colorChanell_uvLayout = new javax.swing.GroupLayout(colorChanell_uv);
    colorChanell_uv.setLayout(colorChanell_uvLayout);
    colorChanell_uvLayout.setHorizontalGroup(
      colorChanell_uvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 190, Short.MAX_VALUE)
    );
    colorChanell_uvLayout.setVerticalGroup(
      colorChanell_uvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 190, Short.MAX_VALUE)
    );

    colorChanell_uv_Container.add(colorChanell_uv, java.awt.BorderLayout.CENTER);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(colorChooserPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(342, Short.MAX_VALUE))
      .addGroup(layout.createSequentialGroup()
        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(colorChanell_uv_Container, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(433, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(colorChooserPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(colorChanell_uv_Container, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
    );
  }// </editor-fold>//GEN-END:initComponents
  private void btReceiveImagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btReceiveImagesActionPerformed

    if(btReceiveImages.isSelected())
    {
      if(parent.checkConnected())
      {
        imageManager.addListener(this);
      }
      else
      {
        btReceiveImages.setSelected(false);
      }
    }
    else
    {
      imageManager.removeListener(this);
    }

  }//GEN-LAST:event_btReceiveImagesActionPerformed

  private void imagePanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imagePanelMouseMoved
    // TODO: this method is not called, because its overwritten later!!!

    lastX = evt.getX();
    lastY = evt.getY();
    JanusImage img = imageCanvas.getImage();
    if(img == null || lastX >= img.getRgb().getWidth() || lastY >= img.getRgb().getHeight())
    {
      return;
    }
    Color color = new Color(img.getRgb().getRGB(lastX, lastY));
    currentColor.setBackground(color);
  }//GEN-LAST:event_imagePanelMouseMoved

  private void imagePanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imagePanelMouseClicked
  }//GEN-LAST:event_imagePanelMouseClicked

  private void commitColorTable(ColorTable ct)
  {
    if(ct != null)
    {
      while(colorTableRevisions.size() > NUM_OF_CT_REVISIONS)
      {
        colorTableRevisions.remove(0);
      }//end while

      colorTableRevisions.add(new ColorTable(ct));
    }//end if
  }//end commitColorTable

  public double colorDistanceYUV(Color color1, Color color2)
  {
    return Math.sqrt((color1.getRed() - color2.getRed()) * (color1.getRed() - color2.getRed()) +
      (color1.getGreen() - color2.getGreen()) * (color1.getGreen() - color2.getGreen()) +
      (color1.getBlue() - color2.getBlue()) * (color1.getBlue() - color2.getBlue()));
  }//end colorDistanceRGB

  public double colorDistanceUV(Color color1, Color color2)
  {
    return Math.sqrt((color1.getGreen() - color2.getGreen()) * (color1.getGreen() - color2.getGreen()) +
                     (color1.getBlue() - color2.getBlue()) * (color1.getBlue() - color2.getBlue()));
  }//end colorDistanceUV

  private void newMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuButtonActionPerformed
    setColorTable(new ColorTable());
  }//GEN-LAST:event_newMenuButtonActionPerformed

  private void jButtonSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSendActionPerformed

    sendCommand(pathColorTableCommand); // get current path
  }//GEN-LAST:event_jButtonSendActionPerformed

  private void jButtonGetFromRobotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGetFromRobotActionPerformed
    sendCommand(getColorTableCommand);
  }//GEN-LAST:event_jButtonGetFromRobotActionPerformed

private void btUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUndoActionPerformed
  if(colorTableRevisions != null && colorTableRevisions.size() > 0)
  {
    currentColorTable = colorTableRevisions.get(colorTableRevisions.size() - 1);
    colorTableRevisions.remove(colorTableRevisions.size() - 1);
  }
  colorClassifiedImageCanvas.setColorClassifiedImage(imageCanvas.getImage());
}//GEN-LAST:event_btUndoActionPerformed

private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
  this.imageCanvas.setScale(1.0);
  this.imageCanvas.setOffsetX(0.0);
  this.imageCanvas.setOffsetY(0.0);
  this.colorClassifiedImageCanvas.setScale(1.0);
  this.colorClassifiedImageCanvas.setOffsetX(0.0);
  this.colorClassifiedImageCanvas.setOffsetY(0.0);
  colorClassifiedImageCanvas.validate();
  this.repaint();
}//GEN-LAST:event_formMouseClicked

private void saveMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuButtonActionPerformed
  fileChooser.showSaveDialog(this);
  File selectedFile = fileChooser.getSelectedFile();


  if(selectedFile == null)
  {
    return;
  }
  try
  {
    FileWriter fileWriter = new FileWriter(selectedFile, false);
    char[] buffer = this.currentColorTable.getCharArray();
    for(int i = 0; i < buffer.length; i++)
    {
      if(buffer[i] != 0)
      {
        System.out.println("true");
      }
    }
    fileWriter.write(buffer, 0, buffer.length);
    fileWriter.close();

    this.currentColorTableWasModified = false;
  }
  catch(IOException e)
  {
    JOptionPane.showMessageDialog(this,
      e.toString(), "The file could not be written.", JOptionPane.ERROR_MESSAGE);
  }//end catch
}//GEN-LAST:event_saveMenuButtonActionPerformed

private void btAutoCameraParametersActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btAutoCameraParametersActionPerformed
{//GEN-HEADEREND:event_btAutoCameraParametersActionPerformed

  boolean on = btAutoCameraParameters.isSelected();
  Command cmd = new Command(cameraAutoParam).addArg(on ? "on"  : "off");
  sendCommand(cmd);

}//GEN-LAST:event_btAutoCameraParametersActionPerformed

private void openMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuButtonActionPerformed
  fileChooser.showOpenDialog(this);
  File selectedFile = fileChooser.getSelectedFile();

  if(selectedFile == null)
  {
    return;
  }
  try
  {
    if(!selectedFile.getName().endsWith(".c64"))
    {
        BufferedImage img = ImageIO.read(selectedFile);
        JanusImage janusImage = new JanusImage(img, false);
        newObjectReceived(janusImage);
    }
    else
    {
        FileReader fileReader = new FileReader(selectedFile);
        char[] buffer = new char[64 * 64 * 64];
        fileReader.read(buffer, 0, buffer.length);
        ColorTable colorTable = new ColorTable();
        colorTable.createFromCharArray(buffer);

        setColorTable(colorTable);

        fileReader.close();
    }
  }
  catch(IOException e)
  {
    JOptionPane.showMessageDialog(this,
      e.toString(), "The file could not be read.", JOptionPane.ERROR_MESSAGE);

  }//end catch
}//GEN-LAST:event_openMenuButtonActionPerformed

private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
  int v = this.jSlider1.getValue();
  this.colorSpaceImagePanel.setColorTableImage(v);
}//GEN-LAST:event_jSlider1StateChanged

  @Override
  public void newObjectReceived(JanusImage object)
  {
    imageCanvas.setImage(object);
    colorClassifiedImageCanvas.setColorClassifiedImage(object);
    colorClassifiedImageCanvas.repaint();
    imageCanvas.repaint();

    colorSpaceImagePanel.setColorSpaceImage(object);
    colorSpaceImagePanel.repaint();
  }

  @Override
  public void errorOccured(String cause)
  {
    btReceiveImages.setSelected(false);
    imageManager.removeListener(this);
    JOptionPane.showMessageDialog(this,
      cause, "Error", JOptionPane.ERROR_MESSAGE);
  }

  public int getLastX()
  {
    return lastX;
  }

  public int getLastY()
  {
    return lastY;
  }


  private class Point
  {
    int x;
    int y;
    int z;
  }
  
  private class ColorBlob implements Drawable
  {
    Point p1;
    Point p2;
    Point p3;

    int r1;
    int r2;
    int r3;
    
    @Override
    public void draw(Graphics2D g2d)
    {
      g2d.drawLine(p1.x, p1.y, p2.x, p2.y);
      g2d.drawLine(p2.x, p2.y, p3.x, p3.y);

      g2d.drawOval(p1.x-r1, p1.y-r1, 2*r1, 2*r1);
      g2d.drawOval(p2.x-r2, p2.y-r2, 2*r2, 2*r2);
      g2d.drawOval(p3.x-r3, p3.y-r3, 2*r3, 2*r3);
    }
  }//end class ColorBlob


  private class ColorSpaceImagePanel extends DynamicCanvasPanel
  {

    public ColorSpaceImagePanel()
    {
      this.addDrawing(new ImageDrawing());
      this.addDrawing(new Box(0,0,64,64));
      this.setScale(3);
    }
    
    public void setColorSpaceImage(JanusImage image)
    {
      if(image != null)
      {
        //setImage(getColorClassesImage(image));
      }
    }//end setColorClassifiedImage

    public void setColorTableImage(int y_chanel)
    {
      if(0 <= y_chanel && y_chanel < 64)
      {
        setImage(getColorTableImage(y_chanel));
      }
    }//end setColorClassifiedImage

    private BufferedImage getColorTableImage(int y_chanel)
    {
      int width = 64;
      int height = 64;

      BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
      int[] rgbBuffer = new int[width * height];
      for(int u = 0; u < height; u++)
      {
        for(int v = 0; v < width; v++)
        {
          Colors.ColorClass ccl = currentColorTable.getColor((char)y_chanel,(char)u,(char)v);

          try
          {
            Color color = Colors.GetColor(ccl);
            rgbBuffer[v * width + u] = color.getRGB();//asRgb.getRGB(x, y);
          }
          catch(Exception e)
          {
            e.printStackTrace();
          }
        }//end for
      }//end for
      img.setRGB(0, 0, width, height, rgbBuffer, 0, width);
      return img;
    }//end getColorTableImage

    private BufferedImage getColorClassesImage(JanusImage image)
    {
      synchronized(image)
      {
        BufferedImage asYuv = image.getYCbCr();
        BufferedImage asRgb = image.getRgb();
        int width = 64;
        int height = 64;

        BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);

        int[] rgbBuffer = new int[width * height];
        for(int y = 0; y < asYuv.getHeight(); y++)
        {
          for(int x = 0; x < asYuv.getWidth(); x++)
          {
            int rgb = asYuv.getRGB(x, y);
            int a = (0x00ff0000 & rgb) >> 18;
            int b = (0x0000ff00 & rgb) >> 10;
            int c = (0x000000ff & rgb) >> 2;
            
            Colors.ColorClass ccl = currentColorTable.getColor((char)a,(char)b,(char)c);

            try
            {
              Color color = Colors.GetColor(ccl);
              rgbBuffer[b * width + c] = color.getRGB();//asRgb.getRGB(x, y);
            }
            catch(Exception e)
            {
              e.printStackTrace();
            }
          }//end for x
        }//end for y

        img.setRGB(0, 0, width, height, rgbBuffer, 0, width);
        return img;
      }//end synchronized
    }//end getColorClassesImage

    protected BufferedImage image;
    public void setImage(BufferedImage image)
    {
      this.image = image;
      this.setSize(colorChanell_uv_Container.getSize());
      this.repaint();
    }//end setImage
    
    private class ImageDrawing implements Drawable
    {
      @Override
      public void draw(Graphics2D g2d)
      {
        if(image != null)
        {
          g2d.drawImage(image, new AffineTransform(1, 0, 0, -1, 0, 0), null);
        }
      }//end draw
    }//end class ImageDrawing
  }//end class ColorSpaceImagePanel

  private class ColorClassifiedImagePanel extends ImagePanel
  {
    int[] color_plane = new int[64 * 64];

    public void setColorClassifiedImage(JanusImage image)
    {
      if(image != null)
      {
        setImage(getColorClassifiedImage(image));
      }
    }//end setColorClassifiedImage

    private JanusImage getColorClassifiedImage(JanusImage image)
    {
      synchronized(image)
      {
        BufferedImage asYuv = image.getYCbCr();
        int width = asYuv.getWidth();
        int height = asYuv.getHeight();

        BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);

        if(currentColorTable == null)
        {
          return new JanusImage(img, false);
        }
        
        int[] rgbBuffer = new int[width * height];
        for(int y = 0; y < height; y++)
        {
          for(int x = 0; x < width; x++)
          {
            /*
            Color color = new Color(asYuv.getRGB(x, y));
            Colors.ColorClass ccl = currentColorTable.getColor(
              (char) (color.getRed() / 4),
              (char) (color.getGreen() / 4),
              (char) (color.getBlue() / 4));
            */
            
            int rgb = asYuv.getRGB(x, y);
            Colors.ColorClass ccl = currentColorTable.getColor(
                     (char)((0x00ff0000 & rgb) >> 18), // (red / 4)
                     (char)((0x0000ff00 & rgb) >> 10), // (green / 4)
                     (char)((0x000000ff & rgb) >> 2)   // (blue / 4)
                    );
                    
            try
            {
              Color c = Colors.GetColor(ccl);
              rgbBuffer[y * width + x] = c.getRGB();
            }
            catch(Exception e)
            {
              e.printStackTrace();
            }

          }//end for
        }//end for
        img.setRGB(0, 0, width, height, rgbBuffer, 0, width);
        return new JanusImage(img, false);
      }//end synchronized
    }//end getColorClassifiedImage

    @Override
    public void paint(Graphics g)
    {
      super.paint(g);

      // paint marker
      if(getParent() != null && getParent().getParent() instanceof ColorTableTool)
      {
        ColorTableTool parent = (ColorTableTool) getParent().getParent();
        Color oldColor = g.getColor();
        g.setColor(Color.MAGENTA);
        g.fillOval(parent.getLastX(), parent.getLastY(), 4, 4);
        g.setColor(oldColor);
      }
    }//end paint
  }//end class ColorClassifiedImagePanel

  
  private class SimpleColorMarker extends MouseAdapter
  {

    @Override
    public void mouseClicked(MouseEvent e)
    {
      //System.out.println("click");
      // save old version
      commitColorTable(currentColorTable);

      //
      Colors.ColorClass selectedColor;
      try
      {
        selectedColor = colorChooserPanel1.getSelectedColor();
      }
      catch(NullPointerException ex)
      {
        JOptionPane.showMessageDialog(null,
          "Select the color first.", "No color selected.", JOptionPane.WARNING_MESSAGE);
        return;
      }

      int size = ((Double) colorBlobSizeSpinner.getValue()).intValue();
      if(size > 100)
      {
        size = 100;
        colorBlobSizeSpinner.setValue(100);
      }
      if(size < 0)
      {
        size = 0;
        colorBlobSizeSpinner.setValue(0);
      }

      java.awt.Point.Double p = colorSpaceImagePanel.canvasCoordinatesToInternal(new java.awt.Point.Double(e.getX(), e.getY()));
      int u2 = (int)Math.round(p.x);
      int v2 = (int)Math.round(p.y);
      int y2 = jSlider1.getValue();

      if(u2 < 0 || u2 > 63 ||
         v2 < 0 || v2 > 63 ||
         y2 < 0 || y2 > 63) return;

      currentColorTable.setColor(
              (char) (y2),
              (char) (u2),
              (char) (v2),
              selectedColor,
              size);

      // refresh
      colorSpaceImagePanel.setColorTableImage(y2);
    }//end mouseClicked
  }//end class SimpleColorMarker

  private class ColorMarker extends MouseAdapter
  {

    @Override
    public void mouseClicked(MouseEvent e)
    {
      //System.out.println("click");
      // save old version
      commitColorTable(currentColorTable);

      // calculate current color
      java.awt.Point.Double p = imageCanvas.canvasCoordinatesToInternal(new java.awt.Point.Double(e.getX(), e.getY()));
      int x = (int)Math.round(p.x);
      int y = (int)Math.round(p.y);
      //int x = (int) (((double) e.getX() - imageCanvas.getOffsetX()) / imageCanvas.getScale());
      //int y = (int) (((double) e.getY() - imageCanvas.getOffsetY()) / imageCanvas.getScale());

      // get the color value
      JanusImage img = imageCanvas.getImage();
      if(img == null)
      {
        return;
      }
      BufferedImage yuvImg = img.getYCbCr();
      if(yuvImg == null || x >= yuvImg.getWidth() || y >= yuvImg.getHeight() || x < 0 || y < 0)
      {
        return;
      }
      Color startingColor = new Color(yuvImg.getRGB(x, y));

      //
      Colors.ColorClass selectedColor;
      try
      {
        selectedColor = colorChooserPanel1.getSelectedColor();
      }
      catch(NullPointerException ex)
      {
        JOptionPane.showMessageDialog(null,
          "Select the color first.", "No color selected.", JOptionPane.WARNING_MESSAGE);
        return;
      }


      int size = ((Double) colorBlobSizeSpinner.getValue()).intValue();
      if(size > 100)
      {
        size = 100;
        colorBlobSizeSpinner.setValue(100);
      }
      if(size < 0)
      {
        size = 0;
        colorBlobSizeSpinner.setValue(0);
      }

      ArrayList openList = new ArrayList();
      boolean[][] visited = new boolean[img.getRgb().getWidth()][img.getRgb().getHeight()];

      openList.add(new Float(x, y));
      double maxDist = ((Double) (jSpinnerMaxCSDistance.getValue())).doubleValue();

      while(!openList.isEmpty())
      {
        Float currentPoint = (Float) openList.remove(0);
        if(currentPoint.getX() > 0 && currentPoint.getX() < yuvImg.getWidth() &&
          currentPoint.getY() > 0 && currentPoint.getY() < yuvImg.getHeight() &&
          !visited[(int) (currentPoint.getX())][(int) (currentPoint.getY())])
        {

          Color currentColor = new Color(yuvImg.getRGB((int) (currentPoint.getX()),
            (int) (currentPoint.getY())));

          double dist;
          if(jCheckBoxUseYUVDistance.isSelected())
          {
            dist = colorDistanceUV(startingColor, currentColor);
          }
          else
          {
            dist = colorDistanceYUV(startingColor, currentColor);
          /*double dist =Math.sqrt( (startingColor.getRed()   - currentColor.getRed()  ) * (startingColor.getRed()   - currentColor.getRed())   +
          (startingColor.getGreen() - currentColor.getGreen()) * (startingColor.getGreen() - currentColor.getGreen()) + 
          (startingColor.getBlue()  - currentColor.getBlue() ) * (startingColor.getBlue()  - currentColor.getBlue()));*/
          }
          if(dist <= maxDist)
          {
            currentColorTable.setColor(
              (char) (currentColor.getRed() / 4),
              (char) (currentColor.getGreen() / 4),
              (char) (currentColor.getBlue() / 4),
              selectedColor,
              size);
            currentColorTableWasModified = true;
            openList.add(new Float((float) currentPoint.getX() - 1, (float) currentPoint.getY() - 1));
            openList.add(new Float((float) currentPoint.getX() - 1, (float) currentPoint.getY()));
            openList.add(new Float((float) currentPoint.getX() - 1, (float) currentPoint.getY() + 1));
            openList.add(new Float((float) currentPoint.getX(), (float) currentPoint.getY() - 1));
            openList.add(new Float((float) currentPoint.getX(), (float) currentPoint.getY() + 1));
            openList.add(new Float((float) currentPoint.getX() + 1, (float) currentPoint.getY() - 1));
            openList.add(new Float((float) currentPoint.getX() + 1, (float) currentPoint.getY()));
            openList.add(new Float((float) currentPoint.getX() + 1, (float) currentPoint.getY() + 1));
          }
        }
        if(currentPoint.getX() > 0 && currentPoint.getX() < yuvImg.getWidth() &&
          currentPoint.getY() > 0 && currentPoint.getY() < yuvImg.getHeight())
        {
          visited[(int) (currentPoint.getX())][(int) (currentPoint.getY())] = true;
        }
      }

      colorClassifiedImageCanvas.setColorClassifiedImage(imageCanvas.getImage());
    }//end mouseClicked
  }//end class ColorMarker

  private class ImagePanel extends DynamicCanvasPanel
  {

    private JanusImage image;

    public ImagePanel()
    {
      this.getDrawingList().clear();
      this.addDrawing(new ImageDrawing());
    }
    protected BufferedImage backgroundImage;

    public void setImage(JanusImage image)
    {
      this.image = image;
      this.backgroundImage = image.getRgb();
      this.setSize(imagePanel.getSize());
      this.repaint();
    }

    @Override
    public void mouseMoved(MouseEvent e)
    {
      int lastX = (int) (((double) e.getX() - this.getOffsetX()) / this.getScale());
      int lastY = (int) (((double) e.getY() - this.getOffsetY()) / this.getScale());
      BufferedImage img = imageCanvas.getImage().getRgb();
      if(img == null || lastX >= img.getWidth() || lastY >= img.getHeight() || lastX < 0 || lastY < 0)
      {
        return;
      }
      Color color = new Color(img.getRGB(lastX, lastY));
      currentColor.setBackground(color);

      colorPopUp.setLocation(e.getXOnScreen()+15, e.getYOnScreen()+10);
    }//end mouseMoved

    @Override
    public void mouseDragged(MouseEvent e) {
      super.mouseDragged(e);
      colorPopUp.setLocation(e.getXOnScreen()+15, e.getYOnScreen()+10);
    }
    
    @Override
    public void mouseEntered(MouseEvent e) {
      super.mouseEntered(e);
      colorPopUp.setVisible(true);
    }

    @Override
    public void mouseExited(MouseEvent e) {
      super.mouseExited(e);
      colorPopUp.setVisible(false);
    }

    

    public JanusImage getImage()
    {
      return this.image;
    }

    private class ImageDrawing implements Drawable
    {
      @Override
      public void draw(Graphics2D g2d)
      {
        if(backgroundImage != null)
        {
          g2d.drawImage(backgroundImage, new AffineTransform(1, 0, 0, -1, 0, 0), null);
        }
      }//end draw
    }//end class ImageDrawing
  }//end class ImagePanel

  private void sendCommand(Command command)
  {
    final Command commandToExecute = command;
    final ColorTableTool thisFinal = this;
    this.parent.getMessageServer().executeSingleCommand(new CommandSender()
    {

      @Override
      public void handleResponse(byte[] result, Command originalCommand)
      {
        if(originalCommand.getName().equals(getColorTableCommand.getName()))
        {
          ColorTable colorTable = new ColorTable();
          colorTable.createFromCharArray((new String(result)).toCharArray());
          setColorTable(colorTable);
        }
        else if(originalCommand.equals(pathColorTableCommand))
        {
          String path = new String(result);
          if(!path.equals("colortable file path is empty"))
          {
            lastPath = path;

            char[] buffer = thisFinal.currentColorTable.getCharArray();
            
            Command command = new Command(setColorTableCommandBase)
                    .addArg("path", lastPath)
                    .addArg("content", new String(buffer));

            sendCommand(command);
            sendCommand(reloadColorTableCommand);
          }
          else
          {
            JOptionPane.showMessageDialog(thisFinal,
              "Colortable path is empty", "Colortable NOT sent to robot", JOptionPane.ERROR_MESSAGE);
          }
        }
        else if(originalCommand.getName().equals(setColorTableCommandBase))
        {
          String answer = new String(result);
          if(answer.endsWith("successfull written."))
          {
            JOptionPane.showMessageDialog(thisFinal,
                "Colortable has been written to\n" + lastPath, "Colortable sent to robot", JOptionPane.INFORMATION_MESSAGE);
          }
          else
          {
            JOptionPane.showMessageDialog(thisFinal,
                answer, "Colortable NOT sent to robot", JOptionPane.INFORMATION_MESSAGE);
          }
        }
        else if(originalCommand.getName().equals(cameraAutoParam)
          && originalCommand.getArguments().size() >= 1
          && originalCommand.getArguments().keySet().contains("off"))
        {
          String answer = new String(result);
          if(answer.endsWith("parameter were saved"))
          {
            JOptionPane.showMessageDialog(thisFinal,
              "Written camera parameters.", "INFO", JOptionPane.INFORMATION_MESSAGE);
          }
          else
          {
            JOptionPane.showMessageDialog(thisFinal,
                answer, "Camera parameters NOT written", JOptionPane.INFORMATION_MESSAGE);
          }
          
        }

      }//end handleResponse

      @Override
      public void handleError(int code)
      {
        JOptionPane.showMessageDialog(thisFinal,
              "Could not send or receive colortable, code " + code, "ERROR", JOptionPane.ERROR_MESSAGE);
      }

      @Override
      public Command getCurrentCommand()
      {
        return commandToExecute;
      }
    }, command);
  }//end sendCommand

  private void saveColorTable()
  {
  }//end saveColorTable

  private void setColorTable(ColorTable colorTable)
  {
    if(this.currentColorTableWasModified)
    {
      int response = JOptionPane.showConfirmDialog(null,
        "ColorTable was modified Save it?", "Question",
        JOptionPane.YES_NO_CANCEL_OPTION,
        JOptionPane.QUESTION_MESSAGE);

      if(response != JOptionPane.NO_OPTION)
      {
        if(response == JOptionPane.CANCEL_OPTION)
        {
          return;
        }
        if(response == JOptionPane.YES_OPTION)
        {
          return;
        }
        return;
      }//end if
    }//end if

    this.currentColorTable = colorTable;
    colorClassifiedImageCanvas.setColorClassifiedImage(imageCanvas.getImage());
  }//end setColorTable

  @Override
  public void dispose()
  {
    //System.out.println("Dispose is not implemented for: " + this.getClass().getName());
    btReceiveImages.setSelected(false);
    imageManager.removeListener(this);
  }//end dispose
    
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JToggleButton btAutoCameraParameters;
  private javax.swing.JToggleButton btReceiveImages;
  private javax.swing.JButton btUndo;
  private javax.swing.JPanel classifiedImageContainer;
  private javax.swing.JSpinner colorBlobSizeSpinner;
  private javax.swing.JPanel colorChanell_uv;
  private javax.swing.JPanel colorChanell_uv_Container;
  private de.naoth.rc.dialogs.panels.ColorChooserPanel colorChooserPanel1;
  private javax.swing.JPanel colorClassifiedImagePanel;
  private javax.swing.JDialog colorPopUp;
  private javax.swing.JLabel currentColor;
  private de.naoth.rc.dialogs.panels.ExtendedFileChooser fileChooser;
  private javax.swing.JPanel imagePanel;
  private javax.swing.JButton jButtonGetFromRobot;
  private javax.swing.JButton jButtonSend;
  private javax.swing.JCheckBox jCheckBoxUseYUVDistance;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JSlider jSlider1;
  private javax.swing.JSpinner jSpinnerMaxCSDistance;
  private javax.swing.JToolBar jToolBar1;
  private javax.swing.JButton newMenuButton;
  private javax.swing.JButton openMenuButton;
  private javax.swing.JPanel originalImageContainer;
  private javax.swing.JButton saveMenuButton;
  private javax.swing.JPanel toolsPanel;
  // End of variables declaration//GEN-END:variables
}
