/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package de.naoth.rc.dialogs;

import com.google.protobuf.InvalidProtocolBufferException;
import de.naoth.rc.AbstractDialog;
import de.naoth.rc.DialogPlugin;
import de.naoth.rc.LogSimulator;
import de.naoth.rc.LogSimulator.LogSimulatorManager;
import de.naoth.rc.RobotControl;
import de.naoth.rc.dialogs.LogfileAutoPlayer.CallbackClass;
import de.naoth.rc.dialogs.ResultSaver.ResultType;
import de.naoth.rc.manager.GenericManagerFactory;
import de.naoth.rc.manager.ObjectListener;
import de.naoth.rc.manager.SwingCommandExecutor;
import de.naoth.rc.messages.CommonTypes.GoalPost;
import de.naoth.rc.messages.Representations;
import de.naoth.rc.server.Command;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import net.xeoh.plugins.base.annotations.PluginImplementation;
import net.xeoh.plugins.base.annotations.injections.InjectPlugin;

/**
 *
 * @author helios
 */
public class ParameterTester extends AbstractDialog { 
   // implements CommandSender{

    @PluginImplementation
    public static class Plugin extends DialogPlugin<ParameterTester> {
        @InjectPlugin
        public static RobotControl parent;
        @InjectPlugin
        public static GenericManagerFactory genericManagerFactory;
        @InjectPlugin
        public static SwingCommandExecutor commandExecutor;
    }
    ParameterListener parameterListener;
    LogSimulatorManager logSimulatorManager;
    LogPerceptListener logPerceptListener;
    LogfileAutoPlayer logfileAutoPlayer;
    ParameterRun parameterRun;
    JPanel choosenPanel;
/*    double doubleStartValue,
           doubleEndValue,
           doubleStepSize;
    int intStartValue,
           intEndValue;
        //   intStepSize;*/
    private Map<Integer, Boolean> topBall,
            bottomBall;
    private Map<Integer, Integer> topGoal,
            bottomGoal;
    boolean idle; 
    
    public ParameterTester() {         
        this.idle = true;
        logPerceptListener = new ParameterTester.LogPerceptListener();
        LogSimulator.LogSimulatorManager.getInstance().addListener(logPerceptListener);
        this.parameterListener = new ParameterListener();
        initComponents();
        this.logSimulatorManager = LogSimulatorManager.getInstance();
        this.choosenPanel = null;        
        this.resultList = new LinkedList<>();  
        this.waitForCallback = new WaitForCallback();
        this.logfileAutoPlayer = null;
   //     this.drawResults = new GraphicOutput();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        parameterCheckBoxGroup = new javax.swing.ButtonGroup();
        parameterValues = new javax.swing.JPanel();
        name = new javax.swing.JLabel();
        from = new javax.swing.JTextField();
        to = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        titleValues = new javax.swing.JPanel();
        name1 = new javax.swing.JLabel();
        from1 = new javax.swing.JTextField();
        to1 = new javax.swing.JTextField();
        jCheckBox2 = new javax.swing.JCheckBox();
        stepSizeDialog = new javax.swing.JDialog();
        stepSizePanel = new javax.swing.JPanel();
        stepSizeLabel = new javax.swing.JLabel();
        stepSizeTF = new javax.swing.JTextField();
        stepSizeButton = new javax.swing.JButton();
        drawResultsFrame = new javax.swing.JFrame();
        drawResultsPanel = new de.naoth.rc.dialogs.ChartJPanel();
        chooseResultDrawings = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        topMissedBallsCB = new javax.swing.JCheckBox();
        topFalseBallsCB = new javax.swing.JCheckBox();
        topMissedGPCB = new javax.swing.JCheckBox();
        topFalseGPCB = new javax.swing.JCheckBox();
        bottomMissedBallsCB = new javax.swing.JCheckBox();
        bottomFalseBallsCB = new javax.swing.JCheckBox();
        bottomMissedGPCB = new javax.swing.JCheckBox();
        bottomFalseGPCB = new javax.swing.JCheckBox();
        progressFrame = new javax.swing.JFrame();
        stopButton = new javax.swing.JButton();
        progressLabelMax = new javax.swing.JLabel();
        progressLabelSlash = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        progressLabel = new javax.swing.JLabel();
        listParameters = new javax.swing.JComboBox();
        listParametersButton = new javax.swing.JButton();
        getParametersButton = new javax.swing.JButton();
        parameterHolderSP = new javax.swing.JScrollPane();
        parameterHolder = new javax.swing.JPanel();
        goButton = new javax.swing.JButton();

        parameterValues.setMinimumSize(new java.awt.Dimension(0, 20));
        java.awt.GridBagLayout parameterValuesLayout = new java.awt.GridBagLayout();
        parameterValuesLayout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0};
        parameterValuesLayout.rowHeights = new int[] {0};
        parameterValues.setLayout(parameterValuesLayout);

        name.setMaximumSize(new java.awt.Dimension(150, 20));
        name.setMinimumSize(new java.awt.Dimension(150, 20));
        name.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        parameterValues.add(name, gridBagConstraints);

        from.setMaximumSize(new java.awt.Dimension(100, 20));
        from.setMinimumSize(new java.awt.Dimension(100, 20));
        from.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        parameterValues.add(from, gridBagConstraints);

        to.setMaximumSize(new java.awt.Dimension(100, 20));
        to.setMinimumSize(new java.awt.Dimension(100, 20));
        to.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        parameterValues.add(to, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        parameterValues.add(jCheckBox1, gridBagConstraints);

        titleValues.setMinimumSize(new java.awt.Dimension(0, 20));
        titleValues.setLayout(new java.awt.GridBagLayout());

        name1.setMaximumSize(new java.awt.Dimension(150, 20));
        name1.setMinimumSize(new java.awt.Dimension(150, 20));
        name1.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        titleValues.add(name1, gridBagConstraints);

        from1.setMaximumSize(new java.awt.Dimension(100, 20));
        from1.setMinimumSize(new java.awt.Dimension(100, 20));
        from1.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        titleValues.add(from1, gridBagConstraints);

        to1.setMaximumSize(new java.awt.Dimension(100, 20));
        to1.setMinimumSize(new java.awt.Dimension(100, 20));
        to1.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        titleValues.add(to1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        titleValues.add(jCheckBox2, gridBagConstraints);

        stepSizeDialog.setTitle("Choose Step Size");
        stepSizeDialog.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        stepSizeDialog.setLocationByPlatform(true);
        stepSizeDialog.setMinimumSize(new java.awt.Dimension(121, 130));
        stepSizeDialog.setName("stepSizeDialog"); // NOI18N
        stepSizeDialog.setResizable(false);

        stepSizeLabel.setText("Enter StepSize");

        stepSizeButton.setText("OK");
        stepSizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stepSizeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout stepSizePanelLayout = new javax.swing.GroupLayout(stepSizePanel);
        stepSizePanel.setLayout(stepSizePanelLayout);
        stepSizePanelLayout.setHorizontalGroup(
            stepSizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stepSizePanelLayout.createSequentialGroup()
                .addComponent(stepSizeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stepSizeTF, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, stepSizePanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(stepSizeButton))
        );
        stepSizePanelLayout.setVerticalGroup(
            stepSizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stepSizePanelLayout.createSequentialGroup()
                .addGroup(stepSizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stepSizeLabel)
                    .addComponent(stepSizeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(stepSizeButton))
        );

        javax.swing.GroupLayout stepSizeDialogLayout = new javax.swing.GroupLayout(stepSizeDialog.getContentPane());
        stepSizeDialog.getContentPane().setLayout(stepSizeDialogLayout);
        stepSizeDialogLayout.setHorizontalGroup(
            stepSizeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(stepSizePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        stepSizeDialogLayout.setVerticalGroup(
            stepSizeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(stepSizePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        drawResultsFrame.setMinimumSize(new java.awt.Dimension(400, 460));

        javax.swing.GroupLayout drawResultsPanelLayout = new javax.swing.GroupLayout(drawResultsPanel);
        drawResultsPanel.setLayout(drawResultsPanelLayout);
        drawResultsPanelLayout.setHorizontalGroup(
            drawResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
        );
        drawResultsPanelLayout.setVerticalGroup(
            drawResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 363, Short.MAX_VALUE)
        );

        chooseResultDrawings.setMaximumSize(new java.awt.Dimension(420, 80));
        chooseResultDrawings.setMinimumSize(new java.awt.Dimension(420, 80));
        chooseResultDrawings.setOpaque(false);
        chooseResultDrawings.setPreferredSize(new java.awt.Dimension(420, 80));
        chooseResultDrawings.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("top:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        chooseResultDrawings.add(jLabel1, gridBagConstraints);

        jLabel2.setText("bottom:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        chooseResultDrawings.add(jLabel2, gridBagConstraints);

        topMissedBallsCB.setSelected(true);
        topMissedBallsCB.setText("missed Balls");
        topMissedBallsCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topMissedBallsCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        chooseResultDrawings.add(topMissedBallsCB, gridBagConstraints);

        topFalseBallsCB.setSelected(true);
        topFalseBallsCB.setText("false Balls");
        topFalseBallsCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topFalseBallsCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        chooseResultDrawings.add(topFalseBallsCB, gridBagConstraints);

        topMissedGPCB.setSelected(true);
        topMissedGPCB.setText("missed GP");
        topMissedGPCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topMissedGPCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        chooseResultDrawings.add(topMissedGPCB, gridBagConstraints);

        topFalseGPCB.setSelected(true);
        topFalseGPCB.setText("false GP");
        topFalseGPCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topFalseGPCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        chooseResultDrawings.add(topFalseGPCB, gridBagConstraints);

        bottomMissedBallsCB.setSelected(true);
        bottomMissedBallsCB.setText("missed Balls");
        bottomMissedBallsCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottomMissedBallsCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        chooseResultDrawings.add(bottomMissedBallsCB, gridBagConstraints);

        bottomFalseBallsCB.setSelected(true);
        bottomFalseBallsCB.setText("false Balls");
        bottomFalseBallsCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottomFalseBallsCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        chooseResultDrawings.add(bottomFalseBallsCB, gridBagConstraints);

        bottomMissedGPCB.setSelected(true);
        bottomMissedGPCB.setText("missed GP");
        bottomMissedGPCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottomMissedGPCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        chooseResultDrawings.add(bottomMissedGPCB, gridBagConstraints);

        bottomFalseGPCB.setSelected(true);
        bottomFalseGPCB.setText("false GP");
        bottomFalseGPCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottomFalseGPCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        chooseResultDrawings.add(bottomFalseGPCB, gridBagConstraints);

        javax.swing.GroupLayout drawResultsFrameLayout = new javax.swing.GroupLayout(drawResultsFrame.getContentPane());
        drawResultsFrame.getContentPane().setLayout(drawResultsFrameLayout);
        drawResultsFrameLayout.setHorizontalGroup(
            drawResultsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(drawResultsFrameLayout.createSequentialGroup()
                .addGroup(drawResultsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(drawResultsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(drawResultsFrameLayout.createSequentialGroup()
                        .addComponent(chooseResultDrawings, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        drawResultsFrameLayout.setVerticalGroup(
            drawResultsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, drawResultsFrameLayout.createSequentialGroup()
                .addComponent(drawResultsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chooseResultDrawings, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        progressFrame.setMinimumSize(new java.awt.Dimension(170, 130));
        progressFrame.setResizable(false);

        stopButton.setText("stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        progressLabelMax.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        progressLabelMax.setText("0");

        progressLabelSlash.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        progressLabelSlash.setText("/");

        progressLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        progressLabel.setText("0");

        javax.swing.GroupLayout progressFrameLayout = new javax.swing.GroupLayout(progressFrame.getContentPane());
        progressFrame.getContentPane().setLayout(progressFrameLayout);
        progressFrameLayout.setHorizontalGroup(
            progressFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(progressFrameLayout.createSequentialGroup()
                .addGroup(progressFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(progressFrameLayout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(stopButton))
                    .addGroup(progressFrameLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(progressFrameLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(progressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(progressLabelSlash, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(progressLabelMax, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        progressFrameLayout.setVerticalGroup(
            progressFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(progressFrameLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(progressFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(progressLabel)
                    .addComponent(progressLabelSlash)
                    .addComponent(progressLabelMax))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stopButton)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        listParameters.setEnabled(false);
        listParameters.setMaximumSize(new java.awt.Dimension(56, 25));
        listParameters.setMinimumSize(new java.awt.Dimension(56, 25));
        listParameters.setPreferredSize(new java.awt.Dimension(56, 25));

        listParametersButton.setText("list");
        listParametersButton.setMaximumSize(new java.awt.Dimension(75, 25));
        listParametersButton.setMinimumSize(new java.awt.Dimension(75, 25));
        listParametersButton.setPreferredSize(new java.awt.Dimension(75, 25));
        listParametersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listParametersButtonActionPerformed(evt);
            }
        });

        getParametersButton.setText("get");
        getParametersButton.setEnabled(false);
        getParametersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getParametersButtonActionPerformed(evt);
            }
        });

        parameterHolderSP.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        parameterHolderSP.setMinimumSize(new java.awt.Dimension(0, 0));

        parameterHolder.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        parameterHolder.setMinimumSize(new java.awt.Dimension(0, 0));
        parameterHolder.setPreferredSize(new java.awt.Dimension(300, 75));
        parameterHolder.setLayout(new java.awt.GridLayout(2, 0));
        parameterHolderSP.setViewportView(parameterHolder);

        goButton.setText("go!");
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(listParametersButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listParameters, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(getParametersButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(parameterHolderSP, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(goButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listParametersButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listParameters, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(getParametersButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(parameterHolderSP, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(goButton))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void listParametersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listParametersButtonActionPerformed
        if (Plugin.parent.checkConnected())
        {
            Command cmd = new Command("ParameterList:list");
            parameterListener.receiveParameterList = true;
            Plugin.commandExecutor.executeCommand(parameterListener, cmd);
            waitForCallback.startThread();
        }  
        
    }//GEN-LAST:event_listParametersButtonActionPerformed

    private void getParametersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getParametersButtonActionPerformed
        if (Plugin.parent.checkConnected())
        {
          if (listParameters.getSelectedItem() != null)
          {
            Command cmd = new Command("ParameterList:" + listParameters.getSelectedItem().toString() + ":get");
            parameterListener.receiveParameter = true;
            Plugin.commandExecutor.executeCommand(parameterListener,cmd);
            waitForCallback.startThread();
          }
        }
        else
        {
            toggleButtons();
        }
    }//GEN-LAST:event_getParametersButtonActionPerformed

    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        JPanel panel = null;
        for (Component component: this.parameterHolder.getComponents())
        {
            if (((JCheckBox) ((JPanel)component).getComponent(3)).isSelected()){
                panel = (JPanel) component;
                break;
            }
        }
        if (panel==null) return;
        choosenPanel = panel;
        this.stepSizeDialog.setVisible(true);
        
        
    }//GEN-LAST:event_goButtonActionPerformed

    private void stepSizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stepSizeButtonActionPerformed
        String textNum = this.stepSizeTF.getText();
        this.stepSizeTF.setBackground(Color.white);
        boolean isValueInt = isInteger(((JTextField)choosenPanel.getComponent(1)).getText()) 
                                            && isInteger(((JTextField)choosenPanel.getComponent(2)).getText());
        if ((isValueInt && !isInteger(textNum)) || (!isValueInt &&!isNumber(textNum))) {
                this.stepSizeTF.setBackground(Color.red);
                this.stepSizeTF.setText("");
                this.stepSizeDialog.setVisible(true);
                return;
        }
        String parameter = ((JLabel) choosenPanel.getComponent(0)).getText();
        if (isValueInt) {
            int min, max;
            min = Integer.parseInt(((JTextField)choosenPanel.getComponent(1)).getText());
            max = Integer.parseInt(((JTextField)choosenPanel.getComponent(2)).getText());            
            this.parameterRun = new ParameterRun(min,max,Integer.parseInt(textNum), parameter);
        } else {
            double min, max;
            min = Double.parseDouble(((JTextField)choosenPanel.getComponent(1)).getText());
            max = Double.parseDouble(((JTextField)choosenPanel.getComponent(2)).getText());
            this.parameterRun = new ParameterRun(min,max, Double.parseDouble(textNum), parameter);            
        }  
        //is min < max ?
        if(Double.parseDouble(((JTextField)choosenPanel.getComponent(1)).getText()) > 
            Double.parseDouble(((JTextField)choosenPanel.getComponent(2)).getText())) {
            ((JTextField)choosenPanel.getComponent(1)).setBackground(Color.red);
            ((JTextField)choosenPanel.getComponent(2)).setBackground(Color.red);
            return;
        }
        ((JTextField)choosenPanel.getComponent(1)).setBackground(Color.white);
        ((JTextField)choosenPanel.getComponent(2)).setBackground(Color.white);
        if (openFile()) this.stepSizeDialog.setVisible(false);
        this.parameterRun.startRun();
        
    }//GEN-LAST:event_stepSizeButtonActionPerformed

    private void bottomFalseBallsCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottomFalseBallsCBActionPerformed
        if (this.bottomFalseBallsCB.isSelected()) {
            this.drawResultsPanel.addDrawing(ResultType.BOTTOM_FALSE_BALLS);
        } else {
            this.drawResultsPanel.removeDrawing(ResultType.BOTTOM_FALSE_BALLS);
        }
        this.drawResultsPanel.setMinMaxY();
        this.drawResultsFrame.repaint();
    }//GEN-LAST:event_bottomFalseBallsCBActionPerformed

    private void bottomFalseGPCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottomFalseGPCBActionPerformed
        if (this.bottomFalseGPCB.isSelected()) {
            this.drawResultsPanel.addDrawing(ResultType.BOTTOM_FALSE_GP);
        } else {
            this.drawResultsPanel.removeDrawing(ResultType.BOTTOM_FALSE_GP);
        }
        this.drawResultsPanel.setMinMaxY();
        this.drawResultsFrame.repaint();
    }//GEN-LAST:event_bottomFalseGPCBActionPerformed

    private void topMissedBallsCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topMissedBallsCBActionPerformed
        if (this.topMissedBallsCB.isSelected()) {
            this.drawResultsPanel.addDrawing(ResultType.TOP_MISSED_BALLS);
        } else {
            this.drawResultsPanel.removeDrawing(ResultType.TOP_MISSED_BALLS);
        }
        this.drawResultsPanel.setMinMaxY();
        this.drawResultsFrame.repaint();
    }//GEN-LAST:event_topMissedBallsCBActionPerformed

    private void topFalseBallsCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topFalseBallsCBActionPerformed
        if (this.topFalseBallsCB.isSelected()) {
            this.drawResultsPanel.addDrawing(ResultType.TOP_FALSE_BALLS);
        } else {
            this.drawResultsPanel.removeDrawing(ResultType.TOP_FALSE_BALLS);
        }
        this.drawResultsPanel.setMinMaxY();
        this.drawResultsFrame.repaint();
    }//GEN-LAST:event_topFalseBallsCBActionPerformed

    private void topMissedGPCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topMissedGPCBActionPerformed
        if (this.topMissedGPCB.isSelected()) {
            this.drawResultsPanel.addDrawing(ResultType.TOP_MISSED_GP);
        } else {
            this.drawResultsPanel.removeDrawing(ResultType.TOP_MISSED_GP);
        }
        this.drawResultsPanel.setMinMaxY();
        this.drawResultsFrame.repaint();
    }//GEN-LAST:event_topMissedGPCBActionPerformed

    private void topFalseGPCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topFalseGPCBActionPerformed
        if (this.topFalseGPCB.isSelected()) {
            this.drawResultsPanel.addDrawing(ResultType.TOP_FALSE_GP);
        } else {
            this.drawResultsPanel.removeDrawing(ResultType.TOP_FALSE_GP);
        }
        this.drawResultsPanel.setMinMaxY();
        this.drawResultsFrame.repaint();
    }//GEN-LAST:event_topFalseGPCBActionPerformed

    private void bottomMissedBallsCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottomMissedBallsCBActionPerformed
        if (this.bottomMissedBallsCB.isSelected()) {
            this.drawResultsPanel.addDrawing(ResultType.BOTTOM_MISSED_BALLS);
        } else {
            this.drawResultsPanel.removeDrawing(ResultType.BOTTOM_MISSED_BALLS);
        }
        this.drawResultsPanel.setMinMaxY();
        this.drawResultsFrame.repaint();
    }//GEN-LAST:event_bottomMissedBallsCBActionPerformed

    private void bottomMissedGPCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottomMissedGPCBActionPerformed
        if (this.bottomMissedGPCB.isSelected()) {
            this.drawResultsPanel.addDrawing(ResultType.BOTTOM_MISSED_GP);
        } else {
            this.drawResultsPanel.removeDrawing(ResultType.BOTTOM_MISSED_GP);
        }
        this.drawResultsPanel.setMinMaxY();
        this.drawResultsFrame.repaint();
    }//GEN-LAST:event_bottomMissedGPCBActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        try {
            logfileAutoPlayer.stopPlay();
            logfileAutoPlayer.join();
        } catch (InterruptedException ex) {
            Logger.getLogger(LogfilePlayer.class.getName()).log(Level.SEVERE, null, ex);
            logfileAutoPlayer =  null;
        } finally {
            logfileAutoPlayer =  null;
        }        
        this.progressFrame.setVisible(false);
    }//GEN-LAST:event_stopButtonActionPerformed

    private boolean openFile() {
       // if (!this.jToggleButton3.isSelected()) return;        
        String fileName = LogfilePlayer.getFileName();
        if (fileName.equals("")) {
            JOptionPane.showMessageDialog(null, "No opened logfile", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        fileName = fileName.substring(0, fileName.lastIndexOf(".") + 1) + "gts";
        ObjectInputStream o;
        try {

            o = new ObjectInputStream(new FileInputStream(fileName));
            topBall = (Map<Integer, Boolean>) o.readObject();
            bottomBall = (Map<Integer, Boolean>) o.readObject();
            topGoal = (Map<Integer, Integer>) o.readObject();
            bottomGoal = (Map<Integer, Integer>) o.readObject();

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "No Groundtruth for this logfile", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GroundTruthReader.class.getName()).log(Level.SEVERE, null, ex);
        }
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox bottomFalseBallsCB;
    private javax.swing.JCheckBox bottomFalseGPCB;
    private javax.swing.JCheckBox bottomMissedBallsCB;
    private javax.swing.JCheckBox bottomMissedGPCB;
    private javax.swing.JPanel chooseResultDrawings;
    private javax.swing.JFrame drawResultsFrame;
    private de.naoth.rc.dialogs.ChartJPanel drawResultsPanel;
    private javax.swing.JTextField from;
    private javax.swing.JTextField from1;
    private javax.swing.JButton getParametersButton;
    private javax.swing.JButton goButton;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JComboBox listParameters;
    private javax.swing.JButton listParametersButton;
    private javax.swing.JLabel name;
    private javax.swing.JLabel name1;
    private javax.swing.ButtonGroup parameterCheckBoxGroup;
    private javax.swing.JPanel parameterHolder;
    private javax.swing.JScrollPane parameterHolderSP;
    private javax.swing.JPanel parameterValues;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JFrame progressFrame;
    private javax.swing.JLabel progressLabel;
    private javax.swing.JLabel progressLabelMax;
    private javax.swing.JLabel progressLabelSlash;
    private javax.swing.JButton stepSizeButton;
    private javax.swing.JDialog stepSizeDialog;
    private javax.swing.JLabel stepSizeLabel;
    private javax.swing.JPanel stepSizePanel;
    private javax.swing.JTextField stepSizeTF;
    private javax.swing.JButton stopButton;
    private javax.swing.JPanel titleValues;
    private javax.swing.JTextField to;
    private javax.swing.JTextField to1;
    private javax.swing.JCheckBox topFalseBallsCB;
    private javax.swing.JCheckBox topFalseGPCB;
    private javax.swing.JCheckBox topMissedBallsCB;
    private javax.swing.JCheckBox topMissedGPCB;
    // End of variables declaration//GEN-END:variables

    class ParameterListener implements ObjectListener<byte[]> 
    {
        boolean receiveParameterList = false,     
                receiveParameter = false,
                setParameter = false;
        
        @Override
        public void newObjectReceived(byte[] object) {
            ParameterTester.this.waitForCallback.waiting = false;
            if (receiveParameterList) {
                receiveParameterList = false;
                String strResult = new String(object);
                String[] parameterList = strResult.split("\n");
                if (listParameters.getItemCount()>0) listParameters.removeAllItems();
                for (String parameter: parameterList) {
                    listParameters.addItem(parameter);
                }
                if (!ParameterTester.this.getParametersButton.isEnabled()) toggleButtons();
            } else if (receiveParameter) {
                receiveParameter = false;
                String strResult = new String(object);
                String[] parameterList = strResult.split("\n");
                addParameterToPanel(parameterList);
            } else if (setParameter) {
                setParameter = false;
               /* if (ParameterTester.this.logfileAutoPlayer == null)*/ ParameterTester.this.logfileAutoPlayer = new LogfileAutoPlayer(ParameterTester.this.parameterRun); 
                ParameterTester.this.logSimulatorManager.jumpToBegin();
                ParameterTester.this.logfileAutoPlayer.start();
            }
        }

        @Override
        public void errorOccured(String cause) {
            
        }
    }
    
    private void addParameterToPanel (String[] parameterList) {
        this.parameterHolder.removeAll();
        Enumeration<AbstractButton> buttons = parameterCheckBoxGroup.getElements();
        while(buttons.hasMoreElements()){
            parameterCheckBoxGroup.remove(buttons.nextElement());
        }
        parameterHolder.setLayout(new java.awt.GridLayout(parameterList.length, 0));         
        parameterHolder.setPreferredSize(new Dimension(250,parameterList.length*25));
      //  parameterHolderSP.setPreferredSize(new Dimension(250+10,parameterList.length*25));
        for (String parameter: parameterList){
            boolean active;
            try {
                String[] split = parameter.split("=");
                active = isNumber(split[1]);
                JPanel panel = createJPanel();        
                JLabel label = (JLabel) panel.getComponent(0);
                label.setText(split[0]);
                label.setToolTipText(split[0]);
                JTextField fromTA = (JTextField) panel.getComponent(1),
                        toTA = (JTextField) panel.getComponent(2);
                JCheckBox checkBox =(JCheckBox) panel.getComponent(3);
                fromTA.setText(split[1]);
                toTA.setText(split[1]);
                fromTA.setEnabled(active);
                toTA.setEnabled(active);
                checkBox.setEnabled(active);
                parameterHolder.add(panel);
                parameterCheckBoxGroup.add(checkBox);
            } catch (ArrayIndexOutOfBoundsException ex){
                System.out.println(ex.getMessage());
            }
        }
        this.parameterHolder.repaint();
    }
    
    private void toggleButtons () {
        boolean enabled = !this.getParametersButton.isEnabled();
        this.getParametersButton.setEnabled(enabled);
        this.listParameters.setEnabled(enabled);
    }
    
    private JPanel createJPanel () {
        JPanel newPanel = new javax.swing.JPanel();
        javax.swing.JLabel nameNP = new javax.swing.JLabel();
        javax.swing.JTextField fromNP = new javax.swing.JTextField();
        javax.swing.JTextField toNP = new javax.swing.JTextField();
        javax.swing.JCheckBox jCheckBox1NP = new javax.swing.JCheckBox();
        java.awt.GridBagConstraints gridBagConstraints;
        newPanel.setPreferredSize(new java.awt.Dimension(250, 25));
        java.awt.GridBagLayout newPanelLayout = new java.awt.GridBagLayout();
        newPanelLayout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0};
        newPanelLayout.rowHeights = new int[] {0};
        newPanel.setLayout(newPanelLayout);
        nameNP.setPreferredSize(new java.awt.Dimension(100, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        newPanel.add(nameNP, gridBagConstraints);
        fromNP.setPreferredSize(new java.awt.Dimension(50, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        newPanel.add(fromNP, gridBagConstraints);
        toNP.setPreferredSize(new java.awt.Dimension(50, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        newPanel.add(toNP, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        newPanel.add(jCheckBox1NP, gridBagConstraints);
        return newPanel;        
    }
    
    private boolean isNumber (String test) {
        return (isInteger(test) || isDouble(test));
    }
    
    private boolean isInteger(String test) {
        try {
            Integer.parseInt(test);
            return true;
        } catch (NumberFormatException ex){
            return false;
        }
    }
    
    private boolean isDouble (String test) {
        try {
           Double.parseDouble(test);
           return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }
    private class ParameterRun implements CallbackClass{
        String parameter;
        int minInt, maxInt, curInt;
        double minDouble, maxDouble, curDouble,
                stepSize;
        boolean intParameter;
               // waitForStart;
        String value;
        LogfileAutoPlayer logfileAutoPlayer;
        ParameterRun (int min, int max, int stepSize, String parameter) {
            this.minInt = min;
            this.maxInt = max;
            this.curInt = min;
            this.stepSize = stepSize;
            this.intParameter = true;
            this.parameter = parameter;
        }
        ParameterRun (double min, double max, double stepSize, String parameter) {
            this.minDouble = min;
            this.maxDouble = max;
            this.curDouble = min;
            this.stepSize = stepSize;
            this.intParameter = false;
            this.parameter = parameter;
        }
        
        private void setParameter(String value){
            Command cmd = new Command("ParameterList:"+listParameters.getSelectedItem().toString() + ":set");                
            cmd.addArg(parameter, value);
            parameterListener.setParameter = true;
            Plugin.commandExecutor.executeCommand(parameterListener, cmd);
            ParameterTester.this.waitForCallback.startThread();
        }
        
        void startRun () {
            if (Plugin.parent.checkConnected())
            {
                ParameterTester.this.idle = false;
                lockLogfilePlayer();
                if(intParameter) ParameterTester.this.startProgressBar(minInt, maxInt, (int) stepSize);
                else ParameterTester.this.startProgressBar(minDouble, maxDouble, stepSize);
                ParameterTester.this.resultList = new LinkedList<>();
                ParameterTester.this.resultSaver = new ResultSaver(intParameter?minInt:minDouble);
                /*String*/ value = intParameter?String.valueOf(minInt):String.valueOf(minDouble);
                setParameter(value);                
                ParameterTester.this.progressBar.setMinimum(ParameterTester.this.logSimulatorManager.getMinFrame());
                ParameterTester.this.progressBar.setMinimum(ParameterTester.this.logSimulatorManager.getMaxFrame());
           }
            else
            {
              //TODO
            }
        }
        
        private boolean lockLogfilePlayer () {
            for (LogSimulator.LogSimulatorActionListener actList : LogSimulator.LogSimulatorManager.getInstance().getListener()) {
                if (actList instanceof LogfilePlayer.LogPerceptListener) {
                    ((LogfilePlayer.LogPerceptListener) actList).lockInterface();
                    return true;
                }
            }
            return false;
        }
        
        private boolean unLockLogfilePalyer() {
            for (LogSimulator.LogSimulatorActionListener actList : LogSimulator.LogSimulatorManager.getInstance().getListener()) {
                if (actList instanceof LogfilePlayer.LogPerceptListener) {
                    ((LogfilePlayer.LogPerceptListener) actList).unLockInterface();
                    return true;
                }
            }
            return false;
        }
        
        @Override
        public void playFinished() {
            String value;
            if (intParameter) {
                resultList.add(new ResultSaver(resultSaver)); 
                if (curInt==maxInt) {
                    runFinished();
                    return;
                }
                curInt += stepSize;
                if (curInt>maxInt) curInt=maxInt;
                
                value = String.valueOf(curInt); 
                resultSaver.clearValues(curInt);
            } else {
                resultList.add(new ResultSaver(resultSaver));
                if (curDouble==maxDouble) {
                    runFinished();
                    return;
                }
                curDouble += stepSize;
                if (curDouble>maxDouble) curDouble = maxDouble;                
                resultSaver.clearValues(curDouble);
                value = String.valueOf(curDouble);
            }
            int cur = Integer.valueOf(ParameterTester.this.progressLabel.getText());
            ParameterTester.this.progressLabel.setText(String.valueOf(cur+1));
            setParameter(value);
        }

        @Override
        public void playStopped() {
            ParameterTester.this.parameterRun.unLockLogfilePalyer();
            ParameterTester.this.idle = true;            
        }
        
        public void runFinished() {
            ParameterTester.this.progressFrame.setVisible(false);
            ParameterTester.this.idle = true;
            ParameterTester.this.drawResultsPanel.setValues(ParameterTester.this.resultList,this.stepSize,this.intParameter);
            setCheckBoxColor();
            ParameterTester.this.drawResultsFrame.setVisible(true);
            ParameterTester.this.drawResultsFrame.repaint();
            unLockLogfilePalyer();
            
        }
        
        private void setCheckBoxColor() {
             ParameterTester.this.topMissedBallsCB.setForeground(ResultSaver.getColor(ResultType.TOP_MISSED_BALLS));
             ParameterTester.this.topFalseBallsCB.setForeground(ResultSaver.getColor(ResultType.TOP_FALSE_BALLS));
             ParameterTester.this.topMissedGPCB.setForeground(ResultSaver.getColor(ResultType.TOP_MISSED_GP));
             ParameterTester.this.topFalseGPCB.setForeground(ResultSaver.getColor(ResultType.TOP_FALSE_GP));
             ParameterTester.this.bottomMissedBallsCB.setForeground(ResultSaver.getColor(ResultType.BOTTOM_MISSED_BALLS));
             ParameterTester.this.bottomFalseBallsCB.setForeground(ResultSaver.getColor(ResultType.BOTTOM_FALSE_BALLS));
             ParameterTester.this.bottomMissedGPCB.setForeground(ResultSaver.getColor(ResultType.BOTTOM_MISSED_GP));
             ParameterTester.this.bottomFalseGPCB.setForeground(ResultSaver.getColor(ResultType.BOTTOM_FALSE_GP));
        }
    } 
    
    class LogPerceptListener implements LogSimulator.LogSimulatorActionListener {      
        @Override
        public void frameChanged(LogSimulator.BlackBoard b, int frameNumber) {
            if (ParameterTester.this.idle) {
                return;
            }
            ParameterTester.this.progressBar.setValue(frameNumber);
            try {               
                /**
                 * ************BallPercept*****************************************************
                 */
                byte[]data = b.getRepresentation("BallPercept");
                Representations.BallPercept ballPercept = Representations.BallPercept.parseFrom(data);
                Boolean ballHere = bottomBall.get(frameNumber); 
                if (ballHere != ballPercept.getBallWasSeen()) {
                    if (ballHere) {
                        ParameterTester.this.resultSaver.bottomMissedBalls++;
                    } else {
                        ParameterTester.this.resultSaver.bottomFalseBalls++;
                    }
                }
                
                /**
                 * ************BallPercept*****************************************************
                 */
                /**
                 * ************BallPerceptTop**************************************************
                 */
                data = b.getRepresentation("BallPerceptTop");
                ballPercept = Representations.BallPercept.parseFrom(data);
                ballHere = topBall.get(frameNumber);
                if (ballHere != ballPercept.getBallWasSeen()) {
                    if (ballHere) {
                        ParameterTester.this.resultSaver.topMissedBalls++;
                    } else {
                        ParameterTester.this.resultSaver.topFalseBalls++;
                    }
                }
                /**
                 * ************BallPerceptTop**************************************************
                 */
                /**
                 * ************GoalPercept**************************************************
                 */
               data = b.getRepresentation("GoalPercept");
                Representations.GoalPercept goalPercept = Representations.GoalPercept.parseFrom(data);
                List<GoalPost> goalPosts = goalPercept.getPostList();
                int postCount = 0;
                for (GoalPost goalPost: goalPosts) {
                    if (goalPost.hasPositionReliable()) postCount++;
                }
                Integer goalHere = bottomGoal.get(frameNumber);
                if (goalHere != postCount) {
                    if (goalHere-postCount>0) ParameterTester.this.resultSaver.bottomMissedGP +=goalHere-postCount;
                    else ParameterTester.this.resultSaver.bottomFalseGP += postCount-goalHere;
                } 
                /**
                 * ************GoalPercept**************************************************
                 */
                /**
                 * ************GoalPerceptTop***********************************************
                 */
                data = b.getRepresentation("GoalPerceptTop");
                Representations.GoalPercept goalPerceptTop = Representations.GoalPercept.parseFrom(data);
                goalPosts = goalPerceptTop.getPostList();
                postCount = 0;
                for (GoalPost goalPost: goalPosts) {
                    if (goalPost.hasPositionReliable()) postCount++;
                }
                goalHere = topGoal.get(frameNumber);
                if (goalHere != postCount) {
                    if (goalHere-postCount>0) ParameterTester.this.resultSaver.topMissedGP +=goalHere-postCount;
                    else ParameterTester.this.resultSaver.topFalseGP += postCount-goalHere;
                }
                /**
                 * ************GoalPerceptTop***********************************************
                 */

            } catch (InvalidProtocolBufferException ex) {
                ex.printStackTrace(System.err);
            }            
        }
        
        @Override
        public void logfileOpened(LogSimulator.BlackBoard b, String path) {
            
        }
    }  
   
    ResultSaver resultSaver;
    List<ResultSaver> resultList; 
    
    class WaitForCallback extends Thread {
        boolean waiting;
        @Override
        public void run () {
            waiting = true;
            while (waiting) {
                ParameterTester.this.logSimulatorManager.jumpToBegin();
                try {
                    Thread.sleep(500);
                } catch (InterruptedException ex) {
                    Logger.getLogger(ParameterTester.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        
        
        public void startThread() {
            new Thread(this).start();
        }
    }
    WaitForCallback waitForCallback;
    
    
    private void startProgressBar (int start, int end , int stepSize) {
        int runs = (end  - start) / stepSize + 1;
        if ((end  - start) % stepSize >0) runs++;
        this.progressLabelMax.setText(String.valueOf(runs));
        this.progressLabel.setText("1");
        this.progressFrame.setVisible(true);
    } 
    
    private void startProgressBar (double start, double end, double stepSize) {
        int runs = (int) Math.ceil((end - start)/ stepSize) + 1;
        this.progressLabelMax.setText(String.valueOf(runs));
        this.progressLabel.setText("1");
        this.progressFrame.setVisible(true);
        
        
        
    }
    
  //  GraphicOutput drawResults;
    
}
