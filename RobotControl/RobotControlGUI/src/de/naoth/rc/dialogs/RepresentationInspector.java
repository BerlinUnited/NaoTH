/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RepresentationInspector.java
 *
 * Created on 09.04.2009, 14:33:07
 */

package de.naoth.rc.dialogs;

import de.naoth.rc.AbstractDialog;
import de.naoth.rc.RobotControl;
import de.naoth.rc.manager.GenericManager;
import de.naoth.rc.manager.GenericManagerFactory;
import de.naoth.rc.manager.ObjectListener;
import de.naoth.rc.server.Command;
import de.naoth.rc.server.CommandSender;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import net.xeoh.plugins.base.annotations.PluginImplementation;
import net.xeoh.plugins.base.annotations.events.Init;
import net.xeoh.plugins.base.annotations.injections.InjectPlugin;

/**
 *
 * @author Heinrich Mellmann
 */
@PluginImplementation
public class RepresentationInspector extends AbstractDialog
    implements CommandSender, ObjectListener<byte[]>
{

    @InjectPlugin
    public RobotControl parent;

    @InjectPlugin
    public GenericManagerFactory genericManagerFactory;

    private Command commandToExecute;

    private String representationOwner = "Cognition";
    private final String getRepresentationList = representationOwner+":representation:list";
    private final String getRepresentationBase = representationOwner+":representation:get";

    private GenericManager currentManager = null;
    private RepresentationInspector _this;
  
    /** Creates new form RepresentationInspector */
    public RepresentationInspector() {
        initComponents();
        _this = this;

        this.representationList.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if(!e.getValueIsAdjusting())
                {
                    Object o = representationList.getSelectedValue();
                    if(currentManager != null)
                    {
                      currentManager.removeListener(_this);
                    }
                    if(o != null)
                    {
                      Command cmd = new Command(getRepresentationBase)
                        .addArg((String) o);

                      currentManager = genericManagerFactory.getManager(cmd);
                      currentManager.addListener(_this);
                    }
                }//end if
            }
        });
    }

    @Init
    public void init()
    {

    }//end init

    @Override
    public JPanel getPanel()
    {
      return this;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jToolBar1 = new javax.swing.JToolBar();
    jToggleButtonRefresh = new javax.swing.JToggleButton();
    jSplitPane1 = new javax.swing.JSplitPane();
    jScrollPane1 = new javax.swing.JScrollPane();
    representationList = new javax.swing.JList();
    jScrollPane2 = new javax.swing.JScrollPane();
    textArea = new javax.swing.JTextArea();

    jToolBar1.setRollover(true);

    jToggleButtonRefresh.setText("Refresh");
    jToggleButtonRefresh.setFocusable(false);
    jToggleButtonRefresh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jToggleButtonRefresh.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jToggleButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jToggleButtonRefreshActionPerformed(evt);
      }
    });
    jToolBar1.add(jToggleButtonRefresh);

    representationList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    jScrollPane1.setViewportView(representationList);

    jSplitPane1.setLeftComponent(jScrollPane1);

    textArea.setColumns(20);
    textArea.setRows(5);
    jScrollPane2.setViewportView(textArea);

    jSplitPane1.setRightComponent(jScrollPane2);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
      .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(0, 0, 0)
        .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

    private void jToggleButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonRefreshActionPerformed
        if(parent.checkConnected()) {
            if(jToggleButtonRefresh.isSelected()) {
                sendCommand(new Command(getRepresentationList));
            }
        } else {
            jToggleButtonRefresh.setSelected(false);
        }
}//GEN-LAST:event_jToggleButtonRefreshActionPerformed


    @Override
    public void errorOccured(String cause) {
        jToggleButtonRefresh.setSelected(false);
        if(currentManager != null)
          currentManager.removeListener(_this);
    }

    @Override
    public void newObjectReceived(byte[] object) {
        this.textArea.setText(new String(object));
    }//end newObjectReceived


  private void sendCommand(Command command)
  {
      commandToExecute = command;
      this.parent.getMessageServer().executeSingleCommand(this, command);
  }

  @Override
  public void handleResponse(byte[] result, Command originalCommand)
  {
    if(originalCommand.getName().compareTo(getRepresentationList) == 0)
    {
        System.out.println(new String(result));
        String[] representations = new String(result).split("\n");

        DefaultListModel model = new DefaultListModel();
        for(String representation: representations)
        {
            model.addElement(representation);
        }
        this.representationList.setModel(model);
        
        jToggleButtonRefresh.setSelected(false);
    }
  }

  @Override
  public void handleError(int code)
  {
    jToggleButtonRefresh.setSelected(false);
    JOptionPane.showMessageDialog(this,
              "Error occured, code " + code, "ERROR", JOptionPane.ERROR_MESSAGE);
  }

  @Override
  public Command getCurrentCommand()
  {
    return commandToExecute;
  }


  @Override
  public void dispose()
  {
    if(currentManager != null)
    {
      currentManager.removeListener(_this);
    }
  }//end dispose
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JSplitPane jSplitPane1;
  private javax.swing.JToggleButton jToggleButtonRefresh;
  private javax.swing.JToolBar jToolBar1;
  private javax.swing.JList representationList;
  private javax.swing.JTextArea textArea;
  // End of variables declaration//GEN-END:variables

}
