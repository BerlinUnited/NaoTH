/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RepresentationInspector.java
 *
 * Created on 09.04.2009, 14:33:07
 */

package de.naoth.rc.dialogs;

import de.naoth.rc.AbstractDialog;
import de.naoth.rc.DialogPlugin;
import de.naoth.rc.RobotControl;
import de.naoth.rc.manager.GenericManager;
import de.naoth.rc.manager.GenericManagerFactory;
import de.naoth.rc.manager.ObjectListener;
import de.naoth.rc.server.Command;
import de.naoth.rc.server.CommandSender;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import net.xeoh.plugins.base.annotations.PluginImplementation;
import net.xeoh.plugins.base.annotations.injections.InjectPlugin;

import de.naoth.rc.messages.FrameworkRepresentations;
import de.naoth.rc.messages.Messages;
import de.naoth.rc.messages.Representations;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

/**
 *
 * @author Heinrich Mellmann
 */
public class RepresentationInspector extends AbstractDialog
{

    @PluginImplementation
    public static class Plugin extends DialogPlugin<RepresentationInspector>
    {
        @InjectPlugin
        public static RobotControl parent;
        @InjectPlugin
        public static GenericManagerFactory genericManagerFactory;
    }

    private String representationOwner;
    private String getRepresentationList() { return representationOwner+":representation:list"; }
    private String getRepresentationBase() { return representationOwner+":representation:get"; }
    private String getRepresentationBinary() { return representationOwner+":representation:getbinary"; }

    
    private ObjectListener<byte[]> currentHandler;
    private GenericManager currentManager;

    public RepresentationInspector() {
        initComponents();
        
        Object o = this.cbProcess.getSelectedItem();
        this.representationOwner = this.cbProcess.getSelectedItem().toString();
    }

    @Override
    public void init()
    {
        this.representationList.addListSelectionListener(new ListSelectionListener() 
        {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if(!e.getValueIsAdjusting())
                { 
                    Object o = representationList.getSelectedValue();
                    if(currentManager != null) {
                      currentManager.removeListener(currentHandler);
                    }
                    
                    if(o != null)
                    {
                      String prefix = null;
                      if(jToggleButtonBinary.isSelected()) {
                          prefix = getRepresentationBinary();
                          currentHandler = new DataHandlerBinary((String) o);
                      } else {
                          prefix = getRepresentationBase();
                          currentHandler = new DataHandlerPrint();
                      }

                      Command cmd = new Command(prefix).addArg((String) o);
                      currentManager = Plugin.genericManagerFactory.getManager(cmd);
                      currentManager.addListener(currentHandler);
                    }
                }//end if
            }//end valueChanged
        });
    }//end init

    @Override
    public JPanel getPanel() {
      return this;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jToggleButtonRefresh = new javax.swing.JToggleButton();
        jToggleButtonBinary = new javax.swing.JToggleButton();
        cbProcess = new javax.swing.JComboBox();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        representationList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jToggleButtonRefresh.setText("Refresh");
        jToggleButtonRefresh.setFocusable(false);
        jToggleButtonRefresh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonRefresh.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonRefreshActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButtonRefresh);

        jToggleButtonBinary.setText("Binary");
        jToggleButtonBinary.setFocusable(false);
        jToggleButtonBinary.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonBinary.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonBinary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonBinaryActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButtonBinary);

        cbProcess.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cognition", "Motion" }));
        cbProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbProcessActionPerformed(evt);
            }
        });
        jToolBar1.add(cbProcess);

        jSplitPane1.setBorder(null);

        jScrollPane1.setBorder(null);

        representationList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(representationList);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jScrollPane2.setBorder(null);

        textArea.setColumns(20);
        textArea.setRows(5);
        textArea.setBorder(null);
        jScrollPane2.setViewportView(textArea);

        jSplitPane1.setRightComponent(jScrollPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonRefreshActionPerformed
        if(jToggleButtonRefresh.isSelected()) {
            if(Plugin.parent.checkConnected()) {
                sendCommand(new Command(getRepresentationList()));
            } else {
                jToggleButtonRefresh.setSelected(false);
            }
        } else {
            dispose();
        }
}//GEN-LAST:event_jToggleButtonRefreshActionPerformed

    private void jToggleButtonBinaryActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jToggleButtonBinaryActionPerformed
    {//GEN-HEADEREND:event_jToggleButtonBinaryActionPerformed
        if(currentManager != null){
          currentManager.removeListener(currentHandler);
        }
        int i = representationList.getSelectedIndex();
        representationList.clearSelection();
        representationList.setSelectedIndex(i);
    }//GEN-LAST:event_jToggleButtonBinaryActionPerformed

    private void cbProcessActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cbProcessActionPerformed
    {//GEN-HEADEREND:event_cbProcessActionPerformed
        dispose();
        representationOwner = this.cbProcess.getSelectedItem().toString();
    }//GEN-LAST:event_cbProcessActionPerformed

 
  class DataHandlerBinary implements ObjectListener<byte[]>
  {
    private Class<?> parser;
    
    public DataHandlerBinary(String name) {
        parser = getProtobufClass(name);
    }
    
    @Override
    public void newObjectReceived(byte[] data) {
        if(parser != null) {
            Object result = parse(parser, data);
            if(result != null){
                textArea.setText(result.toString());
            } else {
                textArea.setText("Error while parsing.\n");
                textArea.append(new String(data));
            }
        } else {
            textArea.setText("No binary serialization avaliable.\n");
            textArea.append(new String(data));
        }
    }//end newObjectReceived

    @Override
    public void errorOccured(String cause) {
        handleError(cause);
    }
  }//end class DataHandlerPrint
  
    
  class DataHandlerPrint implements ObjectListener<byte[]>
  {
    @Override
    public void newObjectReceived(byte[] object) {
        textArea.setText(new String(object));
    }

    @Override
    public void errorOccured(String cause) {
        handleError(cause);
    }
  }//end class DataHandlerPrint
  

  private void sendCommand(final Command command)
  {
      Plugin.parent.getMessageServer().executeSingleCommand(new CommandSender() 
      {    
            @Override
            public void handleResponse(byte[] result, Command originalCommand)
            {
                //System.out.println(new String(result));
                String[] representations = new String(result).split("\n");

                DefaultListModel model = new DefaultListModel();
                for(String representation: representations) {
                    model.addElement(representation);
                }
                representationList.setModel(model);
            }

            @Override
            public void handleError(int code) {
                RepresentationInspector.this.handleError("Error occured, code " + code);
            }

            @Override
            public Command getCurrentCommand() {
                return command;
            }
        }, command);
  }//end sendCommand

  
  public void handleError(String cause)
  {
    jToggleButtonRefresh.setSelected(false);
    if(currentManager != null){
      currentManager.removeListener(currentHandler);
    }
    
    JOptionPane.showMessageDialog(this, cause, "ERROR", JOptionPane.ERROR_MESSAGE);
  }

  
  @Override
  public void dispose()
  {
    if(currentManager != null) {
      currentManager.removeListener(currentHandler);
    }
    this.jToggleButtonRefresh.setSelected(false);
  }//end dispose
  
  
  private static Class<?> getSubClass(Class<?> parent, String name)
    {
        Class<?>[] c = parent.getClasses();
        for(int i = 0; i < c.length; i++) {
            String n = c[i].getSimpleName();
            if(c[i].getSimpleName().equals(name)) {
                return c[i];
            }
        }
        return null;
    }//end findSubClass
    
    private static Class<?> getProtobufClass(String name)
    {
        Class<?> result = null;
        Class<?> protoClasses[] = {FrameworkRepresentations.class, Representations.class, Messages.class};
        
        for(int i = 0; i < protoClasses.length; i++) {
            result = getSubClass(protoClasses[i], name);
            if(result != null) {
                break;
            }
        }
        return result;
    }//end getProtobufClass
    
    
    private Object parse(Class<?> parser, byte[] object)
    {
        try {
            Method m = parser.getMethod("parseFrom", object.getClass());
            Object result = m.invoke(null, object);
            return result;
        }
        catch(NoSuchMethodException e){}
        catch(IllegalAccessException ex){}
        catch(InvocationTargetException ebx){}
        
        return null;
    }//end parse
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbProcess;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToggleButton jToggleButtonBinary;
    private javax.swing.JToggleButton jToggleButtonRefresh;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JList representationList;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables

}
