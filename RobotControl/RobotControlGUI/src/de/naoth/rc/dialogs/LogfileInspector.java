/*
 * LogfileInspector.java
 *
 * Created on 06.08.2010, 17:01:29
 */

package de.naoth.rc.dialogs;

import de.naoth.rc.logmanager.LogDataFrame;
import de.naoth.rc.components.FileDrop;
import de.naoth.rc.core.dialog.AbstractDialog;
import de.naoth.rc.core.dialog.DialogPlugin;
import de.naoth.rc.core.dialog.RCDialog;
import de.naoth.rc.dataformats.LogFile;
import de.naoth.rc.logmanager.LogFileEventManager;
import de.naoth.rc.messages.FrameworkRepresentations;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.swing.JFileChooser;
import javax.swing.SwingWorker;
import net.xeoh.plugins.base.annotations.PluginImplementation;
import net.xeoh.plugins.base.annotations.injections.InjectPlugin;

/**
 *
 * @author Heinrich Mellmann
 */
public class LogfileInspector extends AbstractDialog 
{

  @RCDialog(category = RCDialog.Category.Log, name = "Inspector")
  @PluginImplementation
  public static class Plugin extends DialogPlugin<LogfileInspector> {
    //@InjectPlugin
    //static public RobotControl parent;
    @InjectPlugin
    static public LogFileEventManager logFileEventManager;
  }

  private LogFile logFile = null;

  /** Creates new form LogfileInspector */
  public LogfileInspector() {
      initComponents();

      fileChooser.setFileFilter(new LogFileFilter());
      
      this.jSlider1.addMouseWheelListener(new MouseWheelListener() {
              @Override
              public void mouseWheelMoved(MouseWheelEvent e) {
                      if(e.getWheelRotation() > 0) {
                        jSlider1.setValue(jSlider1.getValue() + 1);
                      } else {
                        jSlider1.setValue(jSlider1.getValue() - 1);
                      }
              }
      });

      FileDrop f = new FileDrop(this, new FileDrop.Listener() {
        @Override
        public void filesDropped(File[] files) {
          openFile(files[0]);
        }
      });
  }

  @Override
  public void dispose() {
    if(logFile != null) {
        logFile.close();
    }
    this.jSlider1.setEnabled(false);
  }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        openMenuButton = new javax.swing.JButton();
        fileNameLabel = new javax.swing.JLabel();
        avaliableRepresentations = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        imageCanvas = new de.naoth.rc.components.ImagePanel();
        jSlider1 = new javax.swing.JSlider();

        openMenuButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Open24.gif"))); // NOI18N
        openMenuButton.setToolTipText("Open");
        openMenuButton.setFocusable(false);
        openMenuButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openMenuButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuButtonActionPerformed(evt);
            }
        });

        fileNameLabel.setText("no file selected");

        avaliableRepresentations.setBackground(new java.awt.Color(255, 255, 255));
        avaliableRepresentations.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.gray));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout avaliableRepresentationsLayout = new javax.swing.GroupLayout(avaliableRepresentations);
        avaliableRepresentations.setLayout(avaliableRepresentationsLayout);
        avaliableRepresentationsLayout.setHorizontalGroup(
            avaliableRepresentationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(avaliableRepresentationsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        avaliableRepresentationsLayout.setVerticalGroup(
            avaliableRepresentationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(avaliableRepresentationsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                .addContainerGap())
        );

        imageCanvas.setBackground(java.awt.Color.gray);
        imageCanvas.setMinimumSize(new java.awt.Dimension(320, 240));
        imageCanvas.setPreferredSize(new java.awt.Dimension(320, 240));

        javax.swing.GroupLayout imageCanvasLayout = new javax.swing.GroupLayout(imageCanvas);
        imageCanvas.setLayout(imageCanvasLayout);
        imageCanvasLayout.setHorizontalGroup(
            imageCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 320, Short.MAX_VALUE)
        );
        imageCanvasLayout.setVerticalGroup(
            imageCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 240, Short.MAX_VALUE)
        );

        jSlider1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jSlider1.setEnabled(false);
        jSlider1.setPreferredSize(new java.awt.Dimension(480, 23));
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(openMenuButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, 627, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(fileNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(avaliableRepresentations, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(imageCanvas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openMenuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(avaliableRepresentations, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(imageCanvas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void openMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuButtonActionPerformed
      if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
      {
        openFile(fileChooser.getSelectedFile());
      }
    }//GEN-LAST:event_openMenuButtonActionPerformed

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        //System.out.println(frame.number + " - " + frame.position);
        try
        {
          HashMap<String,LogDataFrame> f = this.logFile.readFrame(this.jSlider1.getValue());
          if(f != null) {
            StringBuilder sb = new StringBuilder();
            sb.append(this.jSlider1.getValue()).append('\n');
            for(String s: f.keySet()) {
                // parse "FrameInfo" and add it to view
                if(s.equals("FrameInfo")) {
                    FrameworkRepresentations.FrameInfo fi = FrameworkRepresentations.FrameInfo.parseFrom(f.get(s).getData());
                    sb.insert(0, "FN: " + fi.getFrameNumber() + " | C: ");
                }
                sb.append(s).append('\n');
            }
            this.jTextArea1.setText(sb.toString());
            
            if(Plugin.logFileEventManager != null) {  
              Plugin.logFileEventManager.fireLogFrameEvent(f.values());
            }
          } else {
            this.jTextArea1.setText("Unable to retrieve frame info!");
          }
        }catch(IOException e)
        {
          System.err.println("Couldn't read the a frame: " + e);
        }
    }//GEN-LAST:event_jSlider1StateChanged

    
    private void openFile(File f) {
        
        // TODO: in progress
        //ImageIcon loading = new ImageIcon(getClass().getResource("/de/naoth/rc/res/ball_24.gif"));
        //String[] options = {"Cancel"};
        //JOptionPane.showOptionDialog(this, f.getPath(), "Loading...", JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE, loading, options , options[0]);
        //JOptionPane jp = new JOptionPane(f.getPath(), JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE, loading, options , options[0]);
        //JDialog dialog = jp.createDialog(null, "Loading...");
        //dialog.setModal(true);
        //dialog.setVisible(true);
        
        this.jSlider1.setEnabled(false);
        
        if(f.exists()) 
        {
            this.fileNameLabel.setText("Selected logfile:" + f.getAbsolutePath());
     
            try {
                // clear the old file
                dispose();

                logFile = new LogFile(f);

                this.jSlider1.setEnabled(true);
                this.jSlider1.setValue(0);
                this.jSlider1.setMinimum(0);
                this.jSlider1.setMaximum(logFile.getFrameCount()-1);

            } catch(IOException e) {
                e.printStackTrace(System.err);
            }
        }
        //dialog.dispose();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel avaliableRepresentations;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel fileNameLabel;
    private de.naoth.rc.components.ImagePanel imageCanvas;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton openMenuButton;
    // End of variables declaration//GEN-END:variables

    // TODO: in progress
  public class LogReadWorker extends SwingWorker<LogFile, Void> 
  {
    @Override
    protected LogFile doInBackground() throws Exception {

      setProgress(100);
      return null;
    }
  }

  private class LogFileFilter extends javax.swing.filechooser.FileFilter
  {

    @Override
    public boolean accept(File file)
    {
      if (file.isDirectory())
      {
        return true;
      }
      String filename = file.getName();
      return filename.toLowerCase().endsWith(".log");
    }

    @Override
    public String getDescription()
    {
      return "Logfile (*.log)";
    }

    @Override
    public String toString()
    {
      return ".log";
    }
  }//end class LogFileFilter
}//end class LogfileInspector
