/*
 * LogfileInspector.java
 *
 * Created on 06.08.2010, 17:01:29
 */

package de.naoth.rc.dialogs;

import de.naoth.rc.logmanager.LogDataFrame;
import de.naoth.rc.components.FileDrop;
import de.naoth.rc.core.dialog.AbstractDialog;
import de.naoth.rc.core.dialog.DialogPlugin;
import de.naoth.rc.core.dialog.RCDialog;
import de.naoth.rc.logmanager.LogFileEventManager;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import net.xeoh.plugins.base.annotations.PluginImplementation;
import net.xeoh.plugins.base.annotations.injections.InjectPlugin;

/**
 *
 * @author Heinrich Mellmann
 */
public class LogfileInspector extends AbstractDialog 
{

  @RCDialog(category = RCDialog.Category.Log, name = "Inspector")
  @PluginImplementation
  public static class Plugin extends DialogPlugin<LogfileInspector> {
    //@InjectPlugin
    //static public RobotControl parent;
    @InjectPlugin
    static public LogFileEventManager logFileEventManager;
  }
  
  private HashMap<Integer, Integer> framePosition;
  private ArrayList<LogFileFrame> frameList;
  private int minFrame = Integer.MAX_VALUE;
  private int maxFrame = Integer.MIN_VALUE;

  /** The logfile opened to filter data from it. */
  private File openedFile;

  private InputStream inputStream = null;
  RandomAccessFile raf = null;

  /** Creates new form LogfileInspector */
  public LogfileInspector() {
      initComponents();

      fileChooser.setFileFilter(new LogFileFilter());
      framePosition = new HashMap<Integer, Integer>();
      frameList = new ArrayList<LogFileFrame>();

      this.jSlider1.addMouseWheelListener(new MouseWheelListener() {
              @Override
              public void mouseWheelMoved(MouseWheelEvent e) {
                      if(e.getWheelRotation() > 0)
                        jSlider1.setValue(jSlider1.getValue() + 1);
                      else
                        jSlider1.setValue(jSlider1.getValue() - 1);
              }
      });

      FileDrop f = new FileDrop(this, new FileDrop.Listener() {
        @Override
        public void filesDropped(File[] files) {
          openFile(files[0]);
        }
      });
  }

  private void reset()
  {
    this.framePosition.clear();
    this.frameList.clear();
    this.minFrame = Integer.MAX_VALUE;
    this.maxFrame = Integer.MIN_VALUE;
  }

  @Override
  public void dispose() {
    System.out.println("Dispose is not implemented for: " + this.getClass().getName());
  }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        openMenuButton = new javax.swing.JButton();
        fileNameLabel = new javax.swing.JLabel();
        avaliableRepresentations = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        imageCanvas = new de.naoth.rc.components.ImagePanel();
        jSlider1 = new javax.swing.JSlider();

        openMenuButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Open24.gif"))); // NOI18N
        openMenuButton.setToolTipText("Open");
        openMenuButton.setFocusable(false);
        openMenuButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openMenuButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuButtonActionPerformed(evt);
            }
        });

        fileNameLabel.setText("no file selected");

        avaliableRepresentations.setBackground(new java.awt.Color(255, 255, 255));
        avaliableRepresentations.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.gray));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout avaliableRepresentationsLayout = new javax.swing.GroupLayout(avaliableRepresentations);
        avaliableRepresentations.setLayout(avaliableRepresentationsLayout);
        avaliableRepresentationsLayout.setHorizontalGroup(
            avaliableRepresentationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(avaliableRepresentationsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        avaliableRepresentationsLayout.setVerticalGroup(
            avaliableRepresentationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(avaliableRepresentationsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                .addContainerGap())
        );

        imageCanvas.setBackground(java.awt.Color.gray);
        imageCanvas.setMinimumSize(new java.awt.Dimension(320, 240));
        imageCanvas.setPreferredSize(new java.awt.Dimension(320, 240));

        javax.swing.GroupLayout imageCanvasLayout = new javax.swing.GroupLayout(imageCanvas);
        imageCanvas.setLayout(imageCanvasLayout);
        imageCanvasLayout.setHorizontalGroup(
            imageCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 320, Short.MAX_VALUE)
        );
        imageCanvasLayout.setVerticalGroup(
            imageCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 240, Short.MAX_VALUE)
        );

        jSlider1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jSlider1.setEnabled(false);
        jSlider1.setPreferredSize(new java.awt.Dimension(480, 23));
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(openMenuButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, 627, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(fileNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(avaliableRepresentations, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(imageCanvas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openMenuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(avaliableRepresentations, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(imageCanvas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void openMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuButtonActionPerformed
      if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
      {
        openFile(fileChooser.getSelectedFile());
      }
    }//GEN-LAST:event_openMenuButtonActionPerformed

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
      LogFileFrame frame = this.frameList.get(this.jSlider1.getValue());
      if(frame != null)
      {
        System.out.println(frame.number + " - " + frame.position);
        try
        {
          HashMap<String,LogDataFrame> f = readFrame(frame, new BasicReader(this.raf));
          if(Plugin.logFileEventManager != null) {
            Plugin.logFileEventManager.fireLogFrameEvent(f.values());
          }
        }catch(IOException e)
        {
          System.err.println("Couldn't read the a frame: " + e);
        }
      }//end if
    }//GEN-LAST:event_jSlider1StateChanged

    
    private void openFile(File f) {
        
        ImageIcon loading = new ImageIcon(getClass().getResource("/de/naoth/rc/res/ball_24.gif"));
        String[] options = {"Cancel"};
        //JOptionPane.showOptionDialog(this, f.getPath(), "Loading...", JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE, loading, options , options[0]);
        JOptionPane jp = new JOptionPane(f.getPath(), JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE, loading, options , options[0]);
        JDialog dialog = jp.createDialog(null, "Loading...");
        dialog.setModal(true);
        dialog.setVisible(true);
        
        this.openedFile = f;
        this.jSlider1.setEnabled(false);
        
        if(this.openedFile != null && this.openedFile.exists()) 
        {
            this.fileNameLabel.setText("Selected logfile:" + this.openedFile.getAbsolutePath());
     
            try{
                // clear the old file
                reset();

                FileInputStream file_input = new FileInputStream (this.openedFile);
                this.inputStream = new DataInputStream (file_input);

                parseLogFile(new BasicReader(this.inputStream));
                this.inputStream.close();

                this.raf = new RandomAccessFile(this.openedFile, "r");

                if(minFrame < maxFrame)
                {
                  this.jSlider1.setEnabled(true);
                  this.jSlider1.setValue(0);
                  this.jSlider1.setMinimum(0);
                  this.jSlider1.setMaximum(frameList.size()-1);
                }
                
              }catch(IOException e)
              {
                e.printStackTrace(System.err);
              }
              //this.parent.setTriggerConnect(false);
        }
        
        dialog.dispose();
    }
    
    private void parseLogFile(BasicReader data_in) throws IOException
    {
      int currentFrameNumber = -1;
      int currentFrameSize = 0;
      int currentFramePos = 0;

      HashMap<String,LogDataFrame> currentFrame = new HashMap<String,LogDataFrame>();

      while(true)
      {
        try
        {
          int fragmentFrameSize = 0;
          
          int frameNumber = readInt(data_in);
          fragmentFrameSize += 4;

          // plausibility check
          if(frameNumber < currentFrameNumber || frameNumber < 0) {
            throw new IOException("corrupt frame number: " + frameNumber + " after " + currentFrameNumber);
          }

          if(currentFrameNumber >= 0 && frameNumber - currentFrameNumber > 30) {
            System.out.println("frame jump: " + currentFrameNumber + " -> " + frameNumber);
          }

          String currentName = readString(data_in);
          System.out.println(currentName);
          fragmentFrameSize += currentName.length() + 1;
          
          int currentSize = readInt(data_in);
          fragmentFrameSize += 4;
          fragmentFrameSize += currentSize;

          this.minFrame = Math.min(this.minFrame, frameNumber);
          this.maxFrame = Math.max(this.maxFrame, frameNumber);

          if(currentFrameNumber != frameNumber && currentFrameNumber != -1)
          {
            LogFileFrame lff = new LogFileFrame(currentFrameNumber,currentFrameSize,currentFramePos);
            
            framePosition.put(frameList.size(), currentFrameNumber);
            frameList.add(lff);
            
            currentFramePos += currentFrameSize;
            currentFrameSize = 0;

            currentFrame = new HashMap<String,LogDataFrame>();
          }//end if

          currentFrameSize += fragmentFrameSize;
          currentFrameNumber = frameNumber;

          byte[] buffer = new byte[currentSize];
          long skippedSize = data_in.read(buffer);
          //data_in.skip(currentSize);

          LogDataFrame logDataFrame = new LogDataFrame(currentFrameNumber, currentName, buffer);
          currentFrame.put(currentName, logDataFrame);
        }
        catch (EOFException eof) {
          System.out.println ("End of File");
          break;
        }
      }//end while
    }//end parseLogFile

    
  private HashMap<String,LogDataFrame> readFrame(LogFileFrame frame, BasicReader is) throws IOException
  {
    // jump to the begin of the frame
    is.seek(frame.position);

    int numberOfReadBytes = 0;

    jTextArea1.setText("Frame " + frame.number + "\n");
    
    HashMap<String,LogDataFrame> currentFrame = new HashMap<>();
    
    while(numberOfReadBytes < frame.size)
    {
      int frameNumber = readInt(is);
      numberOfReadBytes += 4;

      if(frameNumber != frame.number) {
        throw new IOException("corrupt frame number: " + frameNumber + " expected " + frame.number);
      }
      
      String currentName = readString(is);
      numberOfReadBytes += currentName.length()+1;
      int currentSize = readInt(is);
      numberOfReadBytes += 4;

      jTextArea1.append(currentName + "\n");
      
      byte[] buffer = new byte[currentSize];
      numberOfReadBytes += is.read(buffer);
      
      LogDataFrame logDataFrame = new LogDataFrame(frameNumber, currentName, buffer);
      currentFrame.put(currentName, logDataFrame);
    }//end while
    
    return currentFrame;
  }//end readFrame
  

  
  private String readString(BasicReader is) throws IOException, EOFException
  {
    StringBuilder sb = new StringBuilder();
    int c = is.read();
    while(((char)c) != '\0')
    {
      if(c == -1) throw new EOFException();
      sb.append((char)c);
      c = is.read();
    }

    return sb.toString();
  }//end readString
  
  private int readInt(BasicReader is) throws IOException
  {
    byte[] buffer = new byte[4];
    int numberOfBytes = is.read(buffer);

    if(numberOfBytes != 4) throw new EOFException();

    int result =
        (0xff000000 & buffer[3] << 32)|
        (0x00ff0000 & buffer[2] << 16)|
        (0x0000ff00 & buffer[1] << 8) |
        (0x000000ff & buffer[0]);

    return result;
  }//end readInt


  
  class BasicReader
  {
    private InputStream streamReader = null;
    private RandomAccessFile rafReader = null;
    
    public BasicReader(InputStream streamReader)
    {
      this.streamReader = streamReader;
    }
    
    public BasicReader(RandomAccessFile rafReader)
    {
      this.rafReader = rafReader;
    }
            
    public int read(byte[] buffer) throws IOException
    {
      return (streamReader == null)?this.rafReader.read(buffer):this.streamReader.read(buffer);
    }
    public int read()  throws IOException
    {
      return (streamReader == null)?this.rafReader.read():this.streamReader.read();
    }
    public long skip(int size) throws IOException
    {
      return (streamReader == null)?this.rafReader.skipBytes(size):this.streamReader.skip(size);
    }
    public void seek(long size) throws IOException
    {
      this.rafReader.seek(size);
    }
  }//end class BasicReader


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel avaliableRepresentations;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel fileNameLabel;
    private de.naoth.rc.components.ImagePanel imageCanvas;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton openMenuButton;
    // End of variables declaration//GEN-END:variables


  class LogFileFrame
  {
    final int number;
    final int size;
    final int position;

    public LogFileFrame(int number, int size, int position) {
      this.number = number;
      this.size = size;
      this.position = position;
    }
  }


  private class LogFileFilter extends javax.swing.filechooser.FileFilter
  {

    @Override
    public boolean accept(File file)
    {
      if (file.isDirectory())
      {
        return true;
      }
      String filename = file.getName();
      return filename.toLowerCase().endsWith(".log");
    }

    @Override
    public String getDescription()
    {
      return "Logfile (*.log)";
    }

    @Override
    public String toString()
    {
      return ".log";
    }
  }//end class LogFileFilter
}//end class LogfileInspector
