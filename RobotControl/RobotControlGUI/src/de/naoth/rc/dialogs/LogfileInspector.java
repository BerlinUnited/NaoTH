/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LogfileInspector.java
 *
 * Created on 06.08.2010, 17:01:29
 */

package de.naoth.rc.dialogs;

import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.MessageOrBuilder;
import de.naoth.rc.AbstractDialog;
import de.naoth.rc.RobotControl;
import de.naoth.rc.dataformats.JanusImage;
import de.naoth.rc.manager.ImageManager;
import de.naoth.rc.manager.ImageManagerImpl;
import de.naoth.rc.messages.CommonTypes.DoubleVector;
import de.naoth.rc.messages.CommonTypes.JointID;
import de.naoth.rc.messages.FrameworkRepresentations.FrameInfo;
import de.naoth.rc.messages.FrameworkRepresentations.JointData;
import de.naoth.rc.messages.FrameworkRepresentations.SensorJointData;
import de.naoth.rc.messages.Representations;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.RandomAccessFile;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import net.xeoh.plugins.base.annotations.PluginImplementation;
import net.xeoh.plugins.base.annotations.injections.InjectPlugin;

/**
 *
 * @author Heinrich Mellmann
 */
@PluginImplementation
public class LogfileInspector extends AbstractDialog 
{

  @InjectPlugin
  public RobotControl parent;
  @InjectPlugin
  public ImageManager imageManager;
  
  private HashMap<Integer, Integer> framePosition;
  private ArrayList<LogFileFrame> frameList;
  private int minFrame = Integer.MAX_VALUE;
  private int maxFrame = Integer.MIN_VALUE;

  /** The logfile opened to filter data from it. */
  private File openedFile;

  private InputStream inputStream = null;
  RandomAccessFile raf = null;

  /** Creates new form LogfileInspector */
  public LogfileInspector() {
      initComponents();

      fileChooser.setFileFilter(new LogFileFilter());
      framePosition = new HashMap<Integer, Integer>();
      frameList = new ArrayList<LogFileFrame>();

      this.jSlider1.addMouseWheelListener(new MouseWheelListener() {
              @Override
              public void mouseWheelMoved(MouseWheelEvent e) {
                      if(e.getWheelRotation() > 0)
                        jSlider1.setValue(jSlider1.getValue() + 1);
                      else
                        jSlider1.setValue(jSlider1.getValue() - 1);
              }
      });
      
      this.cbFilterList.addItem(new SerialDataFilter());
      this.cbFilterList.addItem(new JointDataFilter());
      this.cbFilterList.addItem(new ImageExtractorFilter());
      this.cbFilterList.addItem(new SensorJointDataFilter());
      this.cbFilterList.addItem(new GeneticDataFilter());
  }

  private void reset()
  {
    this.framePosition.clear();
    this.frameList.clear();
    this.minFrame = Integer.MAX_VALUE;
    this.maxFrame = Integer.MIN_VALUE;
  }//end reset

  @Override
  public void dispose() 
  {
    //this.parent.setTriggerConnect(true);
    System.out.println("Dispose is not implemented for: " + this.getClass().getName());
  }//end dispose

  @Override
  public JPanel getPanel()
  {
    return this;
  }//end getPanel
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        fileChooser = new javax.swing.JFileChooser();
        jToolBar1 = new javax.swing.JToolBar();
        openMenuButton = new javax.swing.JButton();
        jSlider1 = new javax.swing.JSlider();
        fileNameLabel = new javax.swing.JLabel();
        btRunAction = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        infoLabel = new javax.swing.JLabel();
        avaliableRepresentations = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        cbFilterList = new javax.swing.JComboBox();
        imageCanvas = new de.naoth.rc.dialogs.panels.ImagePanel();

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        openMenuButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Open24.gif"))); // NOI18N
        openMenuButton.setToolTipText("Open");
        openMenuButton.setFocusable(false);
        openMenuButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openMenuButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openMenuButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                openMenuButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(openMenuButton);

        jSlider1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jSlider1.setEnabled(false);
        jSlider1.setPreferredSize(new java.awt.Dimension(480, 23));
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                jSlider1StateChanged(evt);
            }
        });
        jToolBar1.add(jSlider1);

        fileNameLabel.setText("no file selected");

        btRunAction.setText("Run Action");
        btRunAction.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btRunActionActionPerformed(evt);
            }
        });

        jLabel1.setText("Filter:");

        infoLabel.setText("...");

        avaliableRepresentations.setBackground(new java.awt.Color(255, 255, 255));
        avaliableRepresentations.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.gray));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout avaliableRepresentationsLayout = new javax.swing.GroupLayout(avaliableRepresentations);
        avaliableRepresentations.setLayout(avaliableRepresentationsLayout);
        avaliableRepresentationsLayout.setHorizontalGroup(
            avaliableRepresentationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(avaliableRepresentationsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        avaliableRepresentationsLayout.setVerticalGroup(
            avaliableRepresentationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(avaliableRepresentationsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        imageCanvas.setBackground(java.awt.Color.gray);
        imageCanvas.setMinimumSize(new java.awt.Dimension(320, 240));
        imageCanvas.setPreferredSize(new java.awt.Dimension(320, 240));

        javax.swing.GroupLayout imageCanvasLayout = new javax.swing.GroupLayout(imageCanvas);
        imageCanvas.setLayout(imageCanvasLayout);
        imageCanvasLayout.setHorizontalGroup(
            imageCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 320, Short.MAX_VALUE)
        );
        imageCanvasLayout.setVerticalGroup(
            imageCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 240, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 637, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(fileNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btRunAction)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbFilterList, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(infoLabel)))
                            .addComponent(avaliableRepresentations, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(imageCanvas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btRunAction)
                    .addComponent(cbFilterList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(infoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(imageCanvas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addComponent(avaliableRepresentations, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void openMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuButtonActionPerformed
      if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
      {
        this.openedFile = fileChooser.getSelectedFile();

        this.infoLabel.setText("...");
        this.jSlider1.setEnabled(false);
        
        if(this.openedFile != null && this.openedFile.exists()) 
        {
            this.fileNameLabel.setText("Selected logfile:" + this.openedFile.getAbsolutePath());
     
            try{
                // clear the old file
                reset();

                FileInputStream file_input = new FileInputStream (this.openedFile);
                this.inputStream = new DataInputStream (file_input);

                parseLogFile(new BasicReader(this.inputStream), null);
                this.inputStream.close();

                this.raf = new RandomAccessFile(this.openedFile, "r");

                if(minFrame < maxFrame)
                {
                  this.jSlider1.setEnabled(true);
                  this.jSlider1.setValue(0);
                  this.jSlider1.setMinimum(0);
                  this.jSlider1.setMaximum(frameList.size()-1);
                }
                
                this.infoLabel.setText("Created a filtered logfile successfully.");
              }catch(IOException e)
              {
                this.infoLabel.setText("Creating a filtered logfile failed.");
                e.printStackTrace(System.err);
              }
              //this.parent.setTriggerConnect(false);
        }
      }//end if
    }//GEN-LAST:event_openMenuButtonActionPerformed

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
      LogFileFrame frame = this.frameList.get(this.jSlider1.getValue());
      if(frame != null)
      {
        System.out.println(frame.number + " - " + frame.position);
        try
        {
          readFrame(frame, new BasicReader(this.raf));
        }catch(IOException e)
        {
          System.err.println("Couldn't read the a frame: " + e);
        }
      }//end if
    }//GEN-LAST:event_jSlider1StateChanged

    private void btRunActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRunActionActionPerformed
        if(this.raf != null)
        {
          try{
            DataFilter currentFilter = (DataFilter)this.cbFilterList.getSelectedItem();
            currentFilter.setInFile(this.openedFile);
            parseLogFile(new BasicReader(this.raf), currentFilter);
            if(currentFilter != null) {
              currentFilter.finish();
            }

            this.infoLabel.setText("Applying the filter successfully.");
          }catch(IOException e)
          {
            this.infoLabel.setText("Applying the filter failed.");
            e.printStackTrace(System.err);
          }
        } else {
            this.infoLabel.setText("select a logfile first.");
        }

    }//GEN-LAST:event_btRunActionActionPerformed

    private void parseLogFile(BasicReader data_in, DataFilter currentFilter) throws IOException
    {

      int currentFrameNumber = -1;
      int currentFrameSize = 0;
      int currentFramePos = 0;

      HashMap<String,LogDataFrame> currentFrame = new HashMap<String,LogDataFrame>();

      while(true)
      {
        try
        {
          int fragmentFrameSize = 0;
          
          int frameNumber = readInt(data_in);
          fragmentFrameSize += 4;

          // plausibility check
          if(frameNumber < currentFrameNumber || frameNumber < 0)
            throw new IOException("corrupt frame number: " + frameNumber + " after " + currentFrameNumber);

          if(frameNumber - currentFrameNumber > 30)
            System.out.println("frame jump: " + currentFrameNumber + " -> " + frameNumber);

          String currentName = readString(data_in);
          fragmentFrameSize += currentName.length() + 1;
          
          int currentSize = readInt(data_in);
          fragmentFrameSize += 4;
          fragmentFrameSize += currentSize;

          this.minFrame = Math.min(this.minFrame, frameNumber);
          this.maxFrame = Math.max(this.maxFrame, frameNumber);

          if(currentFrameNumber != frameNumber && currentFrameNumber != -1)
          {
            LogFileFrame lff = new LogFileFrame(currentFrameNumber,currentFrameSize,currentFramePos);
            
            framePosition.put(frameList.size(), currentFrameNumber);
            frameList.add(lff);
            
            currentFramePos += currentFrameSize;
            currentFrameSize = 0;

            if(currentFilter != null) {
              currentFilter.filter(currentFrame);
            }
            currentFrame = new HashMap<String,LogDataFrame>();
          }//end if

          currentFrameSize += fragmentFrameSize;
          currentFrameNumber = frameNumber;

          byte[] buffer = new byte[currentSize];
          long skippedSize = data_in.read(buffer);

          LogDataFrame logDataFrame = new LogDataFrame(currentFrameNumber, currentName, buffer);
          currentFrame.put(currentName, logDataFrame);
        }
        catch (EOFException eof) {
          System.out.println ("End of File");
          break;
        }
      }//end while
    }//end parseLogFile

    
  void readFrame(LogFileFrame frame, BasicReader is) throws IOException
  {
    // jump to the begin of the frame
    is.seek(frame.position);

    int numberOfReadBytes = 0;

    jTextArea1.setText("Frame " + frame.number + "\n");
    
    while(numberOfReadBytes < frame.size)
    {
      int frameNumber = readInt(is);
      numberOfReadBytes += 4;

      if(frameNumber != frame.number) {
        throw new IOException("corrupt frame number: " + frameNumber + " expected " + frame.number);
      }
      
      String currentName = readString(is);
      numberOfReadBytes += currentName.length()+1;
      int currentSize = readInt(is);
      numberOfReadBytes += 4;

      jTextArea1.append(currentName + "\n");
      
      // read data
      if(currentName.equals("Image"))
      {
        byte[] buffer = new byte[currentSize];
        int data = 0;
        while(data < currentSize)
        {
          data += is.read(buffer);
        }
        //imageManager.handleResponse(buffer, imageManager.getCurrentCommand());
        ImageManagerImpl im = new ImageManagerImpl();
        JanusImage janusImage = im.convertByteArrayToType(buffer);
        this.imageCanvas.setImage(janusImage.getRgb());
      }
      else
      {
        // skip the data
        int data = 0;
        while(data < currentSize)
        {
          data += is.skip(currentSize);
        }
      }

      numberOfReadBytes += currentSize;
    }//end while
  }//end readFrame
  

  
  private String readString(BasicReader is) throws IOException, EOFException
  {
    StringBuilder sb = new StringBuilder();
    int c = is.read();
    while(((char)c) != '\0')
    {
      if(c == -1) throw new EOFException();
      sb.append((char)c);
      c = is.read();
    }//end while

    return sb.toString();
  }//end readString
  
  private int readInt(BasicReader is) throws IOException
  {
    byte[] buffer = new byte[4];
    int numberOfBytes = is.read(buffer);

    if(numberOfBytes != 4) throw new EOFException();

    int result =
        (0xff000000 & buffer[3] << 32)|
        (0x00ff0000 & buffer[2] << 16)|
        (0x0000ff00 & buffer[1] << 8) |
        (0x000000ff & buffer[0]);

    return result;
  }//end readInt


  class LogDataFrame
  {
    final int number;
    final String name;
    final byte[] data;

    public LogDataFrame(int number, String name, byte[] data) {
      this.number = number;
      this.name = name;
      this.data = data;
    }
  }//end LFrame



  private interface DataFilter {
    public void filter(HashMap<String,LogDataFrame> frame);
    public void finish();
    public void setInFile(File inFile);
  }
  
  static class SensorJointDataFilter implements DataFilter
  {
      
    @Override
    public String toString() {
        return "SensorJointDataFilter";
    }
    
    public void setInFile(File inFile) {
        this.inFile = inFile;
    }
    
    enum JointID
    {
      HeadPitch,
      HeadYaw,

      // arms
      RShoulderRoll,
      LShoulderRoll,
      RShoulderPitch,
      LShoulderPitch,
      RElbowRoll,
      LElbowRoll,
      RElbowYaw,
      LElbowYaw,
      
      // legs
      RHipYawPitch,
      LHipYawPitch,
      RHipPitch,
      LHipPitch,
      RHipRoll,
      LHipRoll,
      RKneePitch,
      LKneePitch,
      RAnklePitch,
      LAnklePitch,
      RAnkleRoll,
      LAnkleRoll
    }

    File inFile = null;
    StringBuilder stringBuilder = null;

    public SensorJointDataFilter()
    {
      this.stringBuilder = new StringBuilder();
      
      this.stringBuilder.append("Time");
      for(int i = JointID.RShoulderRoll.ordinal(); i <= JointID.LElbowYaw.ordinal(); i++ )
      {
        this.stringBuilder
                .append(" ")
                .append(JointID.values()[i]).append("_current")
                .append(" ")
                .append(JointID.values()[i]).append("_position");
      }
      for(int i = JointID.RShoulderRoll.ordinal(); i <= JointID.LElbowYaw.ordinal(); i++ )
      {
        this.stringBuilder
                .append(" ")
                .append(JointID.values()[i]).append("_request");
      }
      this.stringBuilder.append('\n');
      //System.out.println(stringBuilder);
    }//end constructor SensorJointDataFilter
            
    @Override
    public void filter(HashMap<String,LogDataFrame> frame)
    {
      LogDataFrame logDataFrame = frame.get("SensorJointData");

      if(logDataFrame != null)
      {
        try
        {
          this.stringBuilder.append(logDataFrame.number);
          
          SensorJointData sensorJointData = SensorJointData.parseFrom(logDataFrame.data);
          

          for(int i = JointID.RShoulderRoll.ordinal(); i <= JointID.LElbowYaw.ordinal(); i++ )
          {
            this.stringBuilder
                    .append(" ")
                    .append(sensorJointData.getElectricCurrent(i))
                    .append(" ")
                    .append(sensorJointData.getJointData().getPosition(i));
          }//end for
          //this.stringBuilder.append('\n');
          
        }
        catch (InvalidProtocolBufferException ex)
        {
          ex.printStackTrace(System.err);
        }
      }else
      {
        System.out.println("no SensorJointData");
      }


      LogDataFrame logMotorDataFrame = frame.get("MotorJointData");

      if(logMotorDataFrame != null)
      {
        try
        {
          SensorJointData jointData = SensorJointData.parseFrom(logMotorDataFrame.data);

          for(int i = JointID.RShoulderRoll.ordinal(); i <= JointID.LElbowYaw.ordinal(); i++ )
          {
            this.stringBuilder
                    .append(" ")
                    .append(jointData.getJointData().getPosition(i));
          }//end for
        }
        catch (InvalidProtocolBufferException ex)
        {
          ex.printStackTrace(System.err);
        }
      }else
      {
        System.out.println("no MotorJointData");
      }

      this.stringBuilder.append('\n');
    }//end filter

    @Override
    public void finish()
    {
      try{
        File outFile = new File(inFile.getParentFile(),"arms_current_"+inFile.getName());
        FileWriter fileWriter = new FileWriter(outFile);
        fileWriter.write(stringBuilder.toString());
        fileWriter.close();
      }
      catch (IOException ex)
      {
        ex.printStackTrace(System.err);
      }
    }//end finish
  }//end class SensorJointDataFilter

  
  class GeneticDataFilter implements DataFilter
  {
    @Override
    public String toString() {
        return "GeneticDataFilter";
    }
    
    public void setInFile(File inFile) {
        this.inFile = inFile;
    }
      
    final private String separator = " ";
    File inFile = null;
    StringBuilder stringBuilder = null;

    /** Flag: is the header for the output logfile created? (nesseccary to only write the header once) */
    private boolean headerGenerated = false;

    public GeneticDataFilter()
    {
      this.stringBuilder = new StringBuilder();

      //makeHeader();
    }

    private void makeHeader()
    {
      this.stringBuilder.append("Time");
      this.stringBuilder.append(separator);
      this.stringBuilder.append("Framenumber");
      //this.stringBuilder.append(separator).append("Sync");

      for(int i = 0; i < JointID.values().length; i++ )
      {
        this.stringBuilder
                .append(separator)
                .append(JointID.values()[i]).append("_current")
                .append(separator)
                .append(JointID.values()[i]).append("_position")
                .append(separator)
                .append(JointID.values()[i]).append("_request_position")
                .append(separator)
                .append(JointID.values()[i]).append("_request_hardness");
      }//end for
      
      this.stringBuilder.append("\n");
    }//end makeHeader

    int tmp = -1;
    @Override
    public void filter(HashMap<String,LogDataFrame> frame)
    {
      if(tmp > -1) return;
      tmp++;
      
      try
      {
          for(String name: frame.keySet())
          {
              this.stringBuilder.append(name).append('\n');
              LogDataFrame dataFrame = frame.get(name);

              Class msgClass = null;
              for(Class c: Representations.class.getClasses())
              {
                  String cName = c.getSimpleName();
                  if(cName.equals(name))
                  {
                      msgClass = c;
                      break;
                  }
              }//end for
              
              if(msgClass == null) continue;
              
              
              Method parseMethod = msgClass.getMethod("parseFrom", dataFrame.data.getClass());
              
              if(parseMethod == null) continue;
              
              
              MessageOrBuilder message = 
                (MessageOrBuilder)(parseMethod.invoke(this, new Object[] {dataFrame.data}));
              
              for(com.google.protobuf.Descriptors.FieldDescriptor key: message.getAllFields().keySet())
              {
                  this.stringBuilder.append('>')
                          .append(key.getName())
                          .append(" : ");
                  
                  if(key.isRepeated())
                  {
                        for(int i = 0; i < message.getRepeatedFieldCount(key); i++)
                        {
                            Object value = message.getRepeatedField(key, i);
                            this.stringBuilder.append(value.toString()).append(',');
                        }
                  }
                  else
                  {
                      Object value = message.getField(key);
                      this.stringBuilder.append(value.toString()).append(',');
                  }
                          
                  this.stringBuilder.append('\n');
              }//end for
          }//end for
          
          jTextArea1.setText(this.stringBuilder.toString());
      }
      /*catch (InvalidProtocolBufferException ex)
      {
        ex.printStackTrace();
      }*/
      catch (Exception ex)
      {
        ex.printStackTrace(System.err);
      }
    }//end filter

    @Override
    public void finish()
    {
      try{
        File outFile = new File(inFile.getParentFile(),"joint_data_"+inFile.getName());
        FileWriter fileWriter = new FileWriter(outFile);
        fileWriter.write(stringBuilder.toString());
        fileWriter.close();
      }
      catch (IOException ex)
      {
        ex.printStackTrace(System.err);
      }
    }//end finish
  }//end class GeneticDataFilter
  
  static class ImageExtractorFilter implements DataFilter
  {
    @Override
    public String toString() {
        return "ImageExtractorFilter";
    }
    
    @Override
    public void setInFile(File inFile) {
        file_name = inFile.getName();
    }
    
    String file_name;
    
    ImageExtractorFilter()
    {
        
    }
    
    @Override
    public void filter(HashMap<String,LogDataFrame> frame)
    {
      try
      {
        LogDataFrame imageFrame = frame.get("Image");
        LogDataFrame infoFrame = frame.get("FrameInfo");

        if(imageFrame != null)
        {
            FrameInfo frameInfo = FrameInfo.parseFrom(infoFrame.data); 
            
            // create a file
            File outFile = new File("image_export/"+file_name+"/"+frameInfo.getTime()+".png");
            outFile.mkdirs();
            
            ImageManagerImpl im = new ImageManagerImpl();
            JanusImage janusImage = im.convertByteArrayToType(imageFrame.data);
            ImageIO.write(janusImage.getRgb(), "PNG", outFile);
        }
        else
        {
          System.out.println("no JointData");
        }
      }
      catch (InvalidProtocolBufferException ex)
      {
        ex.printStackTrace(System.err);
      }
      catch(IOException e){}
    }//end filter

    @Override
    public void finish()
    {
      
    }//end finish
  }//end ImageExtractorFilter
  
  static class JointDataFilter implements DataFilter
  {
    @Override
    public String toString() {
        return "JointDataFilter";
    }
    
    public void setInFile(File inFile) {
        this.inFile = inFile;
    }
    
    /*enum JointID {
      HeadPitch,
      numOfJoint,
    }*/

    final private String separator = " ";
    File inFile = null;
    StringBuilder stringBuilder = null;

    /** Flag: is the header for the output logfile created? (nesseccary to only write the header once) */
    private boolean headerGenerated = false;

    public JointDataFilter()
    {
      this.stringBuilder = new StringBuilder();

      makeHeader();
    }

    private void makeHeader()
    {
      this.stringBuilder.append("Time");
      this.stringBuilder.append(separator);
      this.stringBuilder.append("Framenumber");
      //this.stringBuilder.append(separator).append("Sync");

      for(int i = 0; i < JointID.values().length; i++ )
      {
        this.stringBuilder
                .append(separator)
                .append(JointID.values()[i]).append("_current")
                .append(separator)
                .append(JointID.values()[i]).append("_position");
        
        this.stringBuilder
                .append(separator)
                .append(JointID.values()[i]).append("_request_position")
                .append(separator)
                .append(JointID.values()[i]).append("_request_hardness");
      }//end for
      
      this.stringBuilder.append("\n");
    }//end makeHeader

    int tmp = -1;
    @Override
    public void filter(HashMap<String,LogDataFrame> frame)
    {
      try
      {
        LogDataFrame sensorJointFrame = frame.get("SensorJointData");
        LogDataFrame motorJointFrame = frame.get("MotorJointData");
        LogDataFrame frameInfoFrame = frame.get("FrameInfo");

        if(sensorJointFrame != null || motorJointFrame != null)
        {

          SensorJointData sensorJointData = SensorJointData.parseFrom(sensorJointFrame.data);
          JointData motorJointData = JointData.parseFrom(motorJointFrame.data);

          if(frameInfoFrame != null)
          {
            FrameInfo frameInfo = FrameInfo.parseFrom(frameInfoFrame.data);
            this.stringBuilder.append(frameInfo.getTime()*1e-3);
          }
          else
          {
            if(tmp == -1) tmp = sensorJointFrame.number;
            this.stringBuilder.append((sensorJointFrame.number - tmp)*1e-3); // time
          }
          
          this.stringBuilder.append(separator)
                            .append(sensorJointFrame.number);
          
          //sensorJointData
          for(int i = 0; i < JointID.values().length; i++ )
          {
            this.stringBuilder
                    .append(separator)
                    .append(sensorJointData.getElectricCurrent(i))
                    .append(separator)
                    .append(sensorJointData.getJointData().getPosition(i));
            this.stringBuilder
                    .append(separator)
                    .append(motorJointData.getPosition(i))
                    .append(separator)
                    .append(motorJointData.getStiffness(i));
          }//end for

          this.stringBuilder.append('\n');
        }
        else
        {
          System.out.println("no JointData");
        }
      }
      catch (InvalidProtocolBufferException ex)
      {
        ex.printStackTrace(System.err);
      }
    }//end filter

    @Override
    public void finish()
    {
      try{
        File outFile = new File(inFile.getParentFile(),"joint_data_"+inFile.getName());
        FileWriter fileWriter = new FileWriter(outFile);
        fileWriter.write(stringBuilder.toString());
        fileWriter.close();
      }
      catch (IOException ex)
      {
        ex.printStackTrace(System.err);
      }
    }//end finish
  }//end class JointDataFilter
  
  
  static class SerialDataFilter implements DataFilter
  {
    @Override
    public String toString() {
        return "SerialDataFilter";
    }
    
    public void setInFile(File inFile) {
        this.inFile = inFile;
    }
    
    /*enum JointID {
      HeadPitch,
      numOfJoint,
    }*/

    final private String separator = " ";
    File inFile = null;
    StringBuilder stringBuilder = null;

    /** Flag: is the header for the output logfile created? (nesseccary to only write the header once) */
    private boolean headerGenerated = false;

    public SerialDataFilter()
    {
      this.stringBuilder = new StringBuilder();
      //this.stringBuilder.append("Serial Data \n");
    }

    private void makeHeader(DoubleVector serialSensorData)
    {
      this.stringBuilder.append("Time");
      //this.stringBuilder.append("Framenumber");
      //this.stringBuilder.append(separator).append("Sync");

      for(int i = 0; i < serialSensorData.getVCount(); i+=6)
      {
          this.stringBuilder
              .append(separator)
              .append("Accel_" + serialSensorData.getV(i) + "_ID") // ID
              .append(separator)
              .append("Accel_" + serialSensorData.getV(i) + "_X") // X
              .append(separator)
              .append("Accel_" + serialSensorData.getV(i) + "_Y") // Y
              .append(separator)
              .append("Accel_" + serialSensorData.getV(i) + "_Z") // Z
              .append(separator)
              .append("Accel_" + serialSensorData.getV(i) + "_Force_zero_point") // Force Zero Point (16bit unsigned raw value)
              .append(separator)
              .append("Accel_" + serialSensorData.getV(i) + "_Force"); // Force
      }//end for

      for(int i = 0; i < JointID.values().length; i++ )
      {
        this.stringBuilder
                .append(separator)
                .append(JointID.values()[i]).append("_current")
                .append(separator)
                .append(JointID.values()[i]).append("_position");
      }
      for(int i = 0; i < JointID.values().length; i++)
      {
        this.stringBuilder
                .append(separator)
                .append(JointID.values()[i]).append("_request");
      }

      //this.stringBuilder.append("\n");
    }//end makeHeader

    double tmp = -1;
    @Override
    public void filter(HashMap<String,LogDataFrame> frame)
    {
      try
      {
        LogDataFrame logDataFrame = frame.get("SerialSensorData");
        LogDataFrame syncDataFrame = frame.get("SerialSensorDataRequest");

        if(logDataFrame != null || syncDataFrame != null)
        {
          DoubleVector serialSensorData = DoubleVector.parseFrom(logDataFrame.data);
          DoubleVector serialSensorSync = DoubleVector.parseFrom(syncDataFrame.data);

          if(serialSensorSync.getV(0) == 0.0) return;
          
          // generate head of the file:
          if (! this.headerGenerated) {
              makeHeader(serialSensorData);
              this.headerGenerated = true;
          }//end if

          if(tmp == -1) tmp = logDataFrame.number;
          this.stringBuilder.append((logDataFrame.number - tmp)*1e-3); // frame number
          //this.stringBuilder.append(separator).append(serialSensorSync.getV(0));
          
          for(int i = 0; i < serialSensorData.getVCount(); i+=6)
          {
            this.stringBuilder
                    .append(separator)
                    .append(serialSensorData.getV(i)) // ID
                    .append(separator)
                    .append(serialSensorData.getV(i+1)) // X
                    .append(separator)
                    .append(serialSensorData.getV(i+2)) // Y
                    .append(separator)
                    .append(serialSensorData.getV(i+3)) // Z
                    .append(separator)
                    .append(serialSensorData.getV(i+4)) // Force Zero Point (16bit unsigned raw value)
                    .append(separator)
                    .append(serialSensorData.getV(i+5)); // Force
          }//end for
        }else
        {
          System.out.println("no SerialSensorData");
        }
      
      
        LogDataFrame sensorJointFrame = frame.get("SensorJointData");
        LogDataFrame motorJointFrame = frame.get("MotorJointData");

        if(sensorJointFrame != null || motorJointFrame != null)
        {

          SensorJointData sensorJointData = SensorJointData.parseFrom(sensorJointFrame.data);
          SensorJointData motorJointData = SensorJointData.parseFrom(motorJointFrame.data);

          //sensorJointData
          for(int i = 0; i < JointID.values().length; i++ )
          {
            this.stringBuilder
                    .append(separator)
                    .append(sensorJointData.getElectricCurrent(i))
                    .append(separator)
                    .append(sensorJointData.getJointData().getPosition(i));
          }

          // motorJointData
          for(int i = 0; i < JointID.values().length; i++)
          {
            this.stringBuilder
                    .append(separator)
                    .append(motorJointData.getJointData().getPosition(i));
          }//end for
          
          //this.stringBuilder.append('\n');
        }
        else
        {
          System.out.println("no JointData");
        }
      }
      catch (InvalidProtocolBufferException ex)
      {
        ex.printStackTrace(System.err);
      }
    }//end filter

    @Override
    public void finish()
    {
      try{
        File outFile = new File(inFile.getParentFile(),"serial_data_"+inFile.getName());
        FileWriter fileWriter = new FileWriter(outFile);
        fileWriter.write(stringBuilder.toString());
        fileWriter.close();
      }
      catch (IOException ex)
      {
        ex.printStackTrace(System.err);
      }
    }//end finish
  }//end class SerialDataFilter


  
  class BasicReader
  {
    private InputStream streamReader = null;
    private RandomAccessFile rafReader = null;
    
    public BasicReader(InputStream streamReader)
    {
      this.streamReader = streamReader;
    }
    
    public BasicReader(RandomAccessFile rafReader)
    {
      this.rafReader = rafReader;
    }
            
    public int read(byte[] buffer) throws IOException
    {
      return (streamReader == null)?this.rafReader.read(buffer):this.streamReader.read(buffer);
    }
    public int read()  throws IOException
    {
      return (streamReader == null)?this.rafReader.read():this.streamReader.read();
    }
    public long skip(int size) throws IOException
    {
      return (streamReader == null)?this.rafReader.skipBytes(size):this.streamReader.skip(size);
    }
    public void seek(long size) throws IOException
    {
      this.rafReader.seek(size);
    }
  }//end class BasicReader


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel avaliableRepresentations;
    private javax.swing.JButton btRunAction;
    private javax.swing.JComboBox cbFilterList;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel fileNameLabel;
    private de.naoth.rc.dialogs.panels.ImagePanel imageCanvas;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton openMenuButton;
    // End of variables declaration//GEN-END:variables


  class LogFileFrame
  {
    final int number;
    final int size;
    final int position;

    public LogFileFrame(int number, int size, int position) {
      this.number = number;
      this.size = size;
      this.position = position;
    }
  }//end class Frame


  private class LogFileFilter extends javax.swing.filechooser.FileFilter
  {

    @Override
    public boolean accept(File file)
    {
      if (file.isDirectory())
      {
        return true;
      }
      String filename = file.getName();
      return filename.toLowerCase().endsWith(".log");
    }

    @Override
    public String getDescription()
    {
      return "Logfile (*.log)";
    }

    @Override
    public String toString()
    {
      return ".log";
    }
  }//end class LogFileFilter
}//end class LogfileInspector
