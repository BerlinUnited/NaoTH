/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.naoth.rc.dialogs;

import de.naoth.rc.RobotControl;
import de.naoth.rc.core.dialog.AbstractDialog;
import de.naoth.rc.core.dialog.DialogPlugin;
import de.naoth.rc.core.manager.ObjectListener;
import de.naoth.rc.core.manager.SwingCommandExecutor;
import de.naoth.rc.manager.GenericManagerFactory;
import de.naoth.rc.server.Command;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import net.xeoh.plugins.base.annotations.PluginImplementation;
import net.xeoh.plugins.base.annotations.injections.InjectPlugin;

/**
 *
 * @author Verena
 */
public class RemoteControl extends AbstractDialog
{

    @PluginImplementation
    public static class Plugin extends DialogPlugin<RemoteControl>
    {

        @InjectPlugin
        public static RobotControl parent;
        @InjectPlugin
        public static SwingCommandExecutor commandExecutor;
        @InjectPlugin
        public static GenericManagerFactory genericManagerFactory;
    }//end Plugin

    int mouseX;
    int mouseY;
    boolean steeringPanelMousePressed;
    int throttle;
    boolean w, a, s, d, q, e, shift, strg;
    int lastX;
    int lastY;
    int lastAlpha;
    int lastThrottle;

    public RemoteControl()
    {
        w = false;
        a = false;
        s = false;
        d = false;
        q = false;
        e = false;
        shift = false;
        strg = false;
        steeringPanelMousePressed = false;
        throttle = 50;
        lastX = 0;
        lastY = 0;
        lastAlpha = 0;
        lastThrottle = throttle;
        initComponents();
        configKeyListeners();
        int x = steeringPanel.getX() + steeringPanel.getHeight() / 2 - midPoint.getHeight() / 2;
        int y = steeringPanel.getY() + steeringPanel.getWidth() / 2 - midPoint.getWidth() / 2;
        midPoint.setLocation(x, y);
    }

    public void configKeyListeners()
    {
        this.addKeyListener(new RemoteControlKeyListener(this));
        this.backwardButton.addKeyListener(new RemoteControlKeyListener(this));
        this.backwardLeftButton.addKeyListener(new RemoteControlKeyListener(this));
        this.backwardRightButton.addKeyListener(new RemoteControlKeyListener(this));
        this.connectToRobotToggle.addKeyListener(new RemoteControlKeyListener(this));
        this.forwardButton.addKeyListener(new RemoteControlKeyListener(this));
        this.forwardLeftButton.addKeyListener(new RemoteControlKeyListener(this));
        this.forwardRightButton.addKeyListener(new RemoteControlKeyListener(this));
        this.jToggleButton2.addKeyListener(new RemoteControlKeyListener(this));
        this.jToolBar1.addKeyListener(new RemoteControlKeyListener(this));
        this.kickButton.addKeyListener(new RemoteControlKeyListener(this));
        this.leftButton.addKeyListener(new RemoteControlKeyListener(this));
        this.midPoint.addKeyListener(new RemoteControlKeyListener(this));
        this.rightButton.addKeyListener(new RemoteControlKeyListener(this));
        this.steeringPanel.addKeyListener(new RemoteControlKeyListener(this));
        this.throttleLabel.addKeyListener(new RemoteControlKeyListener(this));
        this.throttleSlider.addKeyListener(new RemoteControlKeyListener(this));
        this.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jToolBar1 = new javax.swing.JToolBar();
        connectToRobotToggle = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        throttleLabel = new javax.swing.JLabel();
        throttleSlider = new javax.swing.JSlider();
        forwardButton = new javax.swing.JButton();
        backwardButton = new javax.swing.JButton();
        rightButton = new javax.swing.JButton();
        leftButton = new javax.swing.JButton();
        kickButton = new javax.swing.JButton();
        forwardRightButton = new javax.swing.JButton();
        forwardLeftButton = new javax.swing.JButton();
        backwardLeftButton = new javax.swing.JButton();
        backwardRightButton = new javax.swing.JButton();
        steeringPanel = new javax.swing.JPanel();
        midPoint = new javax.swing.JPanel();

        jToolBar1.setRollover(true);

        connectToRobotToggle.setText("refresh");
        connectToRobotToggle.setFocusable(false);
        connectToRobotToggle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        connectToRobotToggle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        connectToRobotToggle.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                connectToRobotToggleActionPerformed(evt);
            }
        });
        jToolBar1.add(connectToRobotToggle);

        jToggleButton2.setText("connect to wiimote");
        jToggleButton2.setFocusable(false);
        jToggleButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jToggleButton2);

        throttleLabel.setText("Throttle = 50");
        jToolBar1.add(throttleLabel);

        throttleSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter()
        {
            public void mouseDragged(java.awt.event.MouseEvent evt)
            {
                throttleSliderMouseDragged(evt);
            }
        });
        jToolBar1.add(throttleSlider);

        forwardButton.setText("|");
        forwardButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                forwardButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                forwardButtonMouseReleased(evt);
            }
        });

        backwardButton.setText("|");
        backwardButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                backwardButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                backwardButtonMouseReleased(evt);
            }
        });

        rightButton.setText("->");
        rightButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                rightButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                rightButtonMouseReleased(evt);
            }
        });

        leftButton.setText("<-");
        leftButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                leftButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                leftButtonMouseReleased(evt);
            }
        });

        kickButton.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        kickButton.setText("Kick!");
        kickButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                kickButtonActionPerformed(evt);
            }
        });

        forwardRightButton.setText("/");
        forwardRightButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                forwardRightButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                forwardRightButtonMouseReleased(evt);
            }
        });

        forwardLeftButton.setText("\\");
            forwardLeftButton.addMouseListener(new java.awt.event.MouseAdapter()
            {
                public void mousePressed(java.awt.event.MouseEvent evt)
                {
                    forwardLeftButtonMousePressed(evt);
                }
                public void mouseReleased(java.awt.event.MouseEvent evt)
                {
                    forwardLeftButtonMouseReleased(evt);
                }
            });

            backwardLeftButton.setText("/");
            backwardLeftButton.addMouseListener(new java.awt.event.MouseAdapter()
            {
                public void mousePressed(java.awt.event.MouseEvent evt)
                {
                    backwardLeftButtonMousePressed(evt);
                }
                public void mouseReleased(java.awt.event.MouseEvent evt)
                {
                    backwardLeftButtonMouseReleased(evt);
                }
            });

            backwardRightButton.setText("\\");
                backwardRightButton.addMouseListener(new java.awt.event.MouseAdapter()
                {
                    public void mousePressed(java.awt.event.MouseEvent evt)
                    {
                        backwardRightButtonMousePressed(evt);
                    }
                    public void mouseReleased(java.awt.event.MouseEvent evt)
                    {
                        backwardRightButtonMouseReleased(evt);
                    }
                });

                steeringPanel.setBackground(new java.awt.Color(153, 153, 153));
                steeringPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                steeringPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter()
                {
                    public void mouseDragged(java.awt.event.MouseEvent evt)
                    {
                        steeringPanelMouseDragged(evt);
                    }
                });
                steeringPanel.addMouseListener(new java.awt.event.MouseAdapter()
                {
                    public void mousePressed(java.awt.event.MouseEvent evt)
                    {
                        steeringPanelMousePressed(evt);
                    }
                    public void mouseReleased(java.awt.event.MouseEvent evt)
                    {
                        steeringPanelMouseReleased(evt);
                    }
                });

                midPoint.setBackground(new java.awt.Color(0, 0, 0));

                javax.swing.GroupLayout midPointLayout = new javax.swing.GroupLayout(midPoint);
                midPoint.setLayout(midPointLayout);
                midPointLayout.setHorizontalGroup(
                    midPointLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGap(0, 10, Short.MAX_VALUE)
                );
                midPointLayout.setVerticalGroup(
                    midPointLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGap(0, 10, Short.MAX_VALUE)
                );

                javax.swing.GroupLayout steeringPanelLayout = new javax.swing.GroupLayout(steeringPanel);
                steeringPanel.setLayout(steeringPanelLayout);
                steeringPanelLayout.setHorizontalGroup(
                    steeringPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, steeringPanelLayout.createSequentialGroup()
                        .addContainerGap(96, Short.MAX_VALUE)
                        .addComponent(midPoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(92, 92, 92))
                );
                steeringPanelLayout.setVerticalGroup(
                    steeringPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(steeringPanelLayout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(midPoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(94, Short.MAX_VALUE))
                );

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
                this.setLayout(layout);
                layout.setHorizontalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backwardLeftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(backwardButton, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(leftButton, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                                    .addComponent(forwardLeftButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(forwardButton, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                                    .addComponent(kickButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(forwardRightButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rightButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(backwardRightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addComponent(steeringPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 299, Short.MAX_VALUE))
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                );
                layout.setVerticalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(forwardRightButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(forwardLeftButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(forwardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(leftButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(kickButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(rightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(backwardButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(backwardLeftButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(backwardRightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(steeringPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(229, Short.MAX_VALUE))
                );
            }// </editor-fold>//GEN-END:initComponents

    private void kickButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_kickButtonActionPerformed
    {//GEN-HEADEREND:event_kickButtonActionPerformed
        kick();
    }//GEN-LAST:event_kickButtonActionPerformed

    private void connectToRobotToggleActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_connectToRobotToggleActionPerformed
    {//GEN-HEADEREND:event_connectToRobotToggleActionPerformed
        Plugin.parent.checkConnected();
    }//GEN-LAST:event_connectToRobotToggleActionPerformed

    private void forwardButtonMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_forwardButtonMousePressed
    {//GEN-HEADEREND:event_forwardButtonMousePressed
        startWalking(throttle, 0, 0);
    }//GEN-LAST:event_forwardButtonMousePressed

    private void forwardButtonMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_forwardButtonMouseReleased
    {//GEN-HEADEREND:event_forwardButtonMouseReleased
        stopWalking();
    }//GEN-LAST:event_forwardButtonMouseReleased

    private void backwardButtonMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_backwardButtonMousePressed
    {//GEN-HEADEREND:event_backwardButtonMousePressed
        startWalking(-throttle, 0, 0);
    }//GEN-LAST:event_backwardButtonMousePressed

    private void backwardButtonMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_backwardButtonMouseReleased
    {//GEN-HEADEREND:event_backwardButtonMouseReleased
        stopWalking();
    }//GEN-LAST:event_backwardButtonMouseReleased

    private void leftButtonMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_leftButtonMousePressed
    {//GEN-HEADEREND:event_leftButtonMousePressed
        startWalking(0, -throttle, 0);
    }//GEN-LAST:event_leftButtonMousePressed

    private void leftButtonMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_leftButtonMouseReleased
    {//GEN-HEADEREND:event_leftButtonMouseReleased
        stopWalking();
    }//GEN-LAST:event_leftButtonMouseReleased

    private void rightButtonMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_rightButtonMousePressed
    {//GEN-HEADEREND:event_rightButtonMousePressed
        startWalking(0, throttle, 0);
    }//GEN-LAST:event_rightButtonMousePressed

    private void rightButtonMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_rightButtonMouseReleased
    {//GEN-HEADEREND:event_rightButtonMouseReleased
        stopWalking();
    }//GEN-LAST:event_rightButtonMouseReleased

    private void forwardLeftButtonMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_forwardLeftButtonMousePressed
    {//GEN-HEADEREND:event_forwardLeftButtonMousePressed
        startWalking(throttle / 2, -throttle / 2, 0);
    }//GEN-LAST:event_forwardLeftButtonMousePressed

    private void forwardLeftButtonMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_forwardLeftButtonMouseReleased
    {//GEN-HEADEREND:event_forwardLeftButtonMouseReleased
        stopWalking();
    }//GEN-LAST:event_forwardLeftButtonMouseReleased

    private void forwardRightButtonMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_forwardRightButtonMousePressed
    {//GEN-HEADEREND:event_forwardRightButtonMousePressed
        startWalking(throttle / 2, throttle / 2, 0);
    }//GEN-LAST:event_forwardRightButtonMousePressed

    private void forwardRightButtonMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_forwardRightButtonMouseReleased
    {//GEN-HEADEREND:event_forwardRightButtonMouseReleased
        stopWalking();
    }//GEN-LAST:event_forwardRightButtonMouseReleased

    private void backwardRightButtonMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_backwardRightButtonMousePressed
    {//GEN-HEADEREND:event_backwardRightButtonMousePressed
        startWalking(-throttle / 2, throttle / 2, 0);
    }//GEN-LAST:event_backwardRightButtonMousePressed

    private void backwardRightButtonMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_backwardRightButtonMouseReleased
    {//GEN-HEADEREND:event_backwardRightButtonMouseReleased
        stopWalking();
    }//GEN-LAST:event_backwardRightButtonMouseReleased

    private void backwardLeftButtonMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_backwardLeftButtonMousePressed
    {//GEN-HEADEREND:event_backwardLeftButtonMousePressed
        startWalking(-throttle / 2, -throttle / 2, 0);
    }//GEN-LAST:event_backwardLeftButtonMousePressed

    private void backwardLeftButtonMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_backwardLeftButtonMouseReleased
    {//GEN-HEADEREND:event_backwardLeftButtonMouseReleased
        stopWalking();
    }//GEN-LAST:event_backwardLeftButtonMouseReleased

    private void steeringPanelMouseDragged(java.awt.event.MouseEvent evt)//GEN-FIRST:event_steeringPanelMouseDragged
    {//GEN-HEADEREND:event_steeringPanelMouseDragged
        mouseX = evt.getX();
        mouseY = evt.getY();
        if (steeringPanelMousePressed)
        {
            walkTowardsMouse();
        }
    }//GEN-LAST:event_steeringPanelMouseDragged

    private void steeringPanelMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_steeringPanelMousePressed
    {//GEN-HEADEREND:event_steeringPanelMousePressed
        steeringPanelMousePressed = true;
        mouseX = evt.getX();
        mouseY = evt.getY();
        walkTowardsMouse();
    }//GEN-LAST:event_steeringPanelMousePressed

    private void steeringPanelMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_steeringPanelMouseReleased
    {//GEN-HEADEREND:event_steeringPanelMouseReleased
        this.steeringPanelMousePressed = false;
        stopWalking();
    }//GEN-LAST:event_steeringPanelMouseReleased

    private void throttleSliderMouseDragged(java.awt.event.MouseEvent evt)//GEN-FIRST:event_throttleSliderMouseDragged
    {//GEN-HEADEREND:event_throttleSliderMouseDragged
        throttle = throttleSlider.getValue();
        throttleLabel.setText("Throttle = " + throttle);
        if(throttle == 0)
        {
            stopWalking();
        }
        else
        {
            if(lastX != 0 || lastY != 0 || lastAlpha != 0)
            {
                int x = (int)((double)lastX/lastThrottle * throttle);
                int y =(int)((double)lastY/lastThrottle * throttle);
                int alpha = (int)((double)lastAlpha/lastThrottle * throttle);
                startWalking(x,y,alpha);
            }
        }
        lastThrottle = throttle;
    }//GEN-LAST:event_throttleSliderMouseDragged

    private void stopWalking()
    {
        if (Plugin.parent.checkConnected())
        {
            Command command = new Command("Cognition:remoteControlRequest_STAND");
            Plugin.commandExecutor.executeCommand(new EmptyListener(), command);
            lastX = 0;
            lastY = 0;
            lastAlpha = 0;
        }
    }

    private void startWalking(int x, int y, int alpha)
    {
        if (Plugin.parent.checkConnected())
        {
            Command command = new Command("Cognition:remoteControlRequest_WALK");
            command.addArg("x", "" + x).addArg("y", "" + y).addArg("alpha", "" + alpha);
            Plugin.commandExecutor.executeCommand(new EmptyListener(), command);
            lastX = x;
            lastY = y;
            lastAlpha = alpha;
        }
    }

    private void walkTowardsMouse()
    {
        double x = mouseX - steeringPanel.getWidth() / 2;
        x = x / (steeringPanel.getWidth() / 2) * (-throttle);
        double y = mouseY - steeringPanel.getHeight() / 2;
        y = y / (steeringPanel.getHeight() / 2) * (-throttle);
        //System.out.println("x = " + x + "; y = " + y + "; mouseX = " + mouseX + "; mouseY = " + mouseY);
        startWalking((int) y, (int) x, 0);
    }

    private void kick()
    {
        if (Plugin.parent.checkConnected())
        {
            Command command = new Command("Cognition:remoteControlRequest_KICK");
            //command.addArg("x", "" + x).addArg("y", "" + y).addArg("alpha", "" + alpha);
            Plugin.commandExecutor.executeCommand(new EmptyListener(), command);
        }
    }

    private void walkWithKeys()
    {
        int x = 0;
        int y = 0;
        int alpha = 0;
        if (w ^ s)
        {
            if (w)
            {
                x = throttle;
            }
            else
            {
                x = -throttle;
            }
        }
        if (a ^ d)
        {
            if (a)
            {
                y = -throttle;
            }
            else
            {
                y = throttle;
            }
        }
        if (q ^ e)
        {
            if (q)
            {
                alpha = throttle;
            }
            else
            {
                alpha = -throttle;
            }
        }
        if (x != 0 || y != 0 || alpha != 0)
        {
            startWalking(x, y, alpha);
        }
        else
        {
            stopWalking();
        }
    }

    class EmptyListener implements ObjectListener<byte[]>
    {

        @Override
        public void newObjectReceived(byte[] object)
        {

        }

        @Override
        public void errorOccured(String cause)
        {

        }

    }

    class RemoteControlKeyListener implements KeyListener
    {
        RemoteControl panel;
        public RemoteControlKeyListener(RemoteControl p)
        {
            panel = p;
        }
        
        @Override
        public void keyTyped(KeyEvent e)
        {
            System.out.println("typed key: " + e.getKeyCode());
        }

        @Override
        public void keyPressed(KeyEvent e)
        {
            System.out.println("pressed key: " + e.getKeyCode());
        }

        @Override
        public void keyReleased(KeyEvent e)
        {
            System.out.println("released key: " + e.getKeyCode());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backwardButton;
    private javax.swing.JButton backwardLeftButton;
    private javax.swing.JButton backwardRightButton;
    private javax.swing.JToggleButton connectToRobotToggle;
    private javax.swing.JButton forwardButton;
    private javax.swing.JButton forwardLeftButton;
    private javax.swing.JButton forwardRightButton;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton kickButton;
    private javax.swing.JButton leftButton;
    private javax.swing.JPanel midPoint;
    private javax.swing.JButton rightButton;
    private javax.swing.JPanel steeringPanel;
    private javax.swing.JLabel throttleLabel;
    private javax.swing.JSlider throttleSlider;
    // End of variables declaration//GEN-END:variables
}
