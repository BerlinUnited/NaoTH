/**
 * TeamCommViewer.java
 *
 * Created on 08.11.2010, 21:41:28
 */
package de.naoth.rc.dialogs;

import de.naoth.rc.Helper;
import de.naoth.rc.RobotControl;
import de.naoth.rc.components.RobotStatus;
import de.naoth.rc.core.dialog.AbstractDialog;
import de.naoth.rc.core.dialog.DialogPlugin;
import de.naoth.rc.dataformats.SPLMessage;
import de.naoth.rc.drawingmanager.DrawingEventManager;
import de.naoth.rc.drawings.DrawingCollection;
import java.awt.Color;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Field;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.net.SocketException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.channels.AsynchronousCloseException;
import java.nio.channels.DatagramChannel;
import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Timer;
import java.util.TimerTask;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import net.xeoh.plugins.base.annotations.PluginImplementation;
import net.xeoh.plugins.base.annotations.injections.InjectPlugin;

/**
 *
 * @author Heinrich Mellmann
 */
public class TeamCommViewer extends AbstractDialog {

    @PluginImplementation
    public static class Plugin extends DialogPlugin<TeamCommViewer> {

        @InjectPlugin
        public static RobotControl parent;
        @InjectPlugin
        public static DrawingEventManager drawingEventManager;
    }//end Plugin

    private Timer timerCheckMessages;
    private final TeamCommListener listenerOwn = new TeamCommListener(false);
    private final TeamCommListener listenerOpponent = new TeamCommListener(true);
    private final HashMap<String, RobotStatus> robotsMap = new HashMap<>();

    private final Map<String, TeamCommListener.Message> messageMap = Collections.synchronizedMap(new TreeMap<String, TeamCommListener.Message>());

    private final Color magenta = new Color(210, 180, 200);
    private final Color cyan = new Color(180, 210, 255);
    
    /**
     * Creates new form TeamCommViewer
     */
    public TeamCommViewer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TeamComFileChooser = new javax.swing.JFileChooser();
        robotStatusPanel = new javax.swing.JPanel();
        btListen = new javax.swing.JToggleButton();
        portNumberOwn = new javax.swing.JFormattedTextField();
        portNumberOpponent = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jToggleButton1 = new javax.swing.JToggleButton();

        TeamComFileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        TeamComFileChooser.setDialogTitle("Saving destination");
        TeamComFileChooser.setSelectedFile(new File((new SimpleDateFormat("yyyy-MM-dd")).format(new Date())+"_TeamComm.log"));

        robotStatusPanel.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        btListen.setText("Listen to TeamComm");
        btListen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btListenActionPerformed(evt);
            }
        });

        portNumberOwn.setColumns(6);
        portNumberOwn.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#"))));
        portNumberOwn.setText("10004");
        portNumberOwn.setToolTipText("Own team port number");

        portNumberOpponent.setColumns(6);
        portNumberOpponent.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#"))));
        portNumberOpponent.setToolTipText("Opponent team port number");

        jLabel1.setText("Blue:");

        jLabel2.setText("Red:");

        jToggleButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/naoth/rc/res/play.png"))); // NOI18N
        jToggleButton1.setText("Record TeamComm");
        jToggleButton1.setActionCommand("RecordTeamComm");
        jToggleButton1.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/de/naoth/rc/res/media-record.png"))); // NOI18N
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btListen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(portNumberOwn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(portNumberOpponent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jToggleButton1)
                        .addGap(0, 148, Short.MAX_VALUE))
                    .addComponent(robotStatusPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btListen)
                        .addComponent(portNumberOwn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(portNumberOpponent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2))
                    .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(robotStatusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btListenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btListenActionPerformed

        try {
            if (this.btListen.isSelected()) {
                String ownPortRaw = portNumberOwn.getText().trim();
                if(!ownPortRaw.isEmpty()) {
                    int portOwn = Integer.parseInt(ownPortRaw);
                    listenerOwn.connect(portOwn);
                }
                String opponentPortRaw = portNumberOpponent.getText().trim();
                if (!opponentPortRaw.isEmpty()) {
                    int portOpponent = Integer.parseInt(opponentPortRaw);
                    listenerOpponent.connect(portOpponent);
                }

                this.timerCheckMessages = new Timer();
                this.timerCheckMessages.scheduleAtFixedRate(new TeamCommListenTask(), 100, 33);
                this.portNumberOwn.setEnabled(false);
                this.portNumberOpponent.setEnabled(false);
                this.robotStatusPanel.setVisible(true);

            } else {

                if(this.timerCheckMessages != null) {
                    this.timerCheckMessages.cancel();
                    this.timerCheckMessages.purge();
                    this.timerCheckMessages = null;
                }
                
                listenerOwn.disconnect();
                listenerOpponent.disconnect();

                synchronized (messageMap) {
                    messageMap.clear();
                    this.robotsMap.clear();
                    this.robotStatusPanel.removeAll();
                    this.robotStatusPanel.setVisible(false);
                    this.portNumberOwn.setEnabled(true);
                    this.portNumberOpponent.setEnabled(true);
                }
            }
        } catch (NumberFormatException ex) {
            Helper.handleException("Invalid port number", ex);
        } catch (InterruptedException ex) {
            ex.printStackTrace(System.err);
        } catch (IOException ex) {
            ex.printStackTrace(System.err);
        }
    }//GEN-LAST:event_btListenActionPerformed

    LogFile logfile = null;
    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        if(jToggleButton1.isSelected()) {
            if(TeamComFileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                // if selected file has a file extension - use this, otherwise append ".log" to the filename
                File dfile = (TeamComFileChooser.getSelectedFile().getName().lastIndexOf(".") == -1) ? 
                    new File(TeamComFileChooser.getSelectedFile()+".log") : 
                    TeamComFileChooser.getSelectedFile();

                // TODO: check if file exist
                // TODO: check if file is writeable
                // TODO: append on existing file
                // TODO: use ExtendedFileChooser!?
                //      new de.naoth.rc.components.ExtendedFileChooser();
                
                try {
                    dfile.createNewFile();
                    logfile = new LogFile(dfile);
                    logfile.enable();
                    jToggleButton1.setSelected(true);
                } catch (IOException ex) {
                    Logger.getLogger(TeamCommViewer.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                // file chooser was canceled -> don't toggle state!
                jToggleButton1.setSelected(false);
                if(logfile != null) {
                    logfile.disable();
                }
            }
        } else {
            if(logfile != null) {
                logfile.disable();
            }
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    @Override
    public void dispose() {
    }

    private class TeamCommListenTask extends TimerTask {

        @Override
        public void run() {
            synchronized (messageMap) {
                if (messageMap.isEmpty()) {
                    return;
                }

                DrawingCollection drawings = new DrawingCollection();

                for (Entry<String, TeamCommListener.Message> msgEntry : messageMap.entrySet()) {
                    final String address = msgEntry.getKey();
                    final TeamCommListener.Message msg = msgEntry.getValue();

                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            RobotStatus robotStatus = robotsMap.get(address);
                            if (robotStatus == null) {
                                robotStatus = new RobotStatus(Plugin.parent.getMessageServer(), address, msg.isOpponent() ? magenta : cyan);
                                robotsMap.put(address, robotStatus);
                                robotStatusPanel.add(robotStatus);
                            }
                            robotStatus.setStatus(msg.timestamp, msg.message);
                        }
                    });
                    
                    msg.message.draw(drawings, msg.isOpponent() ? Color.RED : Color.BLUE, msg.isOpponent());
                }

                TeamCommViewer.Plugin.drawingEventManager.fireDrawingEvent(drawings);

            } // end synchronized
        } // end run
    }

    public class TeamCommListener implements Runnable {

        public class Message {

            public Message(long timestamp, SPLMessage message, boolean isOpponent) {
                this.timestamp = timestamp;
                this.message = message;
                this.isOpponent = isOpponent;
            }

            public final long timestamp;
            public final SPLMessage message;
            private final boolean isOpponent;
            
            public boolean isOpponent() {
                return isOpponent;
            }
        }

        private DatagramChannel channel;
        private Thread trigger;

        private final ByteBuffer readBuffer;

        private final boolean isOpponent;

        public TeamCommListener(boolean isOpponent) {
            this.readBuffer = ByteBuffer.allocateDirect(SPLMessage.SPL_STANDARD_MESSAGE_SIZE);
            this.readBuffer.order(ByteOrder.LITTLE_ENDIAN);
            this.isOpponent = isOpponent;
        }

        boolean isConnected() {
            return this.channel != null && this.trigger != null;
        }

        public void connect(int port) throws IOException, InterruptedException {
            disconnect();

            this.channel = DatagramChannel.open();
            this.channel.configureBlocking(true);
            this.channel.bind(new InetSocketAddress(InetAddress.getByName("0.0.0.0"), port));

            this.trigger = new Thread(this);
            this.trigger.start();
        }

        public void disconnect() throws IOException, InterruptedException {
            if (this.channel != null) {
                this.channel.close();
                this.channel = null;
            }
            if (this.trigger != null) {
                this.trigger.join();
                this.trigger = null;
            }
        }

        @Override
        public void run() {
            try {
                while (true) {
                    this.readBuffer.clear();
                    SocketAddress address = this.channel.receive(this.readBuffer);
                    this.readBuffer.flip();

                    try {
                        SPLMessage msg = new SPLMessage(this.readBuffer);
                        
                        if(logfile != null) {
                            logfile.writeSplMessage(msg);
                        }

                        long timestamp = System.currentTimeMillis();
                        if (address instanceof InetSocketAddress) {
                            messageMap.put(((InetSocketAddress) address).getHostString(), new Message(timestamp, msg, this.isOpponent));
                        }

                    } catch (Exception ex) {
                        Logger.getLogger(TeamCommViewer.class.getName()).log(Level.INFO, null, ex);
                    }

                }
            } catch (AsynchronousCloseException ex) {
                /* socket was closed, that's fine */
            } catch (SocketException ex) {
                Logger.getLogger(TeamCommViewer.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(TeamCommViewer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//end class TeamCommListener
    
    private class LogFile {
        private File log;
        private BufferedWriter bw;
        private boolean writeLog = false;
        
        public LogFile(File log) throws IOException {
            this.log = log;
            this.bw = new BufferedWriter(new FileWriter(this.log));
        }

        @Override
        protected void finalize() throws Throwable {
            // flush buffer and close
            if(bw != null) {
                System.out.println("closing BufferdWriter ...");
                bw.close();
            }
            super.finalize();
        }
        
        public void enable() {
            System.out.println("Enable log file");
            this.writeLog = true;
        }
        
        public void disable() {
            System.out.println("Disable log file");
            this.writeLog = false;
            try {
                this.bw.flush();
            } catch (IOException ex) {
                Logger.getLogger(TeamCommViewer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        public void writeSplMessage(SPLMessage msg) {
            if(this.writeLog) {
                Field f[] = SPLMessage.class.getFields();
                try {
                    this.bw.write("{");
                    for (int i = 0; i < f.length; i++) {
                        Field field = f[i];
                        // handle numeric fields
                        if( field.getGenericType() == java.lang.Integer.TYPE ||
                            field.getGenericType() == java.lang.Short.TYPE ||
                            field.getGenericType() == java.lang.Byte.TYPE ||
                            field.getGenericType() == java.lang.Float.TYPE
                            ) {
                            this.bw.write("'"+field.getName() + "': " + field.get(msg) + ",");
                        }
                        /*
                        // TODO: how handle array fields?
                        System.out.println(field.getClass().isPrimitive());
                        if(field.getName() == "suggestion") {
                            System.out.println(field.getGenericType().getTypeName());
                            field.get
                        }*/
                    }
                    this.bw.write("},\n");
                } catch (IllegalArgumentException ex) {
                    Logger.getLogger(TeamCommViewer.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(TeamCommViewer.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(TeamCommViewer.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser TeamComFileChooser;
    private javax.swing.JToggleButton btListen;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JFormattedTextField portNumberOpponent;
    private javax.swing.JFormattedTextField portNumberOwn;
    private javax.swing.JPanel robotStatusPanel;
    // End of variables declaration//GEN-END:variables

}
