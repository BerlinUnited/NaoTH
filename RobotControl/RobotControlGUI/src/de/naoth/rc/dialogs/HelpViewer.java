/*
 * HelpViewer.java
 *
 * Created on 6. Juli 2008, 00:47
 */
package de.naoth.rc.dialogs;

import de.naoth.rc.AbstractDialog;
import de.naoth.rc.RobotControl;
import de.naoth.rc.manager.ObjectListener;
import de.naoth.rc.server.Command;
import de.naoth.rc.server.CommandSender;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import net.xeoh.plugins.base.annotations.PluginImplementation;
import net.xeoh.plugins.base.annotations.events.Init;
import net.xeoh.plugins.base.annotations.injections.InjectPlugin;

/**
 *
 * @author  Heinrich Mellmann
 */
@PluginImplementation
public class HelpViewer extends AbstractDialog
  implements CommandSender, ObjectListener<String[]>
{

  @InjectPlugin
  public RobotControl parent;

  private Command commandToExecute;

  /** Creates new form HelpViewer */
  public HelpViewer()
  {
    initComponents();
  }

  @Init
  public void init()
  {
  }

  @Override
  public JPanel getPanel()
  {
    return this;
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jToggleButtonRefresh = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane = new javax.swing.JEditorPane();

        jToolBar1.setRollover(true);

        jToggleButtonRefresh.setText("Refresh");
        jToggleButtonRefresh.setFocusable(false);
        jToggleButtonRefresh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonRefresh.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonRefreshActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButtonRefresh);

        jEditorPane.setContentType("text/html");
        jEditorPane.setEditable(false);
        jScrollPane1.setViewportView(jEditorPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonRefreshActionPerformed
      if(parent.checkConnected())
      {
        if(jToggleButtonRefresh.isSelected())
        {
          Command command = new Command("help");
          sendCommand(command);
        }
      }
      else
      {
        jToggleButtonRefresh.setSelected(false);
      }
    }//GEN-LAST:event_jToggleButtonRefreshActionPerformed
    
  @Override
    public void errorOccured(String cause) {
        jToggleButtonRefresh.setSelected(false);
    }

  @Override
    public void newObjectReceived(String[] object) {

        //this.contentPanel.removeAll();
        
        for (String str : object) {
            
        }//end for
        
        //this.contentPanel.revalidate();
        jToggleButtonRefresh.setSelected(false);
    }//end newObjectReceived
    
  private void sendCommand(Command command)
  {
      commandToExecute = command;
      this.parent.getMessageServer().executeSingleCommand(this, command);
  }
  
  
  @Override
  public void handleResponse(byte[] result, Command originalCommand)
  {
    if(originalCommand.getName().equals("help"))
    {
        //System.out.println(new String(result));
        String[] commands = new String(result).split("\n");
        String text = "<h2>" + commands[0] + "</h2>";
        
        text += "<table>";
        for(String str: commands)
        {
            int idx = str.indexOf(": ");
            if(idx > 0)
            {
                text += "<tr>";
                text += "<td valign=\"top\"><b><u><font color=#0000FF>" + str.substring(0, idx) + "</font></u></b></td>";
                text += "<td valign=\"top\"><i>" + str.substring(idx + 2) + "</i></td>";
                text += "</tr>";
            }
        }//end for
        text += "</table><br>";
        
        jEditorPane.setText(text);
        jToggleButtonRefresh.setSelected(false);
    }//end if
  }

  @Override
  public void handleError(int code)
  {
    jToggleButtonRefresh.setSelected(false);
    JOptionPane.showMessageDialog(this,
              "Error occured, code " + code, "ERROR", JOptionPane.ERROR_MESSAGE);
  }

  @Override
  public Command getCurrentCommand()
  {
    return commandToExecute;
  }

  @Override
  public void dispose()
  {
    System.out.println("Dispose is not implemented for: " + this.getClass().getName());
  }//end dispose
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane jEditorPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jToggleButtonRefresh;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
    
}