/**
 * @author <a href="xu@informatik.hu-berlin.de">Xu, Yuan</a>
 */
package de.naoth.rc.dialogs;

import de.naoth.rc.RobotControl;
import de.naoth.rc.core.dialog.AbstractDialog;
import de.naoth.rc.core.dialog.DialogPlugin;
import de.naoth.rc.core.manager.ObjectListener;
import de.naoth.rc.manager.GLViewerSceneManager;
import de.naoth.rc.manager.ImageManagerBottom;
import de.naoth.rc.manager.ImageManagerTop;
import de.naoth.rc.opengl.drawings.Field;
import java.awt.Cursor;
import java.awt.event.KeyEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import net.xeoh.plugins.base.annotations.PluginImplementation;
import net.xeoh.plugins.base.annotations.injections.InjectPlugin;
import simgl.drawings.Origami;
import simgl.input.Key;
import simgl.input.KeyInputListener;
import simgl.input.Mouse;
import simgl.input.MouseInputListener;
import simgl.input.MouseWheel;
import simgl.input.MouseWheelInputListener;
import simgl.messenger.DrawMessenger;
import simgl.renderer.SimglRenderer;
import simgl.representations.Point3f;
import simgl.scene.creator.BasicSceneCreator;
import simgl.viewpoint.Camera;
import simgl.window.SimglCanvas;

//@PluginImplementation
public class GLViewer2 extends AbstractDialog implements ObjectListener<String[][]> {
    
    @Override
    public void newObjectReceived(String[][] object) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    @Override
    public void errorOccured(String cause) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    @PluginImplementation
    public static class Plugin extends DialogPlugin<GLViewer2> {
        
        @InjectPlugin
        public static RobotControl parent;
        @InjectPlugin
        public static GLViewerSceneManager glViewerSceneManager;
        @InjectPlugin
        public static ImageManagerBottom imageManager;
        @InjectPlugin
        public static ImageManagerTop imageTopManager;
    }//end Plugin

    private final SimglCanvas simglCanvas;
    private DrawMessenger drawMessenger;

    /**
     * Creates new form ThreeDimensionViewer
     */
    public GLViewer2() {
        super();
        initComponents();

        //TODO numbers
        this.simglCanvas = new SimglCanvas(1280, 720);
    }
    
    @Override
    public void init() {
        SimglRenderer simglRenderer = simglCanvas.getRenderer();
        Camera camera = simglCanvas.getCamera();
        
        registerInput(camera, simglCanvas);
        
        jPanelCanvas.add(this.simglCanvas);
        
        BasicSceneCreator sceneCreator = new BasicSceneCreator(simglRenderer);
        this.drawMessenger = sceneCreator.createDrawMessenger();
        
        // test messages
        new Thread(() -> {
            Object[] message;
            Point3f r;
            int count = 200;

            while (true) {

                for(int i=0; i<count; i++) {
                    r = Point3f.random(10);
                    message = new Object[]{ Origami.class, new Point3f(r.x, r.y, r.z), new Point3f(0,0,1), false};

                    drawMessenger.receive(message);
                }

                try {
                    drawMessenger.display();
                } catch (InterruptedException e) {

                }

                try {
                    Thread.sleep(100);
                } catch (InterruptedException ex) {
                }

                break;
            }
        }).start();
    }
    
    @Override
    public void dispose() {
        this.simglCanvas.destroy();
    }//end dispose

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar = new javax.swing.JToolBar();
        jToggleButtonUpdate = new javax.swing.JToggleButton();
        jCheckBoxField = new javax.swing.JCheckBox();
        jCheckBoxImage = new javax.swing.JCheckBox();
        cbUseFieldViewer = new javax.swing.JCheckBox();
        jPanelCanvas = new com.jogamp.opengl.awt.GLJPanel();

        jToolBar.setFloatable(false);
        jToolBar.setRollover(true);

        jToggleButtonUpdate.setText("Update");
        jToggleButtonUpdate.setToolTipText("Update scene from robot.");
        jToggleButtonUpdate.setFocusable(false);
        jToggleButtonUpdate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonUpdate.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonUpdateActionPerformed(evt);
            }
        });
        jToolBar.add(jToggleButtonUpdate);

        jCheckBoxField.setSelected(true);
        jCheckBoxField.setText("Field");
        jCheckBoxField.setToolTipText("Show the soccer field.");
        jCheckBoxField.setFocusable(false);
        jCheckBoxField.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jCheckBoxField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxFieldActionPerformed(evt);
            }
        });
        jToolBar.add(jCheckBoxField);

        jCheckBoxImage.setText("Image");
        jCheckBoxImage.setToolTipText("Receive image from camera of robot.");
        jCheckBoxImage.setFocusable(false);
        jCheckBoxImage.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jCheckBoxImage.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jCheckBoxImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxImageActionPerformed(evt);
            }
        });
        jToolBar.add(jCheckBoxImage);

        cbUseFieldViewer.setText("Use FieldViewer");
        cbUseFieldViewer.setFocusable(false);
        cbUseFieldViewer.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        cbUseFieldViewer.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar.add(cbUseFieldViewer);

        jPanelCanvas.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jPanelCanvasComponentResized(evt);
            }
        });

        javax.swing.GroupLayout jPanelCanvasLayout = new javax.swing.GroupLayout(jPanelCanvas);
        jPanelCanvas.setLayout(jPanelCanvasLayout);
        jPanelCanvasLayout.setHorizontalGroup(
            jPanelCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelCanvasLayout.setVerticalGroup(
            jPanelCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 269, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addComponent(jPanelCanvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelCanvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

  private void jCheckBoxFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jCheckBoxFieldActionPerformed
  {//GEN-HEADEREND:event_jCheckBoxFieldActionPerformed
      //TODO do something
  }//GEN-LAST:event_jCheckBoxFieldActionPerformed

  private void jToggleButtonUpdateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jToggleButtonUpdateActionPerformed
  {//GEN-HEADEREND:event_jToggleButtonUpdateActionPerformed
      if (jToggleButtonUpdate.isSelected()) {
          if (Plugin.parent.checkConnected()) {
              Plugin.glViewerSceneManager.addListener(this);
          } else {
              jToggleButtonUpdate.setSelected(false);
          }
      } else {
          Plugin.glViewerSceneManager.removeListener(this);
      }
  }//GEN-LAST:event_jToggleButtonUpdateActionPerformed

  private void jCheckBoxImageActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jCheckBoxImageActionPerformed
  {//GEN-HEADEREND:event_jCheckBoxImageActionPerformed
      //TODO do something
  }//GEN-LAST:event_jCheckBoxImageActionPerformed

    private void jPanelCanvasComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanelCanvasComponentResized
        simglCanvas.setSize(jPanelCanvas.getSize());
    }//GEN-LAST:event_jPanelCanvasComponentResized

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cbUseFieldViewer;
    private javax.swing.JCheckBox jCheckBoxField;
    private javax.swing.JCheckBox jCheckBoxImage;
    private com.jogamp.opengl.awt.GLJPanel jPanelCanvas;
    private javax.swing.JToggleButton jToggleButtonUpdate;
    private javax.swing.JToolBar jToolBar;
    // End of variables declaration//GEN-END:variables
    
    private static void registerInput(simgl.viewpoint.Camera camera, SimglCanvas canvas) {

        /**
         * register keys
         */
        KeyInputListener keyInputListener = new KeyInputListener();
        
        keyInputListener.registerKey(new Key(KeyEvent.VK_W) {
            @Override
            public void action() {
                camera.rotateUp(-this.secondsPressed());
            }
        });
        
        keyInputListener.registerKey(new Key(KeyEvent.VK_A) {
            @Override
            public void action() {
                camera.rotateRight(-this.secondsPressed());
            }
        });
        
        keyInputListener.registerKey(new Key(KeyEvent.VK_S) {
            @Override
            public void action() {
                camera.rotateUp(this.secondsPressed());
            }
        });
        
        keyInputListener.registerKey(new Key(KeyEvent.VK_D) {
            @Override
            public void action() {
                camera.rotateRight(this.secondsPressed());
            }
        });
        
        keyInputListener.registerKey(new Key(KeyEvent.VK_R) {
            @Override
            public void action() {
                camera.setMode(simgl.viewpoint.Camera.Mode.FOCUS_MODE);
                camera.setFocus(new simgl.representations.Vector3f(0, 0, 0));
            }
        });
        
        keyInputListener.registerKey(new Key(KeyEvent.VK_F) {
            @Override
            public void action() {
                camera.setMode(simgl.viewpoint.Camera.Mode.FLY_MODE);
            }
        });
        
        keyInputListener.registerKey(new Key(KeyEvent.VK_C) {
            @Override
            public void action() {
                camera.setMode(simgl.viewpoint.Camera.Mode.FOLLOW_MODE);
            }
        });
        
        keyInputListener.registerKey(new Key(KeyEvent.VK_UP) {
            @Override
            public void action() {
                camera.moveForward(this.secondsPressed());
            }
        });
        
        keyInputListener.registerKey(new Key(KeyEvent.VK_DOWN) {
            @Override
            public void action() {
                camera.moveForward(-this.secondsPressed());
            }
        });
        
        keyInputListener.registerKey(new Key(KeyEvent.VK_RIGHT) {
            @Override
            public void action() {
                camera.moveRight(this.secondsPressed());
            }
        });
        
        keyInputListener.registerKey(new Key(KeyEvent.VK_LEFT) {
            @Override
            public void action() {
                camera.moveRight(-this.secondsPressed());
            }
        });
        
        keyInputListener.registerKey(new Key(KeyEvent.VK_PAGE_UP) {
            @Override
            public void action() {
                camera.moveUp(this.secondsPressed());
            }
        });
        
        keyInputListener.registerKey(new Key(KeyEvent.VK_PAGE_DOWN) {
            @Override
            public void action() {
                camera.moveUp(-this.secondsPressed());
            }
        });
        
        keyInputListener.registerKey(new Key(KeyEvent.VK_ESCAPE) {
            @Override
            public void action() {
                camera.setMode(simgl.viewpoint.Camera.Mode.FOCUS_MODE);
                camera.setFocus(new simgl.representations.Vector3f());
            }
        });

        // Test Key
        keyInputListener.registerKey(new Key(KeyEvent.VK_X));
        
        canvas.addKeyListener(keyInputListener);

        /**
         * register mouse
         */
        MouseInputListener mouseInputListener = new MouseInputListener();
        
        final Cursor handCursor = new Cursor(Cursor.MOVE_CURSOR);
        final Cursor stdCursor = new Cursor(Cursor.DEFAULT_CURSOR);
        
        final Key modeKey = new Key(KeyEvent.VK_SHIFT);
        keyInputListener.registerKey(modeKey);
        
        mouseInputListener.registerMouse(new Mouse() {
            @Override
            public void action() {
                if (this.mousePressed) {
                    canvas.setCursor(handCursor);
                    
                    boolean modeKeyPressed = modeKey.isPressed();
                    
                    if (modeKeyPressed) {
                        camera.moveUp(this.yMoved * mouseSpeed);
                    } else {
                        camera.rotateUp(this.yMoved * mouseSpeed);
                    }
                    
                    int direction = camera.getMode() == simgl.viewpoint.Camera.Mode.FLY_MODE ? -1 : 1;
                    
                    if (modeKeyPressed) {
                        camera.moveRight(this.xMoved * mouseSpeed * direction);
                    } else {
                        camera.rotateRight(this.xMoved * mouseSpeed * direction);
                    }
                    
                } else {
                    canvas.setCursor(stdCursor);
                }
            }
        });
        
        canvas.addMouseListener(mouseInputListener);

        /**
         * register mouse wheel
         */
        MouseWheelInputListener mouseWheelInputListener = new MouseWheelInputListener();
        
        mouseWheelInputListener.registerWheel(new MouseWheel() {
            @Override
            public void action() {
                camera.moveForward(wheelSpeed * this.mouseWheelRotation);
            }
        });
        
        canvas.addMouseWheelListener(mouseWheelInputListener);
        
    }
}
