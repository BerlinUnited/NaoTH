/*
 * 
 */

/*
 * ColorChooserPanel.java
 *
 * Created on 24.02.2009, 21:42:34
 */

package de.naoth.rc.dialogs.panels;

import de.naoth.rc.Helper;
import de.naoth.rc.dialogs.Tools.Colors;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.JToggleButton;

/**
 *
 * @author Heinrich Mellmann
 */
public class ColoredObjectChooserPanel extends javax.swing.JPanel {

    /** Creates new form ColorChooserPanel */
    public ColoredObjectChooserPanel() {
      initComponents();
      
      try{
        for(Colors.ColorClass c: Colors.ColorClass.values())
        {
          if
          (
            c == Colors.ColorClass.green || 
            c == Colors.ColorClass.white || 
            c == Colors.ColorClass.none || 
            c == Colors.ColorClass.orange || 
            c == Colors.ColorClass.yellow ||
            c == Colors.ColorClass.skyblue || 
            c == Colors.ColorClass.red || 
            c == Colors.ColorClass.blue
          )
          {
            ColorButton button = null;
            switch(c)
            {
              case green:
                button = new ColorButton(c, "Field", 46);
                break;
                
              case white:
                button = new ColorButton(c, "Lines", 49);
                break;
                
              case orange:
                button = new ColorButton(c, "Ball", 41);
                break;
                
              case yellow:
                button = new ColorButton(c, "Left Goal Post", 95);
                break;
                
              case skyblue:
                button = new ColorButton(c, "Right Goal Post", 104);
                break;
                
              case red:
                button = new ColorButton(c, "Red Team Player", 110);
                break;
                
              case blue:
                button = new ColorButton(c, "Blue Team Player", 113);
                break;
                
              default:
                button = new ColorButton(Colors.ColorClass.none, "Off", 41);
                button.setSelected(true);
                break;                
                 
            }
            if(button != null)
            {
              this.colorClassButtonGroup.add(button);
              this.colorToolBar.add(button);
            }
          }
        }//end for
      }catch(Exception e)
      {
        Helper.handleException(e);
      }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        colorClassButtonGroup = new javax.swing.ButtonGroup();
        colorToolBar = new javax.swing.JToolBar();

        setLayout(new java.awt.BorderLayout());

        colorToolBar.setBorder(null);
        colorToolBar.setFloatable(false);
        colorToolBar.setRollover(true);
        add(colorToolBar, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents




  class ColorButton extends JToggleButton
  {
    private Color buttonBackgroundOn = new Color(0.7f,0.7f,0.9f);
    private Color buttonBackgroundOff = new Color(0.9f,0.9f,1.0f,0.0f);
    private Color borderColor = Color.darkGray;
    private int index;

    public ColorButton(Colors.ColorClass colorClass, String colorLabel, int width)
    {
      try 
      {
        Color color = Colors.GetColor(colorClass);
        this.index = colorClass.ordinal();
        
        setToolTipText(colorLabel);
        setActionCommand(colorClass.name());
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 0));
        setFocusPainted(false);
        setPreferredSize(new java.awt.Dimension(width, 27));

        setIcon(new ColorIcon(color, buttonBackgroundOff, buttonBackgroundOff, colorLabel, width));
        setRolloverIcon(new ColorIcon(color, buttonBackgroundOff, borderColor, colorLabel, width));
        setSelectedIcon(new ColorIcon(color, buttonBackgroundOn, borderColor, colorLabel, width));
      } 
      catch (Exception ex) 
      {
        Logger.getLogger(ColoredObjectChooserPanel.class.getName()).log(Level.SEVERE, null, ex);
      }
    }//end ColorButton
    
    public int getColorIndex()
    {
      return this.index;
    }//end getSelectedColor
    
  }//end ColorButton

  public Colors.ColorClass getSelectedColor()
  {
    try
    {
      if(this.colorClassButtonGroup.getSelection() != null)
      {
        return Colors.ColorClass.valueOf(this.colorClassButtonGroup.getSelection().getActionCommand());
      }
      return null;
    }
    catch(IllegalArgumentException e)
    {
      return null;
    }
  }//end getSelectedColor
  
  public Integer getSelectedColorIndex()
  {
    try
    {
      Colors.ColorClass colorClass = Colors.ColorClass.valueOf(this.colorClassButtonGroup.getSelection().getActionCommand());
      
      return colorClass.ordinal();
    }
    catch(IllegalArgumentException e)
    {
      return null;
    }
  }//end getSelectedColor

  class ColorIcon implements Icon
  {
    private Color color;
    private Color backGroundColor;
    private Color borderColor;
    private String label;

    private int outerWidth = 36;
    private int innerWidth = 30;

    private int outerHeight = 26;
    private int innerHeight = 20;

    public ColorIcon(Color color, Color backGroundColor, Color borderColor, String colorLabel, int width)
    {
      this.color = color;
      this.backGroundColor = backGroundColor;
      this.borderColor = borderColor;
      label = colorLabel;
      if(width > 12)
      {
        outerWidth = width - 2;
        innerWidth = outerWidth - 6;        
      }
    }

    @Override
    public void paintIcon(Component c, Graphics g, int x, int y) {
        // draw outer frame
        Color old = g.getColor();
        g.setColor(backGroundColor);
        g.fillRect(x, y, outerWidth, outerHeight);
        g.setColor(borderColor);
        g.drawRect(x, y, outerWidth, outerHeight);
        
        // draw inner frame
        int widthOffset = (outerWidth - innerWidth) / 2;
        int heightOffset = (outerHeight - innerHeight) / 2;
        g.setColor(color);
        g.fillRect(x + widthOffset, y + heightOffset, innerWidth, innerHeight);
        g.setColor(Color.darkGray);
        g.drawRect(x + widthOffset, y + heightOffset, innerWidth, innerHeight);

        if(color.getBlue() < 130 && color.getGreen() < 130 && color.getRed() < 130)
        {
          g.setColor(Color.white);
        }
        else
        {
          g.setColor(Color.black);
        }
        char[] labelChars = label.toCharArray();
        g.drawChars(labelChars, 0, labelChars.length , x + widthOffset + 2, y + outerHeight / 2 + 5);
        
        // reset the color
        g.setColor(old);
    }//end paintIcon

    @Override
    public int getIconWidth() {
        return outerWidth + 1;
    }

    @Override
    public int getIconHeight() {
        return outerHeight + 1;
    }
  }//end class ColorIcon


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup colorClassButtonGroup;
    private javax.swing.JToolBar colorToolBar;
    // End of variables declaration//GEN-END:variables

}
