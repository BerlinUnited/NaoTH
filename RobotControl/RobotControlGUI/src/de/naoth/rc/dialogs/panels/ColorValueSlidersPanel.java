/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.naoth.rc.dialogs.panels;//ColorValueSlidersPanel

import java.awt.GridLayout;
import java.beans.PropertyChangeListener;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * @author claas
 */
public class ColorValueSlidersPanel extends javax.swing.JPanel 
{
  private HashMap<String, Integer> valueControls;
  /**
   * Creates new form ColorValueSlidersPanel
   */
  public ColorValueSlidersPanel() 
  {
    initComponents();
    
    GridLayout layout = new GridLayout(10, 1);
    this.setLayout(layout); 
    valueControls = new HashMap<String, Integer>();
  }

  public void addControl(String objectName, String name, int value, PropertyChangeListener listener)
  {    
    if(!valueControls.containsKey(name))
    {
      ColorValueControl control = new ColorValueControl(objectName, name, listener);
      this.add(control, -1);
      int idx = this.getComponentCount() - 1;
      valueControls.put(name, idx);
      this.validate();
    }    
    setControlValue(name, value);
  }
  
  public void setControlValue(String name, int value)
  {
    if(valueControls.containsKey(name))
    {
      ColorValueControl control = (ColorValueControl) this.getComponent(valueControls.get(name).intValue());
      control.setValue(value);
    }
  }
          
  public String[][] getControlValues()
  {
    String[][] valueString = new String[valueControls.size()][2];
    int idx = 0;
    for(Map.Entry<String, Integer> entry : valueControls.entrySet())
    {
      ColorValueControl control = (ColorValueControl) this.getComponent(entry.getValue());
      valueString[idx][0] = entry.getKey();
      valueString[idx][1] = String.valueOf(control.getValue());
      idx++;
    }
    return valueString;
  }
      
  @Override
  public void setEnabled(boolean value) 
  {
    for(Map.Entry<String, Integer> entry : valueControls.entrySet())
    {
      ColorValueControl control = (ColorValueControl) this.getComponent(entry.getValue());
      control.setEnabled(value);
    }
  }
  
  public void removeControls()
  {
    for(Map.Entry<String, Integer> entry : valueControls.entrySet())
    {
      ColorValueControl control = (ColorValueControl) this.getComponent(entry.getValue());
      PropertyChangeListener[] propListeners = control.getPropertyChangeListeners();
      for(PropertyChangeListener propListener: propListeners)
      {
        control.removePropertyChangeListener(propListener);
      }
    }
    this.removeAll();
    valueControls.clear();
  }
  
  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
