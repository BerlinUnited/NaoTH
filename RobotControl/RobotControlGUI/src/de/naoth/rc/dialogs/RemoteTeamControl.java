/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.naoth.rc.dialogs;

import de.naoth.rc.RobotControl;
import de.naoth.rc.components.RemoteRobotPanel;
import de.naoth.rc.core.dialog.AbstractDialog;
import de.naoth.rc.core.dialog.DialogPlugin;
import de.naoth.rc.core.manager.ObjectListener;
import de.naoth.rc.core.manager.SwingCommandExecutor;
import de.naoth.rc.dataformats.SPLMessage;
import de.naoth.rc.manager.GenericManagerFactory;
import de.naoth.rc.messages.Representations;
import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.net.SocketException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.channels.AsynchronousCloseException;
import java.nio.channels.DatagramChannel;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import net.xeoh.plugins.base.annotations.PluginImplementation;
import net.xeoh.plugins.base.annotations.injections.InjectPlugin;
import net.java.games.input.Component;
import net.java.games.input.Controller;
import net.java.games.input.ControllerEnvironment;
import net.java.games.input.Event;
import net.java.games.input.EventQueue;

/**
 *
 * @author Verena
 */
public class RemoteTeamControl extends AbstractDialog {

    @PluginImplementation
    public static class Plugin extends DialogPlugin<RemoteTeamControl> {

        @InjectPlugin
        public static RobotControl parent;
        @InjectPlugin
        public static SwingCommandExecutor commandExecutor;
        @InjectPlugin
        public static GenericManagerFactory genericManagerFactory;
    }//end Plugin

    private final Map<String, TeamCommMessage> messageMap = Collections.synchronizedMap(new TreeMap<String, TeamCommMessage>());
    private final HashMap<String, RemoteRobotPanel> robotsMap = new HashMap<>();
    private TeamCommListener teamCommListener;
    private Timer timerCheckMessages;
    
    public RemoteTeamControl() 
    {
        initComponents();
        
        try {
            teamCommListener = new TeamCommListener();
            teamCommListener.connect(10004);
        } catch (IOException | InterruptedException ex) {
            ex.printStackTrace(System.err);
        }
        
        
        this.timerCheckMessages = new Timer();
        this.timerCheckMessages.scheduleAtFixedRate(new TeamCommListenTask(), 100, 100);
        
        Controller[] controllers = ControllerEnvironment.getDefaultEnvironment().getControllers();
        for(Controller c: controllers) 
        {
            registerControl(c);
        }
    }
    
    private void registerControl(Controller controller) {
        try {
            if(controller.getType() == Controller.Type.KEYBOARD) {
                log("INFO: register keyboard");
                RobotController rc = new KeyBoardControl(controller);
                this.timerCheckMessages.scheduleAtFixedRate(rc, 100, 10);
            } else if(controller.getType() == Controller.Type.GAMEPAD) {
                log("INFO: register GAMEPAD " + controller.getName());
                RobotController rc = new GamePadControl(controller);
                this.timerCheckMessages.scheduleAtFixedRate(rc, 100, 10);
            }
        } catch(IOException ex) {
            ex.printStackTrace(System.err);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        robotPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logOutput = new javax.swing.JEditorPane();

        robotPanel.setLayout(new javax.swing.BoxLayout(robotPanel, javax.swing.BoxLayout.LINE_AXIS));

        jScrollPane1.setViewportView(logOutput);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(robotPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(robotPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    class RemoteCommandResultHandler implements ObjectListener<byte[]> {

        @Override
        public void newObjectReceived(byte[] object) {
            if (!new String(object).isEmpty()) {
                System.out.println(new String(object));
            }
        }

        @Override
        public void errorOccured(String cause) {
            System.out.println(cause);
        }
    }

    class RemoteCommand {
        public Representations.RemoteControlCommand.ActionType action = Representations.RemoteControlCommand.ActionType.STAND;
        public int x = 0;
        public int y = 0;
        public double alpha = 0;
    }
    
    
    private void log(final String str) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    Document doc = logOutput.getDocument();
                    doc.insertString(doc.getLength(), str + "\n", null);
                } catch(BadLocationException exc) {
                    exc.printStackTrace(System.err);
                }
            }
        });
    }
    
    private class CommandSenderTask extends TimerTask
    {
        private final DatagramChannel channel;
        private final InetSocketAddress targetAddress;
        private RemoteCommand command = new RemoteCommand();
        private boolean updated = false;
        
        public CommandSenderTask(InetSocketAddress targetAddress)  throws IOException {
            this.channel = DatagramChannel.open();
            this.targetAddress = targetAddress;
        }
        
        @Override
        public void run() 
        {
            if(targetAddress == null || !this.updated) {
                return;
            }
            
            Representations.RemoteControlCommand.Builder cmd = Representations.RemoteControlCommand.newBuilder();
            synchronized(this) {
                cmd.setAction(command.action);
                cmd.getTargetBuilder()
                    .setRotation(command.alpha)
                    .getTranslationBuilder().setX(command.x).setY(command.y);
                this.updated = false;
            }
            
            try {
                ByteBuffer buffer = ByteBuffer.wrap(cmd.build().toByteArray());
                this.channel.send(buffer, targetAddress);
                
            } catch (IOException ex) {
                ex.printStackTrace(System.err);
            }
        }
        
        public void send(RemoteCommand command) 
        {
            synchronized(this) {
                this.command = command;
                this.updated = true;
            }
        }
    }
    
    
    private abstract class RobotController extends TimerTask
    {
        private final Controller control;
        private CommandSenderTask commandSender = null;
        
        protected HashMap<String, RemoteCommand> commands = new HashMap<>();
        
        public RobotController(Controller control) {
            this.control = control;
        }
        
        public boolean isBound() {
            return commandSender != null;
        }
        
        public CommandSenderTask bind(InetSocketAddress address) throws IOException{
            commandSender = new CommandSenderTask(address);
            return commandSender;
        }
        
        protected void log(String str) {
            RemoteTeamControl.this.log(control.getName() + ": " + str);
        }
        
        @Override
        public void run() 
        {
            if(control.poll())
            {
                EventQueue queue = control.getEventQueue();

                Event event = new Event();
                while(queue.getNextEvent(event)) 
                {
                    update(event);
                }

                if(commandSender != null)
                {
                    RemoteCommand remoteCommand = new RemoteCommand();
                    remoteCommand.action = Representations.RemoteControlCommand.ActionType.STAND;
                    for(RemoteCommand c : this.commands.values()) {
                        if(c != null) {
                            remoteCommand.action = c.action;
                            remoteCommand.x += c.x;
                            remoteCommand.y += c.y;
                            remoteCommand.alpha += c.alpha;
                        }
                    }
                    commandSender.send(remoteCommand);
                }
            } else {
                this.cancel();
            }
        }
        
        protected abstract void update(Event event);
    }
    
    private class GamePadControl extends RobotController 
    {
        public GamePadControl(Controller control) throws IOException {
            super(control);
        }
        
        @Override
        protected void update(Event event)
        {
            System.out.println(event.getComponent().getName() + " - " + event.getValue());
            Component.Identifier id = event.getComponent().getIdentifier();
            
            if(!isBound() && event.getComponent().getIdentifier() == Component.Identifier.Button._0) {
                log("bind to " + messageMap.keySet().iterator().next());
                try {
                    CommandSenderTask sender = bind(new InetSocketAddress(InetAddress.getByName(messageMap.keySet().iterator().next()), 10401));
                    timerCheckMessages.scheduleAtFixedRate(sender, 100, 100);
                } catch(IOException ex) {
                    ex.printStackTrace(System.err);
                }
                return;
            }
            
            
            if(isBound())
            {
                if(id == Component.Identifier.Axis.POV) {
                    if(event.getValue() == 0.25) {
                        RemoteCommand c = new RemoteCommand();
                        c.action = Representations.RemoteControlCommand.ActionType.WALK;
                        c.x = 50;
                        commands.put(id.getName(), c);
                    } else if(event.getValue() == 0.75) {
                        RemoteCommand c = new RemoteCommand();
                        c.action = Representations.RemoteControlCommand.ActionType.WALK;
                        c.x = -50;
                        commands.put(id.getName(), c);
                    } else if(event.getValue() == 1.0) {
                        RemoteCommand c = new RemoteCommand();
                        c.action = Representations.RemoteControlCommand.ActionType.WALK;
                        c.y = 50;
                        commands.put(id.getName(), c);
                    } else if(event.getValue() == 0.5) {
                        RemoteCommand c = new RemoteCommand();
                        c.action = Representations.RemoteControlCommand.ActionType.WALK;
                        c.y = -50;
                        commands.put(id.getName(), c);
                    } else {
                        commands.remove(id.getName());
                    }
                } 
                else if(id == Component.Identifier.Axis.RX)
                {
                    if(Math.abs(event.getValue()) > 0.1) {
                        RemoteCommand c = new RemoteCommand();
                        c.action = Representations.RemoteControlCommand.ActionType.WALK;
                        c.alpha = -15.0*event.getValue();
                        log("  " + c.alpha);
                        commands.put(id.getName(), c);
                    } else {
                        commands.remove(id.getName());
                    }
                }
            }
        } 
    }// end class GamePadControl

    private class KeyBoardControl extends RobotController 
    {
        public KeyBoardControl(Controller control) throws IOException {
            super(control);
        }
        
        @Override
        protected void update(Event event)
        {
            System.out.println(event.getComponent().getName() + " - " + event.getValue());
            Component.Identifier id = event.getComponent().getIdentifier();
            if(id == Component.Identifier.Key.W) {
                if(event.getValue() > 0) {
                    RemoteCommand c = new RemoteCommand();
                    c.action = Representations.RemoteControlCommand.ActionType.WALK;
                    c.x = 50;
                    commands.put(id.getName(), c);
                } else {
                    commands.remove(id.getName());
                }
            } else if(id == Component.Identifier.Key.S) {
                if(event.getValue() > 0) {
                    RemoteCommand c = new RemoteCommand();
                    c.action = Representations.RemoteControlCommand.ActionType.WALK;
                    c.x = -50;
                    commands.put(id.getName(), c);
                } else {
                    commands.remove(id.getName());
                }
            } else if(id == Component.Identifier.Key.A) {
                if(event.getValue() > 0) {
                    RemoteCommand c = new RemoteCommand();
                    c.action = Representations.RemoteControlCommand.ActionType.WALK;
                    c.y = 50;
                    commands.put(id.getName(), c);
                } else {
                    commands.remove(id.getName());
                }
            } else if(id == Component.Identifier.Key.D) {
                if(event.getValue() > 0) {
                    RemoteCommand c = new RemoteCommand();
                    c.action = Representations.RemoteControlCommand.ActionType.WALK;
                    c.y = -50;
                    commands.put(id.getName(), c);
                } else {
                    commands.remove(id.getName());
                }
            }
        } 
    }// end class KeyBoardControl
    
    
    public class Sender {
        private final DatagramChannel channel;

        public Sender() throws IOException {
            this.channel = DatagramChannel.open();
            this.channel.configureBlocking(true);
            //this.channel.bind(new InetSocketAddress(InetAddress.getByName("0.0.0.0"), port));
        }
        
        void send(Representations.RemoteControlCommand rcc, InetSocketAddress address) throws IOException {
            ByteBuffer buffer = ByteBuffer.wrap(rcc.toByteArray());
            this.channel.send(buffer, new InetSocketAddress(InetAddress.getByName("10.0.4.85"), 10401));
        }
    }

    private class TeamCommListenTask extends TimerTask {

        @Override
        public void run() {
            synchronized (messageMap) {
                if (messageMap.isEmpty()) {
                    return;
                }

                for (Map.Entry<String, TeamCommMessage> msgEntry : messageMap.entrySet()) 
                {
                    final String address = msgEntry.getKey();
                    final TeamCommMessage msg = msgEntry.getValue();

                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            RemoteRobotPanel robotStatus = robotsMap.get(address);
                            if (robotStatus == null) {
                                robotStatus = new RemoteRobotPanel();
                                robotsMap.put(address, robotStatus);
                                robotPanel.add(robotStatus);
                                robotPanel.repaint();
                            }
                            // update
                            robotStatus.setStatus(msg.timestamp, msg.message);
                        }
                    });
                }
            } // end synchronized
        } // end run
    }

    public class TeamCommListener implements Runnable {
        private DatagramChannel channel;
        private Thread trigger;

        private final ByteBuffer readBuffer;

        public TeamCommListener() {
            this.readBuffer = ByteBuffer.allocateDirect(SPLMessage.SPL_STANDARD_MESSAGE_SIZE);
            this.readBuffer.order(ByteOrder.LITTLE_ENDIAN);
        }

        boolean isConnected() {
            return this.channel != null && this.trigger != null;
        }

        public void connect(int port) throws IOException, InterruptedException {
            disconnect();

            this.channel = DatagramChannel.open();
            this.channel.configureBlocking(true);
            this.channel.bind(new InetSocketAddress(InetAddress.getByName("0.0.0.0"), port));

            this.trigger = new Thread(this);
            this.trigger.start();
        }

        public void disconnect() throws IOException, InterruptedException {
            if (this.channel != null) {
                this.channel.close();
                this.channel = null;
            }
            if (this.trigger != null) {
                this.trigger.join();
                this.trigger = null;
            }
        }

        @Override
        public void run() {
            try {
                while (true) {
                    this.readBuffer.clear();
                    SocketAddress address = this.channel.receive(this.readBuffer);
                    this.readBuffer.flip();

                    try {
                        long timestamp = System.currentTimeMillis();
                        SPLMessage spl_msg = new SPLMessage(this.readBuffer);
                        TeamCommMessage tc_msg = new TeamCommMessage(timestamp, spl_msg);
                        
                        if (address instanceof InetSocketAddress) {
                            messageMap.put(((InetSocketAddress) address).getHostString(), tc_msg);
                        }

                    } catch (Exception ex) {
                        Logger.getLogger(TeamCommViewer.class.getName()).log(Level.INFO, null, ex);
                    }

                }
            } catch (AsynchronousCloseException ex) {
                /* socket was closed, that's fine */
            } catch (SocketException ex) {
                Logger.getLogger(TeamCommViewer.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(TeamCommViewer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//end class TeamCommListener

    public class TeamCommMessage {

        public TeamCommMessage(long timestamp, SPLMessage message) {
            this.timestamp = timestamp;
            this.message = message;
        }

        public final long timestamp;
        public final SPLMessage message;
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JEditorPane logOutput;
    private javax.swing.JPanel robotPanel;
    // End of variables declaration//GEN-END:variables
}
