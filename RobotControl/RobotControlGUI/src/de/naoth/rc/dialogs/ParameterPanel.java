/*
 * ParameterPanel.java
 *
 * Created on 17. Juli 2008, 21:21
 */
package de.naoth.rc.dialogs;

import de.naoth.rc.RobotControl;
import de.naoth.rc.core.dialog.AbstractDialog;
import de.naoth.rc.core.dialog.DialogPlugin;
import de.naoth.rc.core.manager.ObjectListener;
import de.naoth.rc.core.manager.SwingCommandExecutor;
import de.naoth.rc.server.Command;
import de.naoth.rc.server.CommandSender;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import net.xeoh.plugins.base.annotations.PluginImplementation;
import net.xeoh.plugins.base.annotations.injections.InjectPlugin;

/**
 *
 * @author  Heinrich Mellmann
 */
public class ParameterPanel extends AbstractDialog
{

  @PluginImplementation
  public static class Plugin extends DialogPlugin<ParameterPanel>
  {
    @InjectPlugin
    public static RobotControl parent;
    @InjectPlugin
    public static SwingCommandExecutor commandExecutor;
  }

  private Command commandToExecute;
  //private String defaultConfigureFilePath;

  public ParameterPanel()
  {
    initComponents();
	
    jTextArea.addKeyListener(new KeyAdapter()
    {

      @Override
      public void keyPressed(KeyEvent e)
      {
        int key = e.getKeyCode();
        if (key == KeyEvent.VK_ENTER)
        {
          sendParameters();
          
          int k = jTextArea.getCaretPosition();
          if(k > 0)
            jTextArea.setCaretPosition(k-1);
        }
      }
    });
  }//end constructor

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jToggleButtonList = new javax.swing.JToggleButton();
        cbParameterId = new javax.swing.JComboBox();
        jToggleButtonRefresh = new javax.swing.JToggleButton();
        jButtonSend = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea = new javax.swing.JTextArea();

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jToggleButtonList.setText("list");
        jToggleButtonList.setFocusable(false);
        jToggleButtonList.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonList.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonListActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButtonList);

        cbParameterId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbParameterIdActionPerformed(evt);
            }
        });
        jToolBar1.add(cbParameterId);

        jToggleButtonRefresh.setText("Get");
        jToggleButtonRefresh.setFocusable(false);
        jToggleButtonRefresh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonRefresh.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonRefreshActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButtonRefresh);

        jButtonSend.setText("Set");
        jButtonSend.setFocusable(false);
        jButtonSend.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSend.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSendActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonSend);

        jTextArea.setColumns(20);
        jTextArea.setRows(5);
        jScrollPane1.setViewportView(jTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void jToggleButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonRefreshActionPerformed
  if (jToggleButtonRefresh.isSelected())
  {
    getParameterList();
  }
}//GEN-LAST:event_jToggleButtonRefreshActionPerformed

private void jButtonSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSendActionPerformed
  sendParameters();
}//GEN-LAST:event_jButtonSendActionPerformed


  class ParameterListHandlerGet implements ObjectListener<byte[]>
  {
    @Override
    public void newObjectReceived(byte[] object)
    {
        // remember the carret
        int k = jTextArea.getCaretPosition();
        jTextArea.setText(new String(object));
        try{
            jTextArea.setCaretPosition(k);
        }catch(IllegalArgumentException ex)
        {
            // do nothing
            // could not set the caret at the right place, e.g.,
            // if the text is shorter now
        }
        jToggleButtonRefresh.setSelected(false);
    }
    
    @Override
    public void errorOccured(String cause)
    {
      dispose();
    }
  }
  
  class ParameterListHandlerSet implements ObjectListener<byte[]>
  {
    @Override
    public void newObjectReceived(byte[] object)
    {
        
    }
    
    @Override
    public void errorOccured(String cause)
    {
      dispose();
    }
  }
  
  class ParameterListHandlerList implements ObjectListener<byte[]>
  {
    @Override
    public void newObjectReceived(byte[] object)
    {
        String strResult = new String(object);
        String selectedList = null;
        if(cbParameterId.getSelectedItem() != null) {
            selectedList = cbParameterId.getSelectedItem().toString();
        }
        
        cbParameterId.removeAllItems();
        
        String[] parameterLists = strResult.split("\n");
        for (String parameterList : parameterLists)
        {
          cbParameterId.addItem(parameterList);
        }
        
        // try to set back the selection
        if(selectedList != null) {
            cbParameterId.setSelectedItem(selectedList);
        }
        
        jToggleButtonList.setSelected(false);
    }
    
    @Override
    public void errorOccured(String cause)
    {
      dispose();
    }
  }


private void sendParameters()
{
  if (Plugin.parent.checkConnected())
  {
    Command cmd = new Command("ParameterList:set").addArg("<name>", cbParameterId.getSelectedItem().toString());

    String text = this.jTextArea.getText();

    text = text.replaceAll("( |\t)+", "");
    String[] lines = text.split("(\n)+");
    for (String l : lines)
    {
      String[] splitted = l.split("=");
      if (splitted.length == 2)
      {
        String key = splitted[0].trim();
        String value = splitted[1].trim();
        // remove the last ;
        if (value.charAt(value.length() - 1) == ';')
        {
          value = value.substring(0, value.length() - 1);
        }

        cmd.addArg(key, value);
      }
    }//end for
    
    Plugin.commandExecutor.executeCommand(new ParameterListHandlerSet(), cmd);
    
    // update everything
    //listParameters();
    
    // this is better, but less robust
    getParameterList();
  }
  else
  {
    jToggleButtonRefresh.setSelected(false);
  }
}

private void cbParameterIdActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cbParameterIdActionPerformed
{//GEN-HEADEREND:event_cbParameterIdActionPerformed
    getParameterList();
}//GEN-LAST:event_cbParameterIdActionPerformed

private void jToggleButtonListActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jToggleButtonListActionPerformed
{//GEN-HEADEREND:event_jToggleButtonListActionPerformed
    listParameters();
}//GEN-LAST:event_jToggleButtonListActionPerformed

private void listParameters()
{
    if (Plugin.parent.checkConnected())
    {
      Plugin.commandExecutor.executeCommand(new ParameterListHandlerList(), new Command("ParameterList:list"));
    }
    else
    {
      jToggleButtonList.setSelected(false);
    }
}//end listParameters

  private void getParameterList()
  {
    if (Plugin.parent.checkConnected())
    {
      if (cbParameterId.getSelectedItem() != null)
      {
        Plugin.commandExecutor.executeCommand(new ParameterListHandlerGet(), 
                new Command("ParameterList:get").addArg("<name>", cbParameterId.getSelectedItem().toString()));
      }
    }
    else
    {
      jToggleButtonRefresh.setSelected(false);
    }
  }//end refresh

  @Override
  public void dispose()
  {
    System.out.println("Dispose is not implemented for: " + this.getClass().getName());
  }
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbParameterId;
    private javax.swing.JButton jButtonSend;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea;
    private javax.swing.JToggleButton jToggleButtonList;
    private javax.swing.JToggleButton jToggleButtonRefresh;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
}
