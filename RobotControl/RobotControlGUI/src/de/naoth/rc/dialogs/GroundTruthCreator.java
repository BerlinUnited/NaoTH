package de.naoth.rc.dialogs;

import com.google.protobuf.InvalidProtocolBufferException;
import de.naoth.rc.AbstractDialog;
import de.naoth.rc.DialogPlugin;
import de.naoth.rc.LogSimulator;
import de.naoth.rc.RobotControl;
import de.naoth.rc.manager.GenericManagerFactory;
import de.naoth.rc.messages.Representations;
import java.awt.Color;
import java.awt.DefaultKeyboardFocusManager;
import java.awt.KeyEventPostProcessor;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.xeoh.plugins.base.annotations.PluginImplementation;
import net.xeoh.plugins.base.annotations.injections.InjectPlugin;

/**
 *
 * @author  Heinrich
 * @author  Peter
 */
public class GroundTruthCreator extends AbstractDialog
{
    
    @PluginImplementation
    public static class Plugin extends DialogPlugin<GroundTruthCreator> {
    @InjectPlugin
    public static RobotControl parent;  
    @InjectPlugin
    public static GenericManagerFactory genericManagerFactory;
  /*  @InjectPlugin
    public static Representation frameworkRepresentation;
    */
  }//end Plugin
    
  private Map<Integer,Boolean> topBall,
                               bottomBall;
  private Map<Integer,Integer>  topGoal,
                               bottomGoal;
  
  private boolean changeGroundTruth;
  
 
  
 private final LogPerceptListener logPerceptListener = new LogPerceptListener();

    public GroundTruthCreator()
    {
        this.topBall = new HashMap<>();
        this.bottomBall = new HashMap<>();
        this.topGoal = new HashMap<>();
        this.bottomGoal = new HashMap<>();  
        changeGroundTruth = false;
        initComponents();
        DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().
            addKeyEventPostProcessor(new GroundTruthKeyController());

        LogSimulator.LogSimulatorManager.getInstance().addListener(logPerceptListener);
    }
  
  

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jToggleButton1 = new javax.swing.JToggleButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jToggleButton2 = new javax.swing.JToggleButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jToggleButton3 = new javax.swing.JToggleButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jToggleButton1.setBackground(new java.awt.Color(255, 0, 0));
        jToggleButton1.setSelected(true);
        jToggleButton1.setText("ball");
        jToggleButton1.setBorderPainted(false);
        jToggleButton1.setEnabled(false);
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("no goalpost");
        jRadioButton1.setEnabled(false);
        jRadioButton1.setOpaque(false);
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("1 goalpost");
        jRadioButton2.setEnabled(false);
        jRadioButton2.setOpaque(false);
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setText("2 goalpost");
        jRadioButton3.setEnabled(false);
        jRadioButton3.setOpaque(false);
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        jLabel1.setText("Top Camera:");

        jLabel2.setText("Bottom Camera:");

        jToggleButton2.setBackground(new java.awt.Color(255, 0, 0));
        jToggleButton2.setSelected(true);
        jToggleButton2.setText("ball");
        jToggleButton2.setBorderPainted(false);
        jToggleButton2.setEnabled(false);
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });

        buttonGroup2.add(jRadioButton4);
        jRadioButton4.setText("no goalpost");
        jRadioButton4.setEnabled(false);
        jRadioButton4.setOpaque(false);
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });

        buttonGroup2.add(jRadioButton5);
        jRadioButton5.setText("1 goalpost");
        jRadioButton5.setEnabled(false);
        jRadioButton5.setOpaque(false);
        jRadioButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton5ActionPerformed(evt);
            }
        });

        buttonGroup2.add(jRadioButton6);
        jRadioButton6.setText("2 goalpost");
        jRadioButton6.setEnabled(false);
        jRadioButton6.setOpaque(false);
        jRadioButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton6ActionPerformed(evt);
            }
        });

        jToggleButton3.setText("listen");
        jToggleButton3.setToolTipText("");
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("record");
        jCheckBox1.setEnabled(false);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jButton1.setText("save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("load");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToggleButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jToggleButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jRadioButton1)
                        .addComponent(jRadioButton2, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jRadioButton3, javax.swing.GroupLayout.Alignment.LEADING))
                    .addGap(2, 2, 2))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jToggleButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButton4, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton5, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton6, javax.swing.GroupLayout.Alignment.LEADING)))
            .addComponent(jCheckBox1)
            .addComponent(jButton1)
            .addComponent(jButton2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToggleButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap(25, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        ballTopToggle();
    }//GEN-LAST:event_jToggleButton1ActionPerformed
    private void ballTopToggle() {
        if (this.jToggleButton1.getBackground() == Color.red) {
            this.jToggleButton1.setBackground(Color.green);
        } else {
            this.jToggleButton1.setBackground(Color.red);
        }
        if (this.jCheckBox1.isSelected()) {      
            topBall.put(logPerceptListener.currentFrame, jToggleButton1.isSelected());
        } 
    }
    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
            topGoal.put(logPerceptListener.currentFrame, 1);
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
            topGoal.put(logPerceptListener.currentFrame, 0);
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
            topGoal.put(logPerceptListener.currentFrame, 2);
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
            ballBottomToggle();
    }//GEN-LAST:event_jToggleButton2ActionPerformed
    private void ballBottomToggle() {
        if (this.jToggleButton2.getBackground() == Color.red) {
            this.jToggleButton2.setBackground(Color.green);
        } else {
            this.jToggleButton2.setBackground(Color.red);
        }
        if (this.jCheckBox1.isSelected()) {
            bottomBall.put(logPerceptListener.currentFrame, jToggleButton2.isSelected());            
        }    
    }
    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
            bottomGoal.put(logPerceptListener.currentFrame, 0);
    }//GEN-LAST:event_jRadioButton4ActionPerformed

    private void jRadioButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton5ActionPerformed
            bottomGoal.put(logPerceptListener.currentFrame, 1);
    }//GEN-LAST:event_jRadioButton5ActionPerformed

    private void jRadioButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton6ActionPerformed
            bottomGoal.put(logPerceptListener.currentFrame, 2);
    }//GEN-LAST:event_jRadioButton6ActionPerformed

    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
       /*if (jToggleButton3.isSelected()) {
          
                jToggleButton3.setSelected(false);
                JOptionPane.showMessageDialog(null,"Not connected to Robot", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } else {
            dispose();
        }*/
        toggleButtons();
    }//GEN-LAST:event_jToggleButton3ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if (jCheckBox1.isSelected()) {
            this.topBall.clear();
            this.bottomBall.clear();
            this.topGoal.clear();
            this.bottomGoal.clear();    
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String fileName = LogfilePlayer.getFileName();        
        fileName = fileName.substring(0,fileName.lastIndexOf(".")+1) + "gts" ;
        File f = new File(fileName);
        if (f.exists()) {
            Object[] options = {"Yes, please",
                    "No!!!"};
            int n = JOptionPane.showOptionDialog(this,
                "GroundTruth already exists override it?",
                "Question",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[1]);           
            if (n!=0) return;
        }
        
        ObjectOutputStream o;
        try {
            o = new ObjectOutputStream(new FileOutputStream
                        (fileName,false));
            o.writeObject(topBall);
            o.writeObject(bottomBall);
            o.writeObject(topGoal);
            o.writeObject(bottomGoal);
            o.close();
        } catch (IOException ex) {
            Logger.getLogger(GroundTruthCreator.class.getName()).log(Level.SEVERE, null, ex);
        }
      		
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String fileName = LogfilePlayer.getFileName();        
        fileName = fileName.substring(0,fileName.lastIndexOf(".")+1) + "gts" ;
        File f = new File(fileName);
        if (!f.exists()) {
           JOptionPane.showMessageDialog(null, "No groundTruth for logfile", "Error", JOptionPane.ERROR_MESSAGE);
           return;
        }
        changeGroundTruth = true;
        ObjectInputStream o;
        try {
            o = new ObjectInputStream(new FileInputStream(fileName));
            topBall = (Map<Integer, Boolean>) o.readObject();
            bottomBall = (Map<Integer, Boolean>) o.readObject();
            topGoal = (Map<Integer, Integer>) o.readObject();
            bottomGoal = (Map<Integer, Integer>) o.readObject();

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "No Groundtruth for this logfile", "Error", JOptionPane.ERROR_MESSAGE);
            this.jToggleButton3.setSelected(false);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GroundTruthReader.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    // End of variables declaration//GEN-END:variables
class GroundTruthKeyController implements KeyEventPostProcessor 
    {
        @Override
        public boolean postProcessKeyEvent(KeyEvent e) {
            
            if(e.getID() != KeyEvent.KEY_PRESSED) {
                return false;
            }            
            switch(e.getKeyChar()) {
                case '9':
                    GroundTruthCreator.this.jToggleButton1.setSelected(
                                !GroundTruthCreator.this.jToggleButton1.isSelected());
                    ballTopToggle();
                    return true;
                case '8':
                    GroundTruthCreator.this.jToggleButton2.setSelected(
                                !GroundTruthCreator.this.jToggleButton2.isSelected());
                    ballBottomToggle();
                    return true;                
                case '6':
                    topGoal.put(logPerceptListener.currentFrame, 0);
                    GroundTruthCreator.this.jRadioButton1.setSelected(true);
                    return true;
                case '5':
                    topGoal.put(logPerceptListener.currentFrame, 1); 
                    GroundTruthCreator.this.jRadioButton2.setSelected(true);
                    return true;
                case '4':
                    topGoal.put(logPerceptListener.currentFrame, 2);
                    GroundTruthCreator.this.jRadioButton3.setSelected(true);
                    return true;
                case '3':                    
                    bottomGoal.put(logPerceptListener.currentFrame, 0);
                    GroundTruthCreator.this.jRadioButton4.setSelected(true);
                    return true;
                case '2':
                    bottomGoal.put(logPerceptListener.currentFrame, 1);
                    GroundTruthCreator.this.jRadioButton5.setSelected(true);
                    return true;
                case '1':
                    bottomGoal.put(logPerceptListener.currentFrame, 2);
                    GroundTruthCreator.this.jRadioButton6.setSelected(true);
                    return true;
            }
            
            return false;
        }
  }

class LogPerceptListener implements LogSimulator.LogSimulatorActionListener 
{    
   int currentFrame;
    @Override
   public void frameChanged(LogSimulator.BlackBoard b, int frameNumber) {       
       if (!GroundTruthCreator.this.jToggleButton3.isSelected() || !GroundTruthCreator.this.jCheckBox1.isSelected() || changeGroundTruth) return;
       try{         
            currentFrame = frameNumber;
            /**************BallPercept******************************************************/
            byte[] data = b.getRepresentation("BallPercept");
            Representations.BallPercept ballPercept = Representations.BallPercept.parseFrom(data);
            data = b.getRepresentation("BallPerceptTop");
            Representations.BallPercept ballPerceptTop = Representations.BallPercept.parseFrom(data);
            if (ballPercept.getBallWasSeen()) jToggleButton2.setBackground(Color.green);
            else jToggleButton2.setBackground(Color.red);
            if (GroundTruthCreator.this.jCheckBox1.isSelected()) {
                 GroundTruthCreator.this.bottomBall.put(frameNumber,
                         ballPercept.getBallWasSeen());
            }
            /**************BallPercept******************************************************/
            /**************BallPerceptTop***************************************************/
            
            if (ballPerceptTop.getBallWasSeen()) jToggleButton1.setBackground(Color.green);
            else jToggleButton1.setBackground(Color.red);
            if (GroundTruthCreator.this.jCheckBox1.isSelected()) {
                 GroundTruthCreator.this.topBall.put(frameNumber,
                         ballPerceptTop.getBallWasSeen());
            }
            /**************BallPerceptTop***************************************************/
            /**************GoalPercept***************************************************/           
            data = b.getRepresentation("GoalPercept");
            Representations.GoalPercept goalPercept = Representations.GoalPercept.parseFrom(data);
            int postCount = goalPercept.getPostCount();
            switch (postCount) {
                case 0:
                    jRadioButton4.setSelected(true);
                    GroundTruthCreator.this.bottomGoal.put(frameNumber, 0);
                    break;
                case 1:
                    jRadioButton5.setSelected(true);
                    GroundTruthCreator.this.bottomGoal.put(frameNumber, 1);
                    break;
                case 2:
                    jRadioButton6.setSelected(true);
                    GroundTruthCreator.this.bottomGoal.put(frameNumber, 2);
                    break;                   
            }
            /**************GoalPercept***************************************************/
            /**************GoalPerceptTop************************************************/
            data = b.getRepresentation("GoalPerceptTop");
            Representations.GoalPercept goalPerceptTop = Representations.GoalPercept.parseFrom(data);
            postCount = goalPerceptTop.getPostCount();
            switch (postCount) {
                case 0:
                    jRadioButton1.setSelected(true);
                    GroundTruthCreator.this.topGoal.put(frameNumber, 0);
                    break;
                case 1:
                    jRadioButton2.setSelected(true);
                    GroundTruthCreator.this.topGoal.put(frameNumber, 1);
                    break;
                case 2:
                    jRadioButton3.setSelected(true);
                    GroundTruthCreator.this.topGoal.put(frameNumber, 2);
                    break;                   
            }
            /**************GoalPerceptTop************************************************/           

       } catch(InvalidProtocolBufferException ex) {
           ex.printStackTrace(System.err);
       }
   }

   @Override
   public void logfileOpened(LogSimulator.BlackBoard b, String path) {
        GroundTruthCreator.this.topBall.clear();
        GroundTruthCreator.this.bottomBall.clear();
        GroundTruthCreator.this.topGoal.clear();
        GroundTruthCreator.this.bottomGoal.clear(); 
        changeGroundTruth = false;
   }
}

 private void toggleButtons() {
     boolean enabled = true;
        if (this.jToggleButton1.isEnabled()) {
            enabled = false;
        }
        this.jCheckBox1.setEnabled(enabled);
        this.jRadioButton1.setEnabled(enabled);
        this.jRadioButton2.setEnabled(enabled);
        this.jRadioButton3.setEnabled(enabled);
        this.jRadioButton4.setEnabled(enabled);
        this.jRadioButton5.setEnabled(enabled);
        this.jRadioButton6.setEnabled(enabled);
        this.jToggleButton1.setEnabled(enabled);
        this.jToggleButton2.setEnabled(enabled);
        this.jButton1.setEnabled(enabled);
    }
}//end class GroundTruthCreator

