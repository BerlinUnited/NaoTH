package de.naoth.rc.dialogs;

import de.naoth.rc.AbstractDialog;
import de.naoth.rc.RobotControl;
import de.naoth.rc.dataformats.JanusImage;
import de.naoth.rc.dialogs.Tools.Colors;
import de.naoth.rc.manager.ImageManager;
import de.naoth.rc.manager.ObjectListener;
import de.naoth.rc.manager.SecondaryImageManager;
import de.naoth.rc.server.Command;
import de.naoth.rc.server.CommandSender;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import net.xeoh.plugins.base.annotations.PluginImplementation;
import net.xeoh.plugins.base.annotations.events.Init;
import net.xeoh.plugins.base.annotations.injections.InjectPlugin;

/**
 *
 * @author  CNR
 */
@PluginImplementation
public class ColorCalibrationTool extends AbstractDialog implements /*ObjectListener<JanusImage>,*/ PropertyChangeListener
{

  @InjectPlugin
  public RobotControl parent;
  @InjectPlugin
  public ImageManager imageManager;
  @InjectPlugin
  public SecondaryImageManager secondaryImageManager;

  private ImagePanel imageCanvas;
  private final String cameraAutoParam = "camera:switch_auto_parameters";
  
  private final String showCalibArea = "Vision:ColorClassifiers:BaseColorClassifier:[CAMERA]:calibration_areas:";
  private final String showCalibPixel = "Vision:ColorClassifiers:BaseColorClassifier:[CAMERA]:set_[OBJECT]_in_image";
  private final String showCalibPixelField = "Vision:ColorClassifiers:FieldColorClassifier:[CAMERA]:set_in_image";
  private final String getSetCalibAreaRect = "ParameterList:CalibrationAreaRect_";
  private final String toggleCalibCommand = "Vision:ColorClassifiers:BaseColorClassifier:[CAMERA]:calibrate_colors:";
  private final String toggleCalibCommandField = "Vision:ColorClassifiers:FieldColorClassifier:[CAMERA]:calibrate:";
  private final String getSetCalibValues = "ParameterList:[COLOR]ColorRegion_[OBJECT]";
  private final String getSetCalibValuesField = "ParameterList:FieldColorParameters:";
  
  private final String getSetCalibStrength = "ParameterList:BCC_Parameters";
          
  private boolean drawRect = false;
  private Color CalibColor;
  private Integer CalibColorIndex;
  private Colors.ColorClass colorClass;

  private HashMap<Colors.ColorClass, Boolean> classifiedPixelShowStateList;

  BottomImageListener bottomImageListener;
  TopImageListener topImageListener;
  
  private String activeCamera;
  
  /** Creates new form ImageViewer */
  public ColorCalibrationTool()
  {
    initComponents();
  }

  @Init
  public void init()
  {
    this.activeCamera = "";
    // setup the image-views
    this.imageCanvas = new ImagePanel();
    this.imagePanel.add(imageCanvas);
    this.imagePanel.addMouseListener(imageCanvas);
    this.imagePanel.addMouseMotionListener(imageCanvas);

    this.bottomImageListener = new BottomImageListener();
    this.topImageListener = new TopImageListener();

    this.classifiedPixelShowStateList = new HashMap<Colors.ColorClass, Boolean>();
    for(Colors.ColorClass c: Colors.ColorClass.values())
    {
      this.classifiedPixelShowStateList.put(c,false);
    }
    setStrength(10);
  }//end init

  private void setStrength(int value)
  {
    this.jSliderStrength.setValue(value);
    Double val = value / 10.0;
    this.jTextFieldStrength.setText(val.toString());
  }
  
  @Override
  public JPanel getPanel()
  {
    return this;
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new de.naoth.rc.dialogs.panels.ExtendedFileChooser();
        jToolBar1 = new javax.swing.JToolBar();
        btReceiveBottomImages = new javax.swing.JToggleButton();
        btReceiveTopImages = new javax.swing.JToggleButton();
        btAutoCameraParameters = new javax.swing.JToggleButton();
        btCalibrate = new javax.swing.JToggleButton();
        jPanel3 = new javax.swing.JPanel();
        originalImageContainer = new javax.swing.JPanel();
        imagePanel = new javax.swing.JPanel();
        coloredObjectChooserPanel = new de.naoth.rc.dialogs.panels.ColoredObjectChooserPanel();
        colorValueSlidersPanel = new de.naoth.rc.dialogs.panels.ColorValueSlidersPanel();
        jSliderStrength = new javax.swing.JSlider();
        jTextFieldStrength = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(800, 663));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        btReceiveBottomImages.setText("Receive Bottom Images");
        btReceiveBottomImages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btReceiveBottomImagesActionPerformed(evt);
            }
        });
        jToolBar1.add(btReceiveBottomImages);

        btReceiveTopImages.setText("Receive Top Images");
        btReceiveTopImages.setFocusable(false);
        btReceiveTopImages.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btReceiveTopImages.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btReceiveTopImages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btReceiveTopImagesActionPerformed(evt);
            }
        });
        jToolBar1.add(btReceiveTopImages);

        btAutoCameraParameters.setText("Auto Camera Params");
        btAutoCameraParameters.setEnabled(false);
        btAutoCameraParameters.setFocusable(false);
        btAutoCameraParameters.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btAutoCameraParameters.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btAutoCameraParameters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAutoCameraParametersActionPerformed(evt);
            }
        });
        jToolBar1.add(btAutoCameraParameters);

        btCalibrate.setText("Run Calibration");
        btCalibrate.setEnabled(false);
        btCalibrate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                btCalibrateStateChanged(evt);
            }
        });
        btCalibrate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                btCalibrateItemStateChanged(evt);
            }
        });
        btCalibrate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCalibrateActionPerformed(evt);
            }
        });
        jToolBar1.add(btCalibrate);

        jPanel3.setPreferredSize(new java.awt.Dimension(640, 480));

        originalImageContainer.setBackground(java.awt.Color.gray);
        originalImageContainer.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        originalImageContainer.setMinimumSize(new java.awt.Dimension(640, 480));
        originalImageContainer.setPreferredSize(new java.awt.Dimension(640, 480));
        originalImageContainer.setLayout(new java.awt.BorderLayout());

        imagePanel.setBackground(java.awt.Color.gray);
        imagePanel.setMinimumSize(new java.awt.Dimension(640, 480));
        imagePanel.setOpaque(false);
        imagePanel.setPreferredSize(new java.awt.Dimension(640, 480));
        imagePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imagePanelMouseClicked(evt);
            }
        });
        imagePanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                imagePanelMouseMoved(evt);
            }
        });
        imagePanel.setLayout(new java.awt.BorderLayout());
        originalImageContainer.add(imagePanel, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(originalImageContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(originalImageContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        coloredObjectChooserPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                coloredObjectChooserPanelMouseClicked(evt);
            }
        });

        jSliderStrength.setMajorTickSpacing(10);
        jSliderStrength.setMaximum(30);
        jSliderStrength.setMinorTickSpacing(1);
        jSliderStrength.setPaintTicks(true);
        jSliderStrength.setSnapToTicks(true);
        jSliderStrength.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderStrengthStateChanged(evt);
            }
        });

        jTextFieldStrength.setEditable(false);
        jTextFieldStrength.setText("1.0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(coloredObjectChooserPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(colorValueSlidersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextFieldStrength, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSliderStrength, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(coloredObjectChooserPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jSliderStrength, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jTextFieldStrength, javax.swing.GroupLayout.Alignment.TRAILING)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(colorValueSlidersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(112, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents
  private void btReceiveBottomImagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btReceiveBottomImagesActionPerformed

    if(this.btReceiveBottomImages.isSelected())
    {
      if(this.parent.checkConnected())
      {
        this.imageManager.addListener(this.bottomImageListener);
        this.coloredObjectChooserPanel.setEnabled(true);
        this.btAutoCameraParameters.setEnabled(true);
        this.btReceiveTopImages.setEnabled(false);
        this.activeCamera = "CamBottom";
        if(this.coloredObjectChooserPanel.getSelectedColor() != Colors.ColorClass.none)
        {
          this.btCalibrate.setEnabled(true);
        }
      }
      else
      {
//        this.btReceiveTopImages.setEnabled(true);
        this.btReceiveBottomImages.setSelected(false);
//        this.activeCamera = "";
//        this.btCalibrate.setEnabled(false);
      }
    }
    else
    {
      this.btReceiveTopImages.setEnabled(true);
      this.imageManager.removeListener(this.bottomImageListener);
      this.coloredObjectChooserPanel.setEnabled(false);
      this.btAutoCameraParameters.setEnabled(false);
      this.activeCamera = "";
      this.btCalibrate.setEnabled(false);
    }
  }//GEN-LAST:event_btReceiveBottomImagesActionPerformed

  private void imagePanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imagePanelMouseMoved
  }//GEN-LAST:event_imagePanelMouseMoved

  private void imagePanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imagePanelMouseClicked
  }//GEN-LAST:event_imagePanelMouseClicked

private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
}//GEN-LAST:event_formMouseClicked

private void btAutoCameraParametersActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btAutoCameraParametersActionPerformed
{//GEN-HEADEREND:event_btAutoCameraParametersActionPerformed

  boolean on = this.btAutoCameraParameters.isSelected();
  Command cmd = new Command(this.cameraAutoParam).addArg(on ? "on"  : "off");
  sendCommand(cmd);
}//GEN-LAST:event_btAutoCameraParametersActionPerformed

  private void btCalibrateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_btCalibrateStateChanged

 }//GEN-LAST:event_btCalibrateStateChanged
  
  private void btCalibrateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_btCalibrateItemStateChanged
  }//GEN-LAST:event_btCalibrateItemStateChanged

  private void btCalibrateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCalibrateActionPerformed
    if(this.parent.getMessageServer().isConnected())
    {
      if(this.btCalibrate.isSelected())
      {
        if(this.colorClass != null)
        {
          this.coloredObjectChooserPanel.setEnabled(false);
          this.colorValueSlidersPanel.setEnabled(false);
          this.btReceiveBottomImages.setEnabled(false);
//          if(colorValueSlidersPanel.showColoredPixels())
//          {
//            sendShowObjectsPixels(colorClass, "on");
//          }
          sendCommand(new Command(this.toggleCalibCommand + "reset_data").addArg("on"));
          try 
          {
            Thread.sleep(30);
          }
          catch (Exception ex)
          {}
          sendCommand(new Command(this.toggleCalibCommand + "reset_data").addArg("off"));
          try 
          {
            Thread.sleep(30);
          }
          catch (Exception ex)
          {}
          if(!sendColorCalibCommand(this.colorClass, "on"))
          {
            this.coloredObjectChooserPanel.setEnabled(true);
            this.colorValueSlidersPanel.setEnabled(true);
            this.btReceiveBottomImages.setEnabled(true);
            this.btCalibrate.setSelected(false);
            
            try 
            {
              Thread.sleep(30);
            }
            catch (Exception ex)
            {}
//            sendShowObjectsPixels(this.colorClass, "on");
          }
        }
      }
      else
      {
        for(Colors.ColorClass c: Colors.ColorClass.values())
        {
          if
          (
            c == Colors.ColorClass.green || 
            c == Colors.ColorClass.white || 
            c == Colors.ColorClass.orange || 
            c == Colors.ColorClass.yellow ||
            c == Colors.ColorClass.skyblue || 
            c == Colors.ColorClass.red || 
            c == Colors.ColorClass.blue
          )
          {
//            if(colorValueSlidersPanel.showColoredPixels())
//            {
//              sendShowObjectsPixels(c, "off");
//            }
            sendColorCalibCommand(c, "off");          
          }
        }
        try 
        {
          Thread.sleep(30);
        }
        catch (Exception ex)
        {}
        if(sendGetColorValueCommand(this.colorClass, "get"))
        {
          this.colorValueSlidersPanel.setEnabled(true);
          this.coloredObjectChooserPanel.setEnabled(true);
          this.btReceiveBottomImages.setEnabled(true);
        }
        else
        {
          this.btCalibrate.setSelected(true);
          this.colorValueSlidersPanel.setEnabled(false);
          this.coloredObjectChooserPanel.setEnabled(false);
          this.btReceiveBottomImages.setEnabled(false);
        }
      }
    }
  }//GEN-LAST:event_btCalibrateActionPerformed

  private void coloredObjectChooserPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_coloredObjectChooserPanelMouseClicked
  }//GEN-LAST:event_coloredObjectChooserPanelMouseClicked

  private void jSliderStrengthStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderStrengthStateChanged
    setStrength(this.jSliderStrength.getValue());        
    Double val = this.jSliderStrength.getValue() / 10.0;
    if(this.parent.getMessageServer().isConnected())
    {
      sendCommand(new Command(this.getSetCalibStrength + ":set").addArg("calibrationStrength", val.toString()));
    }
  }//GEN-LAST:event_jSliderStrengthStateChanged

  private void btCalibrateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btCalibrateMouseClicked
    
  }//GEN-LAST:event_btCalibrateMouseClicked

  private void btReceiveTopImagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btReceiveTopImagesActionPerformed
    
    if(this.btReceiveTopImages.isSelected())
    {
      if(this.parent.checkConnected())
      {
        this.secondaryImageManager.addListener(this.topImageListener);
        this.coloredObjectChooserPanel.setEnabled(true);
        this.btAutoCameraParameters.setEnabled(true);
        this.btReceiveBottomImages.setEnabled(false);
        this.activeCamera = "CamTop";
        if(this.coloredObjectChooserPanel.getSelectedColor() != Colors.ColorClass.none)
        {
          this.btCalibrate.setEnabled(true);
        }
      }
      else
      {
        this.btReceiveTopImages.setSelected(false);
//        this.btReceiveBottomImages.setEnabled(true);
//        this.activeCamera = "";
//        this.btCalibrate.setEnabled(false);
      }
    }
    else
    {
      this.btReceiveBottomImages.setEnabled(true);
      this.secondaryImageManager.removeListener(this.topImageListener);
      this.coloredObjectChooserPanel.setEnabled(false);
      this.btAutoCameraParameters.setEnabled(false);
      this.activeCamera = "";
      this.btCalibrate.setEnabled(false);
    }
    
  }//GEN-LAST:event_btReceiveTopImagesActionPerformed

//  @Override
//  public void newObjectReceived(JanusImage object)
//  {
//    imageCanvas.setImage(object);
//  }
//
//  @Override
//  public void errorOccured(String cause)
//  {
//    btReceiveBottomImages.setSelected(false);
//    imageManager.removeListener(this);
//    JOptionPane.showMessageDialog(this,
//      cause, "Error", JOptionPane.ERROR_MESSAGE);
//  }
  
  private void sendShowObjectsPixels(Colors.ColorClass colorClass, String mode)
  {
    if(colorClass != null)
    {
      String cmdString = this.showCalibPixel;
      switch(colorClass)
      {
        case green:
            cmdString = this.showCalibPixelField;
          break;

        case white:
            cmdString = cmdString.replace("[OBJECT]", "lines");
          break;

        case yellow:
        case skyblue:
            cmdString = cmdString.replace("[OBJECT]", "goal");
          break;

        case orange:
            cmdString = cmdString.replace("[OBJECT]", "ball");
          break;

        case pink:
        case red:
            cmdString = cmdString.replace("[OBJECT]", "red_team");
          break;

        case blue:
            cmdString = cmdString.replace("[OBJECT]", "blue_team");
          break;
           
        default:
           return;
      }
      cmdString = cmdString.replace("[CAMERA]", activeCamera);
      System.out.println(cmdString);
      sendCommand(new Command(cmdString).addArg(mode));
    }
  }

  private boolean sendGetColorValueCommand(Colors.ColorClass colorClass, String mode)
  {
    mode = ":" + mode;
    if(colorClass != null)
    {
      String cmdString = this.getSetCalibValues;
      String camera = activeCamera.replace("Cam","");
      switch(colorClass)
      {
        case green:
            cmdString = this.getSetCalibValuesField + mode;
          break;

        case white:
            cmdString = cmdString.replace("[COLOR]", "white").replace("[OBJECT]", "WhiteLines") + camera + mode;
          break;

        case yellow:
            cmdString = cmdString.replace("[COLOR]", "yellow").replace("[OBJECT]", "YellowGoal") + camera + mode;
          break;

        case skyblue:
            cmdString = cmdString.replace("[COLOR]", "yellow").replace("[OBJECT]", "YellowGoal") + camera + mode;
            //cmdString += cmdString.replace("[COLOR]", "skyblue").replace("[OBJECT]", "BlueGoal") + mode;
          break;

        case orange:
            cmdString = cmdString.replace("[COLOR]", "orange").replace("[OBJECT]", "OrangeBall") + camera + mode;
          break;

        case red:
            cmdString = cmdString.replace("[COLOR]", "pink").replace("[OBJECT]", "RedTeam") + camera + mode;
          break;

        case blue:
            cmdString = cmdString.replace("[COLOR]", "blue").replace("[OBJECT]", "BlueTeam") + camera + mode;
          break;
          
        default:
          return true;
      }
      System.out.println(cmdString);
      Command cmd = new Command(cmdString);
      if(mode.equals(":set"))
      {
        String[][] values = this.colorValueSlidersPanel.getControlValues();
        for(int i = 0; i < values.length; i++)
        {
          cmd.addArg(values[i][0], values[i][1]);
        }
      }
//      else
//      {
//        sendCommand(new Command(getSetCalibStrength + ":get"));  
//       }
      return sendCommand(cmd);
        
    }
    return false;
  }

  private boolean sendColorCalibCommand(Colors.ColorClass colorClass, String arg)
  {
    String cmdString = this.toggleCalibCommand;
    switch(colorClass)
    {
      case green:
            cmdString = this.toggleCalibCommandField;
        break;

      case white:
          cmdString += "line";
        break;

      case yellow:
          cmdString += "yellow_goal";
        break;

      case skyblue:
          cmdString += "yellow_goal";//"show_blue_goal_area";
        break;

      case orange:
          cmdString += "ball";
        break;

      case red:
          cmdString += "red_team";
        break;

      case blue:
          cmdString += "blue_team";
        break;
        
      default:
        return true;
    }
    cmdString = cmdString.replace("[CAMERA]", activeCamera);
    System.out.println(cmdString);
    return sendCommand(new Command(cmdString).addArg(arg));
  }

  @Override
  public void propertyChange(PropertyChangeEvent evt) 
  {
    String property = evt.getPropertyName().replace("ColorCalibrationTool:", "").replace("Top", "");;
    String changedProperty = property.replace(":changed", "");
    String switchedProperty = property.replace(":switched", "");
    
    if(evt.getNewValue() != null && evt.getNewValue() instanceof Boolean )
    {
//      System.out.println(switchedProperty);
      String mode = "off";
      if((Boolean) evt.getNewValue())
      {
        mode = "on";
      }
      Colors.ColorClass c = Colors.ColorClass.none;
      
      if(switchedProperty.equals("OrangeBall"))
      {
        c = Colors.ColorClass.orange;
      }
      else if(switchedProperty.equals("YellowGoal"))
      {
        c = Colors.ColorClass.yellow;
      }
      else if(switchedProperty.equals("RedTeam"))
      {
        c = Colors.ColorClass.pink;
      }
      else if(switchedProperty.equals("BlueTeam"))
      {
        c = Colors.ColorClass.blue;
      }
      else if(switchedProperty.equals("WhiteLines"))
      {
        c = Colors.ColorClass.white;
      }
      else if(switchedProperty.equals("Field"))
      {
        c = Colors.ColorClass.green;
      }
      sendShowObjectsPixels(c, mode);
      this.classifiedPixelShowStateList.put(c, (Boolean) evt.getNewValue());     
    }
    else if(evt.getNewValue() != null && evt.getNewValue() instanceof Integer)
    {
      if(changedProperty.equals("OrangeBall"))
      {
        sendGetColorValueCommand(Colors.ColorClass.orange, "set");
      }
      else if(changedProperty.equals("YellowGoal"))
      {
        sendGetColorValueCommand(Colors.ColorClass.yellow, "set");
      }
      else if(changedProperty.equals("RedTeam"))
      {
        sendGetColorValueCommand(Colors.ColorClass.pink, "set");
      }
      else if(changedProperty.equals("BlueTeam"))
      {
        sendGetColorValueCommand(Colors.ColorClass.blue, "set");
      }
      else if(changedProperty.equals("WhiteLines"))
      {
        sendGetColorValueCommand(Colors.ColorClass.white, "set");
      }    
      else if(changedProperty.equals("Field"))
      {
        sendGetColorValueCommand(Colors.ColorClass.green, "set");
      }
    }
  }

  private class BottomImageListener implements ObjectListener<JanusImage>
  {

    @Override
    public void newObjectReceived(JanusImage object)
    {
      if(object == null) return;
      
      imageCanvas.setImage(object.getRgb());
      imageCanvas.repaint();
    }//end newObjectReceived

    @Override
    public void errorOccured(String cause)
    {
      btReceiveBottomImages.setSelected(false);
      imageManager.removeListener(this);
      imageCanvas.setVisible(false);
    }//end errorOccured
  }//end ImageListener
  
  private class TopImageListener implements ObjectListener<JanusImage>
  {

    @Override
    public void newObjectReceived(JanusImage object)
    {
      if(object == null) return;
      
      imageCanvas.setImage(object.getRgb());
      imageCanvas.repaint();

    }//end newObjectReceived

    @Override
    public void errorOccured(String cause)
    {
      btReceiveTopImages.setSelected(false);
      secondaryImageManager.removeListener(this);
      imageCanvas.setVisible(false);
    }//end errorOccured
  }//end ImageListener
  
  private class ImagePanel extends JPanel implements MouseMotionListener, MouseListener//, ComponentListener
  {

    private JanusImage image;
    
    private java.awt.Point[][] lowerLeft;
    private java.awt.Point[][] upperRight;
    
    private java.awt.Point[][] lowerLeftAnim;
    private java.awt.Point[][] upperRightAnim;
    
    private Double scale;

    public ImagePanel()
    {
      this.addMouseMotionListener(this);
      this.addMouseListener(this);
//      this.addComponentListener(this);
      this.setSize(imagePanel.getSize());
      this.scale = 2.0;
      
      this.lowerLeft = new java.awt.Point[2][Colors.ColorClass.numOfColors.ordinal()];
      this.upperRight = new java.awt.Point[2][Colors.ColorClass.numOfColors.ordinal()];
      
      this.lowerLeftAnim = new java.awt.Point[2][Colors.ColorClass.numOfColors.ordinal()];
      this.upperRightAnim = new java.awt.Point[2][Colors.ColorClass.numOfColors.ordinal()];
      
      for(int i = 0; i < Colors.ColorClass.numOfColors.ordinal(); i++)
      {
        for(int j = 0; j < 2; j++)
        {
          this.lowerLeft[j][i] = new java.awt.Point(0, 0);
          this.upperRight[j][i] = new java.awt.Point(0, 0);
          this.lowerLeftAnim[j][i] = new java.awt.Point(0, 0);
          this.upperRightAnim[j][i] = new java.awt.Point(0, 0);
        }
      }
      CalibColorIndex = null;
      CalibColor = Color.black;
    }
    protected BufferedImage backgroundImage;

    public void setImage(JanusImage image)
    {
      this.image = image;
      this.setImage(this.image.getRgb());
    }

    private void setImage(BufferedImage rgb) 
    {
      this.backgroundImage = rgb;
      Dimension dim = imagePanel.getSize();
      double heightPanel = dim.height;
      double heightImage = this.backgroundImage.getHeight();
      this.scale = heightPanel / heightImage;
      
      this.setSize(imagePanel.getSize()); 
      getColor();
      this.repaint();
    }

    public JanusImage getImage()
    {
      return this.image;
    }    

    public void getColor()
    {
      Colors.ColorClass newColorClass = coloredObjectChooserPanel.getSelectedColor();
      
      if(newColorClass != colorClass)
      {        
        sendShowObjectsPixels(colorClass, "off");
        colorValueSlidersPanel.setShowColoredPixels(false);
        if(newColorClass == Colors.ColorClass.none)
        {
          btCalibrate.setEnabled(false);
        }
        if(colorClass != null && newColorClass != null )
        {         
          colorValueSlidersPanel.removeControls();
        }
        
        for(Colors.ColorClass c: Colors.ColorClass.values())
        {
          if
          (
            c == Colors.ColorClass.green || 
            c == Colors.ColorClass.white || 
            c == Colors.ColorClass.orange || 
            c == Colors.ColorClass.yellow ||
            c == Colors.ColorClass.skyblue || 
            c == Colors.ColorClass.red || 
            c == Colors.ColorClass.blue
          )
          {
            sendShowColorAreaCommand(c, "off");
          }
        }
        if(!activeCamera.equals(""))
        {
          btCalibrate.setSelected(false);
          btCalibrate.setEnabled(true);
        }
        sendGetColorValueCommand(newColorClass, "get");
//        colorValueSlidersPanel.removeControls();
//        this.validateTree();
        colorClass = newColorClass;
        if(colorClass != null)
        {
          try 
          {
            CalibColor = Colors.GetColor(colorClass);
          } 
          catch (Exception ex) 
          {
            Logger.getLogger(ColorCalibrationTool.class.getName()).log(Level.SEVERE, null, ex);
          }
          CalibColorIndex = coloredObjectChooserPanel.getSelectedColorIndex();
  //        sendGetColorValueCommand(colorClass, "get");
          sendShowColorAreaCommand(colorClass, "on");
        }
        else
        {
          CalibColor = null;
          CalibColorIndex = null;
        }      
      }
    }
    
    private void sendColorAreaCommand(Colors.ColorClass colorClass)
    {
      String cmdString = getSetCalibAreaRect;
      int index = colorClass.ordinal();
      switch(colorClass)
      {
//        case green:
//            cmdString += "LowerField:set";
//          break;
          
        case white:
          if(activeCamera.equals("CamTop"))
            cmdString += "WhiteLinesTop:set";
           else
            cmdString += "WhiteLines:set";
          break;
          
        case yellow:
          if(activeCamera.equals("CamTop"))
            cmdString += "YellowGoalPostLeftTop:set";
           else
            cmdString += "YellowGoalPostLeft:set";
          break;
          
        case skyblue:
          if(activeCamera.equals("CamTop"))
            cmdString += "YellowGoalPostRightTop:set";
           else
            cmdString += "YellowGoalPostRight:set";
          break;
          
        case orange:
          if(activeCamera.equals("CamTop"))
            cmdString += "OrangeBallTop:set";
           else
            cmdString += "OrangeBall:set";
          break;
          
        case red:
          if(activeCamera.equals("CamTop"))
            cmdString += "RedTeamTop:set";
           else
            cmdString += "RedTeam:set";
          break;
          
        case blue:
          if(activeCamera.equals("CamTop"))
            cmdString += "BlueTeamTop:set";
           else
            cmdString += "BlueTeam:set";
          break;
        
        default:
          return;
      }
      System.out.println(cmdString);
      Command cmd = new Command(cmdString); 
      int cam = 0;
      if(activeCamera.equals("CamBottom"))
      {
        cam++;
      }
      
      if(this.lowerLeft[cam][index].x > 639)
      {
        this.lowerLeft[cam][index].x = 639;
      }
      if(this.lowerLeft[cam][index].y > 479)
      {
        this.lowerLeft[cam][index].y = 479;
      }
      
      if(this.lowerLeft[cam][index].x < 0)
      {
        this.lowerLeft[cam][index].x = 0;
      }
      if(this.lowerLeft[cam][index].y < 0)
      {
        this.lowerLeft[cam][index].y = 0;
      }
      
      if(this.upperRight[cam][index].x > 639)
      {
        this.upperRight[cam][index].x = 639;
      }
      if(this.upperRight[cam][index].y > 479)
      {
        this.upperRight[cam][index].y = 479;
      }
      
      if(this.upperRight[cam][index].x < 0)
      {
        this.upperRight[cam][index].x = 0;
      }
      if(this.upperRight[cam][index].y < 0)
      {
        this.upperRight[cam][index].y = 0;
      }
      
      if(this.lowerLeft[cam][index].x > this.upperRight[cam][index].x)
      {
        int x = this.upperRight[cam][index].x;
        this.upperRight[cam][index].x = this.lowerLeft[cam][index].x;
        this.lowerLeft[cam][index].x = x;
      }
      
      if(lowerLeft[cam][index].y > this.upperRight[cam][index].y)
      {
        int y = this.upperRight[cam][index].y;
        this.upperRight[cam][index].y = this.lowerLeft[cam][index].y;
        this.lowerLeft[cam][index].y = y;
      }      
      
      cmd.addArg("lowerLeft.x", String.valueOf((int) (this.lowerLeft[cam][index].x / this.scale)));
      cmd.addArg("lowerLeft.y", String.valueOf((int) (this.lowerLeft[cam][index].y / this.scale)));
      cmd.addArg("upperRight.x", String.valueOf((int) (this.upperRight[cam][index].x / this.scale)));
      cmd.addArg("upperRight.y", String.valueOf((int) (this.upperRight[cam][index].y / this.scale)));
      sendCommand(cmd);
      
      cmdString = getSetCalibAreaRect;
      index = colorClass.ordinal();
      switch(colorClass)
      {
        case yellow:
          if(activeCamera.equals("CamTop"))
            cmdString += "BlueGoalPostLeftTop:set";
           else
            cmdString += "BlueGoalPostLeft:set";
          break;
          
        case skyblue:
          if(activeCamera.equals("CamTop"))
            cmdString += "BlueGoalPostRightTop:set";
           else
            cmdString += "BlueGoalPostRight:set";
          break;
      }      
      cmd = new Command(cmdString);    
      cmd.addArg("lowerLeft.x", String.valueOf(this.lowerLeft[cam][index].x / 2));
      cmd.addArg("lowerLeft.y", String.valueOf(this.lowerLeft[cam][index].y / 2));
      cmd.addArg("upperRight.x", String.valueOf(this.upperRight[cam][index].x / 2));
      cmd.addArg("upperRight.y", String.valueOf(this.upperRight[cam][index].y / 2));
      sendCommand(cmd);
    }
   
    private void sendShowColorAreaCommand(Colors.ColorClass colorClass, String arg)
    {
      String cmdString = showCalibArea;
      
      if(colorClass == null) return;
      
      switch(colorClass)
      {
//        case green:
//            cmdString += "show_field_area";
//          break;
          
        case white:
            cmdString += "show_line_area";
          break;
          
        case yellow:
            cmdString += "show_yellow_goal_area";
          break;
          
        case skyblue:
            cmdString += "show_yellow_goal_area";//"show_blue_goal_area";
          break;
          
        case orange:
            cmdString += "show_ball_area";
          break;
          
        case red:
            cmdString += "show_red_team_area";
          break;
          
        case blue:
            cmdString += "show_blue_team_area";
          break;
        
        default:
          return;
      }
      cmdString = cmdString.replace("[CAMERA]", activeCamera);
      System.out.println(cmdString);
      sendCommand(new Command(cmdString).addArg(arg));
    }

    @Override
    public void mouseMoved(MouseEvent e)
    {
    }//end mouseMoved

    @Override
    public void mouseDragged(MouseEvent e) {
      if(CalibColorIndex != null)
      {
        int cam = 0;
        if(activeCamera.equals("CamBottom"))
        {
          cam++;
        }
        this.upperRightAnim[cam][CalibColorIndex] = e.getPoint();
        this.repaint();
      }
     }
    
    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }   

    @Override
    public void mousePressed(MouseEvent e) {
      colorClass = null;
      CalibColor = null;
      CalibColorIndex = null;
      getColor();
      if(CalibColorIndex != null && CalibColor != null)
      {
        int cam = 0;
        if(activeCamera.equals("CamBottom"))
        {
          cam++;
        }
        this.lowerLeftAnim[cam][CalibColorIndex] = e.getPoint();
        this.upperRightAnim[cam][CalibColorIndex] = e.getPoint();
//        lowerLeft[CalibColorIndex] = e.getPoint();
//        upperRight[CalibColorIndex] = e.getPoint();
        drawRect = true;
        this.repaint();
      }
    }

    @Override
    public void mouseReleased(MouseEvent e) {
      if(CalibColorIndex != null && CalibColor != null)
      {
        int cam = 0;
        if(activeCamera.equals("CamBottom"))
        {
          cam++;
        }
        this.upperRightAnim[cam][CalibColorIndex] = e.getPoint();
        if(isValidRect(CalibColorIndex))
        {
          this.lowerLeft[cam][CalibColorIndex] = this.lowerLeftAnim[cam][CalibColorIndex];
          this.upperRight[cam][CalibColorIndex] = this.upperRightAnim[cam][CalibColorIndex];
          sendShowColorAreaCommand(colorClass, "on");
          sendGetColorValueCommand(colorClass, "get");
          sendColorAreaCommand(colorClass);
          this.repaint();
        }
      }
    }   
     
    @Override
    public void mouseClicked(MouseEvent e) {
    }
    
    @Override
    public void paint(Graphics g)
    {
      super.paintComponent(g);
      Graphics2D g2d = (Graphics2D) g;

      if(this.backgroundImage != null)
      {
        g2d.drawImage(this.backgroundImage, new AffineTransform(this.scale, 0, 0, this.scale, 0, 0), null);
      }
      if
      (
        drawRect &&
        CalibColorIndex != null && 
        CalibColor != null
      )
      {
        drawRect(g2d, CalibColorIndex, CalibColor);
        try 
        {
          if(CalibColorIndex == Colors.ColorClass.skyblue.ordinal())
          {
            drawRect(g2d, Colors.ColorClass.yellow.ordinal(), Colors.GetColor(Colors.ColorClass.yellow));
          }
          if(CalibColorIndex == Colors.ColorClass.yellow.ordinal())
          {
            drawRect(g2d, Colors.ColorClass.skyblue.ordinal(), Colors.GetColor(Colors.ColorClass.skyblue));
          }
        } 
        catch (Exception ex) 
        {
          Logger.getLogger(ColorCalibrationTool.class.getName()).log(Level.SEVERE, null, ex);
        }
      }
    }//end class paintComponent

    private boolean isValidRect(int index)
    {
      int cam = 0;
      if(activeCamera.equals("CamBottom"))
      {
        cam++;
      }
      return Math.abs(this.lowerLeftAnim[cam][index].x - this.upperRightAnim[cam][index].x) > 1 && Math.abs(this.lowerLeftAnim[cam][index].y - this.upperRightAnim[cam][index].y) > 1;
    }
    
    public void drawRect(Graphics2D g2d, int index, Color color)
    {
      if(isValidRect(index))
      {
        int cam = 0;
        if(activeCamera.equals("CamBottom"))
        {
          cam++;
        }
        int x = this.lowerLeftAnim[cam][index].x;
        int y = this.lowerLeftAnim[cam][index].y;

        int width = Math.abs(this.upperRightAnim[cam][index].x - this.lowerLeftAnim[cam][index].x);
        int height = Math.abs(this.upperRightAnim[cam][index].y - this.lowerLeftAnim[cam][index].y);

        if(this.upperRightAnim[cam][index].x < this.lowerLeftAnim[cam][index].x)
        {
          x = this.upperRightAnim[cam][index].x;
        }

        if(this.upperRightAnim[cam][index].y < this.lowerLeftAnim[cam][index].y)
        {
          y = this.upperRightAnim[cam][index].y;
        }        
        g2d.setColor(color);
        Stroke drawingStroke = new BasicStroke(1);
        Rectangle2D rect = new Rectangle2D.Double(x, y, width, height);
        g2d.setStroke(drawingStroke);
        g2d.draw(rect);
      }
    }
    
//    @Override
//    public void componentResized(ComponentEvent e) {
////      throw new UnsupportedOperationException("Not supported yet.");
//    }
//
//    @Override
//    public void componentMoved(ComponentEvent e) {
////      throw new UnsupportedOperationException("Not supported yet.");
//    }
//
//    @Override
//    public void componentShown(ComponentEvent e) {
////      throw new UnsupportedOperationException("Not supported yet.");
//    }
//
//    @Override
//    public void componentHidden(ComponentEvent e) {
////      throw new UnsupportedOperationException("Not supported yet.");
//    }

  }//end class ImagePanel

  public void addUpdateControls(String name, String result)
  {
    String[] params = result.split("\\n");
    for(int i = 0; i < params.length; i++)
    {
      String[] parts = params[i].split("=");
      if(parts.length == 2)
      {
        this.colorValueSlidersPanel.addControl(name, parts[0], Integer.parseInt(parts[1]), this, this.classifiedPixelShowStateList.get(this.colorClass));
      }
    }
  }
  
  private boolean sendCommand(final Command command)
  {
    if(this.parent.getMessageServer().isConnected())
    {
      this.parent.getMessageServer().executeSingleCommand(new CommandSender()
      {
        @Override
        public void handleResponse(byte[] result, Command originalCommand)
        {
          //getSetCalibValues = "ParameterList:[COLOR]ColorRegion_[OBJECT]:";
          String strResult = new String(result);
          if
          (
            originalCommand.getName().contains("ParameterList:") &&
            originalCommand.getName().contains("ColorRegion_") &&
            originalCommand.getName().contains(":get")
          )
          {
            int idx = originalCommand.getName().indexOf("ColorRegion_");
            String name = originalCommand.getName().substring(idx).replace("ColorRegion_", "").replace(":get", "");

            addUpdateControls(name, strResult);
          }
          else if((getSetCalibValuesField + "get").equals(originalCommand.getName()))
          {
            addUpdateControls("Field", strResult);
          }
          else if(originalCommand.getName().equals(cameraAutoParam)
            && originalCommand.getArguments().size() >= 1
            && originalCommand.getArguments().keySet().contains("off"))
          {
            String answer = new String(result);
            if(answer.endsWith("parameter were saved"))
            {
              JOptionPane.showMessageDialog(ColorCalibrationTool.this,
                "Written camera parameters.", "INFO", JOptionPane.INFORMATION_MESSAGE);
            }
            else
            {
              JOptionPane.showMessageDialog(ColorCalibrationTool.this,
                  answer, "Camera parameters NOT written", JOptionPane.INFORMATION_MESSAGE);
            }

          }

        }//end handleResponse

        @Override
        public void handleError(int code)
        {
          JOptionPane.showMessageDialog(ColorCalibrationTool.this,
                "Could not send or receive colortable, code " + code, "ERROR", JOptionPane.ERROR_MESSAGE);
        }

        @Override
        public Command getCurrentCommand()
        {
          return command;
        }
      });
      return true;
    }
    else
    {
      this.parent.checkConnected();
    }
    return false;
  }//end sendCommand

  @Override
  public void dispose()
  {
    this.btReceiveBottomImages.setSelected(false);
    this.btReceiveTopImages.setSelected(false);
    this.imageManager.removeListener(bottomImageListener);
    this.secondaryImageManager.removeListener(topImageListener);
    this.btCalibrate.setSelected(false);
    this.colorValueSlidersPanel.removeControls();
  }//end dispose
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btAutoCameraParameters;
    private javax.swing.JToggleButton btCalibrate;
    private javax.swing.JToggleButton btReceiveBottomImages;
    private javax.swing.JToggleButton btReceiveTopImages;
    private de.naoth.rc.dialogs.panels.ColorValueSlidersPanel colorValueSlidersPanel;
    private de.naoth.rc.dialogs.panels.ColoredObjectChooserPanel coloredObjectChooserPanel;
    private de.naoth.rc.dialogs.panels.ExtendedFileChooser fileChooser;
    private javax.swing.JPanel imagePanel;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSlider jSliderStrength;
    private javax.swing.JTextField jTextFieldStrength;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JPanel originalImageContainer;
    // End of variables declaration//GEN-END:variables
}
