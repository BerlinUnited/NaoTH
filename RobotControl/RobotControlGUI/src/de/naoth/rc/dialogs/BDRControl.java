package de.naoth.rc.dialogs;

import de.naoth.rc.RobotControl;
import de.naoth.rc.components.RemoteRobotPanel;
import de.naoth.rc.core.dialog.AbstractDialog;
import de.naoth.rc.core.dialog.DialogPlugin;
import de.naoth.rc.core.dialog.RCDialog;
import de.naoth.rc.core.manager.ObjectListener;
import de.naoth.rc.core.manager.SwingCommandExecutor;
import de.naoth.rc.dataformats.SPLMessage;
import de.naoth.rc.manager.GenericManagerFactory;
import de.naoth.rc.messages.BDRMessages.BDRControlCommand;
import de.naoth.rc.messages.BDRMessages.BDRBehaviorMode;
import de.naoth.rc.messages.Representations;
import de.naoth.rc.server.Command;
import de.naoth.rc.server.ConnectionStatusEvent;
import de.naoth.rc.server.ConnectionStatusListener;
import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.net.SocketException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.channels.AsynchronousCloseException;
import java.nio.channels.DatagramChannel;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import net.xeoh.plugins.base.annotations.PluginImplementation;
import net.xeoh.plugins.base.annotations.injections.InjectPlugin;

/**
 *
 * @author Verena
 */
public class BDRControl extends AbstractDialog {

    @RCDialog(category = RCDialog.Category.Debug, name = "BDRControl")
    @PluginImplementation
    public static class Plugin extends DialogPlugin<BDRControl> {

        @InjectPlugin
        public static RobotControl parent;
        @InjectPlugin
        public static SwingCommandExecutor commandExecutor;
        //@InjectPlugin
        //public static GenericManagerFactory genericManagerFactory;
    }//end Plugin

    private final Map<String, TeamCommMessage> messageMap = Collections.synchronizedMap(new TreeMap<String, TeamCommMessage>());
    private final HashMap<String, RemoteRobotPanel> robotsMap = new HashMap<>();
    private TeamCommListener teamCommListener;
    private final Timer timerCheckMessages;
    
    CommandSender currentSender = null;
    
    public BDRControl() 
    {
        initComponents();
        
        try {
            teamCommListener = new TeamCommListener();
            teamCommListener.connect(10004);
        } catch (IOException | InterruptedException ex) {
            ex.printStackTrace(System.err);
        }
        
        // dummy robot for tests
        //robotsMap.put("10.0.4.77", new RemoteRobotPanel(Plugin.parent.getMessageServer(),"10.0.4.77", new SPLMessage()));
        //updateRoboPanel();
        
        this.timerCheckMessages = new Timer();
        this.timerCheckMessages.scheduleAtFixedRate(new TeamCommListenTask(), 100, 100);
        
        try {
            this.currentSender = new CommandSender(new InetSocketAddress(InetAddress.getByName("10.0.4.92"), 10401));
        } catch (IOException ex) {
            ex.printStackTrace(System.err);
        }
        
        Plugin.parent.getMessageServer().addConnectionStatusListener(new ConnectionStatusListener() {
            @Override
            public void connected(ConnectionStatusEvent event) {
                bt_autonomois.setEnabled(true);
                bt_stop.setEnabled(true);
                bt_wartung.setEnabled(true);
            }

            @Override
            public void disconnected(ConnectionStatusEvent event) {
                bt_autonomois.setEnabled(false);
                bt_stop.setEnabled(false);
                bt_wartung.setEnabled(false);
            }
        });
    }

    @Override
    public void dispose() {
        try {
            teamCommListener.disconnect();
        } catch (IOException | InterruptedException ex) {
            ex.printStackTrace(System.err);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        robotPanel = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        filterTeam = new javax.swing.JToggleButton();
        teamSelectionBox = new javax.swing.JComboBox();
        controlPanel = new javax.swing.JPanel();
        bt_stop = new javax.swing.JToggleButton();
        bt_autonomois = new javax.swing.JToggleButton();
        bt_wartung = new javax.swing.JToggleButton();

        robotPanel.setLayout(new java.awt.GridLayout(2, 2, 5, 5));

        robotPanel.setLayout(new de.naoth.rc.components.WrapLayout(java.awt.FlowLayout.LEFT));

        jScrollPane2.setViewportView(robotPanel);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        filterTeam.setText("Filter by Team");
        filterTeam.setFocusable(false);
        filterTeam.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        filterTeam.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        filterTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterTeamActionPerformed(evt);
            }
        });
        jToolBar1.add(filterTeam);

        teamSelectionBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6" }));
        teamSelectionBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teamSelectionBoxActionPerformed(evt);
            }
        });
        jToolBar1.add(teamSelectionBox);

        controlPanel.setLayout(new java.awt.GridLayout(3, 0));

        bt_stop.setText("STOP");
        bt_stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_stopActionPerformed(evt);
            }
        });
        controlPanel.add(bt_stop);

        bt_autonomois.setText("AUTONOMES SPIEL");
        bt_autonomois.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_autonomoisActionPerformed(evt);
            }
        });
        controlPanel.add(bt_autonomois);

        bt_wartung.setText("WARTUNG");
        bt_wartung.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_wartungActionPerformed(evt);
            }
        });
        controlPanel.add(bt_wartung);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(controlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void filterTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterTeamActionPerformed
        updateRoboPanel();
    }//GEN-LAST:event_filterTeamActionPerformed

    private void teamSelectionBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teamSelectionBoxActionPerformed
        updateRoboPanel();
    }//GEN-LAST:event_teamSelectionBoxActionPerformed

    private void bt_stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_stopActionPerformed
        if(this.currentSender != null) {
            BDRControlCommand.Builder cmd = BDRControlCommand.newBuilder();
            cmd.setBehaviorMode(BDRBehaviorMode.DO_NOTHING);
            //this.currentSender.send(bdrCmd.build());
            sendBDRCommand(cmd.build());
        } else {
            this.bt_stop.setSelected(true);
        }
    }//GEN-LAST:event_bt_stopActionPerformed

    private void bt_autonomoisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_autonomoisActionPerformed
        if(this.currentSender != null && this.bt_stop.isSelected()) {
            BDRControlCommand.Builder cmd = BDRControlCommand.newBuilder();
            cmd.setBehaviorMode(BDRBehaviorMode.AUTONOMOUS_PLAY);
            //this.currentSender.send(cmd.build());
            sendBDRCommand(cmd.build());
        }
    }//GEN-LAST:event_bt_autonomoisActionPerformed

    private void bt_wartungActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_wartungActionPerformed
        if(this.currentSender != null && this.bt_stop.isSelected()) {
            BDRControlCommand.Builder cmd = BDRControlCommand.newBuilder();
            cmd.setBehaviorMode(BDRBehaviorMode.WARTUNG);
            //this.currentSender.send(cmd.build());
            sendBDRCommand(cmd.build());
        }
    }//GEN-LAST:event_bt_wartungActionPerformed

    class RemoteCommandResultHandler implements ObjectListener<byte[]> {

        @Override
        public void newObjectReceived(byte[] object) {
            if (!new String(object).isEmpty()) {
                System.out.println(new String(object));
            }
        }

        @Override
        public void errorOccured(String cause) {
            System.out.println(cause);
        }
    }
    
    private void sendBDRCommand(BDRControlCommand command) {
        Command cmd = new Command("Cognition:representation:set").addArg("BDRControlCommand", command.toByteArray());
        Plugin.commandExecutor.executeCommand(new ObjectListener<byte[]>() {
            @Override
            public void newObjectReceived(byte[] object) {
                System.out.println(new String(object));
            }

            @Override
            public void errorOccured(String cause) {
                System.err.println(cause);
            }
        }, cmd);
    }

    private class CommandSender
    {
        private final DatagramChannel channel;
        private final InetSocketAddress targetAddress;
        
        public CommandSender(InetSocketAddress targetAddress)  throws IOException {
            this.channel = DatagramChannel.open();
            this.targetAddress = targetAddress;
        }
        
        public String getAddress() {
            return targetAddress.toString();
        }
        
        public void send(BDRControlCommand command) 
        {
            try {
                ByteBuffer buffer = ByteBuffer.wrap(command.toByteArray());
                this.channel.send(buffer, targetAddress);
                
            } catch (IOException ex) {
                ex.printStackTrace(System.err);
            }
        }
    }
    
    public class Sender {
        private final DatagramChannel channel;

        public Sender() throws IOException {
            this.channel = DatagramChannel.open();
            this.channel.configureBlocking(true);
        }
        
        void send(Representations.RemoteControlCommand rcc, InetSocketAddress address) throws IOException {
            ByteBuffer buffer = ByteBuffer.wrap(rcc.toByteArray());
            this.channel.send(buffer, new InetSocketAddress(InetAddress.getByName("10.0.4.85"), 10401));
        }
    }
    
    
    private void updateRoboPanel() {
        {
            this.robotPanel.removeAll();

            for (Map.Entry<String, RemoteRobotPanel> msgEntry : robotsMap.entrySet()) 
            {
                addPanel(msgEntry.getValue());
            }
            this.robotPanel.repaint();
        }
    }
    
    private void addPanel(RemoteRobotPanel robotStatus) {
        if(!filterTeam.isSelected() || teamSelectionBox.getSelectedIndex() == robotStatus.getMessage().teamNum)
        {
            robotPanel.add(robotStatus);
            robotPanel.repaint();
        }
    }

    private class TeamCommListenTask extends TimerTask {

        @Override
        public void run() {
            synchronized (messageMap) {
                if (messageMap.isEmpty()) {
                    return;
                }

                
                
                for (Map.Entry<String, TeamCommMessage> msgEntry : messageMap.entrySet()) 
                {
                    final String address = msgEntry.getKey();
                    final TeamCommMessage msg = msgEntry.getValue();
                    
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            RemoteRobotPanel robotStatus = robotsMap.get(address);
                            if (robotStatus == null) {
                                robotStatus = new RemoteRobotPanel(Plugin.parent.getMessageServer(), address, msg.message);
                                robotsMap.put(address, robotStatus);
                                addPanel(robotStatus);
                            }
                            // update
                            robotStatus.setStatus(msg.timestamp, msg.message);
                        }
                    });
                }
            } // end synchronized
        } // end run
    }

    public class TeamCommListener implements Runnable {
        private DatagramChannel channel;
        private Thread trigger;

        private final ByteBuffer readBuffer;

        public TeamCommListener() {
            this.readBuffer = ByteBuffer.allocateDirect(SPLMessage.size());
            this.readBuffer.order(ByteOrder.LITTLE_ENDIAN);
        }

        boolean isConnected() {
            return this.channel != null && this.trigger != null;
        }

        public void connect(int port) throws IOException, InterruptedException {
            disconnect();

            this.channel = DatagramChannel.open();
            this.channel.configureBlocking(true);
            this.channel.bind(new InetSocketAddress(InetAddress.getByName("0.0.0.0"), port));

            this.trigger = new Thread(this);
            this.trigger.start();
        }

        public void disconnect() throws IOException, InterruptedException {
            if (this.channel != null) {
                this.channel.close();
                this.channel = null;
            }
            if (this.trigger != null) {
                this.trigger.join();
                this.trigger = null;
            }
        }

        @Override
        public void run() {
            try {
                while (true) {
                    this.readBuffer.clear();
                    SocketAddress address = this.channel.receive(this.readBuffer);
                    this.readBuffer.flip();

                    try {
                        long timestamp = System.currentTimeMillis();
                        SPLMessage spl_msg = SPLMessage.parseFrom(this.readBuffer);
                        TeamCommMessage tc_msg = new TeamCommMessage(timestamp, spl_msg);
                        
                        if (address instanceof InetSocketAddress) {
                            messageMap.put(((InetSocketAddress) address).getHostString(), tc_msg);
                        }

                    } catch (Exception ex) {
                        Logger.getLogger(TeamCommViewer.class.getName()).log(Level.INFO, null, ex);
                    }

                }
            } catch (AsynchronousCloseException ex) {
                /* socket was closed, that's fine */
            } catch (SocketException ex) {
                Logger.getLogger(TeamCommViewer.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(TeamCommViewer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//end class TeamCommListener

    public class TeamCommMessage {

        public TeamCommMessage(long timestamp, SPLMessage message) {
            this.timestamp = timestamp;
            this.message = message;
        }

        public final long timestamp;
        public final SPLMessage message;
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton bt_autonomois;
    private javax.swing.JToggleButton bt_stop;
    private javax.swing.JToggleButton bt_wartung;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JToggleButton filterTeam;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JPanel robotPanel;
    private javax.swing.JComboBox teamSelectionBox;
    // End of variables declaration//GEN-END:variables
}
