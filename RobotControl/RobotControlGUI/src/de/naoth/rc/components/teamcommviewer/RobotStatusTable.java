
package de.naoth.rc.components.teamcommviewer;

import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.DefaultRowSorter;
import javax.swing.JButton;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;

/**
 * @author Philipp Strobel <philippstrobel@posteo.de>
 */
public class RobotStatusTable extends javax.swing.JPanel {
    
    /**
     * Creates new form RobotStatusTable
     */
    public RobotStatusTable() {
        initComponents();
        table.getColumnModel().getColumn(0).setCellRenderer(new CellRenderer());
        // msg/s
        table.getColumnModel().getColumn(3).setCellRenderer(new PingRenderer());
        // Temperature
        table.getColumnModel().getColumn(6).setCellRenderer(new TemperatureRenderer());
        // Battery
        table.getColumnModel().getColumn(7).setCellRenderer(new BatteryRenderer());
        // connect button
        table.getColumnModel().getColumn(8).setCellRenderer(new ButtonRenderer());
        // sets the mouse listener for the button column (connect button)
        table.addMouseListener(new JTableButtonMouseListener(table));
        // sort via Ip (default)
        table.getRowSorter().toggleSortOrder(2);
        // set button column non-sortable
        ((DefaultRowSorter)table.getRowSorter()).setSortable(8, false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        table.setAutoCreateRowSorter(true);
        table.setModel(new RobotTableModel());
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        table.setRowSelectionAllowed(false);
        scrollPane.setViewportView(table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private class RobotTableModel extends AbstractTableModel implements RobotStatusListener {
        private final ArrayList<RobotStatus> robots = new ArrayList<>();
        
        public void addRobot(RobotStatus robot) {
            robots.add(robot);
            robot.addListener(this);
            this.fireTableDataChanged();
        }
        
        public RobotStatus getRobot(int rowIndex) {
            return robots.get(rowIndex);
        }
        
        public void removeAll() {
            robots.clear();
            this.fireTableDataChanged();
        }
        
        @Override
        public int getRowCount() {
            return robots.size();
        }

        @Override
        public int getColumnCount() {
            return 9;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            RobotStatus robot = robots.get(rowIndex);
            switch(columnIndex) {
                case 0: return robot.teamNum;
                case 1: return robot.playerNum;
                case 2: return robot.ipAddress;
                case 3: return robot.msgPerSecond;
                case 4: return robot.ballAge;
                case 5: return robot.isDead?"DEAD":(robot.fallen==1?"FALLEN":"NOT FALLEN");
                case 6: return robot.temperature;
                case 7: return robot.batteryCharge;
                case 8: return robot;
                default: return null;
            }
        }

        @Override
        public String getColumnName(int column) {
            switch(column) {
                case 0: return "#TN";
                case 1: return "#PN";
                case 2: return "IP";
                case 3: return "msg/s";
                case 4: return "BallAge (s)";
                case 5: return "State";
                case 6: return "Temperature";
                case 7: return "Battery";
                case 8: return "";
                default: return null;
            }
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            switch(columnIndex) {
                case 0: return Byte.class;
                case 1: return Byte.class;
                case 6: return Float.class;
                case 7: return Float.class;
                case 8: return RobotStatus.class;
            }
            return Object.class;
        }

        @Override
        public void statusChanged() {
            fireTableDataChanged();
        }
    }
    
    /**
     * Adds a robot to the table.
     * @param robot 
     */
    public void addRobot(RobotStatus robot) {
        ((RobotTableModel)this.table.getModel()).addRobot(robot);
    }
    
    /**
     * Removes all robots from the table.
     */
    public void removeAll() {
        ((RobotTableModel)this.table.getModel()).removeAll();
    }
    
    /**
     * Renders the table cell with the background color of the robot.
     */
    private class CellRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            this.setBackground(((RobotTableModel)table.getModel()).getRobot(row).robotColor);
            return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        }
    }
    
    /**
     * Renders the table cell for the battery value.
     */
    private class BatteryRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            double bat = ((float) value)/100.0;
            /*
            // value-based color
            Color c2 = RobotStatus.COLOR_INFO;
            Color c1 = RobotStatus.COLOR_DANGER;
            int red = (int) (c2.getRed() * bat + c1.getRed() * (1 - bat));
            int green = (int) (c2.getGreen() * bat + c1.getGreen() * (1 - bat));
            int blue = (int) (c2.getBlue() * bat + c1.getBlue() * (1 - bat));
            this.setBackground(new Color(red, green, blue));
            */
            if (bat <= 0.3) {
                this.setBackground(RobotStatus.COLOR_DANGER);
            } else if (bat <= 0.6) {
                this.setBackground(RobotStatus.COLOR_WARNING);
            } else {
                this.setBackground(RobotStatus.COLOR_INFO);
            }
            
            return super.getTableCellRendererComponent(table, bat == -1 ? "?" : String.format("%3.1f%%", value), isSelected, hasFocus, row, column);
        }
    }
    
    /**
     * Renders the table cell for the temperature value.
     */
    private class TemperatureRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            float temp = (float) value;
            // 60 °C
            if (temp >= 60.0) {
                this.setBackground(RobotStatus.COLOR_WARNING);
            }
            // 75 °C
            if (temp >= 75.0) {
                this.setBackground(RobotStatus.COLOR_DANGER);
            }

            return super.getTableCellRendererComponent(table, temp == -1 ? "?" : String.format(" %3.1f °C", value), isSelected, hasFocus, row, column);
        }
    }
    
    /**
     * Renders the table cell for the msg/s value.
     */
    private class PingRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            return super.getTableCellRendererComponent(table, String.format("%4.2f", value), isSelected, hasFocus, row, column);
        }
    }
    
    /**
     * Renders the table cell for the connect button.
     */
    class ButtonRenderer extends JButton implements TableCellRenderer {
        
        public ButtonRenderer() {
            setOpaque(true);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setEnabled(!((RobotStatus)value).isConnected);
            setText("Connect" + (!((RobotStatus)value).isConnected?"":"ed"));
            return this;
        }
    }
    
    /**
     * Implements a simple mouse/button listener for the connect button.
     */
    private static class JTableButtonMouseListener extends MouseAdapter {
		private final JTable table;
		
		public JTableButtonMouseListener(JTable table) {
			this.table = table;
		}

		public void mouseClicked(MouseEvent e) {
			int column = table.getColumnModel().getColumnIndexAtX(e.getX());
			int row    = e.getY()/table.getRowHeight(); 

			if (row < table.getRowCount() && row >= 0 && column < table.getColumnCount() && column >= 0) {
                // only for column 8 (connect button) and if it's enabled
			    if (column == 8 && ((ButtonRenderer)table.getCellRenderer(row, column)).isEnabled()) {
                    // let RobotStatus connect to robot (MessageServer)
                    ((RobotStatus)table.getValueAt(row, column)).connect();
			    }
			}
		}
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
