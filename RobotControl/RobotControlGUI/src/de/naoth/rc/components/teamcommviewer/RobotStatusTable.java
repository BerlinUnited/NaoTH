/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.naoth.rc.components.teamcommviewer;

import de.naoth.rc.components.RobotStatus;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.LinearGradientPaint;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Vector;
import javax.swing.DefaultRowSorter;
import javax.swing.JButton;
import javax.swing.JTable;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author Philipp Strobel <philippstrobel@posteo.de>
 */
public class RobotStatusTable extends javax.swing.JPanel {

    /**
     * Creates new form RobotStatusTable
     */
    public RobotStatusTable() {
        initComponents();
        
        // msg/s
        table.getColumnModel().getColumn(3).setCellRenderer(new PingRenderer());
        // Temperature
        table.getColumnModel().getColumn(6).setCellRenderer(new TemperatureRenderer());
        // Battery
        table.getColumnModel().getColumn(7).setCellRenderer(new BatteryRenderer());
        // connect button
        table.getColumnModel().getColumn(8).setCellRenderer(new ButtonRenderer());
        // sort via Ip
        table.getRowSorter().toggleSortOrder(2);
        // set button column non-sortable
        ((DefaultRowSorter)table.getRowSorter()).setSortable(8, false);
        // sets the mouse listener for the button column (connect button)
        table.addMouseListener(new JTableButtonMouseListener(table));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        table.setAutoCreateRowSorter(true);
        table.setModel(new RobotTableModel());
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        table.setRowSelectionAllowed(false);
        scrollPane.setViewportView(table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private class RobotTableModel extends AbstractTableModel {
        private final Vector<RobotStatus> robots = new Vector();
        
        public void addRobot(RobotStatus robot) {
            robots.add(robot);
            robot.getConnectButton().addChangeListener(new ChangeListener() {
                @Override
                public void stateChanged(ChangeEvent e) {
                    dataChanged();
                    //((JButton)e.getSource()).isEnabled()
                }
            });
            this.fireTableDataChanged();
        }
        
        public void removeAll() {
            robots.clear();
            this.fireTableDataChanged();
        }
        
        @Override
        public int getRowCount() {
            return robots.size();
        }

        @Override
        public int getColumnCount() {
            return 9;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            RobotStatus robot = robots.get(rowIndex);
            switch(columnIndex) {
                case 0: return robot.teamNum;
                case 1: return robot.playerNum;
                case 2: return robot.getIpAdress();
                case 3: return robot.msgPerSecond;
                case 4: return robot.ballAge;
                case 5: return robot.isDead?"DEAD":(robot.fallen==1?"FALLEN":"NOT FALLEN");
                case 6: return robot.temperature;
                case 7: return robot.batteryCharge;
                case 8: return robot;
                default: return null;
            }
        }

        @Override
        public String getColumnName(int column) {
            switch(column) {
                case 0: return "#TN";
                case 1: return "#PN";
                case 2: return "IP";
                case 3: return "msg/s";
                case 4: return "BallAge (s)";
                case 5: return "State";
                case 6: return "Temperature";
                case 7: return "Battery";
                case 8: return "";
                default: return null;
            }
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            return Object.class;
        }
    }
    
    /**
     * Adds a robot to the table.
     * @param robot 
     */
    public void addRobot(RobotStatus robot) {
        ((RobotTableModel)this.table.getModel()).addRobot(robot);
    }
    
    /**
     * Removes all robots from the table.
     */
    public void removeAll() {
        ((RobotTableModel)this.table.getModel()).removeAll();
    }
    
    /**
     * Triggers the update of the table view (ui).
     */
    public void dataChanged() {
        ((RobotTableModel)this.table.getModel()).fireTableDataChanged();
    }
    
    /**
     * Renders the table cell for the battery value.
     */
    private class BatteryRenderer extends DefaultTableCellRenderer {

        private final Color colorInfo = new Color(0.0f, 1.0f, 0.0f, 0.5f);
        private final Color colorInfoBlue = new Color(0.1f, 0.0f, 1.0f, 0.5f);
        private final Color colorWarning = new Color(1.0f, 1.0f, 0.0f, 0.5f);
        private final Color colorDanger = new Color(1.0f, 0.0f, 0.0f, 0.5f);

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            float bat = (float) value;
            if (bat <= 30.0) {
                this.setBackground(colorDanger);
            } else if (bat <= 60.0) {
                this.setBackground(colorWarning);
            } else {
                this.setBackground(colorInfo);
            }

            return super.getTableCellRendererComponent(table, bat == -1 ? "?" : String.format("%3.1f%%", value), isSelected, hasFocus, row, column);
        }
        /*
        
        private final float[] dist = {0.0f, 1.0f};
        private final Color[] colors = {Color.red, Color.green};
        
        @Override
        protected void paintComponent(Graphics g) {
            Graphics2D g2d = (Graphics2D) g;
            float x = Float.parseFloat(getText());
            if (x == -1) {
                this.setOpaque(true);
                this.setText("?");
            } else {
                LinearGradientPaint gp = new LinearGradientPaint(0, 0, getWidth(), getHeight(), dist, colors);
                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2d.setPaint(gp);
                g2d.fillRect(0, 0, (int) (getWidth() * x / 100.0), getHeight());
                this.setOpaque(false);
                this.setText(String.format("%3.1f%%", x));
            }
            super.paintComponent(g2d);
        }*/
    }
    
    /**
     * Renders the table cell for the temperature value.
     */
    private class TemperatureRenderer extends DefaultTableCellRenderer {

        private final Color darkOrange = new Color(255, 130, 0);

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            float temp = (float) value;
            // 60 °C
            if (temp >= 60.0) {
                this.setBackground(darkOrange);
            }
            // 75 °C
            if (temp >= 75.0) {
                this.setBackground(Color.red);
            }

            return super.getTableCellRendererComponent(table, temp == -1 ? "?" : String.format(" %3.1f °C", value), isSelected, hasFocus, row, column);
        }
    }
    
    /**
     * Renders the table cell for the msg/s value.
     */
    private class PingRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            return super.getTableCellRendererComponent(table, String.format("%4.2f", value), isSelected, hasFocus, row, column);
        }
    }
    
    /**
     * Renders the table cell for the connect button.
     */
    class ButtonRenderer extends JButton implements TableCellRenderer {
        
        public ButtonRenderer() {
            setOpaque(true);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setEnabled(((RobotStatus)value).getConnectButton().isEnabled());
            setText("Connect");
            return this;
        }
    }
    
    /**
     * Implements a simple mouse/button listener for the connect button.
     */
    private static class JTableButtonMouseListener extends MouseAdapter {
		private final JTable table;
		
		public JTableButtonMouseListener(JTable table) {
			this.table = table;
		}

		public void mouseClicked(MouseEvent e) {
			int column = table.getColumnModel().getColumnIndexAtX(e.getX());
			int row    = e.getY()/table.getRowHeight(); 

			if (row < table.getRowCount() && row >= 0 && column < table.getColumnCount() && column >= 0) {
                // only for column 8 (connect button) and if it's enabled
			    if (column == 8 && ((ButtonRenderer)table.getCellRenderer(row, column)).isEnabled()) {
                    RobotStatus robot = (RobotStatus)table.getValueAt(row, column);
                    robot.getConnectButton().doClick();
			    }
			}
		}
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
