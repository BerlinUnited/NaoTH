/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * HelpDialog.java
 *
 * Created on 21.09.2009, 14:51:01
 */

package de.naoth.rc;

import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.application.Platform;
import javafx.beans.value.ObservableValue;
import javafx.concurrent.Worker;
import javafx.embed.swing.JFXPanel;
import javafx.scene.Scene;
import javafx.scene.text.FontSmoothingType;
import javafx.scene.web.WebView;
import javax.swing.JComponent;
import javax.swing.KeyStroke;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.w3c.dom.events.Event;
import org.w3c.dom.events.EventListener;
import org.w3c.dom.events.EventTarget;

/**
 * @author Philipp Strobel <philippstrobel@posteo.de>
 */
public class HelpDialog extends javax.swing.JDialog
{
    private WebView webView;
    
    /** Creates new form HelpDialog */
    HelpDialog(Frame parent) {
        super(parent);
        
        Dimension defaultSize = new Dimension(400,300);
        this.setPreferredSize(defaultSize);
        this.setSize(defaultSize);
        this.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        this.setTitle("Help");
        this.setModal(false);
        this.setAlwaysOnTop(true);
        this.setVisible(false);
        
        JFXPanel jfxPanel = new JFXPanel();
        this.add(jfxPanel);

        // Creation of scene and future interactions with JFXPanel should take place on the JavaFX Application Thread
        Platform.runLater(() -> {
            webView = new WebView();
            webView.setFontSmoothingType(FontSmoothingType.LCD);
            webView.setContextMenuEnabled(false);
            jfxPanel.setScene(new Scene(webView));
        });
        
        this.getRootPane().registerKeyboardAction(
            (e) -> { setVisible(false); },
            KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),
            JComponent.WHEN_IN_FOCUSED_WINDOW
        );
    }

    public void showHelp(String name)
    {
        java.net.URL res = getClass().getResource("/de/naoth/rc/dialogs/help/" + (name == null ? "index" : name) + ".html");

        Platform.runLater(() -> {
            if(res == null) {
                webView.getEngine().loadContent("For this dialog is no help avaliable.");
            } else {
                webView.getEngine().load(res.toExternalForm());
                // default event handler ("click") for all "a" tags
                EventListener listener = (Event ev) -> {
                    String href = ((Element)ev.getTarget()).getAttribute("href");
                    // open url in system browser
                    if(Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
                        // NOTE: on linux there's java bug, which leads to a crash/freeze of RC in Java 8!
                        // bug: https://bugs.openjdk.java.net/browse/JDK-8184155
                        // solution: https://stackoverflow.com/questions/23176624/javafx-freeze-on-desktop-openfile-desktop-browseuri
                        new Thread(() -> {
                               try {
                                   Desktop.getDesktop().browse(new URI(href));
                               } catch (IOException | URISyntaxException ex) {
                                   Logger.getLogger(HelpDialog.class.getName()).log(Level.SEVERE, null, ex);
                               }
                           }).start();
                    }
                    // stop executing "link click"
                    ev.preventDefault();
                };
                // listen to document events
                webView.getEngine().getLoadWorker().stateProperty().addListener((ObservableValue<? extends Worker.State> ov, Worker.State t, Worker.State t1) -> {
                    // register listener to all "a" tags
                    Document doc = webView.getEngine().getDocument();
                    if(doc != null) {
                        NodeList l = doc.getElementsByTagName("a");
                        for (int i = 0; i < l.getLength(); i++) {
                            ((EventTarget) l.item(i)).addEventListener("click", listener, false);
                        }
                    }
                });
            }
            
            this.setVisible(true);
            this.requestFocus();
        });
    }//end show

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
