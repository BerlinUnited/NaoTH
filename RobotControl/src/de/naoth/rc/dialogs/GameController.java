package de.naoth.rc.dialogs;

import de.naoth.rc.core.dialog.AbstractDialog;
import de.naoth.rc.core.dialog.DialogPlugin;
import de.naoth.rc.components.gamecontroller.GameControllerManager;
import net.xeoh.plugins.base.annotations.PluginImplementation;
import net.xeoh.plugins.base.annotations.injections.InjectPlugin;
import de.naoth.rc.components.gamecontroller.GameControllerEventListener;
import de.naoth.rc.components.gamecontroller.event.GameControllerConnectionEvent;
import de.naoth.rc.components.gamecontroller.event.GameControllerDataEvent;
import de.naoth.rc.core.dialog.RCDialog;

/**
 * @author Philipp Strobel <philippstrobel@posteo.de>
 * NOTE: if this dialog is no longer required, it can be removed; the statubar plugin has all functionality.
 */
public class GameController extends AbstractDialog implements GameControllerEventListener
{
    @RCDialog(category = RCDialog.Category.Tools, name = "GameControllerMonitor")
    @PluginImplementation
    public static class Plugin extends DialogPlugin<GameController> {
        @InjectPlugin
        public static GameControllerManager gamecontroller;
    }//end Plugin

    /**
     * Creates new form GameController
     */
    public GameController() {
        initComponents();
        
        Plugin.gamecontroller.addGameListener(this);
    }

    @Override
    public void dispose() {
        Plugin.gamecontroller.removeGameListener(this);
    }

    @Override
    public void connectionChanged(GameControllerConnectionEvent e) {
        if(e.state == GameControllerConnectionEvent.State.DISCONNECTED) {
            taMessages.setText("--- GameController disconnected! ---");
        } if(e.state == GameControllerConnectionEvent.State.TIMEOUT) {
            taMessages.append("--- GameController timeout! ---\n");
        }
    }

    @Override
    public void newGameData(GameControllerDataEvent e) {
        taMessages.setText(e.data.toString());
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        taMessages = new javax.swing.JTextArea();

        taMessages.setEditable(false);
        taMessages.setColumns(20);
        taMessages.setRows(5);
        jScrollPane1.setViewportView(taMessages);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea taMessages;
    // End of variables declaration//GEN-END:variables
}
