package de.naoth.rc.components.preferences;

import de.naoth.rc.Helper;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.util.List;
import java.util.Properties;
import java.util.stream.Collectors;
import javax.swing.Box;
import javax.swing.JComponent;
import javax.swing.KeyStroke;

/**
 *
 * @author Philipp Strobel <philippstrobel@posteo.de>
 */
public class PreferencesDialog extends javax.swing.JDialog
{
    private final Properties rcConfig;

    /**
     * Creates new form PreferencesWindow
     * @param parent
     */
    public PreferencesDialog(java.awt.Frame parent, Properties config) {
        super(parent);
        initComponents();
        
        this.rcConfig = config;
        createConfigFields();
        
        this.getRootPane().registerKeyboardAction(
            (e) -> { setVisible(false); }, 
            KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), 
            JComponent.WHEN_IN_FOCUSED_WINDOW
        );
    }
    
    private void createConfigFields() {
        // gap between preference fields
        java.awt.Dimension componentGap = new java.awt.Dimension(0, 10);
        // only make specific value configurable
        PreferencesJar jar_scp = new PreferencesJar("NaoSCP", rcConfig.getProperty("NaoSCP", ""));
        jar_scp.setAlignmentX(LEFT_ALIGNMENT);
        prefPanel.add(jar_scp);
        prefPanel.add(new javax.swing.Box.Filler(componentGap,componentGap,componentGap));

        PreferencesJar jar_viz = new PreferencesJar("RoboViz", rcConfig.getProperty("RoboViz", ""));
        jar_viz.setAlignmentX(LEFT_ALIGNMENT);
        prefPanel.add(jar_viz);
        prefPanel.add(new javax.swing.Box.Filler(componentGap,componentGap,componentGap));

        PreferencesJar jar_gc = new PreferencesJar("GameController", rcConfig.getProperty("GameController", ""));
        jar_gc.setAlignmentX(LEFT_ALIGNMENT);
        prefPanel.add(jar_gc);
        prefPanel.add(new javax.swing.Box.Filler(componentGap,componentGap,componentGap));

        PreferencesCheckbox checkbox = new PreferencesCheckbox();
        checkbox.setText("Use the RC HighDPI feature?");
        checkbox.setName("useHiDPI");
        checkbox.setSelected(Boolean.valueOf(rcConfig.getProperty("useHiDPI", "false")));
        checkbox.setAlignmentX(LEFT_ALIGNMENT);
        prefPanel.add(checkbox);
        prefPanel.add(new javax.swing.Box.Filler(componentGap,componentGap,componentGap));

        PreferencesSpinner font = new PreferencesSpinner("Font Size", Integer.parseInt(rcConfig.getProperty("fontSize", "12")));
        font.setName("fontSize");
        font.setAlignmentX(LEFT_ALIGNMENT);
        prefPanel.add(font);
        prefPanel.add(new javax.swing.Box.Filler(componentGap,componentGap,componentGap));

        // retrieve all available FX themes
        List<String> themes = Helper.getFiles("/de/naoth/rc/res/themes/", (p) -> { return p.toString().endsWith(".css"); }).stream().map((p) -> {
            String f = p.getFileName().toString();
            return f.substring(0, f.length()-4);
        }).collect(Collectors.toList());
        themes.add(0, "");

        PreferencesComboBox combo = new PreferencesComboBox("FX Theme", themes, rcConfig.getProperty("theme", ""));
        combo.setName("theme");
        combo.setAlignmentX(LEFT_ALIGNMENT);
        prefPanel.add(combo);
        prefPanel.add(new javax.swing.Box.Filler(componentGap,componentGap,componentGap));

        // resize dialog
        pack();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        prefPanel = new javax.swing.JPanel();
        btnPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setTitle("Preferences");
        setModal(true);
        setResizable(false);

        prefPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        prefPanel.setLayout(new javax.swing.BoxLayout(prefPanel, javax.swing.BoxLayout.Y_AXIS));
        getContentPane().add(prefPanel, java.awt.BorderLayout.CENTER);

        btnPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        btnPanel.setFocusable(false);
        btnPanel.setLayout(new javax.swing.BoxLayout(btnPanel, javax.swing.BoxLayout.LINE_AXIS));
        btnPanel.add(Box.createHorizontalGlue());

        jLabel1.setFont(new java.awt.Font("Dialog", 2, 10)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Changes are applied after a restart!");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnPanel.add(jLabel1);
        btnPanel.add(filler1);

        btnOk.setText("Ok");
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });
        btnPanel.add(btnOk);

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        btnPanel.add(btnCancel);

        getContentPane().add(btnPanel, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        // save changes
        for (Component component : prefPanel.getComponents()) {
            if(component instanceof PreferencesField) {
                PreferencesField field = (PreferencesField) component;
                rcConfig.setProperty(field.getPreferenceName(), field.getPreferenceValue());
            }
        }
        setVisible(false);
    }//GEN-LAST:event_btnOkActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // discard changes
        for (Component component : prefPanel.getComponents()) {
            if(component instanceof PreferencesField) {
                PreferencesField field = (PreferencesField) component;
                field.setPreferenceValue(rcConfig.getProperty(field.getPreferenceName()));
            }
        }
        setVisible(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOk;
    private javax.swing.JPanel btnPanel;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel prefPanel;
    // End of variables declaration//GEN-END:variables
}
