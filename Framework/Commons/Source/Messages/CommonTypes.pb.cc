// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonTypes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CommonTypes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace naothmessages {
class FloatVector2DefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FloatVector2>
     _instance;
} _FloatVector2_default_instance_;
class DoubleVector2DefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DoubleVector2>
     _instance;
} _DoubleVector2_default_instance_;
class IntVector2DefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IntVector2>
     _instance;
} _IntVector2_default_instance_;
class Pose2DDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Pose2D>
     _instance;
} _Pose2D_default_instance_;
class DoubleVector3DefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DoubleVector3>
     _instance;
} _DoubleVector3_default_instance_;
class DoubleVectorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DoubleVector>
     _instance;
} _DoubleVector_default_instance_;
class Pose3DDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Pose3D>
     _instance;
} _Pose3D_default_instance_;
class LineSegmentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LineSegment>
     _instance;
} _LineSegment_default_instance_;

namespace protobuf_CommonTypes_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatVector2, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatVector2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatVector2, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatVector2, y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleVector2, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleVector2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleVector2, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleVector2, y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntVector2, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntVector2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntVector2, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntVector2, y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose2D, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose2D, translation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose2D, rotation_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleVector3, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleVector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleVector3, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleVector3, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleVector3, z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleVector, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleVector, v_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose3D, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose3D, translation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose3D, rotation_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSegment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSegment, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSegment, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSegment, length_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(FloatVector2)},
  { 9, 16, sizeof(DoubleVector2)},
  { 18, 25, sizeof(IntVector2)},
  { 27, 34, sizeof(Pose2D)},
  { 36, 44, sizeof(DoubleVector3)},
  { 47, 53, sizeof(DoubleVector)},
  { 54, 61, sizeof(Pose3D)},
  { 63, 71, sizeof(LineSegment)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_FloatVector2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DoubleVector2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IntVector2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Pose2D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DoubleVector3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DoubleVector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Pose3D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LineSegment_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "CommonTypes.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _FloatVector2_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FloatVector2_default_instance_);_DoubleVector2_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DoubleVector2_default_instance_);_IntVector2_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IntVector2_default_instance_);_Pose2D_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Pose2D_default_instance_);_DoubleVector3_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DoubleVector3_default_instance_);_DoubleVector_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DoubleVector_default_instance_);_Pose3D_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Pose3D_default_instance_);_LineSegment_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LineSegment_default_instance_);_Pose2D_default_instance_._instance.get_mutable()->translation_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _Pose3D_default_instance_._instance.get_mutable()->translation_ = const_cast< ::naothmessages::DoubleVector3*>(
      ::naothmessages::DoubleVector3::internal_default_instance());
  _LineSegment_default_instance_._instance.get_mutable()->base_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _LineSegment_default_instance_._instance.get_mutable()->direction_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021CommonTypes.proto\022\rnaothmessages\"$\n\014Fl"
      "oatVector2\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"%\n\rDoub"
      "leVector2\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\"\"\n\nIntVe"
      "ctor2\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\"M\n\006Pose2D\0221\n"
      "\013translation\030\001 \002(\0132\034.naothmessages.Doubl"
      "eVector2\022\020\n\010rotation\030\002 \002(\001\"0\n\rDoubleVect"
      "or3\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\t\n\001z\030\003 \002(\001\"\031\n\014"
      "DoubleVector\022\t\n\001v\030\001 \003(\001\"k\n\006Pose3D\0221\n\013tra"
      "nslation\030\001 \002(\0132\034.naothmessages.DoubleVec"
      "tor3\022.\n\010rotation\030\002 \003(\0132\034.naothmessages.D"
      "oubleVector3\"z\n\013LineSegment\022*\n\004base\030\001 \002("
      "\0132\034.naothmessages.DoubleVector2\022/\n\tdirec"
      "tion\030\002 \002(\0132\034.naothmessages.DoubleVector2"
      "\022\016\n\006length\030\003 \002(\001*\220\001\n\005Color\022\010\n\004none\020\000\022\n\n\006"
      "orange\020\001\022\n\n\006yellow\020\002\022\013\n\007skyblue\020\003\022\t\n\005whi"
      "te\020\004\022\007\n\003red\020\005\022\010\n\004blue\020\006\022\t\n\005green\020\007\022\t\n\005bl"
      "ack\020\010\022\010\n\004pink\020\t\022\010\n\004gray\020\n\022\020\n\014yellowOrang"
      "e\020\013*\037\n\010CameraID\022\007\n\003top\020\000\022\n\n\006bottom\020\001*\245\003\n"
      "\007JointID\022\r\n\tHeadPitch\020\000\022\013\n\007HeadYaw\020\001\022\021\n\r"
      "RShoulderRoll\020\002\022\021\n\rLShoulderRoll\020\003\022\022\n\016RS"
      "houlderPitch\020\004\022\022\n\016LShoulderPitch\020\005\022\016\n\nRE"
      "lbowRoll\020\006\022\016\n\nLElbowRoll\020\007\022\r\n\tRElbowYaw\020"
      "\010\022\r\n\tLElbowYaw\020\t\022\020\n\014RHipYawPitch\020\n\022\020\n\014LH"
      "ipYawPitch\020\013\022\r\n\tRHipPitch\020\014\022\r\n\tLHipPitch"
      "\020\r\022\014\n\010RHipRoll\020\016\022\014\n\010LHipRoll\020\017\022\016\n\nRKneeP"
      "itch\020\020\022\016\n\nLKneePitch\020\021\022\017\n\013RAnklePitch\020\022\022"
      "\017\n\013LAnklePitch\020\023\022\016\n\nRAnkleRoll\020\024\022\016\n\nLAnk"
      "leRoll\020\025\022\r\n\tLWristYaw\020\026\022\r\n\tRWristYaw\020\027\022\t"
      "\n\005LHand\020\030\022\t\n\005RHand\020\031B\033\n\031de.naoth.rc.core"
      ".messages"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1169);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CommonTypes.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_CommonTypes_2eproto

const ::google::protobuf::EnumDescriptor* Color_descriptor() {
  protobuf_CommonTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonTypes_2eproto::file_level_enum_descriptors[0];
}
bool Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CameraID_descriptor() {
  protobuf_CommonTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonTypes_2eproto::file_level_enum_descriptors[1];
}
bool CameraID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JointID_descriptor() {
  protobuf_CommonTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonTypes_2eproto::file_level_enum_descriptors[2];
}
bool JointID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FloatVector2::kXFieldNumber;
const int FloatVector2::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FloatVector2::FloatVector2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommonTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.FloatVector2)
}
FloatVector2::FloatVector2(const FloatVector2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.FloatVector2)
}

void FloatVector2::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

FloatVector2::~FloatVector2() {
  // @@protoc_insertion_point(destructor:naothmessages.FloatVector2)
  SharedDtor();
}

void FloatVector2::SharedDtor() {
}

void FloatVector2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloatVector2::descriptor() {
  protobuf_CommonTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FloatVector2& FloatVector2::default_instance() {
  protobuf_CommonTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

FloatVector2* FloatVector2::New(::google::protobuf::Arena* arena) const {
  FloatVector2* n = new FloatVector2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FloatVector2::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.FloatVector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FloatVector2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.FloatVector2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.FloatVector2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.FloatVector2)
  return false;
#undef DO_
}

void FloatVector2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.FloatVector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.FloatVector2)
}

::google::protobuf::uint8* FloatVector2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.FloatVector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.FloatVector2)
  return target;
}

size_t FloatVector2::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:naothmessages.FloatVector2)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t FloatVector2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.FloatVector2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloatVector2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.FloatVector2)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatVector2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FloatVector2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.FloatVector2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.FloatVector2)
    MergeFrom(*source);
  }
}

void FloatVector2::MergeFrom(const FloatVector2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.FloatVector2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FloatVector2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.FloatVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatVector2::CopyFrom(const FloatVector2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.FloatVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatVector2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void FloatVector2::Swap(FloatVector2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FloatVector2::InternalSwap(FloatVector2* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FloatVector2::GetMetadata() const {
  protobuf_CommonTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FloatVector2

// required float x = 1;
bool FloatVector2::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FloatVector2::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void FloatVector2::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void FloatVector2::clear_x() {
  x_ = 0;
  clear_has_x();
}
float FloatVector2::x() const {
  // @@protoc_insertion_point(field_get:naothmessages.FloatVector2.x)
  return x_;
}
void FloatVector2::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.FloatVector2.x)
}

// required float y = 2;
bool FloatVector2::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FloatVector2::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void FloatVector2::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void FloatVector2::clear_y() {
  y_ = 0;
  clear_has_y();
}
float FloatVector2::y() const {
  // @@protoc_insertion_point(field_get:naothmessages.FloatVector2.y)
  return y_;
}
void FloatVector2::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.FloatVector2.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoubleVector2::kXFieldNumber;
const int DoubleVector2::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoubleVector2::DoubleVector2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommonTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.DoubleVector2)
}
DoubleVector2::DoubleVector2(const DoubleVector2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.DoubleVector2)
}

void DoubleVector2::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

DoubleVector2::~DoubleVector2() {
  // @@protoc_insertion_point(destructor:naothmessages.DoubleVector2)
  SharedDtor();
}

void DoubleVector2::SharedDtor() {
}

void DoubleVector2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoubleVector2::descriptor() {
  protobuf_CommonTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DoubleVector2& DoubleVector2::default_instance() {
  protobuf_CommonTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

DoubleVector2* DoubleVector2::New(::google::protobuf::Arena* arena) const {
  DoubleVector2* n = new DoubleVector2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DoubleVector2::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.DoubleVector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DoubleVector2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.DoubleVector2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.DoubleVector2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.DoubleVector2)
  return false;
#undef DO_
}

void DoubleVector2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.DoubleVector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.DoubleVector2)
}

::google::protobuf::uint8* DoubleVector2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.DoubleVector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.DoubleVector2)
  return target;
}

size_t DoubleVector2::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:naothmessages.DoubleVector2)
  size_t total_size = 0;

  if (has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t DoubleVector2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.DoubleVector2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoubleVector2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.DoubleVector2)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleVector2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DoubleVector2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.DoubleVector2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.DoubleVector2)
    MergeFrom(*source);
  }
}

void DoubleVector2::MergeFrom(const DoubleVector2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.DoubleVector2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DoubleVector2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.DoubleVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleVector2::CopyFrom(const DoubleVector2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.DoubleVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleVector2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DoubleVector2::Swap(DoubleVector2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoubleVector2::InternalSwap(DoubleVector2* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DoubleVector2::GetMetadata() const {
  protobuf_CommonTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DoubleVector2

// required double x = 1;
bool DoubleVector2::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DoubleVector2::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void DoubleVector2::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void DoubleVector2::clear_x() {
  x_ = 0;
  clear_has_x();
}
double DoubleVector2::x() const {
  // @@protoc_insertion_point(field_get:naothmessages.DoubleVector2.x)
  return x_;
}
void DoubleVector2::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.DoubleVector2.x)
}

// required double y = 2;
bool DoubleVector2::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DoubleVector2::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void DoubleVector2::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void DoubleVector2::clear_y() {
  y_ = 0;
  clear_has_y();
}
double DoubleVector2::y() const {
  // @@protoc_insertion_point(field_get:naothmessages.DoubleVector2.y)
  return y_;
}
void DoubleVector2::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.DoubleVector2.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntVector2::kXFieldNumber;
const int IntVector2::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntVector2::IntVector2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommonTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.IntVector2)
}
IntVector2::IntVector2(const IntVector2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.IntVector2)
}

void IntVector2::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

IntVector2::~IntVector2() {
  // @@protoc_insertion_point(destructor:naothmessages.IntVector2)
  SharedDtor();
}

void IntVector2::SharedDtor() {
}

void IntVector2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntVector2::descriptor() {
  protobuf_CommonTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IntVector2& IntVector2::default_instance() {
  protobuf_CommonTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

IntVector2* IntVector2::New(::google::protobuf::Arena* arena) const {
  IntVector2* n = new IntVector2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IntVector2::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.IntVector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IntVector2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.IntVector2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.IntVector2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.IntVector2)
  return false;
#undef DO_
}

void IntVector2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.IntVector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.IntVector2)
}

::google::protobuf::uint8* IntVector2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.IntVector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.IntVector2)
  return target;
}

size_t IntVector2::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:naothmessages.IntVector2)
  size_t total_size = 0;

  if (has_x()) {
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_y()) {
    // required int32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  return total_size;
}
size_t IntVector2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.IntVector2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntVector2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.IntVector2)
  GOOGLE_DCHECK_NE(&from, this);
  const IntVector2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IntVector2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.IntVector2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.IntVector2)
    MergeFrom(*source);
  }
}

void IntVector2::MergeFrom(const IntVector2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.IntVector2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IntVector2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.IntVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntVector2::CopyFrom(const IntVector2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.IntVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntVector2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void IntVector2::Swap(IntVector2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntVector2::InternalSwap(IntVector2* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IntVector2::GetMetadata() const {
  protobuf_CommonTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IntVector2

// required int32 x = 1;
bool IntVector2::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IntVector2::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void IntVector2::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void IntVector2::clear_x() {
  x_ = 0;
  clear_has_x();
}
::google::protobuf::int32 IntVector2::x() const {
  // @@protoc_insertion_point(field_get:naothmessages.IntVector2.x)
  return x_;
}
void IntVector2::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.IntVector2.x)
}

// required int32 y = 2;
bool IntVector2::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IntVector2::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void IntVector2::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void IntVector2::clear_y() {
  y_ = 0;
  clear_has_y();
}
::google::protobuf::int32 IntVector2::y() const {
  // @@protoc_insertion_point(field_get:naothmessages.IntVector2.y)
  return y_;
}
void IntVector2::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.IntVector2.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pose2D::kTranslationFieldNumber;
const int Pose2D::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pose2D::Pose2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommonTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.Pose2D)
}
Pose2D::Pose2D(const Pose2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_translation()) {
    translation_ = new ::naothmessages::DoubleVector2(*from.translation_);
  } else {
    translation_ = NULL;
  }
  rotation_ = from.rotation_;
  // @@protoc_insertion_point(copy_constructor:naothmessages.Pose2D)
}

void Pose2D::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&translation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&translation_)) + sizeof(rotation_));
}

Pose2D::~Pose2D() {
  // @@protoc_insertion_point(destructor:naothmessages.Pose2D)
  SharedDtor();
}

void Pose2D::SharedDtor() {
  if (this != internal_default_instance()) delete translation_;
}

void Pose2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pose2D::descriptor() {
  protobuf_CommonTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pose2D& Pose2D::default_instance() {
  protobuf_CommonTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

Pose2D* Pose2D::New(::google::protobuf::Arena* arena) const {
  Pose2D* n = new Pose2D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pose2D::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.Pose2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_translation()) {
    GOOGLE_DCHECK(translation_ != NULL);
    translation_->::naothmessages::DoubleVector2::Clear();
  }
  rotation_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Pose2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.Pose2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .naothmessages.DoubleVector2 translation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double rotation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_rotation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.Pose2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.Pose2D)
  return false;
#undef DO_
}

void Pose2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.Pose2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.DoubleVector2 translation = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->translation_, output);
  }

  // required double rotation = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->rotation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.Pose2D)
}

::google::protobuf::uint8* Pose2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.Pose2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.DoubleVector2 translation = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->translation_, deterministic, target);
  }

  // required double rotation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->rotation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.Pose2D)
  return target;
}

size_t Pose2D::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:naothmessages.Pose2D)
  size_t total_size = 0;

  if (has_translation()) {
    // required .naothmessages.DoubleVector2 translation = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->translation_);
  }

  if (has_rotation()) {
    // required double rotation = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Pose2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.Pose2D)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .naothmessages.DoubleVector2 translation = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->translation_);

    // required double rotation = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pose2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.Pose2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Pose2D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pose2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.Pose2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.Pose2D)
    MergeFrom(*source);
  }
}

void Pose2D::MergeFrom(const Pose2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.Pose2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_translation()->::naothmessages::DoubleVector2::MergeFrom(from.translation());
    }
    if (cached_has_bits & 0x00000002u) {
      rotation_ = from.rotation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Pose2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.Pose2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose2D::CopyFrom(const Pose2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.Pose2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose2D::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_translation()) {
    if (!this->translation_->IsInitialized()) return false;
  }
  return true;
}

void Pose2D::Swap(Pose2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pose2D::InternalSwap(Pose2D* other) {
  using std::swap;
  swap(translation_, other->translation_);
  swap(rotation_, other->rotation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pose2D::GetMetadata() const {
  protobuf_CommonTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pose2D

// required .naothmessages.DoubleVector2 translation = 1;
bool Pose2D::has_translation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Pose2D::set_has_translation() {
  _has_bits_[0] |= 0x00000001u;
}
void Pose2D::clear_has_translation() {
  _has_bits_[0] &= ~0x00000001u;
}
void Pose2D::clear_translation() {
  if (translation_ != NULL) translation_->::naothmessages::DoubleVector2::Clear();
  clear_has_translation();
}
const ::naothmessages::DoubleVector2& Pose2D::translation() const {
  const ::naothmessages::DoubleVector2* p = translation_;
  // @@protoc_insertion_point(field_get:naothmessages.Pose2D.translation)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* Pose2D::mutable_translation() {
  set_has_translation();
  if (translation_ == NULL) {
    translation_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.Pose2D.translation)
  return translation_;
}
::naothmessages::DoubleVector2* Pose2D::release_translation() {
  // @@protoc_insertion_point(field_release:naothmessages.Pose2D.translation)
  clear_has_translation();
  ::naothmessages::DoubleVector2* temp = translation_;
  translation_ = NULL;
  return temp;
}
void Pose2D::set_allocated_translation(::naothmessages::DoubleVector2* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    set_has_translation();
  } else {
    clear_has_translation();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.Pose2D.translation)
}

// required double rotation = 2;
bool Pose2D::has_rotation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Pose2D::set_has_rotation() {
  _has_bits_[0] |= 0x00000002u;
}
void Pose2D::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000002u;
}
void Pose2D::clear_rotation() {
  rotation_ = 0;
  clear_has_rotation();
}
double Pose2D::rotation() const {
  // @@protoc_insertion_point(field_get:naothmessages.Pose2D.rotation)
  return rotation_;
}
void Pose2D::set_rotation(double value) {
  set_has_rotation();
  rotation_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.Pose2D.rotation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoubleVector3::kXFieldNumber;
const int DoubleVector3::kYFieldNumber;
const int DoubleVector3::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoubleVector3::DoubleVector3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommonTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.DoubleVector3)
}
DoubleVector3::DoubleVector3(const DoubleVector3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.DoubleVector3)
}

void DoubleVector3::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

DoubleVector3::~DoubleVector3() {
  // @@protoc_insertion_point(destructor:naothmessages.DoubleVector3)
  SharedDtor();
}

void DoubleVector3::SharedDtor() {
}

void DoubleVector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoubleVector3::descriptor() {
  protobuf_CommonTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DoubleVector3& DoubleVector3::default_instance() {
  protobuf_CommonTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

DoubleVector3* DoubleVector3::New(::google::protobuf::Arena* arena) const {
  DoubleVector3* n = new DoubleVector3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DoubleVector3::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.DoubleVector3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DoubleVector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.DoubleVector3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.DoubleVector3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.DoubleVector3)
  return false;
#undef DO_
}

void DoubleVector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.DoubleVector3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required double z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.DoubleVector3)
}

::google::protobuf::uint8* DoubleVector3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.DoubleVector3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.DoubleVector3)
  return target;
}

size_t DoubleVector3::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:naothmessages.DoubleVector3)
  size_t total_size = 0;

  if (has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  if (has_z()) {
    // required double z = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t DoubleVector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.DoubleVector3)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

    // required double z = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoubleVector3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.DoubleVector3)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleVector3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DoubleVector3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.DoubleVector3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.DoubleVector3)
    MergeFrom(*source);
  }
}

void DoubleVector3::MergeFrom(const DoubleVector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.DoubleVector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DoubleVector3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.DoubleVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleVector3::CopyFrom(const DoubleVector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.DoubleVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleVector3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void DoubleVector3::Swap(DoubleVector3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoubleVector3::InternalSwap(DoubleVector3* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DoubleVector3::GetMetadata() const {
  protobuf_CommonTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DoubleVector3

// required double x = 1;
bool DoubleVector3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DoubleVector3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void DoubleVector3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void DoubleVector3::clear_x() {
  x_ = 0;
  clear_has_x();
}
double DoubleVector3::x() const {
  // @@protoc_insertion_point(field_get:naothmessages.DoubleVector3.x)
  return x_;
}
void DoubleVector3::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.DoubleVector3.x)
}

// required double y = 2;
bool DoubleVector3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DoubleVector3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void DoubleVector3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void DoubleVector3::clear_y() {
  y_ = 0;
  clear_has_y();
}
double DoubleVector3::y() const {
  // @@protoc_insertion_point(field_get:naothmessages.DoubleVector3.y)
  return y_;
}
void DoubleVector3::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.DoubleVector3.y)
}

// required double z = 3;
bool DoubleVector3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DoubleVector3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void DoubleVector3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void DoubleVector3::clear_z() {
  z_ = 0;
  clear_has_z();
}
double DoubleVector3::z() const {
  // @@protoc_insertion_point(field_get:naothmessages.DoubleVector3.z)
  return z_;
}
void DoubleVector3::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.DoubleVector3.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoubleVector::kVFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoubleVector::DoubleVector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommonTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.DoubleVector)
}
DoubleVector::DoubleVector(const DoubleVector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      v_(from.v_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:naothmessages.DoubleVector)
}

void DoubleVector::SharedCtor() {
  _cached_size_ = 0;
}

DoubleVector::~DoubleVector() {
  // @@protoc_insertion_point(destructor:naothmessages.DoubleVector)
  SharedDtor();
}

void DoubleVector::SharedDtor() {
}

void DoubleVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoubleVector::descriptor() {
  protobuf_CommonTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DoubleVector& DoubleVector::default_instance() {
  protobuf_CommonTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

DoubleVector* DoubleVector::New(::google::protobuf::Arena* arena) const {
  DoubleVector* n = new DoubleVector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DoubleVector::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.DoubleVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DoubleVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.DoubleVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double v = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9u, input, this->mutable_v())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_v())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.DoubleVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.DoubleVector)
  return false;
#undef DO_
}

void DoubleVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.DoubleVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double v = 1;
  for (int i = 0, n = this->v_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->v(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.DoubleVector)
}

::google::protobuf::uint8* DoubleVector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.DoubleVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double v = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(1, this->v_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.DoubleVector)
  return target;
}

size_t DoubleVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.DoubleVector)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated double v = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->v_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->v_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoubleVector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.DoubleVector)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleVector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DoubleVector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.DoubleVector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.DoubleVector)
    MergeFrom(*source);
  }
}

void DoubleVector::MergeFrom(const DoubleVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.DoubleVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  v_.MergeFrom(from.v_);
}

void DoubleVector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.DoubleVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleVector::CopyFrom(const DoubleVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.DoubleVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleVector::IsInitialized() const {
  return true;
}

void DoubleVector::Swap(DoubleVector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoubleVector::InternalSwap(DoubleVector* other) {
  using std::swap;
  v_.InternalSwap(&other->v_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DoubleVector::GetMetadata() const {
  protobuf_CommonTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DoubleVector

// repeated double v = 1;
int DoubleVector::v_size() const {
  return v_.size();
}
void DoubleVector::clear_v() {
  v_.Clear();
}
double DoubleVector::v(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.DoubleVector.v)
  return v_.Get(index);
}
void DoubleVector::set_v(int index, double value) {
  v_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.DoubleVector.v)
}
void DoubleVector::add_v(double value) {
  v_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.DoubleVector.v)
}
const ::google::protobuf::RepeatedField< double >&
DoubleVector::v() const {
  // @@protoc_insertion_point(field_list:naothmessages.DoubleVector.v)
  return v_;
}
::google::protobuf::RepeatedField< double >*
DoubleVector::mutable_v() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.DoubleVector.v)
  return &v_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pose3D::kTranslationFieldNumber;
const int Pose3D::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pose3D::Pose3D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommonTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.Pose3D)
}
Pose3D::Pose3D(const Pose3D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      rotation_(from.rotation_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_translation()) {
    translation_ = new ::naothmessages::DoubleVector3(*from.translation_);
  } else {
    translation_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:naothmessages.Pose3D)
}

void Pose3D::SharedCtor() {
  _cached_size_ = 0;
  translation_ = NULL;
}

Pose3D::~Pose3D() {
  // @@protoc_insertion_point(destructor:naothmessages.Pose3D)
  SharedDtor();
}

void Pose3D::SharedDtor() {
  if (this != internal_default_instance()) delete translation_;
}

void Pose3D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pose3D::descriptor() {
  protobuf_CommonTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pose3D& Pose3D::default_instance() {
  protobuf_CommonTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

Pose3D* Pose3D::New(::google::protobuf::Arena* arena) const {
  Pose3D* n = new Pose3D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pose3D::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.Pose3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rotation_.Clear();
  if (has_translation()) {
    GOOGLE_DCHECK(translation_ != NULL);
    translation_->::naothmessages::DoubleVector3::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Pose3D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.Pose3D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .naothmessages.DoubleVector3 translation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .naothmessages.DoubleVector3 rotation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.Pose3D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.Pose3D)
  return false;
#undef DO_
}

void Pose3D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.Pose3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.DoubleVector3 translation = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->translation_, output);
  }

  // repeated .naothmessages.DoubleVector3 rotation = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rotation_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rotation(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.Pose3D)
}

::google::protobuf::uint8* Pose3D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.Pose3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.DoubleVector3 translation = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->translation_, deterministic, target);
  }

  // repeated .naothmessages.DoubleVector3 rotation = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rotation_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->rotation(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.Pose3D)
  return target;
}

size_t Pose3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.Pose3D)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .naothmessages.DoubleVector3 translation = 1;
  if (has_translation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->translation_);
  }
  // repeated .naothmessages.DoubleVector3 rotation = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->rotation_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotation(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pose3D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.Pose3D)
  GOOGLE_DCHECK_NE(&from, this);
  const Pose3D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pose3D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.Pose3D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.Pose3D)
    MergeFrom(*source);
  }
}

void Pose3D::MergeFrom(const Pose3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.Pose3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rotation_.MergeFrom(from.rotation_);
  if (from.has_translation()) {
    mutable_translation()->::naothmessages::DoubleVector3::MergeFrom(from.translation());
  }
}

void Pose3D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.Pose3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose3D::CopyFrom(const Pose3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.Pose3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose3D::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->rotation())) return false;
  if (has_translation()) {
    if (!this->translation_->IsInitialized()) return false;
  }
  return true;
}

void Pose3D::Swap(Pose3D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pose3D::InternalSwap(Pose3D* other) {
  using std::swap;
  rotation_.InternalSwap(&other->rotation_);
  swap(translation_, other->translation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pose3D::GetMetadata() const {
  protobuf_CommonTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pose3D

// required .naothmessages.DoubleVector3 translation = 1;
bool Pose3D::has_translation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Pose3D::set_has_translation() {
  _has_bits_[0] |= 0x00000001u;
}
void Pose3D::clear_has_translation() {
  _has_bits_[0] &= ~0x00000001u;
}
void Pose3D::clear_translation() {
  if (translation_ != NULL) translation_->::naothmessages::DoubleVector3::Clear();
  clear_has_translation();
}
const ::naothmessages::DoubleVector3& Pose3D::translation() const {
  const ::naothmessages::DoubleVector3* p = translation_;
  // @@protoc_insertion_point(field_get:naothmessages.Pose3D.translation)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
::naothmessages::DoubleVector3* Pose3D::mutable_translation() {
  set_has_translation();
  if (translation_ == NULL) {
    translation_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.Pose3D.translation)
  return translation_;
}
::naothmessages::DoubleVector3* Pose3D::release_translation() {
  // @@protoc_insertion_point(field_release:naothmessages.Pose3D.translation)
  clear_has_translation();
  ::naothmessages::DoubleVector3* temp = translation_;
  translation_ = NULL;
  return temp;
}
void Pose3D::set_allocated_translation(::naothmessages::DoubleVector3* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    set_has_translation();
  } else {
    clear_has_translation();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.Pose3D.translation)
}

// repeated .naothmessages.DoubleVector3 rotation = 2;
int Pose3D::rotation_size() const {
  return rotation_.size();
}
void Pose3D::clear_rotation() {
  rotation_.Clear();
}
const ::naothmessages::DoubleVector3& Pose3D::rotation(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.Pose3D.rotation)
  return rotation_.Get(index);
}
::naothmessages::DoubleVector3* Pose3D::mutable_rotation(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.Pose3D.rotation)
  return rotation_.Mutable(index);
}
::naothmessages::DoubleVector3* Pose3D::add_rotation() {
  // @@protoc_insertion_point(field_add:naothmessages.Pose3D.rotation)
  return rotation_.Add();
}
::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector3 >*
Pose3D::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.Pose3D.rotation)
  return &rotation_;
}
const ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector3 >&
Pose3D::rotation() const {
  // @@protoc_insertion_point(field_list:naothmessages.Pose3D.rotation)
  return rotation_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LineSegment::kBaseFieldNumber;
const int LineSegment::kDirectionFieldNumber;
const int LineSegment::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LineSegment::LineSegment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommonTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.LineSegment)
}
LineSegment::LineSegment(const LineSegment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_base()) {
    base_ = new ::naothmessages::DoubleVector2(*from.base_);
  } else {
    base_ = NULL;
  }
  if (from.has_direction()) {
    direction_ = new ::naothmessages::DoubleVector2(*from.direction_);
  } else {
    direction_ = NULL;
  }
  length_ = from.length_;
  // @@protoc_insertion_point(copy_constructor:naothmessages.LineSegment)
}

void LineSegment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&base_)) + sizeof(length_));
}

LineSegment::~LineSegment() {
  // @@protoc_insertion_point(destructor:naothmessages.LineSegment)
  SharedDtor();
}

void LineSegment::SharedDtor() {
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete direction_;
}

void LineSegment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineSegment::descriptor() {
  protobuf_CommonTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LineSegment& LineSegment::default_instance() {
  protobuf_CommonTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

LineSegment* LineSegment::New(::google::protobuf::Arena* arena) const {
  LineSegment* n = new LineSegment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LineSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.LineSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(base_ != NULL);
      base_->::naothmessages::DoubleVector2::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(direction_ != NULL);
      direction_->::naothmessages::DoubleVector2::Clear();
    }
  }
  length_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LineSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.LineSegment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .naothmessages.DoubleVector2 base = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .naothmessages.DoubleVector2 direction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double length = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.LineSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.LineSegment)
  return false;
#undef DO_
}

void LineSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.LineSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.DoubleVector2 base = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // required .naothmessages.DoubleVector2 direction = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->direction_, output);
  }

  // required double length = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.LineSegment)
}

::google::protobuf::uint8* LineSegment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.LineSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.DoubleVector2 base = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->base_, deterministic, target);
  }

  // required .naothmessages.DoubleVector2 direction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->direction_, deterministic, target);
  }

  // required double length = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.LineSegment)
  return target;
}

size_t LineSegment::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:naothmessages.LineSegment)
  size_t total_size = 0;

  if (has_base()) {
    // required .naothmessages.DoubleVector2 base = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  if (has_direction()) {
    // required .naothmessages.DoubleVector2 direction = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->direction_);
  }

  if (has_length()) {
    // required double length = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t LineSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.LineSegment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .naothmessages.DoubleVector2 base = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);

    // required .naothmessages.DoubleVector2 direction = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->direction_);

    // required double length = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineSegment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.LineSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const LineSegment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LineSegment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.LineSegment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.LineSegment)
    MergeFrom(*source);
  }
}

void LineSegment::MergeFrom(const LineSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.LineSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_base()->::naothmessages::DoubleVector2::MergeFrom(from.base());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_direction()->::naothmessages::DoubleVector2::MergeFrom(from.direction());
    }
    if (cached_has_bits & 0x00000004u) {
      length_ = from.length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LineSegment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.LineSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineSegment::CopyFrom(const LineSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.LineSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineSegment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_base()) {
    if (!this->base_->IsInitialized()) return false;
  }
  if (has_direction()) {
    if (!this->direction_->IsInitialized()) return false;
  }
  return true;
}

void LineSegment::Swap(LineSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LineSegment::InternalSwap(LineSegment* other) {
  using std::swap;
  swap(base_, other->base_);
  swap(direction_, other->direction_);
  swap(length_, other->length_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LineSegment::GetMetadata() const {
  protobuf_CommonTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LineSegment

// required .naothmessages.DoubleVector2 base = 1;
bool LineSegment::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LineSegment::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
void LineSegment::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
void LineSegment::clear_base() {
  if (base_ != NULL) base_->::naothmessages::DoubleVector2::Clear();
  clear_has_base();
}
const ::naothmessages::DoubleVector2& LineSegment::base() const {
  const ::naothmessages::DoubleVector2* p = base_;
  // @@protoc_insertion_point(field_get:naothmessages.LineSegment.base)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* LineSegment::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.LineSegment.base)
  return base_;
}
::naothmessages::DoubleVector2* LineSegment::release_base() {
  // @@protoc_insertion_point(field_release:naothmessages.LineSegment.base)
  clear_has_base();
  ::naothmessages::DoubleVector2* temp = base_;
  base_ = NULL;
  return temp;
}
void LineSegment::set_allocated_base(::naothmessages::DoubleVector2* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.LineSegment.base)
}

// required .naothmessages.DoubleVector2 direction = 2;
bool LineSegment::has_direction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LineSegment::set_has_direction() {
  _has_bits_[0] |= 0x00000002u;
}
void LineSegment::clear_has_direction() {
  _has_bits_[0] &= ~0x00000002u;
}
void LineSegment::clear_direction() {
  if (direction_ != NULL) direction_->::naothmessages::DoubleVector2::Clear();
  clear_has_direction();
}
const ::naothmessages::DoubleVector2& LineSegment::direction() const {
  const ::naothmessages::DoubleVector2* p = direction_;
  // @@protoc_insertion_point(field_get:naothmessages.LineSegment.direction)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* LineSegment::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) {
    direction_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.LineSegment.direction)
  return direction_;
}
::naothmessages::DoubleVector2* LineSegment::release_direction() {
  // @@protoc_insertion_point(field_release:naothmessages.LineSegment.direction)
  clear_has_direction();
  ::naothmessages::DoubleVector2* temp = direction_;
  direction_ = NULL;
  return temp;
}
void LineSegment::set_allocated_direction(::naothmessages::DoubleVector2* direction) {
  delete direction_;
  direction_ = direction;
  if (direction) {
    set_has_direction();
  } else {
    clear_has_direction();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.LineSegment.direction)
}

// required double length = 3;
bool LineSegment::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LineSegment::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
void LineSegment::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
void LineSegment::clear_length() {
  length_ = 0;
  clear_has_length();
}
double LineSegment::length() const {
  // @@protoc_insertion_point(field_get:naothmessages.LineSegment.length)
  return length_;
}
void LineSegment::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.LineSegment.length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace naothmessages

// @@protoc_insertion_point(global_scope)
