// added by NaoTH 
#if defined(__GNUC__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#endif

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AudioData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AudioData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace naothmessages {
class AudioDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AudioData>
     _instance;
} _AudioData_default_instance_;

namespace protobuf_AudioData_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioData, samples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioData, samplesize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioData, samplerate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioData, numchannels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioData, timestamp_),
  0,
  1,
  2,
  3,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(AudioData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_AudioData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "AudioData.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _AudioData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AudioData_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017AudioData.proto\022\rnaothmessages\"l\n\tAudi"
      "oData\022\017\n\007samples\030\001 \002(\014\022\022\n\nsampleSize\030\002 \002"
      "(\r\022\022\n\nsampleRate\030\003 \002(\r\022\023\n\013numChannels\030\004 "
      "\002(\r\022\021\n\ttimestamp\030\005 \002(\rB\026\n\024de.naoth.rc.me"
      "ssages"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 166);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AudioData.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_AudioData_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioData::kSamplesFieldNumber;
const int AudioData::kSampleSizeFieldNumber;
const int AudioData::kSampleRateFieldNumber;
const int AudioData::kNumChannelsFieldNumber;
const int AudioData::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioData::AudioData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_AudioData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.AudioData)
}
AudioData::AudioData(const AudioData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  samples_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_samples()) {
    samples_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.samples_);
  }
  ::memcpy(&samplesize_, &from.samplesize_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&samplesize_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.AudioData)
}

void AudioData::SharedCtor() {
  _cached_size_ = 0;
  samples_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&samplesize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&samplesize_)) + sizeof(timestamp_));
}

AudioData::~AudioData() {
  // @@protoc_insertion_point(destructor:naothmessages.AudioData)
  SharedDtor();
}

void AudioData::SharedDtor() {
  samples_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AudioData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioData::descriptor() {
  protobuf_AudioData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_AudioData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AudioData& AudioData::default_instance() {
  protobuf_AudioData_2eproto::InitDefaults();
  return *internal_default_instance();
}

AudioData* AudioData::New(::google::protobuf::Arena* arena) const {
  AudioData* n = new AudioData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AudioData::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.AudioData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_samples()) {
    GOOGLE_DCHECK(!samples_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*samples_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 30u) {
    ::memset(&samplesize_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&samplesize_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AudioData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.AudioData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes samples = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_samples()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 sampleSize = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_samplesize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &samplesize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 sampleRate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_samplerate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &samplerate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 numChannels = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_numchannels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numchannels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.AudioData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.AudioData)
  return false;
#undef DO_
}

void AudioData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.AudioData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes samples = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->samples(), output);
  }

  // required uint32 sampleSize = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->samplesize(), output);
  }

  // required uint32 sampleRate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->samplerate(), output);
  }

  // required uint32 numChannels = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->numchannels(), output);
  }

  // required uint32 timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.AudioData)
}

::google::protobuf::uint8* AudioData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.AudioData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes samples = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->samples(), target);
  }

  // required uint32 sampleSize = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->samplesize(), target);
  }

  // required uint32 sampleRate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->samplerate(), target);
  }

  // required uint32 numChannels = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->numchannels(), target);
  }

  // required uint32 timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.AudioData)
  return target;
}

size_t AudioData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:naothmessages.AudioData)
  size_t total_size = 0;

  if (has_samples()) {
    // required bytes samples = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->samples());
  }

  if (has_samplesize()) {
    // required uint32 sampleSize = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->samplesize());
  }

  if (has_samplerate()) {
    // required uint32 sampleRate = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->samplerate());
  }

  if (has_numchannels()) {
    // required uint32 numChannels = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numchannels());
  }

  if (has_timestamp()) {
    // required uint32 timestamp = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  return total_size;
}
size_t AudioData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.AudioData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes samples = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->samples());

    // required uint32 sampleSize = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->samplesize());

    // required uint32 sampleRate = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->samplerate());

    // required uint32 numChannels = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numchannels());

    // required uint32 timestamp = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.AudioData)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AudioData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.AudioData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.AudioData)
    MergeFrom(*source);
  }
}

void AudioData::MergeFrom(const AudioData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.AudioData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_samples();
      samples_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.samples_);
    }
    if (cached_has_bits & 0x00000002u) {
      samplesize_ = from.samplesize_;
    }
    if (cached_has_bits & 0x00000004u) {
      samplerate_ = from.samplerate_;
    }
    if (cached_has_bits & 0x00000008u) {
      numchannels_ = from.numchannels_;
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AudioData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.AudioData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioData::CopyFrom(const AudioData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.AudioData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void AudioData::Swap(AudioData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioData::InternalSwap(AudioData* other) {
  using std::swap;
  samples_.Swap(&other->samples_);
  swap(samplesize_, other->samplesize_);
  swap(samplerate_, other->samplerate_);
  swap(numchannels_, other->numchannels_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AudioData::GetMetadata() const {
  protobuf_AudioData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_AudioData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioData

// required bytes samples = 1;
bool AudioData::has_samples() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AudioData::set_has_samples() {
  _has_bits_[0] |= 0x00000001u;
}
void AudioData::clear_has_samples() {
  _has_bits_[0] &= ~0x00000001u;
}
void AudioData::clear_samples() {
  samples_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_samples();
}
const ::std::string& AudioData::samples() const {
  // @@protoc_insertion_point(field_get:naothmessages.AudioData.samples)
  return samples_.GetNoArena();
}
void AudioData::set_samples(const ::std::string& value) {
  set_has_samples();
  samples_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naothmessages.AudioData.samples)
}
#if LANG_CXX11
void AudioData::set_samples(::std::string&& value) {
  set_has_samples();
  samples_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:naothmessages.AudioData.samples)
}
#endif
void AudioData::set_samples(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_samples();
  samples_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naothmessages.AudioData.samples)
}
void AudioData::set_samples(const void* value, size_t size) {
  set_has_samples();
  samples_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naothmessages.AudioData.samples)
}
::std::string* AudioData::mutable_samples() {
  set_has_samples();
  // @@protoc_insertion_point(field_mutable:naothmessages.AudioData.samples)
  return samples_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AudioData::release_samples() {
  // @@protoc_insertion_point(field_release:naothmessages.AudioData.samples)
  clear_has_samples();
  return samples_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AudioData::set_allocated_samples(::std::string* samples) {
  if (samples != NULL) {
    set_has_samples();
  } else {
    clear_has_samples();
  }
  samples_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), samples);
  // @@protoc_insertion_point(field_set_allocated:naothmessages.AudioData.samples)
}

// required uint32 sampleSize = 2;
bool AudioData::has_samplesize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AudioData::set_has_samplesize() {
  _has_bits_[0] |= 0x00000002u;
}
void AudioData::clear_has_samplesize() {
  _has_bits_[0] &= ~0x00000002u;
}
void AudioData::clear_samplesize() {
  samplesize_ = 0u;
  clear_has_samplesize();
}
::google::protobuf::uint32 AudioData::samplesize() const {
  // @@protoc_insertion_point(field_get:naothmessages.AudioData.sampleSize)
  return samplesize_;
}
void AudioData::set_samplesize(::google::protobuf::uint32 value) {
  set_has_samplesize();
  samplesize_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.AudioData.sampleSize)
}

// required uint32 sampleRate = 3;
bool AudioData::has_samplerate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AudioData::set_has_samplerate() {
  _has_bits_[0] |= 0x00000004u;
}
void AudioData::clear_has_samplerate() {
  _has_bits_[0] &= ~0x00000004u;
}
void AudioData::clear_samplerate() {
  samplerate_ = 0u;
  clear_has_samplerate();
}
::google::protobuf::uint32 AudioData::samplerate() const {
  // @@protoc_insertion_point(field_get:naothmessages.AudioData.sampleRate)
  return samplerate_;
}
void AudioData::set_samplerate(::google::protobuf::uint32 value) {
  set_has_samplerate();
  samplerate_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.AudioData.sampleRate)
}

// required uint32 numChannels = 4;
bool AudioData::has_numchannels() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AudioData::set_has_numchannels() {
  _has_bits_[0] |= 0x00000008u;
}
void AudioData::clear_has_numchannels() {
  _has_bits_[0] &= ~0x00000008u;
}
void AudioData::clear_numchannels() {
  numchannels_ = 0u;
  clear_has_numchannels();
}
::google::protobuf::uint32 AudioData::numchannels() const {
  // @@protoc_insertion_point(field_get:naothmessages.AudioData.numChannels)
  return numchannels_;
}
void AudioData::set_numchannels(::google::protobuf::uint32 value) {
  set_has_numchannels();
  numchannels_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.AudioData.numChannels)
}

// required uint32 timestamp = 5;
bool AudioData::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AudioData::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
void AudioData::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
void AudioData::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 AudioData::timestamp() const {
  // @@protoc_insertion_point(field_get:naothmessages.AudioData.timestamp)
  return timestamp_;
}
void AudioData::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.AudioData.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace naothmessages

// @@protoc_insertion_point(global_scope)


// added by NaoTH 
#if defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

