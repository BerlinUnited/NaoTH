// added by NaoTH 
#if defined(__GNUC__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#endif

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonTypes.proto

#ifndef PROTOBUF_CommonTypes_2eproto__INCLUDED
#define PROTOBUF_CommonTypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace naothmessages {
class DoubleVector;
class DoubleVectorDefaultTypeInternal;
extern DoubleVectorDefaultTypeInternal _DoubleVector_default_instance_;
class DoubleVector2;
class DoubleVector2DefaultTypeInternal;
extern DoubleVector2DefaultTypeInternal _DoubleVector2_default_instance_;
class DoubleVector3;
class DoubleVector3DefaultTypeInternal;
extern DoubleVector3DefaultTypeInternal _DoubleVector3_default_instance_;
class FloatVector2;
class FloatVector2DefaultTypeInternal;
extern FloatVector2DefaultTypeInternal _FloatVector2_default_instance_;
class IntVector2;
class IntVector2DefaultTypeInternal;
extern IntVector2DefaultTypeInternal _IntVector2_default_instance_;
class LineSegment;
class LineSegmentDefaultTypeInternal;
extern LineSegmentDefaultTypeInternal _LineSegment_default_instance_;
class Pose2D;
class Pose2DDefaultTypeInternal;
extern Pose2DDefaultTypeInternal _Pose2D_default_instance_;
class Pose3D;
class Pose3DDefaultTypeInternal;
extern Pose3DDefaultTypeInternal _Pose3D_default_instance_;
}  // namespace naothmessages

namespace naothmessages {

namespace protobuf_CommonTypes_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_CommonTypes_2eproto

enum Color {
  none = 0,
  orange = 1,
  yellow = 2,
  skyblue = 3,
  white = 4,
  red = 5,
  blue = 6,
  green = 7,
  black = 8,
  pink = 9,
  gray = 10,
  yellowOrange = 11
};
bool Color_IsValid(int value);
const Color Color_MIN = none;
const Color Color_MAX = yellowOrange;
const int Color_ARRAYSIZE = Color_MAX + 1;

const ::google::protobuf::EnumDescriptor* Color_descriptor();
inline const ::std::string& Color_Name(Color value) {
  return ::google::protobuf::internal::NameOfEnum(
    Color_descriptor(), value);
}
inline bool Color_Parse(
    const ::std::string& name, Color* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Color>(
    Color_descriptor(), name, value);
}
enum CameraID {
  top = 0,
  bottom = 1
};
bool CameraID_IsValid(int value);
const CameraID CameraID_MIN = top;
const CameraID CameraID_MAX = bottom;
const int CameraID_ARRAYSIZE = CameraID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CameraID_descriptor();
inline const ::std::string& CameraID_Name(CameraID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CameraID_descriptor(), value);
}
inline bool CameraID_Parse(
    const ::std::string& name, CameraID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CameraID>(
    CameraID_descriptor(), name, value);
}
enum JointID {
  HeadPitch = 0,
  HeadYaw = 1,
  RShoulderRoll = 2,
  LShoulderRoll = 3,
  RShoulderPitch = 4,
  LShoulderPitch = 5,
  RElbowRoll = 6,
  LElbowRoll = 7,
  RElbowYaw = 8,
  LElbowYaw = 9,
  RHipYawPitch = 10,
  LHipYawPitch = 11,
  RHipPitch = 12,
  LHipPitch = 13,
  RHipRoll = 14,
  LHipRoll = 15,
  RKneePitch = 16,
  LKneePitch = 17,
  RAnklePitch = 18,
  LAnklePitch = 19,
  RAnkleRoll = 20,
  LAnkleRoll = 21,
  LWristYaw = 22,
  RWristYaw = 23,
  LHand = 24,
  RHand = 25
};
bool JointID_IsValid(int value);
const JointID JointID_MIN = HeadPitch;
const JointID JointID_MAX = RHand;
const int JointID_ARRAYSIZE = JointID_MAX + 1;

const ::google::protobuf::EnumDescriptor* JointID_descriptor();
inline const ::std::string& JointID_Name(JointID value) {
  return ::google::protobuf::internal::NameOfEnum(
    JointID_descriptor(), value);
}
inline bool JointID_Parse(
    const ::std::string& name, JointID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JointID>(
    JointID_descriptor(), name, value);
}
// ===================================================================

class FloatVector2 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.FloatVector2) */ {
 public:
  FloatVector2();
  virtual ~FloatVector2();

  FloatVector2(const FloatVector2& from);

  inline FloatVector2& operator=(const FloatVector2& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FloatVector2(FloatVector2&& from) noexcept
    : FloatVector2() {
    *this = ::std::move(from);
  }

  inline FloatVector2& operator=(FloatVector2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FloatVector2& default_instance();

  static inline const FloatVector2* internal_default_instance() {
    return reinterpret_cast<const FloatVector2*>(
               &_FloatVector2_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FloatVector2* other);
  friend void swap(FloatVector2& a, FloatVector2& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FloatVector2* New() const PROTOBUF_FINAL { return New(NULL); }

  FloatVector2* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FloatVector2& from);
  void MergeFrom(const FloatVector2& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FloatVector2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:naothmessages.FloatVector2)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float x_;
  float y_;
  friend struct protobuf_CommonTypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DoubleVector2 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.DoubleVector2) */ {
 public:
  DoubleVector2();
  virtual ~DoubleVector2();

  DoubleVector2(const DoubleVector2& from);

  inline DoubleVector2& operator=(const DoubleVector2& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DoubleVector2(DoubleVector2&& from) noexcept
    : DoubleVector2() {
    *this = ::std::move(from);
  }

  inline DoubleVector2& operator=(DoubleVector2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DoubleVector2& default_instance();

  static inline const DoubleVector2* internal_default_instance() {
    return reinterpret_cast<const DoubleVector2*>(
               &_DoubleVector2_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DoubleVector2* other);
  friend void swap(DoubleVector2& a, DoubleVector2& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoubleVector2* New() const PROTOBUF_FINAL { return New(NULL); }

  DoubleVector2* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DoubleVector2& from);
  void MergeFrom(const DoubleVector2& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DoubleVector2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // required double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // @@protoc_insertion_point(class_scope:naothmessages.DoubleVector2)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double x_;
  double y_;
  friend struct protobuf_CommonTypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IntVector2 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.IntVector2) */ {
 public:
  IntVector2();
  virtual ~IntVector2();

  IntVector2(const IntVector2& from);

  inline IntVector2& operator=(const IntVector2& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IntVector2(IntVector2&& from) noexcept
    : IntVector2() {
    *this = ::std::move(from);
  }

  inline IntVector2& operator=(IntVector2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IntVector2& default_instance();

  static inline const IntVector2* internal_default_instance() {
    return reinterpret_cast<const IntVector2*>(
               &_IntVector2_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(IntVector2* other);
  friend void swap(IntVector2& a, IntVector2& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IntVector2* New() const PROTOBUF_FINAL { return New(NULL); }

  IntVector2* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IntVector2& from);
  void MergeFrom(const IntVector2& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IntVector2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // required int32 y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:naothmessages.IntVector2)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  friend struct protobuf_CommonTypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pose2D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.Pose2D) */ {
 public:
  Pose2D();
  virtual ~Pose2D();

  Pose2D(const Pose2D& from);

  inline Pose2D& operator=(const Pose2D& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pose2D(Pose2D&& from) noexcept
    : Pose2D() {
    *this = ::std::move(from);
  }

  inline Pose2D& operator=(Pose2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pose2D& default_instance();

  static inline const Pose2D* internal_default_instance() {
    return reinterpret_cast<const Pose2D*>(
               &_Pose2D_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Pose2D* other);
  friend void swap(Pose2D& a, Pose2D& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pose2D* New() const PROTOBUF_FINAL { return New(NULL); }

  Pose2D* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Pose2D& from);
  void MergeFrom(const Pose2D& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Pose2D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .naothmessages.DoubleVector2 translation = 1;
  bool has_translation() const;
  void clear_translation();
  static const int kTranslationFieldNumber = 1;
  const ::naothmessages::DoubleVector2& translation() const;
  ::naothmessages::DoubleVector2* mutable_translation();
  ::naothmessages::DoubleVector2* release_translation();
  void set_allocated_translation(::naothmessages::DoubleVector2* translation);

  // required double rotation = 2;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 2;
  double rotation() const;
  void set_rotation(double value);

  // @@protoc_insertion_point(class_scope:naothmessages.Pose2D)
 private:
  void set_has_translation();
  void clear_has_translation();
  void set_has_rotation();
  void clear_has_rotation();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::naothmessages::DoubleVector2* translation_;
  double rotation_;
  friend struct protobuf_CommonTypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DoubleVector3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.DoubleVector3) */ {
 public:
  DoubleVector3();
  virtual ~DoubleVector3();

  DoubleVector3(const DoubleVector3& from);

  inline DoubleVector3& operator=(const DoubleVector3& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DoubleVector3(DoubleVector3&& from) noexcept
    : DoubleVector3() {
    *this = ::std::move(from);
  }

  inline DoubleVector3& operator=(DoubleVector3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DoubleVector3& default_instance();

  static inline const DoubleVector3* internal_default_instance() {
    return reinterpret_cast<const DoubleVector3*>(
               &_DoubleVector3_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(DoubleVector3* other);
  friend void swap(DoubleVector3& a, DoubleVector3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoubleVector3* New() const PROTOBUF_FINAL { return New(NULL); }

  DoubleVector3* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DoubleVector3& from);
  void MergeFrom(const DoubleVector3& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DoubleVector3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // required double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // required double z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:naothmessages.DoubleVector3)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  friend struct protobuf_CommonTypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DoubleVector : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.DoubleVector) */ {
 public:
  DoubleVector();
  virtual ~DoubleVector();

  DoubleVector(const DoubleVector& from);

  inline DoubleVector& operator=(const DoubleVector& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DoubleVector(DoubleVector&& from) noexcept
    : DoubleVector() {
    *this = ::std::move(from);
  }

  inline DoubleVector& operator=(DoubleVector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DoubleVector& default_instance();

  static inline const DoubleVector* internal_default_instance() {
    return reinterpret_cast<const DoubleVector*>(
               &_DoubleVector_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(DoubleVector* other);
  friend void swap(DoubleVector& a, DoubleVector& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoubleVector* New() const PROTOBUF_FINAL { return New(NULL); }

  DoubleVector* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DoubleVector& from);
  void MergeFrom(const DoubleVector& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DoubleVector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double v = 1;
  int v_size() const;
  void clear_v();
  static const int kVFieldNumber = 1;
  double v(int index) const;
  void set_v(int index, double value);
  void add_v(double value);
  const ::google::protobuf::RepeatedField< double >&
      v() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_v();

  // @@protoc_insertion_point(class_scope:naothmessages.DoubleVector)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > v_;
  friend struct protobuf_CommonTypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pose3D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.Pose3D) */ {
 public:
  Pose3D();
  virtual ~Pose3D();

  Pose3D(const Pose3D& from);

  inline Pose3D& operator=(const Pose3D& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pose3D(Pose3D&& from) noexcept
    : Pose3D() {
    *this = ::std::move(from);
  }

  inline Pose3D& operator=(Pose3D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pose3D& default_instance();

  static inline const Pose3D* internal_default_instance() {
    return reinterpret_cast<const Pose3D*>(
               &_Pose3D_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Pose3D* other);
  friend void swap(Pose3D& a, Pose3D& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pose3D* New() const PROTOBUF_FINAL { return New(NULL); }

  Pose3D* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Pose3D& from);
  void MergeFrom(const Pose3D& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Pose3D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .naothmessages.DoubleVector3 rotation = 2;
  int rotation_size() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 2;
  const ::naothmessages::DoubleVector3& rotation(int index) const;
  ::naothmessages::DoubleVector3* mutable_rotation(int index);
  ::naothmessages::DoubleVector3* add_rotation();
  ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector3 >*
      mutable_rotation();
  const ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector3 >&
      rotation() const;

  // required .naothmessages.DoubleVector3 translation = 1;
  bool has_translation() const;
  void clear_translation();
  static const int kTranslationFieldNumber = 1;
  const ::naothmessages::DoubleVector3& translation() const;
  ::naothmessages::DoubleVector3* mutable_translation();
  ::naothmessages::DoubleVector3* release_translation();
  void set_allocated_translation(::naothmessages::DoubleVector3* translation);

  // @@protoc_insertion_point(class_scope:naothmessages.Pose3D)
 private:
  void set_has_translation();
  void clear_has_translation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector3 > rotation_;
  ::naothmessages::DoubleVector3* translation_;
  friend struct protobuf_CommonTypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LineSegment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.LineSegment) */ {
 public:
  LineSegment();
  virtual ~LineSegment();

  LineSegment(const LineSegment& from);

  inline LineSegment& operator=(const LineSegment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LineSegment(LineSegment&& from) noexcept
    : LineSegment() {
    *this = ::std::move(from);
  }

  inline LineSegment& operator=(LineSegment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LineSegment& default_instance();

  static inline const LineSegment* internal_default_instance() {
    return reinterpret_cast<const LineSegment*>(
               &_LineSegment_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(LineSegment* other);
  friend void swap(LineSegment& a, LineSegment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LineSegment* New() const PROTOBUF_FINAL { return New(NULL); }

  LineSegment* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LineSegment& from);
  void MergeFrom(const LineSegment& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LineSegment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .naothmessages.DoubleVector2 base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::naothmessages::DoubleVector2& base() const;
  ::naothmessages::DoubleVector2* mutable_base();
  ::naothmessages::DoubleVector2* release_base();
  void set_allocated_base(::naothmessages::DoubleVector2* base);

  // required .naothmessages.DoubleVector2 direction = 2;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 2;
  const ::naothmessages::DoubleVector2& direction() const;
  ::naothmessages::DoubleVector2* mutable_direction();
  ::naothmessages::DoubleVector2* release_direction();
  void set_allocated_direction(::naothmessages::DoubleVector2* direction);

  // required double length = 3;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 3;
  double length() const;
  void set_length(double value);

  // @@protoc_insertion_point(class_scope:naothmessages.LineSegment)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_direction();
  void clear_has_direction();
  void set_has_length();
  void clear_has_length();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::naothmessages::DoubleVector2* base_;
  ::naothmessages::DoubleVector2* direction_;
  double length_;
  friend struct protobuf_CommonTypes_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FloatVector2

// required float x = 1;
inline bool FloatVector2::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FloatVector2::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FloatVector2::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FloatVector2::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float FloatVector2::x() const {
  // @@protoc_insertion_point(field_get:naothmessages.FloatVector2.x)
  return x_;
}
inline void FloatVector2::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.FloatVector2.x)
}

// required float y = 2;
inline bool FloatVector2::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FloatVector2::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FloatVector2::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FloatVector2::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float FloatVector2::y() const {
  // @@protoc_insertion_point(field_get:naothmessages.FloatVector2.y)
  return y_;
}
inline void FloatVector2::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.FloatVector2.y)
}

// -------------------------------------------------------------------

// DoubleVector2

// required double x = 1;
inline bool DoubleVector2::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DoubleVector2::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DoubleVector2::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DoubleVector2::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double DoubleVector2::x() const {
  // @@protoc_insertion_point(field_get:naothmessages.DoubleVector2.x)
  return x_;
}
inline void DoubleVector2::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.DoubleVector2.x)
}

// required double y = 2;
inline bool DoubleVector2::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DoubleVector2::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DoubleVector2::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DoubleVector2::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double DoubleVector2::y() const {
  // @@protoc_insertion_point(field_get:naothmessages.DoubleVector2.y)
  return y_;
}
inline void DoubleVector2::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.DoubleVector2.y)
}

// -------------------------------------------------------------------

// IntVector2

// required int32 x = 1;
inline bool IntVector2::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IntVector2::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IntVector2::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IntVector2::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 IntVector2::x() const {
  // @@protoc_insertion_point(field_get:naothmessages.IntVector2.x)
  return x_;
}
inline void IntVector2::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.IntVector2.x)
}

// required int32 y = 2;
inline bool IntVector2::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IntVector2::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IntVector2::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IntVector2::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 IntVector2::y() const {
  // @@protoc_insertion_point(field_get:naothmessages.IntVector2.y)
  return y_;
}
inline void IntVector2::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.IntVector2.y)
}

// -------------------------------------------------------------------

// Pose2D

// required .naothmessages.DoubleVector2 translation = 1;
inline bool Pose2D::has_translation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pose2D::set_has_translation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pose2D::clear_has_translation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pose2D::clear_translation() {
  if (translation_ != NULL) translation_->::naothmessages::DoubleVector2::Clear();
  clear_has_translation();
}
inline const ::naothmessages::DoubleVector2& Pose2D::translation() const {
  const ::naothmessages::DoubleVector2* p = translation_;
  // @@protoc_insertion_point(field_get:naothmessages.Pose2D.translation)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
inline ::naothmessages::DoubleVector2* Pose2D::mutable_translation() {
  set_has_translation();
  if (translation_ == NULL) {
    translation_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.Pose2D.translation)
  return translation_;
}
inline ::naothmessages::DoubleVector2* Pose2D::release_translation() {
  // @@protoc_insertion_point(field_release:naothmessages.Pose2D.translation)
  clear_has_translation();
  ::naothmessages::DoubleVector2* temp = translation_;
  translation_ = NULL;
  return temp;
}
inline void Pose2D::set_allocated_translation(::naothmessages::DoubleVector2* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    set_has_translation();
  } else {
    clear_has_translation();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.Pose2D.translation)
}

// required double rotation = 2;
inline bool Pose2D::has_rotation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pose2D::set_has_rotation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pose2D::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pose2D::clear_rotation() {
  rotation_ = 0;
  clear_has_rotation();
}
inline double Pose2D::rotation() const {
  // @@protoc_insertion_point(field_get:naothmessages.Pose2D.rotation)
  return rotation_;
}
inline void Pose2D::set_rotation(double value) {
  set_has_rotation();
  rotation_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.Pose2D.rotation)
}

// -------------------------------------------------------------------

// DoubleVector3

// required double x = 1;
inline bool DoubleVector3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DoubleVector3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DoubleVector3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DoubleVector3::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double DoubleVector3::x() const {
  // @@protoc_insertion_point(field_get:naothmessages.DoubleVector3.x)
  return x_;
}
inline void DoubleVector3::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.DoubleVector3.x)
}

// required double y = 2;
inline bool DoubleVector3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DoubleVector3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DoubleVector3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DoubleVector3::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double DoubleVector3::y() const {
  // @@protoc_insertion_point(field_get:naothmessages.DoubleVector3.y)
  return y_;
}
inline void DoubleVector3::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.DoubleVector3.y)
}

// required double z = 3;
inline bool DoubleVector3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DoubleVector3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DoubleVector3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DoubleVector3::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double DoubleVector3::z() const {
  // @@protoc_insertion_point(field_get:naothmessages.DoubleVector3.z)
  return z_;
}
inline void DoubleVector3::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.DoubleVector3.z)
}

// -------------------------------------------------------------------

// DoubleVector

// repeated double v = 1;
inline int DoubleVector::v_size() const {
  return v_.size();
}
inline void DoubleVector::clear_v() {
  v_.Clear();
}
inline double DoubleVector::v(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.DoubleVector.v)
  return v_.Get(index);
}
inline void DoubleVector::set_v(int index, double value) {
  v_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.DoubleVector.v)
}
inline void DoubleVector::add_v(double value) {
  v_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.DoubleVector.v)
}
inline const ::google::protobuf::RepeatedField< double >&
DoubleVector::v() const {
  // @@protoc_insertion_point(field_list:naothmessages.DoubleVector.v)
  return v_;
}
inline ::google::protobuf::RepeatedField< double >*
DoubleVector::mutable_v() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.DoubleVector.v)
  return &v_;
}

// -------------------------------------------------------------------

// Pose3D

// required .naothmessages.DoubleVector3 translation = 1;
inline bool Pose3D::has_translation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pose3D::set_has_translation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pose3D::clear_has_translation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pose3D::clear_translation() {
  if (translation_ != NULL) translation_->::naothmessages::DoubleVector3::Clear();
  clear_has_translation();
}
inline const ::naothmessages::DoubleVector3& Pose3D::translation() const {
  const ::naothmessages::DoubleVector3* p = translation_;
  // @@protoc_insertion_point(field_get:naothmessages.Pose3D.translation)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
inline ::naothmessages::DoubleVector3* Pose3D::mutable_translation() {
  set_has_translation();
  if (translation_ == NULL) {
    translation_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.Pose3D.translation)
  return translation_;
}
inline ::naothmessages::DoubleVector3* Pose3D::release_translation() {
  // @@protoc_insertion_point(field_release:naothmessages.Pose3D.translation)
  clear_has_translation();
  ::naothmessages::DoubleVector3* temp = translation_;
  translation_ = NULL;
  return temp;
}
inline void Pose3D::set_allocated_translation(::naothmessages::DoubleVector3* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    set_has_translation();
  } else {
    clear_has_translation();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.Pose3D.translation)
}

// repeated .naothmessages.DoubleVector3 rotation = 2;
inline int Pose3D::rotation_size() const {
  return rotation_.size();
}
inline void Pose3D::clear_rotation() {
  rotation_.Clear();
}
inline const ::naothmessages::DoubleVector3& Pose3D::rotation(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.Pose3D.rotation)
  return rotation_.Get(index);
}
inline ::naothmessages::DoubleVector3* Pose3D::mutable_rotation(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.Pose3D.rotation)
  return rotation_.Mutable(index);
}
inline ::naothmessages::DoubleVector3* Pose3D::add_rotation() {
  // @@protoc_insertion_point(field_add:naothmessages.Pose3D.rotation)
  return rotation_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector3 >*
Pose3D::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.Pose3D.rotation)
  return &rotation_;
}
inline const ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector3 >&
Pose3D::rotation() const {
  // @@protoc_insertion_point(field_list:naothmessages.Pose3D.rotation)
  return rotation_;
}

// -------------------------------------------------------------------

// LineSegment

// required .naothmessages.DoubleVector2 base = 1;
inline bool LineSegment::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LineSegment::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LineSegment::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LineSegment::clear_base() {
  if (base_ != NULL) base_->::naothmessages::DoubleVector2::Clear();
  clear_has_base();
}
inline const ::naothmessages::DoubleVector2& LineSegment::base() const {
  const ::naothmessages::DoubleVector2* p = base_;
  // @@protoc_insertion_point(field_get:naothmessages.LineSegment.base)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
inline ::naothmessages::DoubleVector2* LineSegment::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.LineSegment.base)
  return base_;
}
inline ::naothmessages::DoubleVector2* LineSegment::release_base() {
  // @@protoc_insertion_point(field_release:naothmessages.LineSegment.base)
  clear_has_base();
  ::naothmessages::DoubleVector2* temp = base_;
  base_ = NULL;
  return temp;
}
inline void LineSegment::set_allocated_base(::naothmessages::DoubleVector2* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.LineSegment.base)
}

// required .naothmessages.DoubleVector2 direction = 2;
inline bool LineSegment::has_direction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LineSegment::set_has_direction() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LineSegment::clear_has_direction() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LineSegment::clear_direction() {
  if (direction_ != NULL) direction_->::naothmessages::DoubleVector2::Clear();
  clear_has_direction();
}
inline const ::naothmessages::DoubleVector2& LineSegment::direction() const {
  const ::naothmessages::DoubleVector2* p = direction_;
  // @@protoc_insertion_point(field_get:naothmessages.LineSegment.direction)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
inline ::naothmessages::DoubleVector2* LineSegment::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) {
    direction_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.LineSegment.direction)
  return direction_;
}
inline ::naothmessages::DoubleVector2* LineSegment::release_direction() {
  // @@protoc_insertion_point(field_release:naothmessages.LineSegment.direction)
  clear_has_direction();
  ::naothmessages::DoubleVector2* temp = direction_;
  direction_ = NULL;
  return temp;
}
inline void LineSegment::set_allocated_direction(::naothmessages::DoubleVector2* direction) {
  delete direction_;
  direction_ = direction;
  if (direction) {
    set_has_direction();
  } else {
    clear_has_direction();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.LineSegment.direction)
}

// required double length = 3;
inline bool LineSegment::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LineSegment::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LineSegment::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LineSegment::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double LineSegment::length() const {
  // @@protoc_insertion_point(field_get:naothmessages.LineSegment.length)
  return length_;
}
inline void LineSegment::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.LineSegment.length)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace naothmessages

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::naothmessages::Color> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::naothmessages::Color>() {
  return ::naothmessages::Color_descriptor();
}
template <> struct is_proto_enum< ::naothmessages::CameraID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::naothmessages::CameraID>() {
  return ::naothmessages::CameraID_descriptor();
}
template <> struct is_proto_enum< ::naothmessages::JointID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::naothmessages::JointID>() {
  return ::naothmessages::JointID_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CommonTypes_2eproto__INCLUDED


// added by NaoTH 
#if defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

