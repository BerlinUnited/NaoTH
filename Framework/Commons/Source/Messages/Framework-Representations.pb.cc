// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Framework-Representations.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Framework-Representations.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace naothmessages {
class ImageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Image>
     _instance;
} _Image_default_instance_;
class CameraInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CameraInfo>
     _instance;
} _CameraInfo_default_instance_;
class JointDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<JointData>
     _instance;
} _JointData_default_instance_;
class SensorJointDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SensorJointData>
     _instance;
} _SensorJointData_default_instance_;
class UltraSoundReceiveDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UltraSoundReceiveData>
     _instance;
} _UltraSoundReceiveData_default_instance_;
class FrameInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FrameInfo>
     _instance;
} _FrameInfo_default_instance_;
class RobotInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RobotInfo>
     _instance;
} _RobotInfo_default_instance_;
class FSRDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FSRData>
     _instance;
} _FSRData_default_instance_;
class AccelerometerDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AccelerometerData>
     _instance;
} _AccelerometerData_default_instance_;
class GyrometerDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GyrometerData>
     _instance;
} _GyrometerData_default_instance_;
class InertialSensorDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InertialSensorData>
     _instance;
} _InertialSensorData_default_instance_;
class GPSDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GPSData>
     _instance;
} _GPSData_default_instance_;
class OptiTrackData_TrackableItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OptiTrackData_TrackableItem>
     _instance;
} _OptiTrackData_TrackableItem_default_instance_;
class OptiTrackDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OptiTrackData>
     _instance;
} _OptiTrackData_default_instance_;
class ButtonDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ButtonData>
     _instance;
} _ButtonData_default_instance_;

namespace protobuf_Framework_2dRepresentations_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[15];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, camerainfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, timestamp_),
  0,
  4,
  5,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, resolutionwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, resolutionheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, cameraid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, focallength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, openinganglewidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, openingangleheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, opticalcenterx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, opticalcentery_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, memorysize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, camerarolloffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, cameratiltoffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, correctionoffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, headjointoffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, transformation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, openinganglediagonal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, pixelsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, focus_),
  0,
  1,
  14,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  ~0u,
  ~0u,
  ~0u,
  11,
  12,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointData, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointData, stiffness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointData, dp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointData, ddp_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorJointData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorJointData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorJointData, jointdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorJointData, temperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorJointData, electriccurrent_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltraSoundReceiveData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltraSoundReceiveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltraSoundReceiveData, ultrasoundtimestep_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltraSoundReceiveData, rawdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltraSoundReceiveData, dataleft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltraSoundReceiveData, dataright_),
  1,
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameInfo, framenumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameInfo, time_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, platform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, bodynickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, headnickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, bodyid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, basictimestep_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSRData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSRData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSRData, force_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSRData, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSRData, valid_),
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccelerometerData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccelerometerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccelerometerData, legacypackeddata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccelerometerData, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccelerometerData, rawdata_),
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GyrometerData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GyrometerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GyrometerData, legacypackeddata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GyrometerData, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GyrometerData, rawdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GyrometerData, ref_),
  ~0u,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InertialSensorData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InertialSensorData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InertialSensorData, legacypackeddata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InertialSensorData, data_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSData, pose_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptiTrackData_TrackableItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptiTrackData_TrackableItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptiTrackData_TrackableItem, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptiTrackData_TrackableItem, pose_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptiTrackData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptiTrackData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptiTrackData, trackables_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonData, ispressed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonData, numofframespressed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonData, eventcounter_),
  ~0u,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(Image)},
  { 17, 40, sizeof(CameraInfo)},
  { 58, 67, sizeof(JointData)},
  { 71, 79, sizeof(SensorJointData)},
  { 82, 91, sizeof(UltraSoundReceiveData)},
  { 95, 102, sizeof(FrameInfo)},
  { 104, 114, sizeof(RobotInfo)},
  { 119, 127, sizeof(FSRData)},
  { 130, 138, sizeof(AccelerometerData)},
  { 141, 150, sizeof(GyrometerData)},
  { 154, 161, sizeof(InertialSensorData)},
  { 163, 169, sizeof(GPSData)},
  { 170, 177, sizeof(OptiTrackData_TrackableItem)},
  { 179, 185, sizeof(OptiTrackData)},
  { 186, 194, sizeof(ButtonData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Image_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CameraInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JointData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SensorJointData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UltraSoundReceiveData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FrameInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RobotInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FSRData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AccelerometerData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GyrometerData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InertialSensorData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GPSData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OptiTrackData_TrackableItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OptiTrackData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ButtonData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Framework-Representations.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 15);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::naothmessages::protobuf_CommonTypes_2eproto::InitDefaults();
  _Image_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Image_default_instance_);_CameraInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CameraInfo_default_instance_);_JointData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_JointData_default_instance_);_SensorJointData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SensorJointData_default_instance_);_UltraSoundReceiveData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UltraSoundReceiveData_default_instance_);_FrameInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FrameInfo_default_instance_);_RobotInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RobotInfo_default_instance_);_FSRData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FSRData_default_instance_);_AccelerometerData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AccelerometerData_default_instance_);_GyrometerData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GyrometerData_default_instance_);_InertialSensorData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InertialSensorData_default_instance_);_GPSData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GPSData_default_instance_);_OptiTrackData_TrackableItem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OptiTrackData_TrackableItem_default_instance_);_OptiTrackData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OptiTrackData_default_instance_);_ButtonData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ButtonData_default_instance_);_Image_default_instance_._instance.get_mutable()->camerainfo_ = const_cast< ::naothmessages::CameraInfo*>(
      ::naothmessages::CameraInfo::internal_default_instance());
  _SensorJointData_default_instance_._instance.get_mutable()->jointdata_ = const_cast< ::naothmessages::JointData*>(
      ::naothmessages::JointData::internal_default_instance());
  _AccelerometerData_default_instance_._instance.get_mutable()->data_ = const_cast< ::naothmessages::DoubleVector3*>(
      ::naothmessages::DoubleVector3::internal_default_instance());
  _AccelerometerData_default_instance_._instance.get_mutable()->rawdata_ = const_cast< ::naothmessages::DoubleVector3*>(
      ::naothmessages::DoubleVector3::internal_default_instance());
  _GyrometerData_default_instance_._instance.get_mutable()->data_ = const_cast< ::naothmessages::DoubleVector3*>(
      ::naothmessages::DoubleVector3::internal_default_instance());
  _GyrometerData_default_instance_._instance.get_mutable()->rawdata_ = const_cast< ::naothmessages::DoubleVector3*>(
      ::naothmessages::DoubleVector3::internal_default_instance());
  _InertialSensorData_default_instance_._instance.get_mutable()->data_ = const_cast< ::naothmessages::DoubleVector2*>(
      ::naothmessages::DoubleVector2::internal_default_instance());
  _GPSData_default_instance_._instance.get_mutable()->pose_ = const_cast< ::naothmessages::Pose3D*>(
      ::naothmessages::Pose3D::internal_default_instance());
  _OptiTrackData_TrackableItem_default_instance_._instance.get_mutable()->pose_ = const_cast< ::naothmessages::Pose3D*>(
      ::naothmessages::Pose3D::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\037Framework-Representations.proto\022\rnaoth"
      "messages\032\021CommonTypes.proto\"\333\001\n\005Image\022\014\n"
      "\004data\030\001 \002(\014\022\022\n\005width\030\002 \001(\r:\003640\022\023\n\006heigh"
      "t\030\003 \001(\r:\003480\022-\n\ncameraInfo\030\004 \001(\0132\031.naoth"
      "messages.CameraInfo\0220\n\006format\030\005 \001(\0162\033.na"
      "othmessages.Image.Format:\003YUV\022\021\n\ttimesta"
      "mp\030\006 \001(\r\"\'\n\006Format\022\007\n\003YUV\020\000\022\n\n\006YUV422\020\001\022"
      "\010\n\004JPEG\020\002\"\322\004\n\nCameraInfo\022\027\n\017resolutionWi"
      "dth\030\001 \002(\r\022\030\n\020resolutionHeight\030\002 \002(\r\0221\n\010c"
      "ameraID\030\004 \001(\0162\027.naothmessages.CameraID:\006"
      "bottom\022\027\n\013focalLength\030\005 \001(\001B\002\030\001\022\035\n\021openi"
      "ngAngleWidth\030\006 \001(\001B\002\030\001\022\036\n\022openingAngleHe"
      "ight\030\007 \001(\001B\002\030\001\022\032\n\016opticalCenterX\030\010 \001(\001B\002"
      "\030\001\022\032\n\016opticalCenterY\030\t \001(\001B\002\030\001\022\020\n\004size\030\n"
      " \001(\003B\002\030\001\022\026\n\nmemorysize\030\013 \001(\003B\002\030\001\022\034\n\020came"
      "raRollOffset\030\014 \001(\001B\002\030\001\022\034\n\020cameraTiltOffs"
      "et\030\r \001(\001B\002\030\001\022:\n\020correctionOffset\030\022 \003(\0132\034"
      ".naothmessages.DoubleVector2B\002\030\001\0229\n\017head"
      "JointOffset\030\023 \003(\0132\034.naothmessages.Double"
      "Vector2B\002\030\001\0221\n\016transformation\030\016 \003(\0132\025.na"
      "othmessages.Pose3DB\002\030\001\022\034\n\024openingAngleDi"
      "agonal\030\017 \001(\001\022\021\n\tpixelSize\030\020 \001(\001\022\r\n\005focus"
      "\030\021 \001(\001\"I\n\tJointData\022\020\n\010position\030\001 \003(\001\022\021\n"
      "\tstiffness\030\002 \003(\001\022\n\n\002dp\030\003 \003(\001\022\013\n\003ddp\030\004 \003("
      "\001\"l\n\017SensorJointData\022+\n\tjointData\030\001 \002(\0132"
      "\030.naothmessages.JointData\022\023\n\013temperature"
      "\030\002 \003(\001\022\027\n\017electricCurrent\030\003 \003(\001\"i\n\025Ultra"
      "SoundReceiveData\022\032\n\022ultraSoundTimeStep\030\001"
      " \001(\r\022\017\n\007rawdata\030\002 \002(\001\022\020\n\010dataLeft\030\003 \003(\001\022"
      "\021\n\tdataRight\030\004 \003(\001\".\n\tFrameInfo\022\023\n\013frame"
      "Number\030\001 \002(\r\022\014\n\004time\030\002 \002(\r\"p\n\tRobotInfo\022"
      "\020\n\010platform\030\001 \001(\t\022\024\n\014bodyNickName\030\002 \001(\t\022"
      "\024\n\014headNickName\030\003 \001(\t\022\016\n\006bodyID\030\004 \001(\t\022\025\n"
      "\rbasicTimeStep\030\005 \001(\r\"=\n\007FSRData\022\021\n\005force"
      "\030\001 \003(\001B\002\030\001\022\014\n\004data\030\002 \003(\001\022\021\n\005valid\030\003 \003(\010B"
      "\002\030\001\"\214\001\n\021AccelerometerData\022\034\n\020legacyPacke"
      "dData\030\001 \003(\001B\002\030\001\022*\n\004data\030\002 \001(\0132\034.naothmes"
      "sages.DoubleVector3\022-\n\007rawData\030\003 \001(\0132\034.n"
      "aothmessages.DoubleVector3\"\225\001\n\rGyrometer"
      "Data\022\034\n\020legacyPackedData\030\001 \003(\001B\002\030\001\022*\n\004da"
      "ta\030\002 \001(\0132\034.naothmessages.DoubleVector3\022-"
      "\n\007rawData\030\003 \001(\0132\034.naothmessages.DoubleVe"
      "ctor3\022\013\n\003ref\030\004 \001(\001\"^\n\022InertialSensorData"
      "\022\034\n\020legacyPackedData\030\001 \003(\001B\002\030\001\022*\n\004data\030\002"
      " \001(\0132\034.naothmessages.DoubleVector2\".\n\007GP"
      "SData\022#\n\004pose\030\001 \002(\0132\025.naothmessages.Pose"
      "3D\"\223\001\n\rOptiTrackData\022>\n\ntrackables\030\001 \003(\013"
      "2*.naothmessages.OptiTrackData.Trackable"
      "Item\032B\n\rTrackableItem\022\014\n\004name\030\001 \002(\t\022#\n\004p"
      "ose\030\002 \002(\0132\025.naothmessages.Pose3D\"\323\002\n\nBut"
      "tonData\022\021\n\tisPressed\030\001 \003(\010\022\032\n\022numOfFrame"
      "sPressed\030\002 \003(\r\022\024\n\014eventCounter\030\003 \003(\r\"\377\001\n"
      "\010ButtonID\022\t\n\005Chest\020\000\022\020\n\014LeftFootLeft\020\001\022\021"
      "\n\rLeftFootRight\020\002\022\021\n\rRightFootLeft\020\003\022\022\n\016"
      "RightFootRight\020\004\022\r\n\tHeadFront\020\005\022\016\n\nHeadM"
      "iddle\020\006\022\014\n\010HeadRear\020\007\022\020\n\014LeftHandBack\020\010\022"
      "\020\n\014LeftHandLeft\020\t\022\021\n\rLeftHandRight\020\n\022\021\n\r"
      "RightHandBack\020\013\022\021\n\rRightHandLeft\020\014\022\022\n\016Ri"
      "ghtHandRight\020\rB\033\n\031de.naoth.rc.core.messa"
      "ges"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2363);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Framework-Representations.proto", &protobuf_RegisterTypes);
  ::naothmessages::protobuf_CommonTypes_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_Framework_2dRepresentations_2eproto

const ::google::protobuf::EnumDescriptor* Image_Format_descriptor() {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_enum_descriptors[0];
}
bool Image_Format_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Image_Format Image::YUV;
const Image_Format Image::YUV422;
const Image_Format Image::JPEG;
const Image_Format Image::Format_MIN;
const Image_Format Image::Format_MAX;
const int Image::Format_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ButtonData_ButtonID_descriptor() {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_enum_descriptors[1];
}
bool ButtonData_ButtonID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ButtonData_ButtonID ButtonData::Chest;
const ButtonData_ButtonID ButtonData::LeftFootLeft;
const ButtonData_ButtonID ButtonData::LeftFootRight;
const ButtonData_ButtonID ButtonData::RightFootLeft;
const ButtonData_ButtonID ButtonData::RightFootRight;
const ButtonData_ButtonID ButtonData::HeadFront;
const ButtonData_ButtonID ButtonData::HeadMiddle;
const ButtonData_ButtonID ButtonData::HeadRear;
const ButtonData_ButtonID ButtonData::LeftHandBack;
const ButtonData_ButtonID ButtonData::LeftHandLeft;
const ButtonData_ButtonID ButtonData::LeftHandRight;
const ButtonData_ButtonID ButtonData::RightHandBack;
const ButtonData_ButtonID ButtonData::RightHandLeft;
const ButtonData_ButtonID ButtonData::RightHandRight;
const ButtonData_ButtonID ButtonData::ButtonID_MIN;
const ButtonData_ButtonID ButtonData::ButtonID_MAX;
const int ButtonData::ButtonID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Image::kDataFieldNumber;
const int Image::kWidthFieldNumber;
const int Image::kHeightFieldNumber;
const int Image::kCameraInfoFieldNumber;
const int Image::kFormatFieldNumber;
const int Image::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Image::Image()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.Image)
}
Image::Image(const Image& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_camerainfo()) {
    camerainfo_ = new ::naothmessages::CameraInfo(*from.camerainfo_);
  } else {
    camerainfo_ = NULL;
  }
  ::memcpy(&format_, &from.format_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&format_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.Image)
}

void Image::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&camerainfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&camerainfo_)) + sizeof(timestamp_));
  width_ = 640u;
  height_ = 480u;
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:naothmessages.Image)
  SharedDtor();
}

void Image::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete camerainfo_;
}

void Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Image::descriptor() {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Image& Image::default_instance() {
  protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  return *internal_default_instance();
}

Image* Image::New(::google::protobuf::Arena* arena) const {
  Image* n = new Image;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(camerainfo_ != NULL);
      camerainfo_->::naothmessages::CameraInfo::Clear();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&format_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&format_)) + sizeof(timestamp_));
    width_ = 640u;
    height_ = 480u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 2 [default = 640];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 3 [default = 480];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.CameraInfo cameraInfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camerainfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.Image.Format format = 5 [default = YUV];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::naothmessages::Image_Format_IsValid(value)) {
            set_format(static_cast< ::naothmessages::Image_Format >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.Image)
  return false;
#undef DO_
}

void Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // optional uint32 width = 2 [default = 640];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }

  // optional uint32 height = 3 [default = 480];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // optional .naothmessages.CameraInfo cameraInfo = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->camerainfo_, output);
  }

  // optional .naothmessages.Image.Format format = 5 [default = YUV];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->format(), output);
  }

  // optional uint32 timestamp = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.Image)
}

::google::protobuf::uint8* Image::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // optional uint32 width = 2 [default = 640];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }

  // optional uint32 height = 3 [default = 480];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // optional .naothmessages.CameraInfo cameraInfo = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->camerainfo_, deterministic, target);
  }

  // optional .naothmessages.Image.Format format = 5 [default = YUV];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->format(), target);
  }

  // optional uint32 timestamp = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.Image)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes data = 1;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }
  if (_has_bits_[0 / 32] & 62u) {
    // optional .naothmessages.CameraInfo cameraInfo = 4;
    if (has_camerainfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->camerainfo_);
    }

    // optional .naothmessages.Image.Format format = 5 [default = YUV];
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
    }

    // optional uint32 timestamp = 6;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 width = 2 [default = 640];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 3 [default = 480];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Image::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.Image)
  GOOGLE_DCHECK_NE(&from, this);
  const Image* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Image>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.Image)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.Image)
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_camerainfo()->::naothmessages::CameraInfo::MergeFrom(from.camerainfo());
    }
    if (cached_has_bits & 0x00000004u) {
      format_ = from.format_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000020u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Image::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_camerainfo()) {
    if (!this->camerainfo_->IsInitialized()) return false;
  }
  return true;
}

void Image::Swap(Image* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Image::InternalSwap(Image* other) {
  using std::swap;
  data_.Swap(&other->data_);
  swap(camerainfo_, other->camerainfo_);
  swap(format_, other->format_);
  swap(timestamp_, other->timestamp_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Image::GetMetadata() const {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Image

// required bytes data = 1;
bool Image::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Image::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void Image::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void Image::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& Image::data() const {
  // @@protoc_insertion_point(field_get:naothmessages.Image.data)
  return data_.GetNoArena();
}
void Image::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naothmessages.Image.data)
}
#if LANG_CXX11
void Image::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:naothmessages.Image.data)
}
#endif
void Image::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naothmessages.Image.data)
}
void Image::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naothmessages.Image.data)
}
::std::string* Image::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:naothmessages.Image.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Image::release_data() {
  // @@protoc_insertion_point(field_release:naothmessages.Image.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Image::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:naothmessages.Image.data)
}

// optional uint32 width = 2 [default = 640];
bool Image::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Image::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
void Image::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
void Image::clear_width() {
  width_ = 640u;
  clear_has_width();
}
::google::protobuf::uint32 Image::width() const {
  // @@protoc_insertion_point(field_get:naothmessages.Image.width)
  return width_;
}
void Image::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.Image.width)
}

// optional uint32 height = 3 [default = 480];
bool Image::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Image::set_has_height() {
  _has_bits_[0] |= 0x00000020u;
}
void Image::clear_has_height() {
  _has_bits_[0] &= ~0x00000020u;
}
void Image::clear_height() {
  height_ = 480u;
  clear_has_height();
}
::google::protobuf::uint32 Image::height() const {
  // @@protoc_insertion_point(field_get:naothmessages.Image.height)
  return height_;
}
void Image::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.Image.height)
}

// optional .naothmessages.CameraInfo cameraInfo = 4;
bool Image::has_camerainfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Image::set_has_camerainfo() {
  _has_bits_[0] |= 0x00000002u;
}
void Image::clear_has_camerainfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void Image::clear_camerainfo() {
  if (camerainfo_ != NULL) camerainfo_->::naothmessages::CameraInfo::Clear();
  clear_has_camerainfo();
}
const ::naothmessages::CameraInfo& Image::camerainfo() const {
  const ::naothmessages::CameraInfo* p = camerainfo_;
  // @@protoc_insertion_point(field_get:naothmessages.Image.cameraInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::CameraInfo*>(
      &::naothmessages::_CameraInfo_default_instance_);
}
::naothmessages::CameraInfo* Image::mutable_camerainfo() {
  set_has_camerainfo();
  if (camerainfo_ == NULL) {
    camerainfo_ = new ::naothmessages::CameraInfo;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.Image.cameraInfo)
  return camerainfo_;
}
::naothmessages::CameraInfo* Image::release_camerainfo() {
  // @@protoc_insertion_point(field_release:naothmessages.Image.cameraInfo)
  clear_has_camerainfo();
  ::naothmessages::CameraInfo* temp = camerainfo_;
  camerainfo_ = NULL;
  return temp;
}
void Image::set_allocated_camerainfo(::naothmessages::CameraInfo* camerainfo) {
  delete camerainfo_;
  camerainfo_ = camerainfo;
  if (camerainfo) {
    set_has_camerainfo();
  } else {
    clear_has_camerainfo();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.Image.cameraInfo)
}

// optional .naothmessages.Image.Format format = 5 [default = YUV];
bool Image::has_format() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Image::set_has_format() {
  _has_bits_[0] |= 0x00000004u;
}
void Image::clear_has_format() {
  _has_bits_[0] &= ~0x00000004u;
}
void Image::clear_format() {
  format_ = 0;
  clear_has_format();
}
::naothmessages::Image_Format Image::format() const {
  // @@protoc_insertion_point(field_get:naothmessages.Image.format)
  return static_cast< ::naothmessages::Image_Format >(format_);
}
void Image::set_format(::naothmessages::Image_Format value) {
  assert(::naothmessages::Image_Format_IsValid(value));
  set_has_format();
  format_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.Image.format)
}

// optional uint32 timestamp = 6;
bool Image::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Image::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void Image::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void Image::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 Image::timestamp() const {
  // @@protoc_insertion_point(field_get:naothmessages.Image.timestamp)
  return timestamp_;
}
void Image::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.Image.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraInfo::kResolutionWidthFieldNumber;
const int CameraInfo::kResolutionHeightFieldNumber;
const int CameraInfo::kCameraIDFieldNumber;
const int CameraInfo::kFocalLengthFieldNumber;
const int CameraInfo::kOpeningAngleWidthFieldNumber;
const int CameraInfo::kOpeningAngleHeightFieldNumber;
const int CameraInfo::kOpticalCenterXFieldNumber;
const int CameraInfo::kOpticalCenterYFieldNumber;
const int CameraInfo::kSizeFieldNumber;
const int CameraInfo::kMemorysizeFieldNumber;
const int CameraInfo::kCameraRollOffsetFieldNumber;
const int CameraInfo::kCameraTiltOffsetFieldNumber;
const int CameraInfo::kCorrectionOffsetFieldNumber;
const int CameraInfo::kHeadJointOffsetFieldNumber;
const int CameraInfo::kTransformationFieldNumber;
const int CameraInfo::kOpeningAngleDiagonalFieldNumber;
const int CameraInfo::kPixelSizeFieldNumber;
const int CameraInfo::kFocusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraInfo::CameraInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.CameraInfo)
}
CameraInfo::CameraInfo(const CameraInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      transformation_(from.transformation_),
      correctionoffset_(from.correctionoffset_),
      headjointoffset_(from.headjointoffset_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&resolutionwidth_, &from.resolutionwidth_,
    static_cast<size_t>(reinterpret_cast<char*>(&cameraid_) -
    reinterpret_cast<char*>(&resolutionwidth_)) + sizeof(cameraid_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.CameraInfo)
}

void CameraInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&resolutionwidth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&focus_) -
      reinterpret_cast<char*>(&resolutionwidth_)) + sizeof(focus_));
  cameraid_ = 1;
}

CameraInfo::~CameraInfo() {
  // @@protoc_insertion_point(destructor:naothmessages.CameraInfo)
  SharedDtor();
}

void CameraInfo::SharedDtor() {
}

void CameraInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraInfo::descriptor() {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraInfo& CameraInfo::default_instance() {
  protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  return *internal_default_instance();
}

CameraInfo* CameraInfo::New(::google::protobuf::Arena* arena) const {
  CameraInfo* n = new CameraInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.CameraInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transformation_.Clear();
  correctionoffset_.Clear();
  headjointoffset_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&resolutionwidth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&resolutionwidth_)) + sizeof(size_));
  }
  if (cached_has_bits & 32512u) {
    ::memset(&memorysize_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&focus_) -
        reinterpret_cast<char*>(&memorysize_)) + sizeof(focus_));
    cameraid_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CameraInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.CameraInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 resolutionWidth = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_resolutionwidth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resolutionwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 resolutionHeight = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_resolutionheight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resolutionheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.CameraID cameraID = 4 [default = bottom];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::naothmessages::CameraID_IsValid(value)) {
            set_cameraid(static_cast< ::naothmessages::CameraID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double focalLength = 5 [deprecated = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_focallength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &focallength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double openingAngleWidth = 6 [deprecated = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_openinganglewidth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openinganglewidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double openingAngleHeight = 7 [deprecated = true];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_openingangleheight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openingangleheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double opticalCenterX = 8 [deprecated = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_opticalcenterx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &opticalcenterx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double opticalCenterY = 9 [deprecated = true];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_opticalcentery();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &opticalcentery_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 size = 10 [deprecated = true];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 memorysize = 11 [deprecated = true];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_memorysize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &memorysize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cameraRollOffset = 12 [deprecated = true];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_camerarolloffset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &camerarolloffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cameraTiltOffset = 13 [deprecated = true];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_cameratiltoffset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cameratiltoffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .naothmessages.Pose3D transformation = 14 [deprecated = true];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_transformation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double openingAngleDiagonal = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_openinganglediagonal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openinganglediagonal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pixelSize = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_pixelsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pixelsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double focus = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_focus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &focus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .naothmessages.DoubleVector2 correctionOffset = 18 [deprecated = true];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_correctionoffset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .naothmessages.DoubleVector2 headJointOffset = 19 [deprecated = true];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_headjointoffset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.CameraInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.CameraInfo)
  return false;
#undef DO_
}

void CameraInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.CameraInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 resolutionWidth = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->resolutionwidth(), output);
  }

  // required uint32 resolutionHeight = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->resolutionheight(), output);
  }

  // optional .naothmessages.CameraID cameraID = 4 [default = bottom];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->cameraid(), output);
  }

  // optional double focalLength = 5 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->focallength(), output);
  }

  // optional double openingAngleWidth = 6 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->openinganglewidth(), output);
  }

  // optional double openingAngleHeight = 7 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->openingangleheight(), output);
  }

  // optional double opticalCenterX = 8 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->opticalcenterx(), output);
  }

  // optional double opticalCenterY = 9 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->opticalcentery(), output);
  }

  // optional int64 size = 10 [deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->size(), output);
  }

  // optional int64 memorysize = 11 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->memorysize(), output);
  }

  // optional double cameraRollOffset = 12 [deprecated = true];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->camerarolloffset(), output);
  }

  // optional double cameraTiltOffset = 13 [deprecated = true];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->cameratiltoffset(), output);
  }

  // repeated .naothmessages.Pose3D transformation = 14 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transformation_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->transformation(static_cast<int>(i)), output);
  }

  // optional double openingAngleDiagonal = 15;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->openinganglediagonal(), output);
  }

  // optional double pixelSize = 16;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->pixelsize(), output);
  }

  // optional double focus = 17;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->focus(), output);
  }

  // repeated .naothmessages.DoubleVector2 correctionOffset = 18 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->correctionoffset_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->correctionoffset(static_cast<int>(i)), output);
  }

  // repeated .naothmessages.DoubleVector2 headJointOffset = 19 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headjointoffset_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->headjointoffset(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.CameraInfo)
}

::google::protobuf::uint8* CameraInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.CameraInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 resolutionWidth = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->resolutionwidth(), target);
  }

  // required uint32 resolutionHeight = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->resolutionheight(), target);
  }

  // optional .naothmessages.CameraID cameraID = 4 [default = bottom];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->cameraid(), target);
  }

  // optional double focalLength = 5 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->focallength(), target);
  }

  // optional double openingAngleWidth = 6 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->openinganglewidth(), target);
  }

  // optional double openingAngleHeight = 7 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->openingangleheight(), target);
  }

  // optional double opticalCenterX = 8 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->opticalcenterx(), target);
  }

  // optional double opticalCenterY = 9 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->opticalcentery(), target);
  }

  // optional int64 size = 10 [deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->size(), target);
  }

  // optional int64 memorysize = 11 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->memorysize(), target);
  }

  // optional double cameraRollOffset = 12 [deprecated = true];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->camerarolloffset(), target);
  }

  // optional double cameraTiltOffset = 13 [deprecated = true];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->cameratiltoffset(), target);
  }

  // repeated .naothmessages.Pose3D transformation = 14 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transformation_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->transformation(static_cast<int>(i)), deterministic, target);
  }

  // optional double openingAngleDiagonal = 15;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->openinganglediagonal(), target);
  }

  // optional double pixelSize = 16;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->pixelsize(), target);
  }

  // optional double focus = 17;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->focus(), target);
  }

  // repeated .naothmessages.DoubleVector2 correctionOffset = 18 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->correctionoffset_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->correctionoffset(static_cast<int>(i)), deterministic, target);
  }

  // repeated .naothmessages.DoubleVector2 headJointOffset = 19 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headjointoffset_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, this->headjointoffset(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.CameraInfo)
  return target;
}

size_t CameraInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:naothmessages.CameraInfo)
  size_t total_size = 0;

  if (has_resolutionwidth()) {
    // required uint32 resolutionWidth = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resolutionwidth());
  }

  if (has_resolutionheight()) {
    // required uint32 resolutionHeight = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resolutionheight());
  }

  return total_size;
}
size_t CameraInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.CameraInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 resolutionWidth = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resolutionwidth());

    // required uint32 resolutionHeight = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resolutionheight());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .naothmessages.Pose3D transformation = 14 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->transformation_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transformation(static_cast<int>(i)));
    }
  }

  // repeated .naothmessages.DoubleVector2 correctionOffset = 18 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->correctionoffset_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->correctionoffset(static_cast<int>(i)));
    }
  }

  // repeated .naothmessages.DoubleVector2 headJointOffset = 19 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->headjointoffset_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->headjointoffset(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 252u) {
    // optional double focalLength = 5 [deprecated = true];
    if (has_focallength()) {
      total_size += 1 + 8;
    }

    // optional double openingAngleWidth = 6 [deprecated = true];
    if (has_openinganglewidth()) {
      total_size += 1 + 8;
    }

    // optional double openingAngleHeight = 7 [deprecated = true];
    if (has_openingangleheight()) {
      total_size += 1 + 8;
    }

    // optional double opticalCenterX = 8 [deprecated = true];
    if (has_opticalcenterx()) {
      total_size += 1 + 8;
    }

    // optional double opticalCenterY = 9 [deprecated = true];
    if (has_opticalcentery()) {
      total_size += 1 + 8;
    }

    // optional int64 size = 10 [deprecated = true];
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->size());
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional int64 memorysize = 11 [deprecated = true];
    if (has_memorysize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->memorysize());
    }

    // optional double cameraRollOffset = 12 [deprecated = true];
    if (has_camerarolloffset()) {
      total_size += 1 + 8;
    }

    // optional double cameraTiltOffset = 13 [deprecated = true];
    if (has_cameratiltoffset()) {
      total_size += 1 + 8;
    }

    // optional double openingAngleDiagonal = 15;
    if (has_openinganglediagonal()) {
      total_size += 1 + 8;
    }

    // optional double pixelSize = 16;
    if (has_pixelsize()) {
      total_size += 2 + 8;
    }

    // optional double focus = 17;
    if (has_focus()) {
      total_size += 2 + 8;
    }

    // optional .naothmessages.CameraID cameraID = 4 [default = bottom];
    if (has_cameraid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cameraid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.CameraInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.CameraInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.CameraInfo)
    MergeFrom(*source);
  }
}

void CameraInfo::MergeFrom(const CameraInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.CameraInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transformation_.MergeFrom(from.transformation_);
  correctionoffset_.MergeFrom(from.correctionoffset_);
  headjointoffset_.MergeFrom(from.headjointoffset_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      resolutionwidth_ = from.resolutionwidth_;
    }
    if (cached_has_bits & 0x00000002u) {
      resolutionheight_ = from.resolutionheight_;
    }
    if (cached_has_bits & 0x00000004u) {
      focallength_ = from.focallength_;
    }
    if (cached_has_bits & 0x00000008u) {
      openinganglewidth_ = from.openinganglewidth_;
    }
    if (cached_has_bits & 0x00000010u) {
      openingangleheight_ = from.openingangleheight_;
    }
    if (cached_has_bits & 0x00000020u) {
      opticalcenterx_ = from.opticalcenterx_;
    }
    if (cached_has_bits & 0x00000040u) {
      opticalcentery_ = from.opticalcentery_;
    }
    if (cached_has_bits & 0x00000080u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      memorysize_ = from.memorysize_;
    }
    if (cached_has_bits & 0x00000200u) {
      camerarolloffset_ = from.camerarolloffset_;
    }
    if (cached_has_bits & 0x00000400u) {
      cameratiltoffset_ = from.cameratiltoffset_;
    }
    if (cached_has_bits & 0x00000800u) {
      openinganglediagonal_ = from.openinganglediagonal_;
    }
    if (cached_has_bits & 0x00001000u) {
      pixelsize_ = from.pixelsize_;
    }
    if (cached_has_bits & 0x00002000u) {
      focus_ = from.focus_;
    }
    if (cached_has_bits & 0x00004000u) {
      cameraid_ = from.cameraid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CameraInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.CameraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraInfo::CopyFrom(const CameraInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.CameraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->transformation())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->correctionoffset())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->headjointoffset())) return false;
  return true;
}

void CameraInfo::Swap(CameraInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraInfo::InternalSwap(CameraInfo* other) {
  using std::swap;
  transformation_.InternalSwap(&other->transformation_);
  correctionoffset_.InternalSwap(&other->correctionoffset_);
  headjointoffset_.InternalSwap(&other->headjointoffset_);
  swap(resolutionwidth_, other->resolutionwidth_);
  swap(resolutionheight_, other->resolutionheight_);
  swap(focallength_, other->focallength_);
  swap(openinganglewidth_, other->openinganglewidth_);
  swap(openingangleheight_, other->openingangleheight_);
  swap(opticalcenterx_, other->opticalcenterx_);
  swap(opticalcentery_, other->opticalcentery_);
  swap(size_, other->size_);
  swap(memorysize_, other->memorysize_);
  swap(camerarolloffset_, other->camerarolloffset_);
  swap(cameratiltoffset_, other->cameratiltoffset_);
  swap(openinganglediagonal_, other->openinganglediagonal_);
  swap(pixelsize_, other->pixelsize_);
  swap(focus_, other->focus_);
  swap(cameraid_, other->cameraid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraInfo::GetMetadata() const {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CameraInfo

// required uint32 resolutionWidth = 1;
bool CameraInfo::has_resolutionwidth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CameraInfo::set_has_resolutionwidth() {
  _has_bits_[0] |= 0x00000001u;
}
void CameraInfo::clear_has_resolutionwidth() {
  _has_bits_[0] &= ~0x00000001u;
}
void CameraInfo::clear_resolutionwidth() {
  resolutionwidth_ = 0u;
  clear_has_resolutionwidth();
}
::google::protobuf::uint32 CameraInfo::resolutionwidth() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.resolutionWidth)
  return resolutionwidth_;
}
void CameraInfo::set_resolutionwidth(::google::protobuf::uint32 value) {
  set_has_resolutionwidth();
  resolutionwidth_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraInfo.resolutionWidth)
}

// required uint32 resolutionHeight = 2;
bool CameraInfo::has_resolutionheight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CameraInfo::set_has_resolutionheight() {
  _has_bits_[0] |= 0x00000002u;
}
void CameraInfo::clear_has_resolutionheight() {
  _has_bits_[0] &= ~0x00000002u;
}
void CameraInfo::clear_resolutionheight() {
  resolutionheight_ = 0u;
  clear_has_resolutionheight();
}
::google::protobuf::uint32 CameraInfo::resolutionheight() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.resolutionHeight)
  return resolutionheight_;
}
void CameraInfo::set_resolutionheight(::google::protobuf::uint32 value) {
  set_has_resolutionheight();
  resolutionheight_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraInfo.resolutionHeight)
}

// optional .naothmessages.CameraID cameraID = 4 [default = bottom];
bool CameraInfo::has_cameraid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CameraInfo::set_has_cameraid() {
  _has_bits_[0] |= 0x00004000u;
}
void CameraInfo::clear_has_cameraid() {
  _has_bits_[0] &= ~0x00004000u;
}
void CameraInfo::clear_cameraid() {
  cameraid_ = 1;
  clear_has_cameraid();
}
::naothmessages::CameraID CameraInfo::cameraid() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.cameraID)
  return static_cast< ::naothmessages::CameraID >(cameraid_);
}
void CameraInfo::set_cameraid(::naothmessages::CameraID value) {
  assert(::naothmessages::CameraID_IsValid(value));
  set_has_cameraid();
  cameraid_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraInfo.cameraID)
}

// optional double focalLength = 5 [deprecated = true];
bool CameraInfo::has_focallength() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CameraInfo::set_has_focallength() {
  _has_bits_[0] |= 0x00000004u;
}
void CameraInfo::clear_has_focallength() {
  _has_bits_[0] &= ~0x00000004u;
}
void CameraInfo::clear_focallength() {
  focallength_ = 0;
  clear_has_focallength();
}
double CameraInfo::focallength() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.focalLength)
  return focallength_;
}
void CameraInfo::set_focallength(double value) {
  set_has_focallength();
  focallength_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraInfo.focalLength)
}

// optional double openingAngleWidth = 6 [deprecated = true];
bool CameraInfo::has_openinganglewidth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CameraInfo::set_has_openinganglewidth() {
  _has_bits_[0] |= 0x00000008u;
}
void CameraInfo::clear_has_openinganglewidth() {
  _has_bits_[0] &= ~0x00000008u;
}
void CameraInfo::clear_openinganglewidth() {
  openinganglewidth_ = 0;
  clear_has_openinganglewidth();
}
double CameraInfo::openinganglewidth() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.openingAngleWidth)
  return openinganglewidth_;
}
void CameraInfo::set_openinganglewidth(double value) {
  set_has_openinganglewidth();
  openinganglewidth_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraInfo.openingAngleWidth)
}

// optional double openingAngleHeight = 7 [deprecated = true];
bool CameraInfo::has_openingangleheight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CameraInfo::set_has_openingangleheight() {
  _has_bits_[0] |= 0x00000010u;
}
void CameraInfo::clear_has_openingangleheight() {
  _has_bits_[0] &= ~0x00000010u;
}
void CameraInfo::clear_openingangleheight() {
  openingangleheight_ = 0;
  clear_has_openingangleheight();
}
double CameraInfo::openingangleheight() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.openingAngleHeight)
  return openingangleheight_;
}
void CameraInfo::set_openingangleheight(double value) {
  set_has_openingangleheight();
  openingangleheight_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraInfo.openingAngleHeight)
}

// optional double opticalCenterX = 8 [deprecated = true];
bool CameraInfo::has_opticalcenterx() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CameraInfo::set_has_opticalcenterx() {
  _has_bits_[0] |= 0x00000020u;
}
void CameraInfo::clear_has_opticalcenterx() {
  _has_bits_[0] &= ~0x00000020u;
}
void CameraInfo::clear_opticalcenterx() {
  opticalcenterx_ = 0;
  clear_has_opticalcenterx();
}
double CameraInfo::opticalcenterx() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.opticalCenterX)
  return opticalcenterx_;
}
void CameraInfo::set_opticalcenterx(double value) {
  set_has_opticalcenterx();
  opticalcenterx_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraInfo.opticalCenterX)
}

// optional double opticalCenterY = 9 [deprecated = true];
bool CameraInfo::has_opticalcentery() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CameraInfo::set_has_opticalcentery() {
  _has_bits_[0] |= 0x00000040u;
}
void CameraInfo::clear_has_opticalcentery() {
  _has_bits_[0] &= ~0x00000040u;
}
void CameraInfo::clear_opticalcentery() {
  opticalcentery_ = 0;
  clear_has_opticalcentery();
}
double CameraInfo::opticalcentery() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.opticalCenterY)
  return opticalcentery_;
}
void CameraInfo::set_opticalcentery(double value) {
  set_has_opticalcentery();
  opticalcentery_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraInfo.opticalCenterY)
}

// optional int64 size = 10 [deprecated = true];
bool CameraInfo::has_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CameraInfo::set_has_size() {
  _has_bits_[0] |= 0x00000080u;
}
void CameraInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000080u;
}
void CameraInfo::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
  clear_has_size();
}
::google::protobuf::int64 CameraInfo::size() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.size)
  return size_;
}
void CameraInfo::set_size(::google::protobuf::int64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraInfo.size)
}

// optional int64 memorysize = 11 [deprecated = true];
bool CameraInfo::has_memorysize() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CameraInfo::set_has_memorysize() {
  _has_bits_[0] |= 0x00000100u;
}
void CameraInfo::clear_has_memorysize() {
  _has_bits_[0] &= ~0x00000100u;
}
void CameraInfo::clear_memorysize() {
  memorysize_ = GOOGLE_LONGLONG(0);
  clear_has_memorysize();
}
::google::protobuf::int64 CameraInfo::memorysize() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.memorysize)
  return memorysize_;
}
void CameraInfo::set_memorysize(::google::protobuf::int64 value) {
  set_has_memorysize();
  memorysize_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraInfo.memorysize)
}

// optional double cameraRollOffset = 12 [deprecated = true];
bool CameraInfo::has_camerarolloffset() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CameraInfo::set_has_camerarolloffset() {
  _has_bits_[0] |= 0x00000200u;
}
void CameraInfo::clear_has_camerarolloffset() {
  _has_bits_[0] &= ~0x00000200u;
}
void CameraInfo::clear_camerarolloffset() {
  camerarolloffset_ = 0;
  clear_has_camerarolloffset();
}
double CameraInfo::camerarolloffset() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.cameraRollOffset)
  return camerarolloffset_;
}
void CameraInfo::set_camerarolloffset(double value) {
  set_has_camerarolloffset();
  camerarolloffset_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraInfo.cameraRollOffset)
}

// optional double cameraTiltOffset = 13 [deprecated = true];
bool CameraInfo::has_cameratiltoffset() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CameraInfo::set_has_cameratiltoffset() {
  _has_bits_[0] |= 0x00000400u;
}
void CameraInfo::clear_has_cameratiltoffset() {
  _has_bits_[0] &= ~0x00000400u;
}
void CameraInfo::clear_cameratiltoffset() {
  cameratiltoffset_ = 0;
  clear_has_cameratiltoffset();
}
double CameraInfo::cameratiltoffset() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.cameraTiltOffset)
  return cameratiltoffset_;
}
void CameraInfo::set_cameratiltoffset(double value) {
  set_has_cameratiltoffset();
  cameratiltoffset_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraInfo.cameraTiltOffset)
}

// repeated .naothmessages.DoubleVector2 correctionOffset = 18 [deprecated = true];
int CameraInfo::correctionoffset_size() const {
  return correctionoffset_.size();
}
void CameraInfo::clear_correctionoffset() {
  correctionoffset_.Clear();
}
const ::naothmessages::DoubleVector2& CameraInfo::correctionoffset(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.correctionOffset)
  return correctionoffset_.Get(index);
}
::naothmessages::DoubleVector2* CameraInfo::mutable_correctionoffset(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.CameraInfo.correctionOffset)
  return correctionoffset_.Mutable(index);
}
::naothmessages::DoubleVector2* CameraInfo::add_correctionoffset() {
  // @@protoc_insertion_point(field_add:naothmessages.CameraInfo.correctionOffset)
  return correctionoffset_.Add();
}
::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 >*
CameraInfo::mutable_correctionoffset() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.CameraInfo.correctionOffset)
  return &correctionoffset_;
}
const ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 >&
CameraInfo::correctionoffset() const {
  // @@protoc_insertion_point(field_list:naothmessages.CameraInfo.correctionOffset)
  return correctionoffset_;
}

// repeated .naothmessages.DoubleVector2 headJointOffset = 19 [deprecated = true];
int CameraInfo::headjointoffset_size() const {
  return headjointoffset_.size();
}
void CameraInfo::clear_headjointoffset() {
  headjointoffset_.Clear();
}
const ::naothmessages::DoubleVector2& CameraInfo::headjointoffset(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.headJointOffset)
  return headjointoffset_.Get(index);
}
::naothmessages::DoubleVector2* CameraInfo::mutable_headjointoffset(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.CameraInfo.headJointOffset)
  return headjointoffset_.Mutable(index);
}
::naothmessages::DoubleVector2* CameraInfo::add_headjointoffset() {
  // @@protoc_insertion_point(field_add:naothmessages.CameraInfo.headJointOffset)
  return headjointoffset_.Add();
}
::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 >*
CameraInfo::mutable_headjointoffset() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.CameraInfo.headJointOffset)
  return &headjointoffset_;
}
const ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 >&
CameraInfo::headjointoffset() const {
  // @@protoc_insertion_point(field_list:naothmessages.CameraInfo.headJointOffset)
  return headjointoffset_;
}

// repeated .naothmessages.Pose3D transformation = 14 [deprecated = true];
int CameraInfo::transformation_size() const {
  return transformation_.size();
}
void CameraInfo::clear_transformation() {
  transformation_.Clear();
}
const ::naothmessages::Pose3D& CameraInfo::transformation(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.transformation)
  return transformation_.Get(index);
}
::naothmessages::Pose3D* CameraInfo::mutable_transformation(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.CameraInfo.transformation)
  return transformation_.Mutable(index);
}
::naothmessages::Pose3D* CameraInfo::add_transformation() {
  // @@protoc_insertion_point(field_add:naothmessages.CameraInfo.transformation)
  return transformation_.Add();
}
::google::protobuf::RepeatedPtrField< ::naothmessages::Pose3D >*
CameraInfo::mutable_transformation() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.CameraInfo.transformation)
  return &transformation_;
}
const ::google::protobuf::RepeatedPtrField< ::naothmessages::Pose3D >&
CameraInfo::transformation() const {
  // @@protoc_insertion_point(field_list:naothmessages.CameraInfo.transformation)
  return transformation_;
}

// optional double openingAngleDiagonal = 15;
bool CameraInfo::has_openinganglediagonal() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CameraInfo::set_has_openinganglediagonal() {
  _has_bits_[0] |= 0x00000800u;
}
void CameraInfo::clear_has_openinganglediagonal() {
  _has_bits_[0] &= ~0x00000800u;
}
void CameraInfo::clear_openinganglediagonal() {
  openinganglediagonal_ = 0;
  clear_has_openinganglediagonal();
}
double CameraInfo::openinganglediagonal() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.openingAngleDiagonal)
  return openinganglediagonal_;
}
void CameraInfo::set_openinganglediagonal(double value) {
  set_has_openinganglediagonal();
  openinganglediagonal_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraInfo.openingAngleDiagonal)
}

// optional double pixelSize = 16;
bool CameraInfo::has_pixelsize() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CameraInfo::set_has_pixelsize() {
  _has_bits_[0] |= 0x00001000u;
}
void CameraInfo::clear_has_pixelsize() {
  _has_bits_[0] &= ~0x00001000u;
}
void CameraInfo::clear_pixelsize() {
  pixelsize_ = 0;
  clear_has_pixelsize();
}
double CameraInfo::pixelsize() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.pixelSize)
  return pixelsize_;
}
void CameraInfo::set_pixelsize(double value) {
  set_has_pixelsize();
  pixelsize_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraInfo.pixelSize)
}

// optional double focus = 17;
bool CameraInfo::has_focus() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CameraInfo::set_has_focus() {
  _has_bits_[0] |= 0x00002000u;
}
void CameraInfo::clear_has_focus() {
  _has_bits_[0] &= ~0x00002000u;
}
void CameraInfo::clear_focus() {
  focus_ = 0;
  clear_has_focus();
}
double CameraInfo::focus() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.focus)
  return focus_;
}
void CameraInfo::set_focus(double value) {
  set_has_focus();
  focus_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraInfo.focus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JointData::kPositionFieldNumber;
const int JointData::kStiffnessFieldNumber;
const int JointData::kDpFieldNumber;
const int JointData::kDdpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JointData::JointData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.JointData)
}
JointData::JointData(const JointData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      position_(from.position_),
      stiffness_(from.stiffness_),
      dp_(from.dp_),
      ddp_(from.ddp_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:naothmessages.JointData)
}

void JointData::SharedCtor() {
  _cached_size_ = 0;
}

JointData::~JointData() {
  // @@protoc_insertion_point(destructor:naothmessages.JointData)
  SharedDtor();
}

void JointData::SharedDtor() {
}

void JointData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JointData::descriptor() {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JointData& JointData::default_instance() {
  protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  return *internal_default_instance();
}

JointData* JointData::New(::google::protobuf::Arena* arena) const {
  JointData* n = new JointData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JointData::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.JointData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  stiffness_.Clear();
  dp_.Clear();
  ddp_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool JointData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.JointData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9u, input, this->mutable_position())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_position())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double stiffness = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17u, input, this->mutable_stiffness())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_stiffness())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double dp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25u, input, this->mutable_dp())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dp())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double ddp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33u, input, this->mutable_ddp())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_ddp())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.JointData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.JointData)
  return false;
#undef DO_
}

void JointData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.JointData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double position = 1;
  for (int i = 0, n = this->position_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->position(i), output);
  }

  // repeated double stiffness = 2;
  for (int i = 0, n = this->stiffness_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->stiffness(i), output);
  }

  // repeated double dp = 3;
  for (int i = 0, n = this->dp_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->dp(i), output);
  }

  // repeated double ddp = 4;
  for (int i = 0, n = this->ddp_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->ddp(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.JointData)
}

::google::protobuf::uint8* JointData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.JointData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double position = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(1, this->position_, target);

  // repeated double stiffness = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(2, this->stiffness_, target);

  // repeated double dp = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(3, this->dp_, target);

  // repeated double ddp = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(4, this->ddp_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.JointData)
  return target;
}

size_t JointData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.JointData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated double position = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->position_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->position_size());
    total_size += data_size;
  }

  // repeated double stiffness = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->stiffness_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->stiffness_size());
    total_size += data_size;
  }

  // repeated double dp = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->dp_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dp_size());
    total_size += data_size;
  }

  // repeated double ddp = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->ddp_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ddp_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JointData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.JointData)
  GOOGLE_DCHECK_NE(&from, this);
  const JointData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JointData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.JointData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.JointData)
    MergeFrom(*source);
  }
}

void JointData::MergeFrom(const JointData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.JointData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  stiffness_.MergeFrom(from.stiffness_);
  dp_.MergeFrom(from.dp_);
  ddp_.MergeFrom(from.ddp_);
}

void JointData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.JointData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointData::CopyFrom(const JointData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.JointData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointData::IsInitialized() const {
  return true;
}

void JointData::Swap(JointData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JointData::InternalSwap(JointData* other) {
  using std::swap;
  position_.InternalSwap(&other->position_);
  stiffness_.InternalSwap(&other->stiffness_);
  dp_.InternalSwap(&other->dp_);
  ddp_.InternalSwap(&other->ddp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JointData::GetMetadata() const {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JointData

// repeated double position = 1;
int JointData::position_size() const {
  return position_.size();
}
void JointData::clear_position() {
  position_.Clear();
}
double JointData::position(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.JointData.position)
  return position_.Get(index);
}
void JointData::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.JointData.position)
}
void JointData::add_position(double value) {
  position_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.JointData.position)
}
const ::google::protobuf::RepeatedField< double >&
JointData::position() const {
  // @@protoc_insertion_point(field_list:naothmessages.JointData.position)
  return position_;
}
::google::protobuf::RepeatedField< double >*
JointData::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.JointData.position)
  return &position_;
}

// repeated double stiffness = 2;
int JointData::stiffness_size() const {
  return stiffness_.size();
}
void JointData::clear_stiffness() {
  stiffness_.Clear();
}
double JointData::stiffness(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.JointData.stiffness)
  return stiffness_.Get(index);
}
void JointData::set_stiffness(int index, double value) {
  stiffness_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.JointData.stiffness)
}
void JointData::add_stiffness(double value) {
  stiffness_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.JointData.stiffness)
}
const ::google::protobuf::RepeatedField< double >&
JointData::stiffness() const {
  // @@protoc_insertion_point(field_list:naothmessages.JointData.stiffness)
  return stiffness_;
}
::google::protobuf::RepeatedField< double >*
JointData::mutable_stiffness() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.JointData.stiffness)
  return &stiffness_;
}

// repeated double dp = 3;
int JointData::dp_size() const {
  return dp_.size();
}
void JointData::clear_dp() {
  dp_.Clear();
}
double JointData::dp(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.JointData.dp)
  return dp_.Get(index);
}
void JointData::set_dp(int index, double value) {
  dp_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.JointData.dp)
}
void JointData::add_dp(double value) {
  dp_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.JointData.dp)
}
const ::google::protobuf::RepeatedField< double >&
JointData::dp() const {
  // @@protoc_insertion_point(field_list:naothmessages.JointData.dp)
  return dp_;
}
::google::protobuf::RepeatedField< double >*
JointData::mutable_dp() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.JointData.dp)
  return &dp_;
}

// repeated double ddp = 4;
int JointData::ddp_size() const {
  return ddp_.size();
}
void JointData::clear_ddp() {
  ddp_.Clear();
}
double JointData::ddp(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.JointData.ddp)
  return ddp_.Get(index);
}
void JointData::set_ddp(int index, double value) {
  ddp_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.JointData.ddp)
}
void JointData::add_ddp(double value) {
  ddp_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.JointData.ddp)
}
const ::google::protobuf::RepeatedField< double >&
JointData::ddp() const {
  // @@protoc_insertion_point(field_list:naothmessages.JointData.ddp)
  return ddp_;
}
::google::protobuf::RepeatedField< double >*
JointData::mutable_ddp() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.JointData.ddp)
  return &ddp_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorJointData::kJointDataFieldNumber;
const int SensorJointData::kTemperatureFieldNumber;
const int SensorJointData::kElectricCurrentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorJointData::SensorJointData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.SensorJointData)
}
SensorJointData::SensorJointData(const SensorJointData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      temperature_(from.temperature_),
      electriccurrent_(from.electriccurrent_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_jointdata()) {
    jointdata_ = new ::naothmessages::JointData(*from.jointdata_);
  } else {
    jointdata_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:naothmessages.SensorJointData)
}

void SensorJointData::SharedCtor() {
  _cached_size_ = 0;
  jointdata_ = NULL;
}

SensorJointData::~SensorJointData() {
  // @@protoc_insertion_point(destructor:naothmessages.SensorJointData)
  SharedDtor();
}

void SensorJointData::SharedDtor() {
  if (this != internal_default_instance()) delete jointdata_;
}

void SensorJointData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorJointData::descriptor() {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorJointData& SensorJointData::default_instance() {
  protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  return *internal_default_instance();
}

SensorJointData* SensorJointData::New(::google::protobuf::Arena* arena) const {
  SensorJointData* n = new SensorJointData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorJointData::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.SensorJointData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  temperature_.Clear();
  electriccurrent_.Clear();
  if (has_jointdata()) {
    GOOGLE_DCHECK(jointdata_ != NULL);
    jointdata_->::naothmessages::JointData::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SensorJointData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.SensorJointData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .naothmessages.JointData jointData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jointdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double temperature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17u, input, this->mutable_temperature())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_temperature())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double electricCurrent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25u, input, this->mutable_electriccurrent())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_electriccurrent())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.SensorJointData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.SensorJointData)
  return false;
#undef DO_
}

void SensorJointData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.SensorJointData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.JointData jointData = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->jointdata_, output);
  }

  // repeated double temperature = 2;
  for (int i = 0, n = this->temperature_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->temperature(i), output);
  }

  // repeated double electricCurrent = 3;
  for (int i = 0, n = this->electriccurrent_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->electriccurrent(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.SensorJointData)
}

::google::protobuf::uint8* SensorJointData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.SensorJointData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.JointData jointData = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->jointdata_, deterministic, target);
  }

  // repeated double temperature = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(2, this->temperature_, target);

  // repeated double electricCurrent = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(3, this->electriccurrent_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.SensorJointData)
  return target;
}

size_t SensorJointData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.SensorJointData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .naothmessages.JointData jointData = 1;
  if (has_jointdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->jointdata_);
  }
  // repeated double temperature = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->temperature_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->temperature_size());
    total_size += data_size;
  }

  // repeated double electricCurrent = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->electriccurrent_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->electriccurrent_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorJointData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.SensorJointData)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorJointData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorJointData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.SensorJointData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.SensorJointData)
    MergeFrom(*source);
  }
}

void SensorJointData::MergeFrom(const SensorJointData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.SensorJointData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  temperature_.MergeFrom(from.temperature_);
  electriccurrent_.MergeFrom(from.electriccurrent_);
  if (from.has_jointdata()) {
    mutable_jointdata()->::naothmessages::JointData::MergeFrom(from.jointdata());
  }
}

void SensorJointData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.SensorJointData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorJointData::CopyFrom(const SensorJointData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.SensorJointData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorJointData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SensorJointData::Swap(SensorJointData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorJointData::InternalSwap(SensorJointData* other) {
  using std::swap;
  temperature_.InternalSwap(&other->temperature_);
  electriccurrent_.InternalSwap(&other->electriccurrent_);
  swap(jointdata_, other->jointdata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensorJointData::GetMetadata() const {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorJointData

// required .naothmessages.JointData jointData = 1;
bool SensorJointData::has_jointdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SensorJointData::set_has_jointdata() {
  _has_bits_[0] |= 0x00000001u;
}
void SensorJointData::clear_has_jointdata() {
  _has_bits_[0] &= ~0x00000001u;
}
void SensorJointData::clear_jointdata() {
  if (jointdata_ != NULL) jointdata_->::naothmessages::JointData::Clear();
  clear_has_jointdata();
}
const ::naothmessages::JointData& SensorJointData::jointdata() const {
  const ::naothmessages::JointData* p = jointdata_;
  // @@protoc_insertion_point(field_get:naothmessages.SensorJointData.jointData)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::JointData*>(
      &::naothmessages::_JointData_default_instance_);
}
::naothmessages::JointData* SensorJointData::mutable_jointdata() {
  set_has_jointdata();
  if (jointdata_ == NULL) {
    jointdata_ = new ::naothmessages::JointData;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.SensorJointData.jointData)
  return jointdata_;
}
::naothmessages::JointData* SensorJointData::release_jointdata() {
  // @@protoc_insertion_point(field_release:naothmessages.SensorJointData.jointData)
  clear_has_jointdata();
  ::naothmessages::JointData* temp = jointdata_;
  jointdata_ = NULL;
  return temp;
}
void SensorJointData::set_allocated_jointdata(::naothmessages::JointData* jointdata) {
  delete jointdata_;
  jointdata_ = jointdata;
  if (jointdata) {
    set_has_jointdata();
  } else {
    clear_has_jointdata();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.SensorJointData.jointData)
}

// repeated double temperature = 2;
int SensorJointData::temperature_size() const {
  return temperature_.size();
}
void SensorJointData::clear_temperature() {
  temperature_.Clear();
}
double SensorJointData::temperature(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.SensorJointData.temperature)
  return temperature_.Get(index);
}
void SensorJointData::set_temperature(int index, double value) {
  temperature_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.SensorJointData.temperature)
}
void SensorJointData::add_temperature(double value) {
  temperature_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.SensorJointData.temperature)
}
const ::google::protobuf::RepeatedField< double >&
SensorJointData::temperature() const {
  // @@protoc_insertion_point(field_list:naothmessages.SensorJointData.temperature)
  return temperature_;
}
::google::protobuf::RepeatedField< double >*
SensorJointData::mutable_temperature() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.SensorJointData.temperature)
  return &temperature_;
}

// repeated double electricCurrent = 3;
int SensorJointData::electriccurrent_size() const {
  return electriccurrent_.size();
}
void SensorJointData::clear_electriccurrent() {
  electriccurrent_.Clear();
}
double SensorJointData::electriccurrent(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.SensorJointData.electricCurrent)
  return electriccurrent_.Get(index);
}
void SensorJointData::set_electriccurrent(int index, double value) {
  electriccurrent_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.SensorJointData.electricCurrent)
}
void SensorJointData::add_electriccurrent(double value) {
  electriccurrent_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.SensorJointData.electricCurrent)
}
const ::google::protobuf::RepeatedField< double >&
SensorJointData::electriccurrent() const {
  // @@protoc_insertion_point(field_list:naothmessages.SensorJointData.electricCurrent)
  return electriccurrent_;
}
::google::protobuf::RepeatedField< double >*
SensorJointData::mutable_electriccurrent() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.SensorJointData.electricCurrent)
  return &electriccurrent_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UltraSoundReceiveData::kUltraSoundTimeStepFieldNumber;
const int UltraSoundReceiveData::kRawdataFieldNumber;
const int UltraSoundReceiveData::kDataLeftFieldNumber;
const int UltraSoundReceiveData::kDataRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UltraSoundReceiveData::UltraSoundReceiveData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.UltraSoundReceiveData)
}
UltraSoundReceiveData::UltraSoundReceiveData(const UltraSoundReceiveData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dataleft_(from.dataleft_),
      dataright_(from.dataright_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rawdata_, &from.rawdata_,
    static_cast<size_t>(reinterpret_cast<char*>(&ultrasoundtimestep_) -
    reinterpret_cast<char*>(&rawdata_)) + sizeof(ultrasoundtimestep_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.UltraSoundReceiveData)
}

void UltraSoundReceiveData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&rawdata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ultrasoundtimestep_) -
      reinterpret_cast<char*>(&rawdata_)) + sizeof(ultrasoundtimestep_));
}

UltraSoundReceiveData::~UltraSoundReceiveData() {
  // @@protoc_insertion_point(destructor:naothmessages.UltraSoundReceiveData)
  SharedDtor();
}

void UltraSoundReceiveData::SharedDtor() {
}

void UltraSoundReceiveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UltraSoundReceiveData::descriptor() {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UltraSoundReceiveData& UltraSoundReceiveData::default_instance() {
  protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  return *internal_default_instance();
}

UltraSoundReceiveData* UltraSoundReceiveData::New(::google::protobuf::Arena* arena) const {
  UltraSoundReceiveData* n = new UltraSoundReceiveData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UltraSoundReceiveData::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.UltraSoundReceiveData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataleft_.Clear();
  dataright_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&rawdata_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ultrasoundtimestep_) -
        reinterpret_cast<char*>(&rawdata_)) + sizeof(ultrasoundtimestep_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UltraSoundReceiveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.UltraSoundReceiveData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ultraSoundTimeStep = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ultrasoundtimestep();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ultrasoundtimestep_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double rawdata = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_rawdata();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rawdata_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double dataLeft = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25u, input, this->mutable_dataleft())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dataleft())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double dataRight = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33u, input, this->mutable_dataright())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dataright())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.UltraSoundReceiveData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.UltraSoundReceiveData)
  return false;
#undef DO_
}

void UltraSoundReceiveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.UltraSoundReceiveData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ultraSoundTimeStep = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ultrasoundtimestep(), output);
  }

  // required double rawdata = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->rawdata(), output);
  }

  // repeated double dataLeft = 3;
  for (int i = 0, n = this->dataleft_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->dataleft(i), output);
  }

  // repeated double dataRight = 4;
  for (int i = 0, n = this->dataright_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->dataright(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.UltraSoundReceiveData)
}

::google::protobuf::uint8* UltraSoundReceiveData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.UltraSoundReceiveData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ultraSoundTimeStep = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ultrasoundtimestep(), target);
  }

  // required double rawdata = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->rawdata(), target);
  }

  // repeated double dataLeft = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(3, this->dataleft_, target);

  // repeated double dataRight = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(4, this->dataright_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.UltraSoundReceiveData)
  return target;
}

size_t UltraSoundReceiveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.UltraSoundReceiveData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required double rawdata = 2;
  if (has_rawdata()) {
    total_size += 1 + 8;
  }
  // repeated double dataLeft = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->dataleft_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dataleft_size());
    total_size += data_size;
  }

  // repeated double dataRight = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->dataright_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dataright_size());
    total_size += data_size;
  }

  // optional uint32 ultraSoundTimeStep = 1;
  if (has_ultrasoundtimestep()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ultrasoundtimestep());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UltraSoundReceiveData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.UltraSoundReceiveData)
  GOOGLE_DCHECK_NE(&from, this);
  const UltraSoundReceiveData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UltraSoundReceiveData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.UltraSoundReceiveData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.UltraSoundReceiveData)
    MergeFrom(*source);
  }
}

void UltraSoundReceiveData::MergeFrom(const UltraSoundReceiveData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.UltraSoundReceiveData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dataleft_.MergeFrom(from.dataleft_);
  dataright_.MergeFrom(from.dataright_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      rawdata_ = from.rawdata_;
    }
    if (cached_has_bits & 0x00000002u) {
      ultrasoundtimestep_ = from.ultrasoundtimestep_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UltraSoundReceiveData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.UltraSoundReceiveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UltraSoundReceiveData::CopyFrom(const UltraSoundReceiveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.UltraSoundReceiveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltraSoundReceiveData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UltraSoundReceiveData::Swap(UltraSoundReceiveData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UltraSoundReceiveData::InternalSwap(UltraSoundReceiveData* other) {
  using std::swap;
  dataleft_.InternalSwap(&other->dataleft_);
  dataright_.InternalSwap(&other->dataright_);
  swap(rawdata_, other->rawdata_);
  swap(ultrasoundtimestep_, other->ultrasoundtimestep_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UltraSoundReceiveData::GetMetadata() const {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UltraSoundReceiveData

// optional uint32 ultraSoundTimeStep = 1;
bool UltraSoundReceiveData::has_ultrasoundtimestep() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UltraSoundReceiveData::set_has_ultrasoundtimestep() {
  _has_bits_[0] |= 0x00000002u;
}
void UltraSoundReceiveData::clear_has_ultrasoundtimestep() {
  _has_bits_[0] &= ~0x00000002u;
}
void UltraSoundReceiveData::clear_ultrasoundtimestep() {
  ultrasoundtimestep_ = 0u;
  clear_has_ultrasoundtimestep();
}
::google::protobuf::uint32 UltraSoundReceiveData::ultrasoundtimestep() const {
  // @@protoc_insertion_point(field_get:naothmessages.UltraSoundReceiveData.ultraSoundTimeStep)
  return ultrasoundtimestep_;
}
void UltraSoundReceiveData::set_ultrasoundtimestep(::google::protobuf::uint32 value) {
  set_has_ultrasoundtimestep();
  ultrasoundtimestep_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.UltraSoundReceiveData.ultraSoundTimeStep)
}

// required double rawdata = 2;
bool UltraSoundReceiveData::has_rawdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UltraSoundReceiveData::set_has_rawdata() {
  _has_bits_[0] |= 0x00000001u;
}
void UltraSoundReceiveData::clear_has_rawdata() {
  _has_bits_[0] &= ~0x00000001u;
}
void UltraSoundReceiveData::clear_rawdata() {
  rawdata_ = 0;
  clear_has_rawdata();
}
double UltraSoundReceiveData::rawdata() const {
  // @@protoc_insertion_point(field_get:naothmessages.UltraSoundReceiveData.rawdata)
  return rawdata_;
}
void UltraSoundReceiveData::set_rawdata(double value) {
  set_has_rawdata();
  rawdata_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.UltraSoundReceiveData.rawdata)
}

// repeated double dataLeft = 3;
int UltraSoundReceiveData::dataleft_size() const {
  return dataleft_.size();
}
void UltraSoundReceiveData::clear_dataleft() {
  dataleft_.Clear();
}
double UltraSoundReceiveData::dataleft(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.UltraSoundReceiveData.dataLeft)
  return dataleft_.Get(index);
}
void UltraSoundReceiveData::set_dataleft(int index, double value) {
  dataleft_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.UltraSoundReceiveData.dataLeft)
}
void UltraSoundReceiveData::add_dataleft(double value) {
  dataleft_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.UltraSoundReceiveData.dataLeft)
}
const ::google::protobuf::RepeatedField< double >&
UltraSoundReceiveData::dataleft() const {
  // @@protoc_insertion_point(field_list:naothmessages.UltraSoundReceiveData.dataLeft)
  return dataleft_;
}
::google::protobuf::RepeatedField< double >*
UltraSoundReceiveData::mutable_dataleft() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.UltraSoundReceiveData.dataLeft)
  return &dataleft_;
}

// repeated double dataRight = 4;
int UltraSoundReceiveData::dataright_size() const {
  return dataright_.size();
}
void UltraSoundReceiveData::clear_dataright() {
  dataright_.Clear();
}
double UltraSoundReceiveData::dataright(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.UltraSoundReceiveData.dataRight)
  return dataright_.Get(index);
}
void UltraSoundReceiveData::set_dataright(int index, double value) {
  dataright_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.UltraSoundReceiveData.dataRight)
}
void UltraSoundReceiveData::add_dataright(double value) {
  dataright_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.UltraSoundReceiveData.dataRight)
}
const ::google::protobuf::RepeatedField< double >&
UltraSoundReceiveData::dataright() const {
  // @@protoc_insertion_point(field_list:naothmessages.UltraSoundReceiveData.dataRight)
  return dataright_;
}
::google::protobuf::RepeatedField< double >*
UltraSoundReceiveData::mutable_dataright() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.UltraSoundReceiveData.dataRight)
  return &dataright_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameInfo::kFrameNumberFieldNumber;
const int FrameInfo::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameInfo::FrameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.FrameInfo)
}
FrameInfo::FrameInfo(const FrameInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&framenumber_, &from.framenumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&framenumber_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:naothmessages.FrameInfo)
}

void FrameInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&framenumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&framenumber_)) + sizeof(time_));
}

FrameInfo::~FrameInfo() {
  // @@protoc_insertion_point(destructor:naothmessages.FrameInfo)
  SharedDtor();
}

void FrameInfo::SharedDtor() {
}

void FrameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameInfo::descriptor() {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FrameInfo& FrameInfo::default_instance() {
  protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  return *internal_default_instance();
}

FrameInfo* FrameInfo::New(::google::protobuf::Arena* arena) const {
  FrameInfo* n = new FrameInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FrameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.FrameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&framenumber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_) -
        reinterpret_cast<char*>(&framenumber_)) + sizeof(time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FrameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.FrameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 frameNumber = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_framenumber();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framenumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.FrameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.FrameInfo)
  return false;
#undef DO_
}

void FrameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.FrameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 frameNumber = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->framenumber(), output);
  }

  // required uint32 time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.FrameInfo)
}

::google::protobuf::uint8* FrameInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.FrameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 frameNumber = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->framenumber(), target);
  }

  // required uint32 time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.FrameInfo)
  return target;
}

size_t FrameInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:naothmessages.FrameInfo)
  size_t total_size = 0;

  if (has_framenumber()) {
    // required uint32 frameNumber = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->framenumber());
  }

  if (has_time()) {
    // required uint32 time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());
  }

  return total_size;
}
size_t FrameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.FrameInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 frameNumber = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->framenumber());

    // required uint32 time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.FrameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrameInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.FrameInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.FrameInfo)
    MergeFrom(*source);
  }
}

void FrameInfo::MergeFrom(const FrameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.FrameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      framenumber_ = from.framenumber_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FrameInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.FrameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameInfo::CopyFrom(const FrameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.FrameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void FrameInfo::Swap(FrameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrameInfo::InternalSwap(FrameInfo* other) {
  using std::swap;
  swap(framenumber_, other->framenumber_);
  swap(time_, other->time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FrameInfo::GetMetadata() const {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FrameInfo

// required uint32 frameNumber = 1;
bool FrameInfo::has_framenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FrameInfo::set_has_framenumber() {
  _has_bits_[0] |= 0x00000001u;
}
void FrameInfo::clear_has_framenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
void FrameInfo::clear_framenumber() {
  framenumber_ = 0u;
  clear_has_framenumber();
}
::google::protobuf::uint32 FrameInfo::framenumber() const {
  // @@protoc_insertion_point(field_get:naothmessages.FrameInfo.frameNumber)
  return framenumber_;
}
void FrameInfo::set_framenumber(::google::protobuf::uint32 value) {
  set_has_framenumber();
  framenumber_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.FrameInfo.frameNumber)
}

// required uint32 time = 2;
bool FrameInfo::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FrameInfo::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void FrameInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void FrameInfo::clear_time() {
  time_ = 0u;
  clear_has_time();
}
::google::protobuf::uint32 FrameInfo::time() const {
  // @@protoc_insertion_point(field_get:naothmessages.FrameInfo.time)
  return time_;
}
void FrameInfo::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.FrameInfo.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotInfo::kPlatformFieldNumber;
const int RobotInfo::kBodyNickNameFieldNumber;
const int RobotInfo::kHeadNickNameFieldNumber;
const int RobotInfo::kBodyIDFieldNumber;
const int RobotInfo::kBasicTimeStepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotInfo::RobotInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.RobotInfo)
}
RobotInfo::RobotInfo(const RobotInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_platform()) {
    platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_);
  }
  bodynickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bodynickname()) {
    bodynickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bodynickname_);
  }
  headnickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_headnickname()) {
    headnickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headnickname_);
  }
  bodyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bodyid()) {
    bodyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bodyid_);
  }
  basictimestep_ = from.basictimestep_;
  // @@protoc_insertion_point(copy_constructor:naothmessages.RobotInfo)
}

void RobotInfo::SharedCtor() {
  _cached_size_ = 0;
  platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bodynickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headnickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bodyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  basictimestep_ = 0u;
}

RobotInfo::~RobotInfo() {
  // @@protoc_insertion_point(destructor:naothmessages.RobotInfo)
  SharedDtor();
}

void RobotInfo::SharedDtor() {
  platform_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bodynickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headnickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bodyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RobotInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotInfo::descriptor() {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RobotInfo& RobotInfo::default_instance() {
  protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  return *internal_default_instance();
}

RobotInfo* RobotInfo::New(::google::protobuf::Arena* arena) const {
  RobotInfo* n = new RobotInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RobotInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.RobotInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!platform_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*platform_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!bodynickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bodynickname_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!headnickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*headnickname_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!bodyid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bodyid_.UnsafeRawStringPointer())->clear();
    }
  }
  basictimestep_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RobotInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.RobotInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string platform = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform().data(), static_cast<int>(this->platform().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "naothmessages.RobotInfo.platform");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string bodyNickName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bodynickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bodynickname().data(), static_cast<int>(this->bodynickname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "naothmessages.RobotInfo.bodyNickName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string headNickName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headnickname().data(), static_cast<int>(this->headnickname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "naothmessages.RobotInfo.headNickName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string bodyID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bodyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bodyid().data(), static_cast<int>(this->bodyid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "naothmessages.RobotInfo.bodyID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 basicTimeStep = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_basictimestep();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &basictimestep_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.RobotInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.RobotInfo)
  return false;
#undef DO_
}

void RobotInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.RobotInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string platform = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), static_cast<int>(this->platform().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "naothmessages.RobotInfo.platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->platform(), output);
  }

  // optional string bodyNickName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bodynickname().data(), static_cast<int>(this->bodynickname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "naothmessages.RobotInfo.bodyNickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bodynickname(), output);
  }

  // optional string headNickName = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headnickname().data(), static_cast<int>(this->headnickname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "naothmessages.RobotInfo.headNickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->headnickname(), output);
  }

  // optional string bodyID = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bodyid().data(), static_cast<int>(this->bodyid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "naothmessages.RobotInfo.bodyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bodyid(), output);
  }

  // optional uint32 basicTimeStep = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->basictimestep(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.RobotInfo)
}

::google::protobuf::uint8* RobotInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.RobotInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string platform = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), static_cast<int>(this->platform().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "naothmessages.RobotInfo.platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->platform(), target);
  }

  // optional string bodyNickName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bodynickname().data(), static_cast<int>(this->bodynickname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "naothmessages.RobotInfo.bodyNickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bodynickname(), target);
  }

  // optional string headNickName = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headnickname().data(), static_cast<int>(this->headnickname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "naothmessages.RobotInfo.headNickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->headnickname(), target);
  }

  // optional string bodyID = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bodyid().data(), static_cast<int>(this->bodyid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "naothmessages.RobotInfo.bodyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bodyid(), target);
  }

  // optional uint32 basicTimeStep = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->basictimestep(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.RobotInfo)
  return target;
}

size_t RobotInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.RobotInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string platform = 1;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional string bodyNickName = 2;
    if (has_bodynickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bodynickname());
    }

    // optional string headNickName = 3;
    if (has_headnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headnickname());
    }

    // optional string bodyID = 4;
    if (has_bodyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bodyid());
    }

    // optional uint32 basicTimeStep = 5;
    if (has_basictimestep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->basictimestep());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.RobotInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RobotInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.RobotInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.RobotInfo)
    MergeFrom(*source);
  }
}

void RobotInfo::MergeFrom(const RobotInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.RobotInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_platform();
      platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_bodynickname();
      bodynickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bodynickname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_headnickname();
      headnickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headnickname_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_bodyid();
      bodyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bodyid_);
    }
    if (cached_has_bits & 0x00000010u) {
      basictimestep_ = from.basictimestep_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RobotInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.RobotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotInfo::CopyFrom(const RobotInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.RobotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotInfo::IsInitialized() const {
  return true;
}

void RobotInfo::Swap(RobotInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotInfo::InternalSwap(RobotInfo* other) {
  using std::swap;
  platform_.Swap(&other->platform_);
  bodynickname_.Swap(&other->bodynickname_);
  headnickname_.Swap(&other->headnickname_);
  bodyid_.Swap(&other->bodyid_);
  swap(basictimestep_, other->basictimestep_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RobotInfo::GetMetadata() const {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RobotInfo

// optional string platform = 1;
bool RobotInfo::has_platform() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RobotInfo::set_has_platform() {
  _has_bits_[0] |= 0x00000001u;
}
void RobotInfo::clear_has_platform() {
  _has_bits_[0] &= ~0x00000001u;
}
void RobotInfo::clear_platform() {
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platform();
}
const ::std::string& RobotInfo::platform() const {
  // @@protoc_insertion_point(field_get:naothmessages.RobotInfo.platform)
  return platform_.GetNoArena();
}
void RobotInfo::set_platform(const ::std::string& value) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naothmessages.RobotInfo.platform)
}
#if LANG_CXX11
void RobotInfo::set_platform(::std::string&& value) {
  set_has_platform();
  platform_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:naothmessages.RobotInfo.platform)
}
#endif
void RobotInfo::set_platform(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naothmessages.RobotInfo.platform)
}
void RobotInfo::set_platform(const char* value, size_t size) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naothmessages.RobotInfo.platform)
}
::std::string* RobotInfo::mutable_platform() {
  set_has_platform();
  // @@protoc_insertion_point(field_mutable:naothmessages.RobotInfo.platform)
  return platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RobotInfo::release_platform() {
  // @@protoc_insertion_point(field_release:naothmessages.RobotInfo.platform)
  clear_has_platform();
  return platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RobotInfo::set_allocated_platform(::std::string* platform) {
  if (platform != NULL) {
    set_has_platform();
  } else {
    clear_has_platform();
  }
  platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:naothmessages.RobotInfo.platform)
}

// optional string bodyNickName = 2;
bool RobotInfo::has_bodynickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RobotInfo::set_has_bodynickname() {
  _has_bits_[0] |= 0x00000002u;
}
void RobotInfo::clear_has_bodynickname() {
  _has_bits_[0] &= ~0x00000002u;
}
void RobotInfo::clear_bodynickname() {
  bodynickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bodynickname();
}
const ::std::string& RobotInfo::bodynickname() const {
  // @@protoc_insertion_point(field_get:naothmessages.RobotInfo.bodyNickName)
  return bodynickname_.GetNoArena();
}
void RobotInfo::set_bodynickname(const ::std::string& value) {
  set_has_bodynickname();
  bodynickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naothmessages.RobotInfo.bodyNickName)
}
#if LANG_CXX11
void RobotInfo::set_bodynickname(::std::string&& value) {
  set_has_bodynickname();
  bodynickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:naothmessages.RobotInfo.bodyNickName)
}
#endif
void RobotInfo::set_bodynickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bodynickname();
  bodynickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naothmessages.RobotInfo.bodyNickName)
}
void RobotInfo::set_bodynickname(const char* value, size_t size) {
  set_has_bodynickname();
  bodynickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naothmessages.RobotInfo.bodyNickName)
}
::std::string* RobotInfo::mutable_bodynickname() {
  set_has_bodynickname();
  // @@protoc_insertion_point(field_mutable:naothmessages.RobotInfo.bodyNickName)
  return bodynickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RobotInfo::release_bodynickname() {
  // @@protoc_insertion_point(field_release:naothmessages.RobotInfo.bodyNickName)
  clear_has_bodynickname();
  return bodynickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RobotInfo::set_allocated_bodynickname(::std::string* bodynickname) {
  if (bodynickname != NULL) {
    set_has_bodynickname();
  } else {
    clear_has_bodynickname();
  }
  bodynickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bodynickname);
  // @@protoc_insertion_point(field_set_allocated:naothmessages.RobotInfo.bodyNickName)
}

// optional string headNickName = 3;
bool RobotInfo::has_headnickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RobotInfo::set_has_headnickname() {
  _has_bits_[0] |= 0x00000004u;
}
void RobotInfo::clear_has_headnickname() {
  _has_bits_[0] &= ~0x00000004u;
}
void RobotInfo::clear_headnickname() {
  headnickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headnickname();
}
const ::std::string& RobotInfo::headnickname() const {
  // @@protoc_insertion_point(field_get:naothmessages.RobotInfo.headNickName)
  return headnickname_.GetNoArena();
}
void RobotInfo::set_headnickname(const ::std::string& value) {
  set_has_headnickname();
  headnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naothmessages.RobotInfo.headNickName)
}
#if LANG_CXX11
void RobotInfo::set_headnickname(::std::string&& value) {
  set_has_headnickname();
  headnickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:naothmessages.RobotInfo.headNickName)
}
#endif
void RobotInfo::set_headnickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_headnickname();
  headnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naothmessages.RobotInfo.headNickName)
}
void RobotInfo::set_headnickname(const char* value, size_t size) {
  set_has_headnickname();
  headnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naothmessages.RobotInfo.headNickName)
}
::std::string* RobotInfo::mutable_headnickname() {
  set_has_headnickname();
  // @@protoc_insertion_point(field_mutable:naothmessages.RobotInfo.headNickName)
  return headnickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RobotInfo::release_headnickname() {
  // @@protoc_insertion_point(field_release:naothmessages.RobotInfo.headNickName)
  clear_has_headnickname();
  return headnickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RobotInfo::set_allocated_headnickname(::std::string* headnickname) {
  if (headnickname != NULL) {
    set_has_headnickname();
  } else {
    clear_has_headnickname();
  }
  headnickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headnickname);
  // @@protoc_insertion_point(field_set_allocated:naothmessages.RobotInfo.headNickName)
}

// optional string bodyID = 4;
bool RobotInfo::has_bodyid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RobotInfo::set_has_bodyid() {
  _has_bits_[0] |= 0x00000008u;
}
void RobotInfo::clear_has_bodyid() {
  _has_bits_[0] &= ~0x00000008u;
}
void RobotInfo::clear_bodyid() {
  bodyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bodyid();
}
const ::std::string& RobotInfo::bodyid() const {
  // @@protoc_insertion_point(field_get:naothmessages.RobotInfo.bodyID)
  return bodyid_.GetNoArena();
}
void RobotInfo::set_bodyid(const ::std::string& value) {
  set_has_bodyid();
  bodyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naothmessages.RobotInfo.bodyID)
}
#if LANG_CXX11
void RobotInfo::set_bodyid(::std::string&& value) {
  set_has_bodyid();
  bodyid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:naothmessages.RobotInfo.bodyID)
}
#endif
void RobotInfo::set_bodyid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bodyid();
  bodyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naothmessages.RobotInfo.bodyID)
}
void RobotInfo::set_bodyid(const char* value, size_t size) {
  set_has_bodyid();
  bodyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naothmessages.RobotInfo.bodyID)
}
::std::string* RobotInfo::mutable_bodyid() {
  set_has_bodyid();
  // @@protoc_insertion_point(field_mutable:naothmessages.RobotInfo.bodyID)
  return bodyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RobotInfo::release_bodyid() {
  // @@protoc_insertion_point(field_release:naothmessages.RobotInfo.bodyID)
  clear_has_bodyid();
  return bodyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RobotInfo::set_allocated_bodyid(::std::string* bodyid) {
  if (bodyid != NULL) {
    set_has_bodyid();
  } else {
    clear_has_bodyid();
  }
  bodyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bodyid);
  // @@protoc_insertion_point(field_set_allocated:naothmessages.RobotInfo.bodyID)
}

// optional uint32 basicTimeStep = 5;
bool RobotInfo::has_basictimestep() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RobotInfo::set_has_basictimestep() {
  _has_bits_[0] |= 0x00000010u;
}
void RobotInfo::clear_has_basictimestep() {
  _has_bits_[0] &= ~0x00000010u;
}
void RobotInfo::clear_basictimestep() {
  basictimestep_ = 0u;
  clear_has_basictimestep();
}
::google::protobuf::uint32 RobotInfo::basictimestep() const {
  // @@protoc_insertion_point(field_get:naothmessages.RobotInfo.basicTimeStep)
  return basictimestep_;
}
void RobotInfo::set_basictimestep(::google::protobuf::uint32 value) {
  set_has_basictimestep();
  basictimestep_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.RobotInfo.basicTimeStep)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FSRData::kForceFieldNumber;
const int FSRData::kDataFieldNumber;
const int FSRData::kValidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FSRData::FSRData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.FSRData)
}
FSRData::FSRData(const FSRData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      force_(from.force_),
      data_(from.data_),
      valid_(from.valid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:naothmessages.FSRData)
}

void FSRData::SharedCtor() {
  _cached_size_ = 0;
}

FSRData::~FSRData() {
  // @@protoc_insertion_point(destructor:naothmessages.FSRData)
  SharedDtor();
}

void FSRData::SharedDtor() {
}

void FSRData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FSRData::descriptor() {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FSRData& FSRData::default_instance() {
  protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  return *internal_default_instance();
}

FSRData* FSRData::New(::google::protobuf::Arena* arena) const {
  FSRData* n = new FSRData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FSRData::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.FSRData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  force_.Clear();
  data_.Clear();
  valid_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FSRData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.FSRData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double force = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9u, input, this->mutable_force())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_force())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17u, input, this->mutable_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool valid = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 24u, input, this->mutable_valid())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_valid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.FSRData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.FSRData)
  return false;
#undef DO_
}

void FSRData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.FSRData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double force = 1 [deprecated = true];
  for (int i = 0, n = this->force_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->force(i), output);
  }

  // repeated double data = 2;
  for (int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->data(i), output);
  }

  // repeated bool valid = 3 [deprecated = true];
  for (int i = 0, n = this->valid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      3, this->valid(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.FSRData)
}

::google::protobuf::uint8* FSRData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.FSRData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double force = 1 [deprecated = true];
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(1, this->force_, target);

  // repeated double data = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(2, this->data_, target);

  // repeated bool valid = 3 [deprecated = true];
  target = ::google::protobuf::internal::WireFormatLite::
    WriteBoolToArray(3, this->valid_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.FSRData)
  return target;
}

size_t FSRData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.FSRData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated double force = 1 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->force_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->force_size());
    total_size += data_size;
  }

  // repeated double data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->data_size());
    total_size += data_size;
  }

  // repeated bool valid = 3 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->valid_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->valid_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FSRData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.FSRData)
  GOOGLE_DCHECK_NE(&from, this);
  const FSRData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FSRData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.FSRData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.FSRData)
    MergeFrom(*source);
  }
}

void FSRData::MergeFrom(const FSRData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.FSRData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  force_.MergeFrom(from.force_);
  data_.MergeFrom(from.data_);
  valid_.MergeFrom(from.valid_);
}

void FSRData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.FSRData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FSRData::CopyFrom(const FSRData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.FSRData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FSRData::IsInitialized() const {
  return true;
}

void FSRData::Swap(FSRData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FSRData::InternalSwap(FSRData* other) {
  using std::swap;
  force_.InternalSwap(&other->force_);
  data_.InternalSwap(&other->data_);
  valid_.InternalSwap(&other->valid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FSRData::GetMetadata() const {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FSRData

// repeated double force = 1 [deprecated = true];
int FSRData::force_size() const {
  return force_.size();
}
void FSRData::clear_force() {
  force_.Clear();
}
double FSRData::force(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.FSRData.force)
  return force_.Get(index);
}
void FSRData::set_force(int index, double value) {
  force_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.FSRData.force)
}
void FSRData::add_force(double value) {
  force_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.FSRData.force)
}
const ::google::protobuf::RepeatedField< double >&
FSRData::force() const {
  // @@protoc_insertion_point(field_list:naothmessages.FSRData.force)
  return force_;
}
::google::protobuf::RepeatedField< double >*
FSRData::mutable_force() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.FSRData.force)
  return &force_;
}

// repeated double data = 2;
int FSRData::data_size() const {
  return data_.size();
}
void FSRData::clear_data() {
  data_.Clear();
}
double FSRData::data(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.FSRData.data)
  return data_.Get(index);
}
void FSRData::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.FSRData.data)
}
void FSRData::add_data(double value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.FSRData.data)
}
const ::google::protobuf::RepeatedField< double >&
FSRData::data() const {
  // @@protoc_insertion_point(field_list:naothmessages.FSRData.data)
  return data_;
}
::google::protobuf::RepeatedField< double >*
FSRData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.FSRData.data)
  return &data_;
}

// repeated bool valid = 3 [deprecated = true];
int FSRData::valid_size() const {
  return valid_.size();
}
void FSRData::clear_valid() {
  valid_.Clear();
}
bool FSRData::valid(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.FSRData.valid)
  return valid_.Get(index);
}
void FSRData::set_valid(int index, bool value) {
  valid_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.FSRData.valid)
}
void FSRData::add_valid(bool value) {
  valid_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.FSRData.valid)
}
const ::google::protobuf::RepeatedField< bool >&
FSRData::valid() const {
  // @@protoc_insertion_point(field_list:naothmessages.FSRData.valid)
  return valid_;
}
::google::protobuf::RepeatedField< bool >*
FSRData::mutable_valid() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.FSRData.valid)
  return &valid_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccelerometerData::kLegacyPackedDataFieldNumber;
const int AccelerometerData::kDataFieldNumber;
const int AccelerometerData::kRawDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccelerometerData::AccelerometerData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.AccelerometerData)
}
AccelerometerData::AccelerometerData(const AccelerometerData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      legacypackeddata_(from.legacypackeddata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::naothmessages::DoubleVector3(*from.data_);
  } else {
    data_ = NULL;
  }
  if (from.has_rawdata()) {
    rawdata_ = new ::naothmessages::DoubleVector3(*from.rawdata_);
  } else {
    rawdata_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:naothmessages.AccelerometerData)
}

void AccelerometerData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rawdata_) -
      reinterpret_cast<char*>(&data_)) + sizeof(rawdata_));
}

AccelerometerData::~AccelerometerData() {
  // @@protoc_insertion_point(destructor:naothmessages.AccelerometerData)
  SharedDtor();
}

void AccelerometerData::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete rawdata_;
}

void AccelerometerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccelerometerData::descriptor() {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccelerometerData& AccelerometerData::default_instance() {
  protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  return *internal_default_instance();
}

AccelerometerData* AccelerometerData::New(::google::protobuf::Arena* arena) const {
  AccelerometerData* n = new AccelerometerData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccelerometerData::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.AccelerometerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  legacypackeddata_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(data_ != NULL);
      data_->::naothmessages::DoubleVector3::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rawdata_ != NULL);
      rawdata_->::naothmessages::DoubleVector3::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccelerometerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.AccelerometerData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double legacyPackedData = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9u, input, this->mutable_legacypackeddata())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_legacypackeddata())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector3 data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector3 rawData = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rawdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.AccelerometerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.AccelerometerData)
  return false;
#undef DO_
}

void AccelerometerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.AccelerometerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double legacyPackedData = 1 [deprecated = true];
  for (int i = 0, n = this->legacypackeddata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->legacypackeddata(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.DoubleVector3 data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  // optional .naothmessages.DoubleVector3 rawData = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->rawdata_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.AccelerometerData)
}

::google::protobuf::uint8* AccelerometerData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.AccelerometerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double legacyPackedData = 1 [deprecated = true];
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(1, this->legacypackeddata_, target);

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.DoubleVector3 data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->data_, deterministic, target);
  }

  // optional .naothmessages.DoubleVector3 rawData = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->rawdata_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.AccelerometerData)
  return target;
}

size_t AccelerometerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.AccelerometerData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated double legacyPackedData = 1 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->legacypackeddata_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->legacypackeddata_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .naothmessages.DoubleVector3 data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->data_);
    }

    // optional .naothmessages.DoubleVector3 rawData = 3;
    if (has_rawdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rawdata_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccelerometerData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.AccelerometerData)
  GOOGLE_DCHECK_NE(&from, this);
  const AccelerometerData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccelerometerData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.AccelerometerData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.AccelerometerData)
    MergeFrom(*source);
  }
}

void AccelerometerData::MergeFrom(const AccelerometerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.AccelerometerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  legacypackeddata_.MergeFrom(from.legacypackeddata_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_data()->::naothmessages::DoubleVector3::MergeFrom(from.data());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_rawdata()->::naothmessages::DoubleVector3::MergeFrom(from.rawdata());
    }
  }
}

void AccelerometerData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.AccelerometerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccelerometerData::CopyFrom(const AccelerometerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.AccelerometerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccelerometerData::IsInitialized() const {
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  if (has_rawdata()) {
    if (!this->rawdata_->IsInitialized()) return false;
  }
  return true;
}

void AccelerometerData::Swap(AccelerometerData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccelerometerData::InternalSwap(AccelerometerData* other) {
  using std::swap;
  legacypackeddata_.InternalSwap(&other->legacypackeddata_);
  swap(data_, other->data_);
  swap(rawdata_, other->rawdata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccelerometerData::GetMetadata() const {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccelerometerData

// repeated double legacyPackedData = 1 [deprecated = true];
int AccelerometerData::legacypackeddata_size() const {
  return legacypackeddata_.size();
}
void AccelerometerData::clear_legacypackeddata() {
  legacypackeddata_.Clear();
}
double AccelerometerData::legacypackeddata(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.AccelerometerData.legacyPackedData)
  return legacypackeddata_.Get(index);
}
void AccelerometerData::set_legacypackeddata(int index, double value) {
  legacypackeddata_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.AccelerometerData.legacyPackedData)
}
void AccelerometerData::add_legacypackeddata(double value) {
  legacypackeddata_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.AccelerometerData.legacyPackedData)
}
const ::google::protobuf::RepeatedField< double >&
AccelerometerData::legacypackeddata() const {
  // @@protoc_insertion_point(field_list:naothmessages.AccelerometerData.legacyPackedData)
  return legacypackeddata_;
}
::google::protobuf::RepeatedField< double >*
AccelerometerData::mutable_legacypackeddata() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.AccelerometerData.legacyPackedData)
  return &legacypackeddata_;
}

// optional .naothmessages.DoubleVector3 data = 2;
bool AccelerometerData::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AccelerometerData::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void AccelerometerData::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void AccelerometerData::clear_data() {
  if (data_ != NULL) data_->::naothmessages::DoubleVector3::Clear();
  clear_has_data();
}
const ::naothmessages::DoubleVector3& AccelerometerData::data() const {
  const ::naothmessages::DoubleVector3* p = data_;
  // @@protoc_insertion_point(field_get:naothmessages.AccelerometerData.data)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
::naothmessages::DoubleVector3* AccelerometerData::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.AccelerometerData.data)
  return data_;
}
::naothmessages::DoubleVector3* AccelerometerData::release_data() {
  // @@protoc_insertion_point(field_release:naothmessages.AccelerometerData.data)
  clear_has_data();
  ::naothmessages::DoubleVector3* temp = data_;
  data_ = NULL;
  return temp;
}
void AccelerometerData::set_allocated_data(::naothmessages::DoubleVector3* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.AccelerometerData.data)
}

// optional .naothmessages.DoubleVector3 rawData = 3;
bool AccelerometerData::has_rawdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AccelerometerData::set_has_rawdata() {
  _has_bits_[0] |= 0x00000002u;
}
void AccelerometerData::clear_has_rawdata() {
  _has_bits_[0] &= ~0x00000002u;
}
void AccelerometerData::clear_rawdata() {
  if (rawdata_ != NULL) rawdata_->::naothmessages::DoubleVector3::Clear();
  clear_has_rawdata();
}
const ::naothmessages::DoubleVector3& AccelerometerData::rawdata() const {
  const ::naothmessages::DoubleVector3* p = rawdata_;
  // @@protoc_insertion_point(field_get:naothmessages.AccelerometerData.rawData)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
::naothmessages::DoubleVector3* AccelerometerData::mutable_rawdata() {
  set_has_rawdata();
  if (rawdata_ == NULL) {
    rawdata_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.AccelerometerData.rawData)
  return rawdata_;
}
::naothmessages::DoubleVector3* AccelerometerData::release_rawdata() {
  // @@protoc_insertion_point(field_release:naothmessages.AccelerometerData.rawData)
  clear_has_rawdata();
  ::naothmessages::DoubleVector3* temp = rawdata_;
  rawdata_ = NULL;
  return temp;
}
void AccelerometerData::set_allocated_rawdata(::naothmessages::DoubleVector3* rawdata) {
  delete rawdata_;
  rawdata_ = rawdata;
  if (rawdata) {
    set_has_rawdata();
  } else {
    clear_has_rawdata();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.AccelerometerData.rawData)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GyrometerData::kLegacyPackedDataFieldNumber;
const int GyrometerData::kDataFieldNumber;
const int GyrometerData::kRawDataFieldNumber;
const int GyrometerData::kRefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GyrometerData::GyrometerData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.GyrometerData)
}
GyrometerData::GyrometerData(const GyrometerData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      legacypackeddata_(from.legacypackeddata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::naothmessages::DoubleVector3(*from.data_);
  } else {
    data_ = NULL;
  }
  if (from.has_rawdata()) {
    rawdata_ = new ::naothmessages::DoubleVector3(*from.rawdata_);
  } else {
    rawdata_ = NULL;
  }
  ref_ = from.ref_;
  // @@protoc_insertion_point(copy_constructor:naothmessages.GyrometerData)
}

void GyrometerData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ref_) -
      reinterpret_cast<char*>(&data_)) + sizeof(ref_));
}

GyrometerData::~GyrometerData() {
  // @@protoc_insertion_point(destructor:naothmessages.GyrometerData)
  SharedDtor();
}

void GyrometerData::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete rawdata_;
}

void GyrometerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GyrometerData::descriptor() {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GyrometerData& GyrometerData::default_instance() {
  protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  return *internal_default_instance();
}

GyrometerData* GyrometerData::New(::google::protobuf::Arena* arena) const {
  GyrometerData* n = new GyrometerData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GyrometerData::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.GyrometerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  legacypackeddata_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(data_ != NULL);
      data_->::naothmessages::DoubleVector3::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rawdata_ != NULL);
      rawdata_->::naothmessages::DoubleVector3::Clear();
    }
  }
  ref_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GyrometerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.GyrometerData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double legacyPackedData = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9u, input, this->mutable_legacypackeddata())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_legacypackeddata())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector3 data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector3 rawData = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rawdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ref = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_ref();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.GyrometerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.GyrometerData)
  return false;
#undef DO_
}

void GyrometerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.GyrometerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double legacyPackedData = 1 [deprecated = true];
  for (int i = 0, n = this->legacypackeddata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->legacypackeddata(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.DoubleVector3 data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  // optional .naothmessages.DoubleVector3 rawData = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->rawdata_, output);
  }

  // optional double ref = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ref(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.GyrometerData)
}

::google::protobuf::uint8* GyrometerData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.GyrometerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double legacyPackedData = 1 [deprecated = true];
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(1, this->legacypackeddata_, target);

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.DoubleVector3 data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->data_, deterministic, target);
  }

  // optional .naothmessages.DoubleVector3 rawData = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->rawdata_, deterministic, target);
  }

  // optional double ref = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ref(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.GyrometerData)
  return target;
}

size_t GyrometerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.GyrometerData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated double legacyPackedData = 1 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->legacypackeddata_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->legacypackeddata_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .naothmessages.DoubleVector3 data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->data_);
    }

    // optional .naothmessages.DoubleVector3 rawData = 3;
    if (has_rawdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rawdata_);
    }

    // optional double ref = 4;
    if (has_ref()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GyrometerData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.GyrometerData)
  GOOGLE_DCHECK_NE(&from, this);
  const GyrometerData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GyrometerData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.GyrometerData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.GyrometerData)
    MergeFrom(*source);
  }
}

void GyrometerData::MergeFrom(const GyrometerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.GyrometerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  legacypackeddata_.MergeFrom(from.legacypackeddata_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_data()->::naothmessages::DoubleVector3::MergeFrom(from.data());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_rawdata()->::naothmessages::DoubleVector3::MergeFrom(from.rawdata());
    }
    if (cached_has_bits & 0x00000004u) {
      ref_ = from.ref_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GyrometerData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.GyrometerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GyrometerData::CopyFrom(const GyrometerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.GyrometerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GyrometerData::IsInitialized() const {
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  if (has_rawdata()) {
    if (!this->rawdata_->IsInitialized()) return false;
  }
  return true;
}

void GyrometerData::Swap(GyrometerData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GyrometerData::InternalSwap(GyrometerData* other) {
  using std::swap;
  legacypackeddata_.InternalSwap(&other->legacypackeddata_);
  swap(data_, other->data_);
  swap(rawdata_, other->rawdata_);
  swap(ref_, other->ref_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GyrometerData::GetMetadata() const {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GyrometerData

// repeated double legacyPackedData = 1 [deprecated = true];
int GyrometerData::legacypackeddata_size() const {
  return legacypackeddata_.size();
}
void GyrometerData::clear_legacypackeddata() {
  legacypackeddata_.Clear();
}
double GyrometerData::legacypackeddata(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.GyrometerData.legacyPackedData)
  return legacypackeddata_.Get(index);
}
void GyrometerData::set_legacypackeddata(int index, double value) {
  legacypackeddata_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.GyrometerData.legacyPackedData)
}
void GyrometerData::add_legacypackeddata(double value) {
  legacypackeddata_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.GyrometerData.legacyPackedData)
}
const ::google::protobuf::RepeatedField< double >&
GyrometerData::legacypackeddata() const {
  // @@protoc_insertion_point(field_list:naothmessages.GyrometerData.legacyPackedData)
  return legacypackeddata_;
}
::google::protobuf::RepeatedField< double >*
GyrometerData::mutable_legacypackeddata() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.GyrometerData.legacyPackedData)
  return &legacypackeddata_;
}

// optional .naothmessages.DoubleVector3 data = 2;
bool GyrometerData::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GyrometerData::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void GyrometerData::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void GyrometerData::clear_data() {
  if (data_ != NULL) data_->::naothmessages::DoubleVector3::Clear();
  clear_has_data();
}
const ::naothmessages::DoubleVector3& GyrometerData::data() const {
  const ::naothmessages::DoubleVector3* p = data_;
  // @@protoc_insertion_point(field_get:naothmessages.GyrometerData.data)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
::naothmessages::DoubleVector3* GyrometerData::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.GyrometerData.data)
  return data_;
}
::naothmessages::DoubleVector3* GyrometerData::release_data() {
  // @@protoc_insertion_point(field_release:naothmessages.GyrometerData.data)
  clear_has_data();
  ::naothmessages::DoubleVector3* temp = data_;
  data_ = NULL;
  return temp;
}
void GyrometerData::set_allocated_data(::naothmessages::DoubleVector3* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.GyrometerData.data)
}

// optional .naothmessages.DoubleVector3 rawData = 3;
bool GyrometerData::has_rawdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GyrometerData::set_has_rawdata() {
  _has_bits_[0] |= 0x00000002u;
}
void GyrometerData::clear_has_rawdata() {
  _has_bits_[0] &= ~0x00000002u;
}
void GyrometerData::clear_rawdata() {
  if (rawdata_ != NULL) rawdata_->::naothmessages::DoubleVector3::Clear();
  clear_has_rawdata();
}
const ::naothmessages::DoubleVector3& GyrometerData::rawdata() const {
  const ::naothmessages::DoubleVector3* p = rawdata_;
  // @@protoc_insertion_point(field_get:naothmessages.GyrometerData.rawData)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
::naothmessages::DoubleVector3* GyrometerData::mutable_rawdata() {
  set_has_rawdata();
  if (rawdata_ == NULL) {
    rawdata_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.GyrometerData.rawData)
  return rawdata_;
}
::naothmessages::DoubleVector3* GyrometerData::release_rawdata() {
  // @@protoc_insertion_point(field_release:naothmessages.GyrometerData.rawData)
  clear_has_rawdata();
  ::naothmessages::DoubleVector3* temp = rawdata_;
  rawdata_ = NULL;
  return temp;
}
void GyrometerData::set_allocated_rawdata(::naothmessages::DoubleVector3* rawdata) {
  delete rawdata_;
  rawdata_ = rawdata;
  if (rawdata) {
    set_has_rawdata();
  } else {
    clear_has_rawdata();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.GyrometerData.rawData)
}

// optional double ref = 4;
bool GyrometerData::has_ref() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GyrometerData::set_has_ref() {
  _has_bits_[0] |= 0x00000004u;
}
void GyrometerData::clear_has_ref() {
  _has_bits_[0] &= ~0x00000004u;
}
void GyrometerData::clear_ref() {
  ref_ = 0;
  clear_has_ref();
}
double GyrometerData::ref() const {
  // @@protoc_insertion_point(field_get:naothmessages.GyrometerData.ref)
  return ref_;
}
void GyrometerData::set_ref(double value) {
  set_has_ref();
  ref_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.GyrometerData.ref)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InertialSensorData::kLegacyPackedDataFieldNumber;
const int InertialSensorData::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InertialSensorData::InertialSensorData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.InertialSensorData)
}
InertialSensorData::InertialSensorData(const InertialSensorData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      legacypackeddata_(from.legacypackeddata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::naothmessages::DoubleVector2(*from.data_);
  } else {
    data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:naothmessages.InertialSensorData)
}

void InertialSensorData::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
}

InertialSensorData::~InertialSensorData() {
  // @@protoc_insertion_point(destructor:naothmessages.InertialSensorData)
  SharedDtor();
}

void InertialSensorData::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void InertialSensorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InertialSensorData::descriptor() {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InertialSensorData& InertialSensorData::default_instance() {
  protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  return *internal_default_instance();
}

InertialSensorData* InertialSensorData::New(::google::protobuf::Arena* arena) const {
  InertialSensorData* n = new InertialSensorData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InertialSensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.InertialSensorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  legacypackeddata_.Clear();
  if (has_data()) {
    GOOGLE_DCHECK(data_ != NULL);
    data_->::naothmessages::DoubleVector2::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InertialSensorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.InertialSensorData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double legacyPackedData = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9u, input, this->mutable_legacypackeddata())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_legacypackeddata())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .naothmessages.DoubleVector2 data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.InertialSensorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.InertialSensorData)
  return false;
#undef DO_
}

void InertialSensorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.InertialSensorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double legacyPackedData = 1 [deprecated = true];
  for (int i = 0, n = this->legacypackeddata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->legacypackeddata(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.DoubleVector2 data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.InertialSensorData)
}

::google::protobuf::uint8* InertialSensorData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.InertialSensorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double legacyPackedData = 1 [deprecated = true];
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(1, this->legacypackeddata_, target);

  cached_has_bits = _has_bits_[0];
  // optional .naothmessages.DoubleVector2 data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->data_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.InertialSensorData)
  return target;
}

size_t InertialSensorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.InertialSensorData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated double legacyPackedData = 1 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->legacypackeddata_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->legacypackeddata_size());
    total_size += data_size;
  }

  // optional .naothmessages.DoubleVector2 data = 2;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InertialSensorData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.InertialSensorData)
  GOOGLE_DCHECK_NE(&from, this);
  const InertialSensorData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InertialSensorData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.InertialSensorData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.InertialSensorData)
    MergeFrom(*source);
  }
}

void InertialSensorData::MergeFrom(const InertialSensorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.InertialSensorData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  legacypackeddata_.MergeFrom(from.legacypackeddata_);
  if (from.has_data()) {
    mutable_data()->::naothmessages::DoubleVector2::MergeFrom(from.data());
  }
}

void InertialSensorData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.InertialSensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InertialSensorData::CopyFrom(const InertialSensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.InertialSensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InertialSensorData::IsInitialized() const {
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void InertialSensorData::Swap(InertialSensorData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InertialSensorData::InternalSwap(InertialSensorData* other) {
  using std::swap;
  legacypackeddata_.InternalSwap(&other->legacypackeddata_);
  swap(data_, other->data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InertialSensorData::GetMetadata() const {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InertialSensorData

// repeated double legacyPackedData = 1 [deprecated = true];
int InertialSensorData::legacypackeddata_size() const {
  return legacypackeddata_.size();
}
void InertialSensorData::clear_legacypackeddata() {
  legacypackeddata_.Clear();
}
double InertialSensorData::legacypackeddata(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.InertialSensorData.legacyPackedData)
  return legacypackeddata_.Get(index);
}
void InertialSensorData::set_legacypackeddata(int index, double value) {
  legacypackeddata_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.InertialSensorData.legacyPackedData)
}
void InertialSensorData::add_legacypackeddata(double value) {
  legacypackeddata_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.InertialSensorData.legacyPackedData)
}
const ::google::protobuf::RepeatedField< double >&
InertialSensorData::legacypackeddata() const {
  // @@protoc_insertion_point(field_list:naothmessages.InertialSensorData.legacyPackedData)
  return legacypackeddata_;
}
::google::protobuf::RepeatedField< double >*
InertialSensorData::mutable_legacypackeddata() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.InertialSensorData.legacyPackedData)
  return &legacypackeddata_;
}

// optional .naothmessages.DoubleVector2 data = 2;
bool InertialSensorData::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InertialSensorData::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void InertialSensorData::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void InertialSensorData::clear_data() {
  if (data_ != NULL) data_->::naothmessages::DoubleVector2::Clear();
  clear_has_data();
}
const ::naothmessages::DoubleVector2& InertialSensorData::data() const {
  const ::naothmessages::DoubleVector2* p = data_;
  // @@protoc_insertion_point(field_get:naothmessages.InertialSensorData.data)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
::naothmessages::DoubleVector2* InertialSensorData::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.InertialSensorData.data)
  return data_;
}
::naothmessages::DoubleVector2* InertialSensorData::release_data() {
  // @@protoc_insertion_point(field_release:naothmessages.InertialSensorData.data)
  clear_has_data();
  ::naothmessages::DoubleVector2* temp = data_;
  data_ = NULL;
  return temp;
}
void InertialSensorData::set_allocated_data(::naothmessages::DoubleVector2* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.InertialSensorData.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GPSData::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GPSData::GPSData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.GPSData)
}
GPSData::GPSData(const GPSData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pose()) {
    pose_ = new ::naothmessages::Pose3D(*from.pose_);
  } else {
    pose_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:naothmessages.GPSData)
}

void GPSData::SharedCtor() {
  _cached_size_ = 0;
  pose_ = NULL;
}

GPSData::~GPSData() {
  // @@protoc_insertion_point(destructor:naothmessages.GPSData)
  SharedDtor();
}

void GPSData::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
}

void GPSData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPSData::descriptor() {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GPSData& GPSData::default_instance() {
  protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  return *internal_default_instance();
}

GPSData* GPSData::New(::google::protobuf::Arena* arena) const {
  GPSData* n = new GPSData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GPSData::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.GPSData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_pose()) {
    GOOGLE_DCHECK(pose_ != NULL);
    pose_->::naothmessages::Pose3D::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GPSData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.GPSData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .naothmessages.Pose3D pose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.GPSData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.GPSData)
  return false;
#undef DO_
}

void GPSData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.GPSData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.Pose3D pose = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pose_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.GPSData)
}

::google::protobuf::uint8* GPSData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.GPSData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .naothmessages.Pose3D pose = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pose_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.GPSData)
  return target;
}

size_t GPSData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.GPSData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .naothmessages.Pose3D pose = 1;
  if (has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPSData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.GPSData)
  GOOGLE_DCHECK_NE(&from, this);
  const GPSData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GPSData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.GPSData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.GPSData)
    MergeFrom(*source);
  }
}

void GPSData::MergeFrom(const GPSData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.GPSData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose()) {
    mutable_pose()->::naothmessages::Pose3D::MergeFrom(from.pose());
  }
}

void GPSData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.GPSData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSData::CopyFrom(const GPSData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.GPSData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_pose()) {
    if (!this->pose_->IsInitialized()) return false;
  }
  return true;
}

void GPSData::Swap(GPSData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GPSData::InternalSwap(GPSData* other) {
  using std::swap;
  swap(pose_, other->pose_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GPSData::GetMetadata() const {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GPSData

// required .naothmessages.Pose3D pose = 1;
bool GPSData::has_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GPSData::set_has_pose() {
  _has_bits_[0] |= 0x00000001u;
}
void GPSData::clear_has_pose() {
  _has_bits_[0] &= ~0x00000001u;
}
void GPSData::clear_pose() {
  if (pose_ != NULL) pose_->::naothmessages::Pose3D::Clear();
  clear_has_pose();
}
const ::naothmessages::Pose3D& GPSData::pose() const {
  const ::naothmessages::Pose3D* p = pose_;
  // @@protoc_insertion_point(field_get:naothmessages.GPSData.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::Pose3D*>(
      &::naothmessages::_Pose3D_default_instance_);
}
::naothmessages::Pose3D* GPSData::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::naothmessages::Pose3D;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.GPSData.pose)
  return pose_;
}
::naothmessages::Pose3D* GPSData::release_pose() {
  // @@protoc_insertion_point(field_release:naothmessages.GPSData.pose)
  clear_has_pose();
  ::naothmessages::Pose3D* temp = pose_;
  pose_ = NULL;
  return temp;
}
void GPSData::set_allocated_pose(::naothmessages::Pose3D* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.GPSData.pose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptiTrackData_TrackableItem::kNameFieldNumber;
const int OptiTrackData_TrackableItem::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptiTrackData_TrackableItem::OptiTrackData_TrackableItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.OptiTrackData.TrackableItem)
}
OptiTrackData_TrackableItem::OptiTrackData_TrackableItem(const OptiTrackData_TrackableItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_pose()) {
    pose_ = new ::naothmessages::Pose3D(*from.pose_);
  } else {
    pose_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:naothmessages.OptiTrackData.TrackableItem)
}

void OptiTrackData_TrackableItem::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pose_ = NULL;
}

OptiTrackData_TrackableItem::~OptiTrackData_TrackableItem() {
  // @@protoc_insertion_point(destructor:naothmessages.OptiTrackData.TrackableItem)
  SharedDtor();
}

void OptiTrackData_TrackableItem::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pose_;
}

void OptiTrackData_TrackableItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OptiTrackData_TrackableItem::descriptor() {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptiTrackData_TrackableItem& OptiTrackData_TrackableItem::default_instance() {
  protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  return *internal_default_instance();
}

OptiTrackData_TrackableItem* OptiTrackData_TrackableItem::New(::google::protobuf::Arena* arena) const {
  OptiTrackData_TrackableItem* n = new OptiTrackData_TrackableItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OptiTrackData_TrackableItem::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.OptiTrackData.TrackableItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pose_ != NULL);
      pose_->::naothmessages::Pose3D::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptiTrackData_TrackableItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.OptiTrackData.TrackableItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "naothmessages.OptiTrackData.TrackableItem.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .naothmessages.Pose3D pose = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.OptiTrackData.TrackableItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.OptiTrackData.TrackableItem)
  return false;
#undef DO_
}

void OptiTrackData_TrackableItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.OptiTrackData.TrackableItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "naothmessages.OptiTrackData.TrackableItem.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .naothmessages.Pose3D pose = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pose_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.OptiTrackData.TrackableItem)
}

::google::protobuf::uint8* OptiTrackData_TrackableItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.OptiTrackData.TrackableItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "naothmessages.OptiTrackData.TrackableItem.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .naothmessages.Pose3D pose = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pose_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.OptiTrackData.TrackableItem)
  return target;
}

size_t OptiTrackData_TrackableItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:naothmessages.OptiTrackData.TrackableItem)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_pose()) {
    // required .naothmessages.Pose3D pose = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);
  }

  return total_size;
}
size_t OptiTrackData_TrackableItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.OptiTrackData.TrackableItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required .naothmessages.Pose3D pose = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OptiTrackData_TrackableItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.OptiTrackData.TrackableItem)
  GOOGLE_DCHECK_NE(&from, this);
  const OptiTrackData_TrackableItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptiTrackData_TrackableItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.OptiTrackData.TrackableItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.OptiTrackData.TrackableItem)
    MergeFrom(*source);
  }
}

void OptiTrackData_TrackableItem::MergeFrom(const OptiTrackData_TrackableItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.OptiTrackData.TrackableItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_pose()->::naothmessages::Pose3D::MergeFrom(from.pose());
    }
  }
}

void OptiTrackData_TrackableItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.OptiTrackData.TrackableItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptiTrackData_TrackableItem::CopyFrom(const OptiTrackData_TrackableItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.OptiTrackData.TrackableItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptiTrackData_TrackableItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_pose()) {
    if (!this->pose_->IsInitialized()) return false;
  }
  return true;
}

void OptiTrackData_TrackableItem::Swap(OptiTrackData_TrackableItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptiTrackData_TrackableItem::InternalSwap(OptiTrackData_TrackableItem* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(pose_, other->pose_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OptiTrackData_TrackableItem::GetMetadata() const {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OptiTrackData_TrackableItem

// required string name = 1;
bool OptiTrackData_TrackableItem::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OptiTrackData_TrackableItem::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void OptiTrackData_TrackableItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void OptiTrackData_TrackableItem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& OptiTrackData_TrackableItem::name() const {
  // @@protoc_insertion_point(field_get:naothmessages.OptiTrackData.TrackableItem.name)
  return name_.GetNoArena();
}
void OptiTrackData_TrackableItem::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naothmessages.OptiTrackData.TrackableItem.name)
}
#if LANG_CXX11
void OptiTrackData_TrackableItem::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:naothmessages.OptiTrackData.TrackableItem.name)
}
#endif
void OptiTrackData_TrackableItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naothmessages.OptiTrackData.TrackableItem.name)
}
void OptiTrackData_TrackableItem::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naothmessages.OptiTrackData.TrackableItem.name)
}
::std::string* OptiTrackData_TrackableItem::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:naothmessages.OptiTrackData.TrackableItem.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OptiTrackData_TrackableItem::release_name() {
  // @@protoc_insertion_point(field_release:naothmessages.OptiTrackData.TrackableItem.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptiTrackData_TrackableItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:naothmessages.OptiTrackData.TrackableItem.name)
}

// required .naothmessages.Pose3D pose = 2;
bool OptiTrackData_TrackableItem::has_pose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OptiTrackData_TrackableItem::set_has_pose() {
  _has_bits_[0] |= 0x00000002u;
}
void OptiTrackData_TrackableItem::clear_has_pose() {
  _has_bits_[0] &= ~0x00000002u;
}
void OptiTrackData_TrackableItem::clear_pose() {
  if (pose_ != NULL) pose_->::naothmessages::Pose3D::Clear();
  clear_has_pose();
}
const ::naothmessages::Pose3D& OptiTrackData_TrackableItem::pose() const {
  const ::naothmessages::Pose3D* p = pose_;
  // @@protoc_insertion_point(field_get:naothmessages.OptiTrackData.TrackableItem.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::Pose3D*>(
      &::naothmessages::_Pose3D_default_instance_);
}
::naothmessages::Pose3D* OptiTrackData_TrackableItem::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::naothmessages::Pose3D;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.OptiTrackData.TrackableItem.pose)
  return pose_;
}
::naothmessages::Pose3D* OptiTrackData_TrackableItem::release_pose() {
  // @@protoc_insertion_point(field_release:naothmessages.OptiTrackData.TrackableItem.pose)
  clear_has_pose();
  ::naothmessages::Pose3D* temp = pose_;
  pose_ = NULL;
  return temp;
}
void OptiTrackData_TrackableItem::set_allocated_pose(::naothmessages::Pose3D* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.OptiTrackData.TrackableItem.pose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptiTrackData::kTrackablesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptiTrackData::OptiTrackData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.OptiTrackData)
}
OptiTrackData::OptiTrackData(const OptiTrackData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      trackables_(from.trackables_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:naothmessages.OptiTrackData)
}

void OptiTrackData::SharedCtor() {
  _cached_size_ = 0;
}

OptiTrackData::~OptiTrackData() {
  // @@protoc_insertion_point(destructor:naothmessages.OptiTrackData)
  SharedDtor();
}

void OptiTrackData::SharedDtor() {
}

void OptiTrackData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OptiTrackData::descriptor() {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptiTrackData& OptiTrackData::default_instance() {
  protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  return *internal_default_instance();
}

OptiTrackData* OptiTrackData::New(::google::protobuf::Arena* arena) const {
  OptiTrackData* n = new OptiTrackData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OptiTrackData::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.OptiTrackData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trackables_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptiTrackData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.OptiTrackData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .naothmessages.OptiTrackData.TrackableItem trackables = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trackables()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.OptiTrackData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.OptiTrackData)
  return false;
#undef DO_
}

void OptiTrackData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.OptiTrackData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .naothmessages.OptiTrackData.TrackableItem trackables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trackables_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->trackables(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.OptiTrackData)
}

::google::protobuf::uint8* OptiTrackData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.OptiTrackData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .naothmessages.OptiTrackData.TrackableItem trackables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trackables_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->trackables(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.OptiTrackData)
  return target;
}

size_t OptiTrackData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.OptiTrackData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .naothmessages.OptiTrackData.TrackableItem trackables = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->trackables_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trackables(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OptiTrackData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.OptiTrackData)
  GOOGLE_DCHECK_NE(&from, this);
  const OptiTrackData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptiTrackData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.OptiTrackData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.OptiTrackData)
    MergeFrom(*source);
  }
}

void OptiTrackData::MergeFrom(const OptiTrackData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.OptiTrackData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trackables_.MergeFrom(from.trackables_);
}

void OptiTrackData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.OptiTrackData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptiTrackData::CopyFrom(const OptiTrackData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.OptiTrackData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptiTrackData::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->trackables())) return false;
  return true;
}

void OptiTrackData::Swap(OptiTrackData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptiTrackData::InternalSwap(OptiTrackData* other) {
  using std::swap;
  trackables_.InternalSwap(&other->trackables_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OptiTrackData::GetMetadata() const {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OptiTrackData

// repeated .naothmessages.OptiTrackData.TrackableItem trackables = 1;
int OptiTrackData::trackables_size() const {
  return trackables_.size();
}
void OptiTrackData::clear_trackables() {
  trackables_.Clear();
}
const ::naothmessages::OptiTrackData_TrackableItem& OptiTrackData::trackables(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.OptiTrackData.trackables)
  return trackables_.Get(index);
}
::naothmessages::OptiTrackData_TrackableItem* OptiTrackData::mutable_trackables(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.OptiTrackData.trackables)
  return trackables_.Mutable(index);
}
::naothmessages::OptiTrackData_TrackableItem* OptiTrackData::add_trackables() {
  // @@protoc_insertion_point(field_add:naothmessages.OptiTrackData.trackables)
  return trackables_.Add();
}
::google::protobuf::RepeatedPtrField< ::naothmessages::OptiTrackData_TrackableItem >*
OptiTrackData::mutable_trackables() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.OptiTrackData.trackables)
  return &trackables_;
}
const ::google::protobuf::RepeatedPtrField< ::naothmessages::OptiTrackData_TrackableItem >&
OptiTrackData::trackables() const {
  // @@protoc_insertion_point(field_list:naothmessages.OptiTrackData.trackables)
  return trackables_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ButtonData::kIsPressedFieldNumber;
const int ButtonData::kNumOfFramesPressedFieldNumber;
const int ButtonData::kEventCounterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ButtonData::ButtonData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:naothmessages.ButtonData)
}
ButtonData::ButtonData(const ButtonData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ispressed_(from.ispressed_),
      numofframespressed_(from.numofframespressed_),
      eventcounter_(from.eventcounter_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:naothmessages.ButtonData)
}

void ButtonData::SharedCtor() {
  _cached_size_ = 0;
}

ButtonData::~ButtonData() {
  // @@protoc_insertion_point(destructor:naothmessages.ButtonData)
  SharedDtor();
}

void ButtonData::SharedDtor() {
}

void ButtonData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ButtonData::descriptor() {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ButtonData& ButtonData::default_instance() {
  protobuf_Framework_2dRepresentations_2eproto::InitDefaults();
  return *internal_default_instance();
}

ButtonData* ButtonData::New(::google::protobuf::Arena* arena) const {
  ButtonData* n = new ButtonData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ButtonData::Clear() {
// @@protoc_insertion_point(message_clear_start:naothmessages.ButtonData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ispressed_.Clear();
  numofframespressed_.Clear();
  eventcounter_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ButtonData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:naothmessages.ButtonData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool isPressed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 8u, input, this->mutable_ispressed())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_ispressed())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 numOfFramesPressed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_numofframespressed())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_numofframespressed())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 eventCounter = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_eventcounter())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_eventcounter())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:naothmessages.ButtonData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:naothmessages.ButtonData)
  return false;
#undef DO_
}

void ButtonData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:naothmessages.ButtonData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool isPressed = 1;
  for (int i = 0, n = this->ispressed_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      1, this->ispressed(i), output);
  }

  // repeated uint32 numOfFramesPressed = 2;
  for (int i = 0, n = this->numofframespressed_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->numofframespressed(i), output);
  }

  // repeated uint32 eventCounter = 3;
  for (int i = 0, n = this->eventcounter_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->eventcounter(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:naothmessages.ButtonData)
}

::google::protobuf::uint8* ButtonData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:naothmessages.ButtonData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool isPressed = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteBoolToArray(1, this->ispressed_, target);

  // repeated uint32 numOfFramesPressed = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->numofframespressed_, target);

  // repeated uint32 eventCounter = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->eventcounter_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:naothmessages.ButtonData)
  return target;
}

size_t ButtonData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:naothmessages.ButtonData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated bool isPressed = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->ispressed_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ispressed_size());
    total_size += data_size;
  }

  // repeated uint32 numOfFramesPressed = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->numofframespressed_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->numofframespressed_size());
    total_size += data_size;
  }

  // repeated uint32 eventCounter = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->eventcounter_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->eventcounter_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ButtonData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:naothmessages.ButtonData)
  GOOGLE_DCHECK_NE(&from, this);
  const ButtonData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ButtonData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:naothmessages.ButtonData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:naothmessages.ButtonData)
    MergeFrom(*source);
  }
}

void ButtonData::MergeFrom(const ButtonData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:naothmessages.ButtonData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ispressed_.MergeFrom(from.ispressed_);
  numofframespressed_.MergeFrom(from.numofframespressed_);
  eventcounter_.MergeFrom(from.eventcounter_);
}

void ButtonData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:naothmessages.ButtonData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ButtonData::CopyFrom(const ButtonData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:naothmessages.ButtonData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ButtonData::IsInitialized() const {
  return true;
}

void ButtonData::Swap(ButtonData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ButtonData::InternalSwap(ButtonData* other) {
  using std::swap;
  ispressed_.InternalSwap(&other->ispressed_);
  numofframespressed_.InternalSwap(&other->numofframespressed_);
  eventcounter_.InternalSwap(&other->eventcounter_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ButtonData::GetMetadata() const {
  protobuf_Framework_2dRepresentations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Framework_2dRepresentations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ButtonData

// repeated bool isPressed = 1;
int ButtonData::ispressed_size() const {
  return ispressed_.size();
}
void ButtonData::clear_ispressed() {
  ispressed_.Clear();
}
bool ButtonData::ispressed(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.ButtonData.isPressed)
  return ispressed_.Get(index);
}
void ButtonData::set_ispressed(int index, bool value) {
  ispressed_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.ButtonData.isPressed)
}
void ButtonData::add_ispressed(bool value) {
  ispressed_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.ButtonData.isPressed)
}
const ::google::protobuf::RepeatedField< bool >&
ButtonData::ispressed() const {
  // @@protoc_insertion_point(field_list:naothmessages.ButtonData.isPressed)
  return ispressed_;
}
::google::protobuf::RepeatedField< bool >*
ButtonData::mutable_ispressed() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.ButtonData.isPressed)
  return &ispressed_;
}

// repeated uint32 numOfFramesPressed = 2;
int ButtonData::numofframespressed_size() const {
  return numofframespressed_.size();
}
void ButtonData::clear_numofframespressed() {
  numofframespressed_.Clear();
}
::google::protobuf::uint32 ButtonData::numofframespressed(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.ButtonData.numOfFramesPressed)
  return numofframespressed_.Get(index);
}
void ButtonData::set_numofframespressed(int index, ::google::protobuf::uint32 value) {
  numofframespressed_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.ButtonData.numOfFramesPressed)
}
void ButtonData::add_numofframespressed(::google::protobuf::uint32 value) {
  numofframespressed_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.ButtonData.numOfFramesPressed)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ButtonData::numofframespressed() const {
  // @@protoc_insertion_point(field_list:naothmessages.ButtonData.numOfFramesPressed)
  return numofframespressed_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ButtonData::mutable_numofframespressed() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.ButtonData.numOfFramesPressed)
  return &numofframespressed_;
}

// repeated uint32 eventCounter = 3;
int ButtonData::eventcounter_size() const {
  return eventcounter_.size();
}
void ButtonData::clear_eventcounter() {
  eventcounter_.Clear();
}
::google::protobuf::uint32 ButtonData::eventcounter(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.ButtonData.eventCounter)
  return eventcounter_.Get(index);
}
void ButtonData::set_eventcounter(int index, ::google::protobuf::uint32 value) {
  eventcounter_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.ButtonData.eventCounter)
}
void ButtonData::add_eventcounter(::google::protobuf::uint32 value) {
  eventcounter_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.ButtonData.eventCounter)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ButtonData::eventcounter() const {
  // @@protoc_insertion_point(field_list:naothmessages.ButtonData.eventCounter)
  return eventcounter_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ButtonData::mutable_eventcounter() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.ButtonData.eventCounter)
  return &eventcounter_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace naothmessages

// @@protoc_insertion_point(global_scope)
