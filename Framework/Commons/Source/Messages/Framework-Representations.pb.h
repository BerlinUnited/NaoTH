// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Framework-Representations.proto

#ifndef PROTOBUF_Framework_2dRepresentations_2eproto__INCLUDED
#define PROTOBUF_Framework_2dRepresentations_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommonTypes.pb.h"
// @@protoc_insertion_point(includes)
namespace naothmessages {
class AccelerometerData;
class AccelerometerDataDefaultTypeInternal;
extern AccelerometerDataDefaultTypeInternal _AccelerometerData_default_instance_;
class ButtonData;
class ButtonDataDefaultTypeInternal;
extern ButtonDataDefaultTypeInternal _ButtonData_default_instance_;
class CameraInfo;
class CameraInfoDefaultTypeInternal;
extern CameraInfoDefaultTypeInternal _CameraInfo_default_instance_;
class FSRData;
class FSRDataDefaultTypeInternal;
extern FSRDataDefaultTypeInternal _FSRData_default_instance_;
class FrameInfo;
class FrameInfoDefaultTypeInternal;
extern FrameInfoDefaultTypeInternal _FrameInfo_default_instance_;
class GPSData;
class GPSDataDefaultTypeInternal;
extern GPSDataDefaultTypeInternal _GPSData_default_instance_;
class GyrometerData;
class GyrometerDataDefaultTypeInternal;
extern GyrometerDataDefaultTypeInternal _GyrometerData_default_instance_;
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class InertialSensorData;
class InertialSensorDataDefaultTypeInternal;
extern InertialSensorDataDefaultTypeInternal _InertialSensorData_default_instance_;
class JointData;
class JointDataDefaultTypeInternal;
extern JointDataDefaultTypeInternal _JointData_default_instance_;
class OptiTrackData;
class OptiTrackDataDefaultTypeInternal;
extern OptiTrackDataDefaultTypeInternal _OptiTrackData_default_instance_;
class OptiTrackData_TrackableItem;
class OptiTrackData_TrackableItemDefaultTypeInternal;
extern OptiTrackData_TrackableItemDefaultTypeInternal _OptiTrackData_TrackableItem_default_instance_;
class RobotInfo;
class RobotInfoDefaultTypeInternal;
extern RobotInfoDefaultTypeInternal _RobotInfo_default_instance_;
class SensorJointData;
class SensorJointDataDefaultTypeInternal;
extern SensorJointDataDefaultTypeInternal _SensorJointData_default_instance_;
class UltraSoundReceiveData;
class UltraSoundReceiveDataDefaultTypeInternal;
extern UltraSoundReceiveDataDefaultTypeInternal _UltraSoundReceiveData_default_instance_;
}  // namespace naothmessages

namespace naothmessages {

namespace protobuf_Framework_2dRepresentations_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Framework_2dRepresentations_2eproto

enum Image_Format {
  Image_Format_YUV = 0,
  Image_Format_YUV422 = 1,
  Image_Format_JPEG = 2
};
bool Image_Format_IsValid(int value);
const Image_Format Image_Format_Format_MIN = Image_Format_YUV;
const Image_Format Image_Format_Format_MAX = Image_Format_JPEG;
const int Image_Format_Format_ARRAYSIZE = Image_Format_Format_MAX + 1;

const ::google::protobuf::EnumDescriptor* Image_Format_descriptor();
inline const ::std::string& Image_Format_Name(Image_Format value) {
  return ::google::protobuf::internal::NameOfEnum(
    Image_Format_descriptor(), value);
}
inline bool Image_Format_Parse(
    const ::std::string& name, Image_Format* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Image_Format>(
    Image_Format_descriptor(), name, value);
}
enum ButtonData_ButtonID {
  ButtonData_ButtonID_Chest = 0,
  ButtonData_ButtonID_LeftFootLeft = 1,
  ButtonData_ButtonID_LeftFootRight = 2,
  ButtonData_ButtonID_RightFootLeft = 3,
  ButtonData_ButtonID_RightFootRight = 4,
  ButtonData_ButtonID_HeadFront = 5,
  ButtonData_ButtonID_HeadMiddle = 6,
  ButtonData_ButtonID_HeadRear = 7,
  ButtonData_ButtonID_LeftHandBack = 8,
  ButtonData_ButtonID_LeftHandLeft = 9,
  ButtonData_ButtonID_LeftHandRight = 10,
  ButtonData_ButtonID_RightHandBack = 11,
  ButtonData_ButtonID_RightHandLeft = 12,
  ButtonData_ButtonID_RightHandRight = 13
};
bool ButtonData_ButtonID_IsValid(int value);
const ButtonData_ButtonID ButtonData_ButtonID_ButtonID_MIN = ButtonData_ButtonID_Chest;
const ButtonData_ButtonID ButtonData_ButtonID_ButtonID_MAX = ButtonData_ButtonID_RightHandRight;
const int ButtonData_ButtonID_ButtonID_ARRAYSIZE = ButtonData_ButtonID_ButtonID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ButtonData_ButtonID_descriptor();
inline const ::std::string& ButtonData_ButtonID_Name(ButtonData_ButtonID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ButtonData_ButtonID_descriptor(), value);
}
inline bool ButtonData_ButtonID_Parse(
    const ::std::string& name, ButtonData_ButtonID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ButtonData_ButtonID>(
    ButtonData_ButtonID_descriptor(), name, value);
}
// ===================================================================

class Image : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.Image) */ {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(Image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();

  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Image* other);
  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const PROTOBUF_FINAL { return New(NULL); }

  Image* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Image* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Image_Format Format;
  static const Format YUV =
    Image_Format_YUV;
  static const Format YUV422 =
    Image_Format_YUV422;
  static const Format JPEG =
    Image_Format_JPEG;
  static inline bool Format_IsValid(int value) {
    return Image_Format_IsValid(value);
  }
  static const Format Format_MIN =
    Image_Format_Format_MIN;
  static const Format Format_MAX =
    Image_Format_Format_MAX;
  static const int Format_ARRAYSIZE =
    Image_Format_Format_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Format_descriptor() {
    return Image_Format_descriptor();
  }
  static inline const ::std::string& Format_Name(Format value) {
    return Image_Format_Name(value);
  }
  static inline bool Format_Parse(const ::std::string& name,
      Format* value) {
    return Image_Format_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required bytes data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional .naothmessages.CameraInfo cameraInfo = 4;
  bool has_camerainfo() const;
  void clear_camerainfo();
  static const int kCameraInfoFieldNumber = 4;
  const ::naothmessages::CameraInfo& camerainfo() const;
  ::naothmessages::CameraInfo* mutable_camerainfo();
  ::naothmessages::CameraInfo* release_camerainfo();
  void set_allocated_camerainfo(::naothmessages::CameraInfo* camerainfo);

  // optional .naothmessages.Image.Format format = 5 [default = YUV];
  bool has_format() const;
  void clear_format();
  static const int kFormatFieldNumber = 5;
  ::naothmessages::Image_Format format() const;
  void set_format(::naothmessages::Image_Format value);

  // optional uint32 timestamp = 6;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // optional uint32 width = 2 [default = 640];
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // optional uint32 height = 3 [default = 480];
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:naothmessages.Image)
 private:
  void set_has_data();
  void clear_has_data();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();
  void set_has_camerainfo();
  void clear_has_camerainfo();
  void set_has_format();
  void clear_has_format();
  void set_has_timestamp();
  void clear_has_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::naothmessages::CameraInfo* camerainfo_;
  int format_;
  ::google::protobuf::uint32 timestamp_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  friend struct protobuf_Framework_2dRepresentations_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CameraInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.CameraInfo) */ {
 public:
  CameraInfo();
  virtual ~CameraInfo();

  CameraInfo(const CameraInfo& from);

  inline CameraInfo& operator=(const CameraInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraInfo(CameraInfo&& from) noexcept
    : CameraInfo() {
    *this = ::std::move(from);
  }

  inline CameraInfo& operator=(CameraInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraInfo& default_instance();

  static inline const CameraInfo* internal_default_instance() {
    return reinterpret_cast<const CameraInfo*>(
               &_CameraInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CameraInfo* other);
  friend void swap(CameraInfo& a, CameraInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CameraInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CameraInfo& from);
  void MergeFrom(const CameraInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CameraInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .naothmessages.Pose3D transformation = 14 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR int transformation_size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_transformation();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kTransformationFieldNumber = 14;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::naothmessages::Pose3D& transformation(int index) const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::naothmessages::Pose3D* mutable_transformation(int index);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::naothmessages::Pose3D* add_transformation();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::RepeatedPtrField< ::naothmessages::Pose3D >*
      mutable_transformation();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::RepeatedPtrField< ::naothmessages::Pose3D >&
      transformation() const;

  // repeated .naothmessages.DoubleVector2 correctionOffset = 18 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR int correctionoffset_size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_correctionoffset();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kCorrectionOffsetFieldNumber = 18;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::naothmessages::DoubleVector2& correctionoffset(int index) const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::naothmessages::DoubleVector2* mutable_correctionoffset(int index);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::naothmessages::DoubleVector2* add_correctionoffset();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 >*
      mutable_correctionoffset();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 >&
      correctionoffset() const;

  // repeated .naothmessages.DoubleVector2 headJointOffset = 19 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR int headjointoffset_size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_headjointoffset();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kHeadJointOffsetFieldNumber = 19;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::naothmessages::DoubleVector2& headjointoffset(int index) const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::naothmessages::DoubleVector2* mutable_headjointoffset(int index);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::naothmessages::DoubleVector2* add_headjointoffset();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 >*
      mutable_headjointoffset();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 >&
      headjointoffset() const;

  // required uint32 resolutionWidth = 1;
  bool has_resolutionwidth() const;
  void clear_resolutionwidth();
  static const int kResolutionWidthFieldNumber = 1;
  ::google::protobuf::uint32 resolutionwidth() const;
  void set_resolutionwidth(::google::protobuf::uint32 value);

  // required uint32 resolutionHeight = 2;
  bool has_resolutionheight() const;
  void clear_resolutionheight();
  static const int kResolutionHeightFieldNumber = 2;
  ::google::protobuf::uint32 resolutionheight() const;
  void set_resolutionheight(::google::protobuf::uint32 value);

  // optional double focalLength = 5 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_focallength() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_focallength();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kFocalLengthFieldNumber = 5;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR double focallength() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_focallength(double value);

  // optional double openingAngleWidth = 6 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_openinganglewidth() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_openinganglewidth();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kOpeningAngleWidthFieldNumber = 6;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR double openinganglewidth() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_openinganglewidth(double value);

  // optional double openingAngleHeight = 7 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_openingangleheight() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_openingangleheight();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kOpeningAngleHeightFieldNumber = 7;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR double openingangleheight() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_openingangleheight(double value);

  // optional double opticalCenterX = 8 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_opticalcenterx() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_opticalcenterx();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kOpticalCenterXFieldNumber = 8;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR double opticalcenterx() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_opticalcenterx(double value);

  // optional double opticalCenterY = 9 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_opticalcentery() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_opticalcentery();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kOpticalCenterYFieldNumber = 9;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR double opticalcentery() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_opticalcentery(double value);

  // optional int64 size = 10 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_size();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kSizeFieldNumber = 10;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::int64 size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_size(::google::protobuf::int64 value);

  // optional int64 memorysize = 11 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_memorysize() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_memorysize();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kMemorysizeFieldNumber = 11;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::int64 memorysize() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_memorysize(::google::protobuf::int64 value);

  // optional double cameraRollOffset = 12 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_camerarolloffset() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_camerarolloffset();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kCameraRollOffsetFieldNumber = 12;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR double camerarolloffset() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_camerarolloffset(double value);

  // optional double cameraTiltOffset = 13 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_cameratiltoffset() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_cameratiltoffset();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kCameraTiltOffsetFieldNumber = 13;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR double cameratiltoffset() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_cameratiltoffset(double value);

  // optional double openingAngleDiagonal = 15;
  bool has_openinganglediagonal() const;
  void clear_openinganglediagonal();
  static const int kOpeningAngleDiagonalFieldNumber = 15;
  double openinganglediagonal() const;
  void set_openinganglediagonal(double value);

  // optional double pixelSize = 16;
  bool has_pixelsize() const;
  void clear_pixelsize();
  static const int kPixelSizeFieldNumber = 16;
  double pixelsize() const;
  void set_pixelsize(double value);

  // optional double focus = 17;
  bool has_focus() const;
  void clear_focus();
  static const int kFocusFieldNumber = 17;
  double focus() const;
  void set_focus(double value);

  // optional .naothmessages.CameraID cameraID = 4 [default = bottom];
  bool has_cameraid() const;
  void clear_cameraid();
  static const int kCameraIDFieldNumber = 4;
  ::naothmessages::CameraID cameraid() const;
  void set_cameraid(::naothmessages::CameraID value);

  // @@protoc_insertion_point(class_scope:naothmessages.CameraInfo)
 private:
  void set_has_resolutionwidth();
  void clear_has_resolutionwidth();
  void set_has_resolutionheight();
  void clear_has_resolutionheight();
  void set_has_cameraid();
  void clear_has_cameraid();
  void set_has_focallength();
  void clear_has_focallength();
  void set_has_openinganglewidth();
  void clear_has_openinganglewidth();
  void set_has_openingangleheight();
  void clear_has_openingangleheight();
  void set_has_opticalcenterx();
  void clear_has_opticalcenterx();
  void set_has_opticalcentery();
  void clear_has_opticalcentery();
  void set_has_size();
  void clear_has_size();
  void set_has_memorysize();
  void clear_has_memorysize();
  void set_has_camerarolloffset();
  void clear_has_camerarolloffset();
  void set_has_cameratiltoffset();
  void clear_has_cameratiltoffset();
  void set_has_openinganglediagonal();
  void clear_has_openinganglediagonal();
  void set_has_pixelsize();
  void clear_has_pixelsize();
  void set_has_focus();
  void clear_has_focus();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::naothmessages::Pose3D > transformation_;
  ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 > correctionoffset_;
  ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 > headjointoffset_;
  ::google::protobuf::uint32 resolutionwidth_;
  ::google::protobuf::uint32 resolutionheight_;
  double focallength_;
  double openinganglewidth_;
  double openingangleheight_;
  double opticalcenterx_;
  double opticalcentery_;
  ::google::protobuf::int64 size_;
  ::google::protobuf::int64 memorysize_;
  double camerarolloffset_;
  double cameratiltoffset_;
  double openinganglediagonal_;
  double pixelsize_;
  double focus_;
  int cameraid_;
  friend struct protobuf_Framework_2dRepresentations_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JointData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.JointData) */ {
 public:
  JointData();
  virtual ~JointData();

  JointData(const JointData& from);

  inline JointData& operator=(const JointData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JointData(JointData&& from) noexcept
    : JointData() {
    *this = ::std::move(from);
  }

  inline JointData& operator=(JointData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JointData& default_instance();

  static inline const JointData* internal_default_instance() {
    return reinterpret_cast<const JointData*>(
               &_JointData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(JointData* other);
  friend void swap(JointData& a, JointData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JointData* New() const PROTOBUF_FINAL { return New(NULL); }

  JointData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JointData& from);
  void MergeFrom(const JointData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JointData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double position = 1;
  int position_size() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  double position(int index) const;
  void set_position(int index, double value);
  void add_position(double value);
  const ::google::protobuf::RepeatedField< double >&
      position() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_position();

  // repeated double stiffness = 2;
  int stiffness_size() const;
  void clear_stiffness();
  static const int kStiffnessFieldNumber = 2;
  double stiffness(int index) const;
  void set_stiffness(int index, double value);
  void add_stiffness(double value);
  const ::google::protobuf::RepeatedField< double >&
      stiffness() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_stiffness();

  // repeated double dp = 3;
  int dp_size() const;
  void clear_dp();
  static const int kDpFieldNumber = 3;
  double dp(int index) const;
  void set_dp(int index, double value);
  void add_dp(double value);
  const ::google::protobuf::RepeatedField< double >&
      dp() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_dp();

  // repeated double ddp = 4;
  int ddp_size() const;
  void clear_ddp();
  static const int kDdpFieldNumber = 4;
  double ddp(int index) const;
  void set_ddp(int index, double value);
  void add_ddp(double value);
  const ::google::protobuf::RepeatedField< double >&
      ddp() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_ddp();

  // @@protoc_insertion_point(class_scope:naothmessages.JointData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > position_;
  ::google::protobuf::RepeatedField< double > stiffness_;
  ::google::protobuf::RepeatedField< double > dp_;
  ::google::protobuf::RepeatedField< double > ddp_;
  friend struct protobuf_Framework_2dRepresentations_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SensorJointData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.SensorJointData) */ {
 public:
  SensorJointData();
  virtual ~SensorJointData();

  SensorJointData(const SensorJointData& from);

  inline SensorJointData& operator=(const SensorJointData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorJointData(SensorJointData&& from) noexcept
    : SensorJointData() {
    *this = ::std::move(from);
  }

  inline SensorJointData& operator=(SensorJointData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorJointData& default_instance();

  static inline const SensorJointData* internal_default_instance() {
    return reinterpret_cast<const SensorJointData*>(
               &_SensorJointData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(SensorJointData* other);
  friend void swap(SensorJointData& a, SensorJointData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorJointData* New() const PROTOBUF_FINAL { return New(NULL); }

  SensorJointData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SensorJointData& from);
  void MergeFrom(const SensorJointData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SensorJointData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double temperature = 2;
  int temperature_size() const;
  void clear_temperature();
  static const int kTemperatureFieldNumber = 2;
  double temperature(int index) const;
  void set_temperature(int index, double value);
  void add_temperature(double value);
  const ::google::protobuf::RepeatedField< double >&
      temperature() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_temperature();

  // repeated double electricCurrent = 3;
  int electriccurrent_size() const;
  void clear_electriccurrent();
  static const int kElectricCurrentFieldNumber = 3;
  double electriccurrent(int index) const;
  void set_electriccurrent(int index, double value);
  void add_electriccurrent(double value);
  const ::google::protobuf::RepeatedField< double >&
      electriccurrent() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_electriccurrent();

  // required .naothmessages.JointData jointData = 1;
  bool has_jointdata() const;
  void clear_jointdata();
  static const int kJointDataFieldNumber = 1;
  const ::naothmessages::JointData& jointdata() const;
  ::naothmessages::JointData* mutable_jointdata();
  ::naothmessages::JointData* release_jointdata();
  void set_allocated_jointdata(::naothmessages::JointData* jointdata);

  // @@protoc_insertion_point(class_scope:naothmessages.SensorJointData)
 private:
  void set_has_jointdata();
  void clear_has_jointdata();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > temperature_;
  ::google::protobuf::RepeatedField< double > electriccurrent_;
  ::naothmessages::JointData* jointdata_;
  friend struct protobuf_Framework_2dRepresentations_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UltraSoundReceiveData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.UltraSoundReceiveData) */ {
 public:
  UltraSoundReceiveData();
  virtual ~UltraSoundReceiveData();

  UltraSoundReceiveData(const UltraSoundReceiveData& from);

  inline UltraSoundReceiveData& operator=(const UltraSoundReceiveData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UltraSoundReceiveData(UltraSoundReceiveData&& from) noexcept
    : UltraSoundReceiveData() {
    *this = ::std::move(from);
  }

  inline UltraSoundReceiveData& operator=(UltraSoundReceiveData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UltraSoundReceiveData& default_instance();

  static inline const UltraSoundReceiveData* internal_default_instance() {
    return reinterpret_cast<const UltraSoundReceiveData*>(
               &_UltraSoundReceiveData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(UltraSoundReceiveData* other);
  friend void swap(UltraSoundReceiveData& a, UltraSoundReceiveData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UltraSoundReceiveData* New() const PROTOBUF_FINAL { return New(NULL); }

  UltraSoundReceiveData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UltraSoundReceiveData& from);
  void MergeFrom(const UltraSoundReceiveData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UltraSoundReceiveData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double dataLeft = 3;
  int dataleft_size() const;
  void clear_dataleft();
  static const int kDataLeftFieldNumber = 3;
  double dataleft(int index) const;
  void set_dataleft(int index, double value);
  void add_dataleft(double value);
  const ::google::protobuf::RepeatedField< double >&
      dataleft() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_dataleft();

  // repeated double dataRight = 4;
  int dataright_size() const;
  void clear_dataright();
  static const int kDataRightFieldNumber = 4;
  double dataright(int index) const;
  void set_dataright(int index, double value);
  void add_dataright(double value);
  const ::google::protobuf::RepeatedField< double >&
      dataright() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_dataright();

  // required double rawdata = 2;
  bool has_rawdata() const;
  void clear_rawdata();
  static const int kRawdataFieldNumber = 2;
  double rawdata() const;
  void set_rawdata(double value);

  // optional uint32 ultraSoundTimeStep = 1;
  bool has_ultrasoundtimestep() const;
  void clear_ultrasoundtimestep();
  static const int kUltraSoundTimeStepFieldNumber = 1;
  ::google::protobuf::uint32 ultrasoundtimestep() const;
  void set_ultrasoundtimestep(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:naothmessages.UltraSoundReceiveData)
 private:
  void set_has_ultrasoundtimestep();
  void clear_has_ultrasoundtimestep();
  void set_has_rawdata();
  void clear_has_rawdata();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > dataleft_;
  ::google::protobuf::RepeatedField< double > dataright_;
  double rawdata_;
  ::google::protobuf::uint32 ultrasoundtimestep_;
  friend struct protobuf_Framework_2dRepresentations_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FrameInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.FrameInfo) */ {
 public:
  FrameInfo();
  virtual ~FrameInfo();

  FrameInfo(const FrameInfo& from);

  inline FrameInfo& operator=(const FrameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FrameInfo(FrameInfo&& from) noexcept
    : FrameInfo() {
    *this = ::std::move(from);
  }

  inline FrameInfo& operator=(FrameInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameInfo& default_instance();

  static inline const FrameInfo* internal_default_instance() {
    return reinterpret_cast<const FrameInfo*>(
               &_FrameInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(FrameInfo* other);
  friend void swap(FrameInfo& a, FrameInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FrameInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  FrameInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FrameInfo& from);
  void MergeFrom(const FrameInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FrameInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 frameNumber = 1;
  bool has_framenumber() const;
  void clear_framenumber();
  static const int kFrameNumberFieldNumber = 1;
  ::google::protobuf::uint32 framenumber() const;
  void set_framenumber(::google::protobuf::uint32 value);

  // required uint32 time = 2;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::uint32 time() const;
  void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:naothmessages.FrameInfo)
 private:
  void set_has_framenumber();
  void clear_has_framenumber();
  void set_has_time();
  void clear_has_time();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 framenumber_;
  ::google::protobuf::uint32 time_;
  friend struct protobuf_Framework_2dRepresentations_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RobotInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.RobotInfo) */ {
 public:
  RobotInfo();
  virtual ~RobotInfo();

  RobotInfo(const RobotInfo& from);

  inline RobotInfo& operator=(const RobotInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RobotInfo(RobotInfo&& from) noexcept
    : RobotInfo() {
    *this = ::std::move(from);
  }

  inline RobotInfo& operator=(RobotInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotInfo& default_instance();

  static inline const RobotInfo* internal_default_instance() {
    return reinterpret_cast<const RobotInfo*>(
               &_RobotInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(RobotInfo* other);
  friend void swap(RobotInfo& a, RobotInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RobotInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RobotInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RobotInfo& from);
  void MergeFrom(const RobotInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RobotInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string platform = 1;
  bool has_platform() const;
  void clear_platform();
  static const int kPlatformFieldNumber = 1;
  const ::std::string& platform() const;
  void set_platform(const ::std::string& value);
  #if LANG_CXX11
  void set_platform(::std::string&& value);
  #endif
  void set_platform(const char* value);
  void set_platform(const char* value, size_t size);
  ::std::string* mutable_platform();
  ::std::string* release_platform();
  void set_allocated_platform(::std::string* platform);

  // optional string bodyNickName = 2;
  bool has_bodynickname() const;
  void clear_bodynickname();
  static const int kBodyNickNameFieldNumber = 2;
  const ::std::string& bodynickname() const;
  void set_bodynickname(const ::std::string& value);
  #if LANG_CXX11
  void set_bodynickname(::std::string&& value);
  #endif
  void set_bodynickname(const char* value);
  void set_bodynickname(const char* value, size_t size);
  ::std::string* mutable_bodynickname();
  ::std::string* release_bodynickname();
  void set_allocated_bodynickname(::std::string* bodynickname);

  // optional string headNickName = 3;
  bool has_headnickname() const;
  void clear_headnickname();
  static const int kHeadNickNameFieldNumber = 3;
  const ::std::string& headnickname() const;
  void set_headnickname(const ::std::string& value);
  #if LANG_CXX11
  void set_headnickname(::std::string&& value);
  #endif
  void set_headnickname(const char* value);
  void set_headnickname(const char* value, size_t size);
  ::std::string* mutable_headnickname();
  ::std::string* release_headnickname();
  void set_allocated_headnickname(::std::string* headnickname);

  // optional string bodyID = 4;
  bool has_bodyid() const;
  void clear_bodyid();
  static const int kBodyIDFieldNumber = 4;
  const ::std::string& bodyid() const;
  void set_bodyid(const ::std::string& value);
  #if LANG_CXX11
  void set_bodyid(::std::string&& value);
  #endif
  void set_bodyid(const char* value);
  void set_bodyid(const char* value, size_t size);
  ::std::string* mutable_bodyid();
  ::std::string* release_bodyid();
  void set_allocated_bodyid(::std::string* bodyid);

  // optional uint32 basicTimeStep = 5;
  bool has_basictimestep() const;
  void clear_basictimestep();
  static const int kBasicTimeStepFieldNumber = 5;
  ::google::protobuf::uint32 basictimestep() const;
  void set_basictimestep(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:naothmessages.RobotInfo)
 private:
  void set_has_platform();
  void clear_has_platform();
  void set_has_bodynickname();
  void clear_has_bodynickname();
  void set_has_headnickname();
  void clear_has_headnickname();
  void set_has_bodyid();
  void clear_has_bodyid();
  void set_has_basictimestep();
  void clear_has_basictimestep();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr platform_;
  ::google::protobuf::internal::ArenaStringPtr bodynickname_;
  ::google::protobuf::internal::ArenaStringPtr headnickname_;
  ::google::protobuf::internal::ArenaStringPtr bodyid_;
  ::google::protobuf::uint32 basictimestep_;
  friend struct protobuf_Framework_2dRepresentations_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FSRData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.FSRData) */ {
 public:
  FSRData();
  virtual ~FSRData();

  FSRData(const FSRData& from);

  inline FSRData& operator=(const FSRData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FSRData(FSRData&& from) noexcept
    : FSRData() {
    *this = ::std::move(from);
  }

  inline FSRData& operator=(FSRData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FSRData& default_instance();

  static inline const FSRData* internal_default_instance() {
    return reinterpret_cast<const FSRData*>(
               &_FSRData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(FSRData* other);
  friend void swap(FSRData& a, FSRData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FSRData* New() const PROTOBUF_FINAL { return New(NULL); }

  FSRData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FSRData& from);
  void MergeFrom(const FSRData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FSRData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double force = 1 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR int force_size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_force();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kForceFieldNumber = 1;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR double force(int index) const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_force(int index, double value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void add_force(double value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::RepeatedField< double >&
      force() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::RepeatedField< double >*
      mutable_force();

  // repeated double data = 2;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  double data(int index) const;
  void set_data(int index, double value);
  void add_data(double value);
  const ::google::protobuf::RepeatedField< double >&
      data() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_data();

  // repeated bool valid = 3 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR int valid_size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_valid();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kValidFieldNumber = 3;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool valid(int index) const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_valid(int index, bool value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void add_valid(bool value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::RepeatedField< bool >&
      valid() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::RepeatedField< bool >*
      mutable_valid();

  // @@protoc_insertion_point(class_scope:naothmessages.FSRData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > force_;
  ::google::protobuf::RepeatedField< double > data_;
  ::google::protobuf::RepeatedField< bool > valid_;
  friend struct protobuf_Framework_2dRepresentations_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccelerometerData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.AccelerometerData) */ {
 public:
  AccelerometerData();
  virtual ~AccelerometerData();

  AccelerometerData(const AccelerometerData& from);

  inline AccelerometerData& operator=(const AccelerometerData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccelerometerData(AccelerometerData&& from) noexcept
    : AccelerometerData() {
    *this = ::std::move(from);
  }

  inline AccelerometerData& operator=(AccelerometerData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccelerometerData& default_instance();

  static inline const AccelerometerData* internal_default_instance() {
    return reinterpret_cast<const AccelerometerData*>(
               &_AccelerometerData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(AccelerometerData* other);
  friend void swap(AccelerometerData& a, AccelerometerData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccelerometerData* New() const PROTOBUF_FINAL { return New(NULL); }

  AccelerometerData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AccelerometerData& from);
  void MergeFrom(const AccelerometerData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AccelerometerData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double legacyPackedData = 1 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR int legacypackeddata_size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_legacypackeddata();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kLegacyPackedDataFieldNumber = 1;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR double legacypackeddata(int index) const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_legacypackeddata(int index, double value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void add_legacypackeddata(double value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::RepeatedField< double >&
      legacypackeddata() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::RepeatedField< double >*
      mutable_legacypackeddata();

  // optional .naothmessages.DoubleVector3 data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::naothmessages::DoubleVector3& data() const;
  ::naothmessages::DoubleVector3* mutable_data();
  ::naothmessages::DoubleVector3* release_data();
  void set_allocated_data(::naothmessages::DoubleVector3* data);

  // optional .naothmessages.DoubleVector3 rawData = 3;
  bool has_rawdata() const;
  void clear_rawdata();
  static const int kRawDataFieldNumber = 3;
  const ::naothmessages::DoubleVector3& rawdata() const;
  ::naothmessages::DoubleVector3* mutable_rawdata();
  ::naothmessages::DoubleVector3* release_rawdata();
  void set_allocated_rawdata(::naothmessages::DoubleVector3* rawdata);

  // @@protoc_insertion_point(class_scope:naothmessages.AccelerometerData)
 private:
  void set_has_data();
  void clear_has_data();
  void set_has_rawdata();
  void clear_has_rawdata();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > legacypackeddata_;
  ::naothmessages::DoubleVector3* data_;
  ::naothmessages::DoubleVector3* rawdata_;
  friend struct protobuf_Framework_2dRepresentations_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GyrometerData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.GyrometerData) */ {
 public:
  GyrometerData();
  virtual ~GyrometerData();

  GyrometerData(const GyrometerData& from);

  inline GyrometerData& operator=(const GyrometerData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GyrometerData(GyrometerData&& from) noexcept
    : GyrometerData() {
    *this = ::std::move(from);
  }

  inline GyrometerData& operator=(GyrometerData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GyrometerData& default_instance();

  static inline const GyrometerData* internal_default_instance() {
    return reinterpret_cast<const GyrometerData*>(
               &_GyrometerData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(GyrometerData* other);
  friend void swap(GyrometerData& a, GyrometerData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GyrometerData* New() const PROTOBUF_FINAL { return New(NULL); }

  GyrometerData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GyrometerData& from);
  void MergeFrom(const GyrometerData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GyrometerData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double legacyPackedData = 1 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR int legacypackeddata_size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_legacypackeddata();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kLegacyPackedDataFieldNumber = 1;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR double legacypackeddata(int index) const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_legacypackeddata(int index, double value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void add_legacypackeddata(double value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::RepeatedField< double >&
      legacypackeddata() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::RepeatedField< double >*
      mutable_legacypackeddata();

  // optional .naothmessages.DoubleVector3 data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::naothmessages::DoubleVector3& data() const;
  ::naothmessages::DoubleVector3* mutable_data();
  ::naothmessages::DoubleVector3* release_data();
  void set_allocated_data(::naothmessages::DoubleVector3* data);

  // optional .naothmessages.DoubleVector3 rawData = 3;
  bool has_rawdata() const;
  void clear_rawdata();
  static const int kRawDataFieldNumber = 3;
  const ::naothmessages::DoubleVector3& rawdata() const;
  ::naothmessages::DoubleVector3* mutable_rawdata();
  ::naothmessages::DoubleVector3* release_rawdata();
  void set_allocated_rawdata(::naothmessages::DoubleVector3* rawdata);

  // optional double ref = 4;
  bool has_ref() const;
  void clear_ref();
  static const int kRefFieldNumber = 4;
  double ref() const;
  void set_ref(double value);

  // @@protoc_insertion_point(class_scope:naothmessages.GyrometerData)
 private:
  void set_has_data();
  void clear_has_data();
  void set_has_rawdata();
  void clear_has_rawdata();
  void set_has_ref();
  void clear_has_ref();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > legacypackeddata_;
  ::naothmessages::DoubleVector3* data_;
  ::naothmessages::DoubleVector3* rawdata_;
  double ref_;
  friend struct protobuf_Framework_2dRepresentations_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InertialSensorData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.InertialSensorData) */ {
 public:
  InertialSensorData();
  virtual ~InertialSensorData();

  InertialSensorData(const InertialSensorData& from);

  inline InertialSensorData& operator=(const InertialSensorData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InertialSensorData(InertialSensorData&& from) noexcept
    : InertialSensorData() {
    *this = ::std::move(from);
  }

  inline InertialSensorData& operator=(InertialSensorData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InertialSensorData& default_instance();

  static inline const InertialSensorData* internal_default_instance() {
    return reinterpret_cast<const InertialSensorData*>(
               &_InertialSensorData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(InertialSensorData* other);
  friend void swap(InertialSensorData& a, InertialSensorData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InertialSensorData* New() const PROTOBUF_FINAL { return New(NULL); }

  InertialSensorData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InertialSensorData& from);
  void MergeFrom(const InertialSensorData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InertialSensorData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double legacyPackedData = 1 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR int legacypackeddata_size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_legacypackeddata();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kLegacyPackedDataFieldNumber = 1;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR double legacypackeddata(int index) const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_legacypackeddata(int index, double value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void add_legacypackeddata(double value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::RepeatedField< double >&
      legacypackeddata() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::RepeatedField< double >*
      mutable_legacypackeddata();

  // optional .naothmessages.DoubleVector2 data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::naothmessages::DoubleVector2& data() const;
  ::naothmessages::DoubleVector2* mutable_data();
  ::naothmessages::DoubleVector2* release_data();
  void set_allocated_data(::naothmessages::DoubleVector2* data);

  // @@protoc_insertion_point(class_scope:naothmessages.InertialSensorData)
 private:
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > legacypackeddata_;
  ::naothmessages::DoubleVector2* data_;
  friend struct protobuf_Framework_2dRepresentations_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GPSData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.GPSData) */ {
 public:
  GPSData();
  virtual ~GPSData();

  GPSData(const GPSData& from);

  inline GPSData& operator=(const GPSData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GPSData(GPSData&& from) noexcept
    : GPSData() {
    *this = ::std::move(from);
  }

  inline GPSData& operator=(GPSData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GPSData& default_instance();

  static inline const GPSData* internal_default_instance() {
    return reinterpret_cast<const GPSData*>(
               &_GPSData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(GPSData* other);
  friend void swap(GPSData& a, GPSData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GPSData* New() const PROTOBUF_FINAL { return New(NULL); }

  GPSData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GPSData& from);
  void MergeFrom(const GPSData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GPSData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .naothmessages.Pose3D pose = 1;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 1;
  const ::naothmessages::Pose3D& pose() const;
  ::naothmessages::Pose3D* mutable_pose();
  ::naothmessages::Pose3D* release_pose();
  void set_allocated_pose(::naothmessages::Pose3D* pose);

  // @@protoc_insertion_point(class_scope:naothmessages.GPSData)
 private:
  void set_has_pose();
  void clear_has_pose();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::naothmessages::Pose3D* pose_;
  friend struct protobuf_Framework_2dRepresentations_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptiTrackData_TrackableItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.OptiTrackData.TrackableItem) */ {
 public:
  OptiTrackData_TrackableItem();
  virtual ~OptiTrackData_TrackableItem();

  OptiTrackData_TrackableItem(const OptiTrackData_TrackableItem& from);

  inline OptiTrackData_TrackableItem& operator=(const OptiTrackData_TrackableItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptiTrackData_TrackableItem(OptiTrackData_TrackableItem&& from) noexcept
    : OptiTrackData_TrackableItem() {
    *this = ::std::move(from);
  }

  inline OptiTrackData_TrackableItem& operator=(OptiTrackData_TrackableItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptiTrackData_TrackableItem& default_instance();

  static inline const OptiTrackData_TrackableItem* internal_default_instance() {
    return reinterpret_cast<const OptiTrackData_TrackableItem*>(
               &_OptiTrackData_TrackableItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(OptiTrackData_TrackableItem* other);
  friend void swap(OptiTrackData_TrackableItem& a, OptiTrackData_TrackableItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptiTrackData_TrackableItem* New() const PROTOBUF_FINAL { return New(NULL); }

  OptiTrackData_TrackableItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OptiTrackData_TrackableItem& from);
  void MergeFrom(const OptiTrackData_TrackableItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OptiTrackData_TrackableItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required .naothmessages.Pose3D pose = 2;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 2;
  const ::naothmessages::Pose3D& pose() const;
  ::naothmessages::Pose3D* mutable_pose();
  ::naothmessages::Pose3D* release_pose();
  void set_allocated_pose(::naothmessages::Pose3D* pose);

  // @@protoc_insertion_point(class_scope:naothmessages.OptiTrackData.TrackableItem)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_pose();
  void clear_has_pose();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::naothmessages::Pose3D* pose_;
  friend struct protobuf_Framework_2dRepresentations_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptiTrackData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.OptiTrackData) */ {
 public:
  OptiTrackData();
  virtual ~OptiTrackData();

  OptiTrackData(const OptiTrackData& from);

  inline OptiTrackData& operator=(const OptiTrackData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptiTrackData(OptiTrackData&& from) noexcept
    : OptiTrackData() {
    *this = ::std::move(from);
  }

  inline OptiTrackData& operator=(OptiTrackData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptiTrackData& default_instance();

  static inline const OptiTrackData* internal_default_instance() {
    return reinterpret_cast<const OptiTrackData*>(
               &_OptiTrackData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(OptiTrackData* other);
  friend void swap(OptiTrackData& a, OptiTrackData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptiTrackData* New() const PROTOBUF_FINAL { return New(NULL); }

  OptiTrackData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OptiTrackData& from);
  void MergeFrom(const OptiTrackData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OptiTrackData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef OptiTrackData_TrackableItem TrackableItem;

  // accessors -------------------------------------------------------

  // repeated .naothmessages.OptiTrackData.TrackableItem trackables = 1;
  int trackables_size() const;
  void clear_trackables();
  static const int kTrackablesFieldNumber = 1;
  const ::naothmessages::OptiTrackData_TrackableItem& trackables(int index) const;
  ::naothmessages::OptiTrackData_TrackableItem* mutable_trackables(int index);
  ::naothmessages::OptiTrackData_TrackableItem* add_trackables();
  ::google::protobuf::RepeatedPtrField< ::naothmessages::OptiTrackData_TrackableItem >*
      mutable_trackables();
  const ::google::protobuf::RepeatedPtrField< ::naothmessages::OptiTrackData_TrackableItem >&
      trackables() const;

  // @@protoc_insertion_point(class_scope:naothmessages.OptiTrackData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::naothmessages::OptiTrackData_TrackableItem > trackables_;
  friend struct protobuf_Framework_2dRepresentations_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ButtonData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:naothmessages.ButtonData) */ {
 public:
  ButtonData();
  virtual ~ButtonData();

  ButtonData(const ButtonData& from);

  inline ButtonData& operator=(const ButtonData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ButtonData(ButtonData&& from) noexcept
    : ButtonData() {
    *this = ::std::move(from);
  }

  inline ButtonData& operator=(ButtonData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ButtonData& default_instance();

  static inline const ButtonData* internal_default_instance() {
    return reinterpret_cast<const ButtonData*>(
               &_ButtonData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(ButtonData* other);
  friend void swap(ButtonData& a, ButtonData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ButtonData* New() const PROTOBUF_FINAL { return New(NULL); }

  ButtonData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ButtonData& from);
  void MergeFrom(const ButtonData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ButtonData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ButtonData_ButtonID ButtonID;
  static const ButtonID Chest =
    ButtonData_ButtonID_Chest;
  static const ButtonID LeftFootLeft =
    ButtonData_ButtonID_LeftFootLeft;
  static const ButtonID LeftFootRight =
    ButtonData_ButtonID_LeftFootRight;
  static const ButtonID RightFootLeft =
    ButtonData_ButtonID_RightFootLeft;
  static const ButtonID RightFootRight =
    ButtonData_ButtonID_RightFootRight;
  static const ButtonID HeadFront =
    ButtonData_ButtonID_HeadFront;
  static const ButtonID HeadMiddle =
    ButtonData_ButtonID_HeadMiddle;
  static const ButtonID HeadRear =
    ButtonData_ButtonID_HeadRear;
  static const ButtonID LeftHandBack =
    ButtonData_ButtonID_LeftHandBack;
  static const ButtonID LeftHandLeft =
    ButtonData_ButtonID_LeftHandLeft;
  static const ButtonID LeftHandRight =
    ButtonData_ButtonID_LeftHandRight;
  static const ButtonID RightHandBack =
    ButtonData_ButtonID_RightHandBack;
  static const ButtonID RightHandLeft =
    ButtonData_ButtonID_RightHandLeft;
  static const ButtonID RightHandRight =
    ButtonData_ButtonID_RightHandRight;
  static inline bool ButtonID_IsValid(int value) {
    return ButtonData_ButtonID_IsValid(value);
  }
  static const ButtonID ButtonID_MIN =
    ButtonData_ButtonID_ButtonID_MIN;
  static const ButtonID ButtonID_MAX =
    ButtonData_ButtonID_ButtonID_MAX;
  static const int ButtonID_ARRAYSIZE =
    ButtonData_ButtonID_ButtonID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ButtonID_descriptor() {
    return ButtonData_ButtonID_descriptor();
  }
  static inline const ::std::string& ButtonID_Name(ButtonID value) {
    return ButtonData_ButtonID_Name(value);
  }
  static inline bool ButtonID_Parse(const ::std::string& name,
      ButtonID* value) {
    return ButtonData_ButtonID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated bool isPressed = 1;
  int ispressed_size() const;
  void clear_ispressed();
  static const int kIsPressedFieldNumber = 1;
  bool ispressed(int index) const;
  void set_ispressed(int index, bool value);
  void add_ispressed(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      ispressed() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_ispressed();

  // repeated uint32 numOfFramesPressed = 2;
  int numofframespressed_size() const;
  void clear_numofframespressed();
  static const int kNumOfFramesPressedFieldNumber = 2;
  ::google::protobuf::uint32 numofframespressed(int index) const;
  void set_numofframespressed(int index, ::google::protobuf::uint32 value);
  void add_numofframespressed(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      numofframespressed() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_numofframespressed();

  // repeated uint32 eventCounter = 3;
  int eventcounter_size() const;
  void clear_eventcounter();
  static const int kEventCounterFieldNumber = 3;
  ::google::protobuf::uint32 eventcounter(int index) const;
  void set_eventcounter(int index, ::google::protobuf::uint32 value);
  void add_eventcounter(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      eventcounter() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_eventcounter();

  // @@protoc_insertion_point(class_scope:naothmessages.ButtonData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< bool > ispressed_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > numofframespressed_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > eventcounter_;
  friend struct protobuf_Framework_2dRepresentations_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Image

// required bytes data = 1;
inline bool Image::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Image::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Image::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Image::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& Image::data() const {
  // @@protoc_insertion_point(field_get:naothmessages.Image.data)
  return data_.GetNoArena();
}
inline void Image::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naothmessages.Image.data)
}
#if LANG_CXX11
inline void Image::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:naothmessages.Image.data)
}
#endif
inline void Image::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naothmessages.Image.data)
}
inline void Image::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naothmessages.Image.data)
}
inline ::std::string* Image::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:naothmessages.Image.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_data() {
  // @@protoc_insertion_point(field_release:naothmessages.Image.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:naothmessages.Image.data)
}

// optional uint32 width = 2 [default = 640];
inline bool Image::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Image::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Image::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Image::clear_width() {
  width_ = 640u;
  clear_has_width();
}
inline ::google::protobuf::uint32 Image::width() const {
  // @@protoc_insertion_point(field_get:naothmessages.Image.width)
  return width_;
}
inline void Image::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.Image.width)
}

// optional uint32 height = 3 [default = 480];
inline bool Image::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Image::set_has_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Image::clear_has_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Image::clear_height() {
  height_ = 480u;
  clear_has_height();
}
inline ::google::protobuf::uint32 Image::height() const {
  // @@protoc_insertion_point(field_get:naothmessages.Image.height)
  return height_;
}
inline void Image::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.Image.height)
}

// optional .naothmessages.CameraInfo cameraInfo = 4;
inline bool Image::has_camerainfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Image::set_has_camerainfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Image::clear_has_camerainfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Image::clear_camerainfo() {
  if (camerainfo_ != NULL) camerainfo_->::naothmessages::CameraInfo::Clear();
  clear_has_camerainfo();
}
inline const ::naothmessages::CameraInfo& Image::camerainfo() const {
  const ::naothmessages::CameraInfo* p = camerainfo_;
  // @@protoc_insertion_point(field_get:naothmessages.Image.cameraInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::CameraInfo*>(
      &::naothmessages::_CameraInfo_default_instance_);
}
inline ::naothmessages::CameraInfo* Image::mutable_camerainfo() {
  set_has_camerainfo();
  if (camerainfo_ == NULL) {
    camerainfo_ = new ::naothmessages::CameraInfo;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.Image.cameraInfo)
  return camerainfo_;
}
inline ::naothmessages::CameraInfo* Image::release_camerainfo() {
  // @@protoc_insertion_point(field_release:naothmessages.Image.cameraInfo)
  clear_has_camerainfo();
  ::naothmessages::CameraInfo* temp = camerainfo_;
  camerainfo_ = NULL;
  return temp;
}
inline void Image::set_allocated_camerainfo(::naothmessages::CameraInfo* camerainfo) {
  delete camerainfo_;
  camerainfo_ = camerainfo;
  if (camerainfo) {
    set_has_camerainfo();
  } else {
    clear_has_camerainfo();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.Image.cameraInfo)
}

// optional .naothmessages.Image.Format format = 5 [default = YUV];
inline bool Image::has_format() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Image::set_has_format() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Image::clear_has_format() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Image::clear_format() {
  format_ = 0;
  clear_has_format();
}
inline ::naothmessages::Image_Format Image::format() const {
  // @@protoc_insertion_point(field_get:naothmessages.Image.format)
  return static_cast< ::naothmessages::Image_Format >(format_);
}
inline void Image::set_format(::naothmessages::Image_Format value) {
  assert(::naothmessages::Image_Format_IsValid(value));
  set_has_format();
  format_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.Image.format)
}

// optional uint32 timestamp = 6;
inline bool Image::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Image::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Image::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Image::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 Image::timestamp() const {
  // @@protoc_insertion_point(field_get:naothmessages.Image.timestamp)
  return timestamp_;
}
inline void Image::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.Image.timestamp)
}

// -------------------------------------------------------------------

// CameraInfo

// required uint32 resolutionWidth = 1;
inline bool CameraInfo::has_resolutionwidth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraInfo::set_has_resolutionwidth() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraInfo::clear_has_resolutionwidth() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraInfo::clear_resolutionwidth() {
  resolutionwidth_ = 0u;
  clear_has_resolutionwidth();
}
inline ::google::protobuf::uint32 CameraInfo::resolutionwidth() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.resolutionWidth)
  return resolutionwidth_;
}
inline void CameraInfo::set_resolutionwidth(::google::protobuf::uint32 value) {
  set_has_resolutionwidth();
  resolutionwidth_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraInfo.resolutionWidth)
}

// required uint32 resolutionHeight = 2;
inline bool CameraInfo::has_resolutionheight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraInfo::set_has_resolutionheight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraInfo::clear_has_resolutionheight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraInfo::clear_resolutionheight() {
  resolutionheight_ = 0u;
  clear_has_resolutionheight();
}
inline ::google::protobuf::uint32 CameraInfo::resolutionheight() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.resolutionHeight)
  return resolutionheight_;
}
inline void CameraInfo::set_resolutionheight(::google::protobuf::uint32 value) {
  set_has_resolutionheight();
  resolutionheight_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraInfo.resolutionHeight)
}

// optional .naothmessages.CameraID cameraID = 4 [default = bottom];
inline bool CameraInfo::has_cameraid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CameraInfo::set_has_cameraid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CameraInfo::clear_has_cameraid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CameraInfo::clear_cameraid() {
  cameraid_ = 1;
  clear_has_cameraid();
}
inline ::naothmessages::CameraID CameraInfo::cameraid() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.cameraID)
  return static_cast< ::naothmessages::CameraID >(cameraid_);
}
inline void CameraInfo::set_cameraid(::naothmessages::CameraID value) {
  assert(::naothmessages::CameraID_IsValid(value));
  set_has_cameraid();
  cameraid_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraInfo.cameraID)
}

// optional double focalLength = 5 [deprecated = true];
inline bool CameraInfo::has_focallength() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraInfo::set_has_focallength() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CameraInfo::clear_has_focallength() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CameraInfo::clear_focallength() {
  focallength_ = 0;
  clear_has_focallength();
}
inline double CameraInfo::focallength() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.focalLength)
  return focallength_;
}
inline void CameraInfo::set_focallength(double value) {
  set_has_focallength();
  focallength_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraInfo.focalLength)
}

// optional double openingAngleWidth = 6 [deprecated = true];
inline bool CameraInfo::has_openinganglewidth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraInfo::set_has_openinganglewidth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CameraInfo::clear_has_openinganglewidth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CameraInfo::clear_openinganglewidth() {
  openinganglewidth_ = 0;
  clear_has_openinganglewidth();
}
inline double CameraInfo::openinganglewidth() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.openingAngleWidth)
  return openinganglewidth_;
}
inline void CameraInfo::set_openinganglewidth(double value) {
  set_has_openinganglewidth();
  openinganglewidth_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraInfo.openingAngleWidth)
}

// optional double openingAngleHeight = 7 [deprecated = true];
inline bool CameraInfo::has_openingangleheight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CameraInfo::set_has_openingangleheight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CameraInfo::clear_has_openingangleheight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CameraInfo::clear_openingangleheight() {
  openingangleheight_ = 0;
  clear_has_openingangleheight();
}
inline double CameraInfo::openingangleheight() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.openingAngleHeight)
  return openingangleheight_;
}
inline void CameraInfo::set_openingangleheight(double value) {
  set_has_openingangleheight();
  openingangleheight_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraInfo.openingAngleHeight)
}

// optional double opticalCenterX = 8 [deprecated = true];
inline bool CameraInfo::has_opticalcenterx() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CameraInfo::set_has_opticalcenterx() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CameraInfo::clear_has_opticalcenterx() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CameraInfo::clear_opticalcenterx() {
  opticalcenterx_ = 0;
  clear_has_opticalcenterx();
}
inline double CameraInfo::opticalcenterx() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.opticalCenterX)
  return opticalcenterx_;
}
inline void CameraInfo::set_opticalcenterx(double value) {
  set_has_opticalcenterx();
  opticalcenterx_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraInfo.opticalCenterX)
}

// optional double opticalCenterY = 9 [deprecated = true];
inline bool CameraInfo::has_opticalcentery() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CameraInfo::set_has_opticalcentery() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CameraInfo::clear_has_opticalcentery() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CameraInfo::clear_opticalcentery() {
  opticalcentery_ = 0;
  clear_has_opticalcentery();
}
inline double CameraInfo::opticalcentery() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.opticalCenterY)
  return opticalcentery_;
}
inline void CameraInfo::set_opticalcentery(double value) {
  set_has_opticalcentery();
  opticalcentery_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraInfo.opticalCenterY)
}

// optional int64 size = 10 [deprecated = true];
inline bool CameraInfo::has_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CameraInfo::set_has_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CameraInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CameraInfo::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::int64 CameraInfo::size() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.size)
  return size_;
}
inline void CameraInfo::set_size(::google::protobuf::int64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraInfo.size)
}

// optional int64 memorysize = 11 [deprecated = true];
inline bool CameraInfo::has_memorysize() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CameraInfo::set_has_memorysize() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CameraInfo::clear_has_memorysize() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CameraInfo::clear_memorysize() {
  memorysize_ = GOOGLE_LONGLONG(0);
  clear_has_memorysize();
}
inline ::google::protobuf::int64 CameraInfo::memorysize() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.memorysize)
  return memorysize_;
}
inline void CameraInfo::set_memorysize(::google::protobuf::int64 value) {
  set_has_memorysize();
  memorysize_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraInfo.memorysize)
}

// optional double cameraRollOffset = 12 [deprecated = true];
inline bool CameraInfo::has_camerarolloffset() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CameraInfo::set_has_camerarolloffset() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CameraInfo::clear_has_camerarolloffset() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CameraInfo::clear_camerarolloffset() {
  camerarolloffset_ = 0;
  clear_has_camerarolloffset();
}
inline double CameraInfo::camerarolloffset() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.cameraRollOffset)
  return camerarolloffset_;
}
inline void CameraInfo::set_camerarolloffset(double value) {
  set_has_camerarolloffset();
  camerarolloffset_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraInfo.cameraRollOffset)
}

// optional double cameraTiltOffset = 13 [deprecated = true];
inline bool CameraInfo::has_cameratiltoffset() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CameraInfo::set_has_cameratiltoffset() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CameraInfo::clear_has_cameratiltoffset() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CameraInfo::clear_cameratiltoffset() {
  cameratiltoffset_ = 0;
  clear_has_cameratiltoffset();
}
inline double CameraInfo::cameratiltoffset() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.cameraTiltOffset)
  return cameratiltoffset_;
}
inline void CameraInfo::set_cameratiltoffset(double value) {
  set_has_cameratiltoffset();
  cameratiltoffset_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraInfo.cameraTiltOffset)
}

// repeated .naothmessages.DoubleVector2 correctionOffset = 18 [deprecated = true];
inline int CameraInfo::correctionoffset_size() const {
  return correctionoffset_.size();
}
inline void CameraInfo::clear_correctionoffset() {
  correctionoffset_.Clear();
}
inline const ::naothmessages::DoubleVector2& CameraInfo::correctionoffset(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.correctionOffset)
  return correctionoffset_.Get(index);
}
inline ::naothmessages::DoubleVector2* CameraInfo::mutable_correctionoffset(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.CameraInfo.correctionOffset)
  return correctionoffset_.Mutable(index);
}
inline ::naothmessages::DoubleVector2* CameraInfo::add_correctionoffset() {
  // @@protoc_insertion_point(field_add:naothmessages.CameraInfo.correctionOffset)
  return correctionoffset_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 >*
CameraInfo::mutable_correctionoffset() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.CameraInfo.correctionOffset)
  return &correctionoffset_;
}
inline const ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 >&
CameraInfo::correctionoffset() const {
  // @@protoc_insertion_point(field_list:naothmessages.CameraInfo.correctionOffset)
  return correctionoffset_;
}

// repeated .naothmessages.DoubleVector2 headJointOffset = 19 [deprecated = true];
inline int CameraInfo::headjointoffset_size() const {
  return headjointoffset_.size();
}
inline void CameraInfo::clear_headjointoffset() {
  headjointoffset_.Clear();
}
inline const ::naothmessages::DoubleVector2& CameraInfo::headjointoffset(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.headJointOffset)
  return headjointoffset_.Get(index);
}
inline ::naothmessages::DoubleVector2* CameraInfo::mutable_headjointoffset(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.CameraInfo.headJointOffset)
  return headjointoffset_.Mutable(index);
}
inline ::naothmessages::DoubleVector2* CameraInfo::add_headjointoffset() {
  // @@protoc_insertion_point(field_add:naothmessages.CameraInfo.headJointOffset)
  return headjointoffset_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 >*
CameraInfo::mutable_headjointoffset() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.CameraInfo.headJointOffset)
  return &headjointoffset_;
}
inline const ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 >&
CameraInfo::headjointoffset() const {
  // @@protoc_insertion_point(field_list:naothmessages.CameraInfo.headJointOffset)
  return headjointoffset_;
}

// repeated .naothmessages.Pose3D transformation = 14 [deprecated = true];
inline int CameraInfo::transformation_size() const {
  return transformation_.size();
}
inline void CameraInfo::clear_transformation() {
  transformation_.Clear();
}
inline const ::naothmessages::Pose3D& CameraInfo::transformation(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.transformation)
  return transformation_.Get(index);
}
inline ::naothmessages::Pose3D* CameraInfo::mutable_transformation(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.CameraInfo.transformation)
  return transformation_.Mutable(index);
}
inline ::naothmessages::Pose3D* CameraInfo::add_transformation() {
  // @@protoc_insertion_point(field_add:naothmessages.CameraInfo.transformation)
  return transformation_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::naothmessages::Pose3D >*
CameraInfo::mutable_transformation() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.CameraInfo.transformation)
  return &transformation_;
}
inline const ::google::protobuf::RepeatedPtrField< ::naothmessages::Pose3D >&
CameraInfo::transformation() const {
  // @@protoc_insertion_point(field_list:naothmessages.CameraInfo.transformation)
  return transformation_;
}

// optional double openingAngleDiagonal = 15;
inline bool CameraInfo::has_openinganglediagonal() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CameraInfo::set_has_openinganglediagonal() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CameraInfo::clear_has_openinganglediagonal() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CameraInfo::clear_openinganglediagonal() {
  openinganglediagonal_ = 0;
  clear_has_openinganglediagonal();
}
inline double CameraInfo::openinganglediagonal() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.openingAngleDiagonal)
  return openinganglediagonal_;
}
inline void CameraInfo::set_openinganglediagonal(double value) {
  set_has_openinganglediagonal();
  openinganglediagonal_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraInfo.openingAngleDiagonal)
}

// optional double pixelSize = 16;
inline bool CameraInfo::has_pixelsize() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CameraInfo::set_has_pixelsize() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CameraInfo::clear_has_pixelsize() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CameraInfo::clear_pixelsize() {
  pixelsize_ = 0;
  clear_has_pixelsize();
}
inline double CameraInfo::pixelsize() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.pixelSize)
  return pixelsize_;
}
inline void CameraInfo::set_pixelsize(double value) {
  set_has_pixelsize();
  pixelsize_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraInfo.pixelSize)
}

// optional double focus = 17;
inline bool CameraInfo::has_focus() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CameraInfo::set_has_focus() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CameraInfo::clear_has_focus() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CameraInfo::clear_focus() {
  focus_ = 0;
  clear_has_focus();
}
inline double CameraInfo::focus() const {
  // @@protoc_insertion_point(field_get:naothmessages.CameraInfo.focus)
  return focus_;
}
inline void CameraInfo::set_focus(double value) {
  set_has_focus();
  focus_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.CameraInfo.focus)
}

// -------------------------------------------------------------------

// JointData

// repeated double position = 1;
inline int JointData::position_size() const {
  return position_.size();
}
inline void JointData::clear_position() {
  position_.Clear();
}
inline double JointData::position(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.JointData.position)
  return position_.Get(index);
}
inline void JointData::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.JointData.position)
}
inline void JointData::add_position(double value) {
  position_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.JointData.position)
}
inline const ::google::protobuf::RepeatedField< double >&
JointData::position() const {
  // @@protoc_insertion_point(field_list:naothmessages.JointData.position)
  return position_;
}
inline ::google::protobuf::RepeatedField< double >*
JointData::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.JointData.position)
  return &position_;
}

// repeated double stiffness = 2;
inline int JointData::stiffness_size() const {
  return stiffness_.size();
}
inline void JointData::clear_stiffness() {
  stiffness_.Clear();
}
inline double JointData::stiffness(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.JointData.stiffness)
  return stiffness_.Get(index);
}
inline void JointData::set_stiffness(int index, double value) {
  stiffness_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.JointData.stiffness)
}
inline void JointData::add_stiffness(double value) {
  stiffness_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.JointData.stiffness)
}
inline const ::google::protobuf::RepeatedField< double >&
JointData::stiffness() const {
  // @@protoc_insertion_point(field_list:naothmessages.JointData.stiffness)
  return stiffness_;
}
inline ::google::protobuf::RepeatedField< double >*
JointData::mutable_stiffness() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.JointData.stiffness)
  return &stiffness_;
}

// repeated double dp = 3;
inline int JointData::dp_size() const {
  return dp_.size();
}
inline void JointData::clear_dp() {
  dp_.Clear();
}
inline double JointData::dp(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.JointData.dp)
  return dp_.Get(index);
}
inline void JointData::set_dp(int index, double value) {
  dp_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.JointData.dp)
}
inline void JointData::add_dp(double value) {
  dp_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.JointData.dp)
}
inline const ::google::protobuf::RepeatedField< double >&
JointData::dp() const {
  // @@protoc_insertion_point(field_list:naothmessages.JointData.dp)
  return dp_;
}
inline ::google::protobuf::RepeatedField< double >*
JointData::mutable_dp() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.JointData.dp)
  return &dp_;
}

// repeated double ddp = 4;
inline int JointData::ddp_size() const {
  return ddp_.size();
}
inline void JointData::clear_ddp() {
  ddp_.Clear();
}
inline double JointData::ddp(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.JointData.ddp)
  return ddp_.Get(index);
}
inline void JointData::set_ddp(int index, double value) {
  ddp_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.JointData.ddp)
}
inline void JointData::add_ddp(double value) {
  ddp_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.JointData.ddp)
}
inline const ::google::protobuf::RepeatedField< double >&
JointData::ddp() const {
  // @@protoc_insertion_point(field_list:naothmessages.JointData.ddp)
  return ddp_;
}
inline ::google::protobuf::RepeatedField< double >*
JointData::mutable_ddp() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.JointData.ddp)
  return &ddp_;
}

// -------------------------------------------------------------------

// SensorJointData

// required .naothmessages.JointData jointData = 1;
inline bool SensorJointData::has_jointdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorJointData::set_has_jointdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SensorJointData::clear_has_jointdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SensorJointData::clear_jointdata() {
  if (jointdata_ != NULL) jointdata_->::naothmessages::JointData::Clear();
  clear_has_jointdata();
}
inline const ::naothmessages::JointData& SensorJointData::jointdata() const {
  const ::naothmessages::JointData* p = jointdata_;
  // @@protoc_insertion_point(field_get:naothmessages.SensorJointData.jointData)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::JointData*>(
      &::naothmessages::_JointData_default_instance_);
}
inline ::naothmessages::JointData* SensorJointData::mutable_jointdata() {
  set_has_jointdata();
  if (jointdata_ == NULL) {
    jointdata_ = new ::naothmessages::JointData;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.SensorJointData.jointData)
  return jointdata_;
}
inline ::naothmessages::JointData* SensorJointData::release_jointdata() {
  // @@protoc_insertion_point(field_release:naothmessages.SensorJointData.jointData)
  clear_has_jointdata();
  ::naothmessages::JointData* temp = jointdata_;
  jointdata_ = NULL;
  return temp;
}
inline void SensorJointData::set_allocated_jointdata(::naothmessages::JointData* jointdata) {
  delete jointdata_;
  jointdata_ = jointdata;
  if (jointdata) {
    set_has_jointdata();
  } else {
    clear_has_jointdata();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.SensorJointData.jointData)
}

// repeated double temperature = 2;
inline int SensorJointData::temperature_size() const {
  return temperature_.size();
}
inline void SensorJointData::clear_temperature() {
  temperature_.Clear();
}
inline double SensorJointData::temperature(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.SensorJointData.temperature)
  return temperature_.Get(index);
}
inline void SensorJointData::set_temperature(int index, double value) {
  temperature_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.SensorJointData.temperature)
}
inline void SensorJointData::add_temperature(double value) {
  temperature_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.SensorJointData.temperature)
}
inline const ::google::protobuf::RepeatedField< double >&
SensorJointData::temperature() const {
  // @@protoc_insertion_point(field_list:naothmessages.SensorJointData.temperature)
  return temperature_;
}
inline ::google::protobuf::RepeatedField< double >*
SensorJointData::mutable_temperature() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.SensorJointData.temperature)
  return &temperature_;
}

// repeated double electricCurrent = 3;
inline int SensorJointData::electriccurrent_size() const {
  return electriccurrent_.size();
}
inline void SensorJointData::clear_electriccurrent() {
  electriccurrent_.Clear();
}
inline double SensorJointData::electriccurrent(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.SensorJointData.electricCurrent)
  return electriccurrent_.Get(index);
}
inline void SensorJointData::set_electriccurrent(int index, double value) {
  electriccurrent_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.SensorJointData.electricCurrent)
}
inline void SensorJointData::add_electriccurrent(double value) {
  electriccurrent_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.SensorJointData.electricCurrent)
}
inline const ::google::protobuf::RepeatedField< double >&
SensorJointData::electriccurrent() const {
  // @@protoc_insertion_point(field_list:naothmessages.SensorJointData.electricCurrent)
  return electriccurrent_;
}
inline ::google::protobuf::RepeatedField< double >*
SensorJointData::mutable_electriccurrent() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.SensorJointData.electricCurrent)
  return &electriccurrent_;
}

// -------------------------------------------------------------------

// UltraSoundReceiveData

// optional uint32 ultraSoundTimeStep = 1;
inline bool UltraSoundReceiveData::has_ultrasoundtimestep() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UltraSoundReceiveData::set_has_ultrasoundtimestep() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UltraSoundReceiveData::clear_has_ultrasoundtimestep() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UltraSoundReceiveData::clear_ultrasoundtimestep() {
  ultrasoundtimestep_ = 0u;
  clear_has_ultrasoundtimestep();
}
inline ::google::protobuf::uint32 UltraSoundReceiveData::ultrasoundtimestep() const {
  // @@protoc_insertion_point(field_get:naothmessages.UltraSoundReceiveData.ultraSoundTimeStep)
  return ultrasoundtimestep_;
}
inline void UltraSoundReceiveData::set_ultrasoundtimestep(::google::protobuf::uint32 value) {
  set_has_ultrasoundtimestep();
  ultrasoundtimestep_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.UltraSoundReceiveData.ultraSoundTimeStep)
}

// required double rawdata = 2;
inline bool UltraSoundReceiveData::has_rawdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UltraSoundReceiveData::set_has_rawdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UltraSoundReceiveData::clear_has_rawdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UltraSoundReceiveData::clear_rawdata() {
  rawdata_ = 0;
  clear_has_rawdata();
}
inline double UltraSoundReceiveData::rawdata() const {
  // @@protoc_insertion_point(field_get:naothmessages.UltraSoundReceiveData.rawdata)
  return rawdata_;
}
inline void UltraSoundReceiveData::set_rawdata(double value) {
  set_has_rawdata();
  rawdata_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.UltraSoundReceiveData.rawdata)
}

// repeated double dataLeft = 3;
inline int UltraSoundReceiveData::dataleft_size() const {
  return dataleft_.size();
}
inline void UltraSoundReceiveData::clear_dataleft() {
  dataleft_.Clear();
}
inline double UltraSoundReceiveData::dataleft(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.UltraSoundReceiveData.dataLeft)
  return dataleft_.Get(index);
}
inline void UltraSoundReceiveData::set_dataleft(int index, double value) {
  dataleft_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.UltraSoundReceiveData.dataLeft)
}
inline void UltraSoundReceiveData::add_dataleft(double value) {
  dataleft_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.UltraSoundReceiveData.dataLeft)
}
inline const ::google::protobuf::RepeatedField< double >&
UltraSoundReceiveData::dataleft() const {
  // @@protoc_insertion_point(field_list:naothmessages.UltraSoundReceiveData.dataLeft)
  return dataleft_;
}
inline ::google::protobuf::RepeatedField< double >*
UltraSoundReceiveData::mutable_dataleft() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.UltraSoundReceiveData.dataLeft)
  return &dataleft_;
}

// repeated double dataRight = 4;
inline int UltraSoundReceiveData::dataright_size() const {
  return dataright_.size();
}
inline void UltraSoundReceiveData::clear_dataright() {
  dataright_.Clear();
}
inline double UltraSoundReceiveData::dataright(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.UltraSoundReceiveData.dataRight)
  return dataright_.Get(index);
}
inline void UltraSoundReceiveData::set_dataright(int index, double value) {
  dataright_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.UltraSoundReceiveData.dataRight)
}
inline void UltraSoundReceiveData::add_dataright(double value) {
  dataright_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.UltraSoundReceiveData.dataRight)
}
inline const ::google::protobuf::RepeatedField< double >&
UltraSoundReceiveData::dataright() const {
  // @@protoc_insertion_point(field_list:naothmessages.UltraSoundReceiveData.dataRight)
  return dataright_;
}
inline ::google::protobuf::RepeatedField< double >*
UltraSoundReceiveData::mutable_dataright() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.UltraSoundReceiveData.dataRight)
  return &dataright_;
}

// -------------------------------------------------------------------

// FrameInfo

// required uint32 frameNumber = 1;
inline bool FrameInfo::has_framenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FrameInfo::set_has_framenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FrameInfo::clear_has_framenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FrameInfo::clear_framenumber() {
  framenumber_ = 0u;
  clear_has_framenumber();
}
inline ::google::protobuf::uint32 FrameInfo::framenumber() const {
  // @@protoc_insertion_point(field_get:naothmessages.FrameInfo.frameNumber)
  return framenumber_;
}
inline void FrameInfo::set_framenumber(::google::protobuf::uint32 value) {
  set_has_framenumber();
  framenumber_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.FrameInfo.frameNumber)
}

// required uint32 time = 2;
inline bool FrameInfo::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FrameInfo::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FrameInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FrameInfo::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 FrameInfo::time() const {
  // @@protoc_insertion_point(field_get:naothmessages.FrameInfo.time)
  return time_;
}
inline void FrameInfo::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.FrameInfo.time)
}

// -------------------------------------------------------------------

// RobotInfo

// optional string platform = 1;
inline bool RobotInfo::has_platform() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotInfo::set_has_platform() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotInfo::clear_has_platform() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotInfo::clear_platform() {
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platform();
}
inline const ::std::string& RobotInfo::platform() const {
  // @@protoc_insertion_point(field_get:naothmessages.RobotInfo.platform)
  return platform_.GetNoArena();
}
inline void RobotInfo::set_platform(const ::std::string& value) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naothmessages.RobotInfo.platform)
}
#if LANG_CXX11
inline void RobotInfo::set_platform(::std::string&& value) {
  set_has_platform();
  platform_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:naothmessages.RobotInfo.platform)
}
#endif
inline void RobotInfo::set_platform(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naothmessages.RobotInfo.platform)
}
inline void RobotInfo::set_platform(const char* value, size_t size) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naothmessages.RobotInfo.platform)
}
inline ::std::string* RobotInfo::mutable_platform() {
  set_has_platform();
  // @@protoc_insertion_point(field_mutable:naothmessages.RobotInfo.platform)
  return platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RobotInfo::release_platform() {
  // @@protoc_insertion_point(field_release:naothmessages.RobotInfo.platform)
  clear_has_platform();
  return platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RobotInfo::set_allocated_platform(::std::string* platform) {
  if (platform != NULL) {
    set_has_platform();
  } else {
    clear_has_platform();
  }
  platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:naothmessages.RobotInfo.platform)
}

// optional string bodyNickName = 2;
inline bool RobotInfo::has_bodynickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotInfo::set_has_bodynickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotInfo::clear_has_bodynickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobotInfo::clear_bodynickname() {
  bodynickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bodynickname();
}
inline const ::std::string& RobotInfo::bodynickname() const {
  // @@protoc_insertion_point(field_get:naothmessages.RobotInfo.bodyNickName)
  return bodynickname_.GetNoArena();
}
inline void RobotInfo::set_bodynickname(const ::std::string& value) {
  set_has_bodynickname();
  bodynickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naothmessages.RobotInfo.bodyNickName)
}
#if LANG_CXX11
inline void RobotInfo::set_bodynickname(::std::string&& value) {
  set_has_bodynickname();
  bodynickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:naothmessages.RobotInfo.bodyNickName)
}
#endif
inline void RobotInfo::set_bodynickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bodynickname();
  bodynickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naothmessages.RobotInfo.bodyNickName)
}
inline void RobotInfo::set_bodynickname(const char* value, size_t size) {
  set_has_bodynickname();
  bodynickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naothmessages.RobotInfo.bodyNickName)
}
inline ::std::string* RobotInfo::mutable_bodynickname() {
  set_has_bodynickname();
  // @@protoc_insertion_point(field_mutable:naothmessages.RobotInfo.bodyNickName)
  return bodynickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RobotInfo::release_bodynickname() {
  // @@protoc_insertion_point(field_release:naothmessages.RobotInfo.bodyNickName)
  clear_has_bodynickname();
  return bodynickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RobotInfo::set_allocated_bodynickname(::std::string* bodynickname) {
  if (bodynickname != NULL) {
    set_has_bodynickname();
  } else {
    clear_has_bodynickname();
  }
  bodynickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bodynickname);
  // @@protoc_insertion_point(field_set_allocated:naothmessages.RobotInfo.bodyNickName)
}

// optional string headNickName = 3;
inline bool RobotInfo::has_headnickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RobotInfo::set_has_headnickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RobotInfo::clear_has_headnickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RobotInfo::clear_headnickname() {
  headnickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headnickname();
}
inline const ::std::string& RobotInfo::headnickname() const {
  // @@protoc_insertion_point(field_get:naothmessages.RobotInfo.headNickName)
  return headnickname_.GetNoArena();
}
inline void RobotInfo::set_headnickname(const ::std::string& value) {
  set_has_headnickname();
  headnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naothmessages.RobotInfo.headNickName)
}
#if LANG_CXX11
inline void RobotInfo::set_headnickname(::std::string&& value) {
  set_has_headnickname();
  headnickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:naothmessages.RobotInfo.headNickName)
}
#endif
inline void RobotInfo::set_headnickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_headnickname();
  headnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naothmessages.RobotInfo.headNickName)
}
inline void RobotInfo::set_headnickname(const char* value, size_t size) {
  set_has_headnickname();
  headnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naothmessages.RobotInfo.headNickName)
}
inline ::std::string* RobotInfo::mutable_headnickname() {
  set_has_headnickname();
  // @@protoc_insertion_point(field_mutable:naothmessages.RobotInfo.headNickName)
  return headnickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RobotInfo::release_headnickname() {
  // @@protoc_insertion_point(field_release:naothmessages.RobotInfo.headNickName)
  clear_has_headnickname();
  return headnickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RobotInfo::set_allocated_headnickname(::std::string* headnickname) {
  if (headnickname != NULL) {
    set_has_headnickname();
  } else {
    clear_has_headnickname();
  }
  headnickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headnickname);
  // @@protoc_insertion_point(field_set_allocated:naothmessages.RobotInfo.headNickName)
}

// optional string bodyID = 4;
inline bool RobotInfo::has_bodyid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RobotInfo::set_has_bodyid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RobotInfo::clear_has_bodyid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RobotInfo::clear_bodyid() {
  bodyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bodyid();
}
inline const ::std::string& RobotInfo::bodyid() const {
  // @@protoc_insertion_point(field_get:naothmessages.RobotInfo.bodyID)
  return bodyid_.GetNoArena();
}
inline void RobotInfo::set_bodyid(const ::std::string& value) {
  set_has_bodyid();
  bodyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naothmessages.RobotInfo.bodyID)
}
#if LANG_CXX11
inline void RobotInfo::set_bodyid(::std::string&& value) {
  set_has_bodyid();
  bodyid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:naothmessages.RobotInfo.bodyID)
}
#endif
inline void RobotInfo::set_bodyid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bodyid();
  bodyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naothmessages.RobotInfo.bodyID)
}
inline void RobotInfo::set_bodyid(const char* value, size_t size) {
  set_has_bodyid();
  bodyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naothmessages.RobotInfo.bodyID)
}
inline ::std::string* RobotInfo::mutable_bodyid() {
  set_has_bodyid();
  // @@protoc_insertion_point(field_mutable:naothmessages.RobotInfo.bodyID)
  return bodyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RobotInfo::release_bodyid() {
  // @@protoc_insertion_point(field_release:naothmessages.RobotInfo.bodyID)
  clear_has_bodyid();
  return bodyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RobotInfo::set_allocated_bodyid(::std::string* bodyid) {
  if (bodyid != NULL) {
    set_has_bodyid();
  } else {
    clear_has_bodyid();
  }
  bodyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bodyid);
  // @@protoc_insertion_point(field_set_allocated:naothmessages.RobotInfo.bodyID)
}

// optional uint32 basicTimeStep = 5;
inline bool RobotInfo::has_basictimestep() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RobotInfo::set_has_basictimestep() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RobotInfo::clear_has_basictimestep() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RobotInfo::clear_basictimestep() {
  basictimestep_ = 0u;
  clear_has_basictimestep();
}
inline ::google::protobuf::uint32 RobotInfo::basictimestep() const {
  // @@protoc_insertion_point(field_get:naothmessages.RobotInfo.basicTimeStep)
  return basictimestep_;
}
inline void RobotInfo::set_basictimestep(::google::protobuf::uint32 value) {
  set_has_basictimestep();
  basictimestep_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.RobotInfo.basicTimeStep)
}

// -------------------------------------------------------------------

// FSRData

// repeated double force = 1 [deprecated = true];
inline int FSRData::force_size() const {
  return force_.size();
}
inline void FSRData::clear_force() {
  force_.Clear();
}
inline double FSRData::force(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.FSRData.force)
  return force_.Get(index);
}
inline void FSRData::set_force(int index, double value) {
  force_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.FSRData.force)
}
inline void FSRData::add_force(double value) {
  force_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.FSRData.force)
}
inline const ::google::protobuf::RepeatedField< double >&
FSRData::force() const {
  // @@protoc_insertion_point(field_list:naothmessages.FSRData.force)
  return force_;
}
inline ::google::protobuf::RepeatedField< double >*
FSRData::mutable_force() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.FSRData.force)
  return &force_;
}

// repeated double data = 2;
inline int FSRData::data_size() const {
  return data_.size();
}
inline void FSRData::clear_data() {
  data_.Clear();
}
inline double FSRData::data(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.FSRData.data)
  return data_.Get(index);
}
inline void FSRData::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.FSRData.data)
}
inline void FSRData::add_data(double value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.FSRData.data)
}
inline const ::google::protobuf::RepeatedField< double >&
FSRData::data() const {
  // @@protoc_insertion_point(field_list:naothmessages.FSRData.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< double >*
FSRData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.FSRData.data)
  return &data_;
}

// repeated bool valid = 3 [deprecated = true];
inline int FSRData::valid_size() const {
  return valid_.size();
}
inline void FSRData::clear_valid() {
  valid_.Clear();
}
inline bool FSRData::valid(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.FSRData.valid)
  return valid_.Get(index);
}
inline void FSRData::set_valid(int index, bool value) {
  valid_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.FSRData.valid)
}
inline void FSRData::add_valid(bool value) {
  valid_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.FSRData.valid)
}
inline const ::google::protobuf::RepeatedField< bool >&
FSRData::valid() const {
  // @@protoc_insertion_point(field_list:naothmessages.FSRData.valid)
  return valid_;
}
inline ::google::protobuf::RepeatedField< bool >*
FSRData::mutable_valid() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.FSRData.valid)
  return &valid_;
}

// -------------------------------------------------------------------

// AccelerometerData

// repeated double legacyPackedData = 1 [deprecated = true];
inline int AccelerometerData::legacypackeddata_size() const {
  return legacypackeddata_.size();
}
inline void AccelerometerData::clear_legacypackeddata() {
  legacypackeddata_.Clear();
}
inline double AccelerometerData::legacypackeddata(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.AccelerometerData.legacyPackedData)
  return legacypackeddata_.Get(index);
}
inline void AccelerometerData::set_legacypackeddata(int index, double value) {
  legacypackeddata_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.AccelerometerData.legacyPackedData)
}
inline void AccelerometerData::add_legacypackeddata(double value) {
  legacypackeddata_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.AccelerometerData.legacyPackedData)
}
inline const ::google::protobuf::RepeatedField< double >&
AccelerometerData::legacypackeddata() const {
  // @@protoc_insertion_point(field_list:naothmessages.AccelerometerData.legacyPackedData)
  return legacypackeddata_;
}
inline ::google::protobuf::RepeatedField< double >*
AccelerometerData::mutable_legacypackeddata() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.AccelerometerData.legacyPackedData)
  return &legacypackeddata_;
}

// optional .naothmessages.DoubleVector3 data = 2;
inline bool AccelerometerData::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccelerometerData::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccelerometerData::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccelerometerData::clear_data() {
  if (data_ != NULL) data_->::naothmessages::DoubleVector3::Clear();
  clear_has_data();
}
inline const ::naothmessages::DoubleVector3& AccelerometerData::data() const {
  const ::naothmessages::DoubleVector3* p = data_;
  // @@protoc_insertion_point(field_get:naothmessages.AccelerometerData.data)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
inline ::naothmessages::DoubleVector3* AccelerometerData::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.AccelerometerData.data)
  return data_;
}
inline ::naothmessages::DoubleVector3* AccelerometerData::release_data() {
  // @@protoc_insertion_point(field_release:naothmessages.AccelerometerData.data)
  clear_has_data();
  ::naothmessages::DoubleVector3* temp = data_;
  data_ = NULL;
  return temp;
}
inline void AccelerometerData::set_allocated_data(::naothmessages::DoubleVector3* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.AccelerometerData.data)
}

// optional .naothmessages.DoubleVector3 rawData = 3;
inline bool AccelerometerData::has_rawdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccelerometerData::set_has_rawdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccelerometerData::clear_has_rawdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccelerometerData::clear_rawdata() {
  if (rawdata_ != NULL) rawdata_->::naothmessages::DoubleVector3::Clear();
  clear_has_rawdata();
}
inline const ::naothmessages::DoubleVector3& AccelerometerData::rawdata() const {
  const ::naothmessages::DoubleVector3* p = rawdata_;
  // @@protoc_insertion_point(field_get:naothmessages.AccelerometerData.rawData)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
inline ::naothmessages::DoubleVector3* AccelerometerData::mutable_rawdata() {
  set_has_rawdata();
  if (rawdata_ == NULL) {
    rawdata_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.AccelerometerData.rawData)
  return rawdata_;
}
inline ::naothmessages::DoubleVector3* AccelerometerData::release_rawdata() {
  // @@protoc_insertion_point(field_release:naothmessages.AccelerometerData.rawData)
  clear_has_rawdata();
  ::naothmessages::DoubleVector3* temp = rawdata_;
  rawdata_ = NULL;
  return temp;
}
inline void AccelerometerData::set_allocated_rawdata(::naothmessages::DoubleVector3* rawdata) {
  delete rawdata_;
  rawdata_ = rawdata;
  if (rawdata) {
    set_has_rawdata();
  } else {
    clear_has_rawdata();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.AccelerometerData.rawData)
}

// -------------------------------------------------------------------

// GyrometerData

// repeated double legacyPackedData = 1 [deprecated = true];
inline int GyrometerData::legacypackeddata_size() const {
  return legacypackeddata_.size();
}
inline void GyrometerData::clear_legacypackeddata() {
  legacypackeddata_.Clear();
}
inline double GyrometerData::legacypackeddata(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.GyrometerData.legacyPackedData)
  return legacypackeddata_.Get(index);
}
inline void GyrometerData::set_legacypackeddata(int index, double value) {
  legacypackeddata_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.GyrometerData.legacyPackedData)
}
inline void GyrometerData::add_legacypackeddata(double value) {
  legacypackeddata_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.GyrometerData.legacyPackedData)
}
inline const ::google::protobuf::RepeatedField< double >&
GyrometerData::legacypackeddata() const {
  // @@protoc_insertion_point(field_list:naothmessages.GyrometerData.legacyPackedData)
  return legacypackeddata_;
}
inline ::google::protobuf::RepeatedField< double >*
GyrometerData::mutable_legacypackeddata() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.GyrometerData.legacyPackedData)
  return &legacypackeddata_;
}

// optional .naothmessages.DoubleVector3 data = 2;
inline bool GyrometerData::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GyrometerData::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GyrometerData::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GyrometerData::clear_data() {
  if (data_ != NULL) data_->::naothmessages::DoubleVector3::Clear();
  clear_has_data();
}
inline const ::naothmessages::DoubleVector3& GyrometerData::data() const {
  const ::naothmessages::DoubleVector3* p = data_;
  // @@protoc_insertion_point(field_get:naothmessages.GyrometerData.data)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
inline ::naothmessages::DoubleVector3* GyrometerData::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.GyrometerData.data)
  return data_;
}
inline ::naothmessages::DoubleVector3* GyrometerData::release_data() {
  // @@protoc_insertion_point(field_release:naothmessages.GyrometerData.data)
  clear_has_data();
  ::naothmessages::DoubleVector3* temp = data_;
  data_ = NULL;
  return temp;
}
inline void GyrometerData::set_allocated_data(::naothmessages::DoubleVector3* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.GyrometerData.data)
}

// optional .naothmessages.DoubleVector3 rawData = 3;
inline bool GyrometerData::has_rawdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GyrometerData::set_has_rawdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GyrometerData::clear_has_rawdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GyrometerData::clear_rawdata() {
  if (rawdata_ != NULL) rawdata_->::naothmessages::DoubleVector3::Clear();
  clear_has_rawdata();
}
inline const ::naothmessages::DoubleVector3& GyrometerData::rawdata() const {
  const ::naothmessages::DoubleVector3* p = rawdata_;
  // @@protoc_insertion_point(field_get:naothmessages.GyrometerData.rawData)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector3*>(
      &::naothmessages::_DoubleVector3_default_instance_);
}
inline ::naothmessages::DoubleVector3* GyrometerData::mutable_rawdata() {
  set_has_rawdata();
  if (rawdata_ == NULL) {
    rawdata_ = new ::naothmessages::DoubleVector3;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.GyrometerData.rawData)
  return rawdata_;
}
inline ::naothmessages::DoubleVector3* GyrometerData::release_rawdata() {
  // @@protoc_insertion_point(field_release:naothmessages.GyrometerData.rawData)
  clear_has_rawdata();
  ::naothmessages::DoubleVector3* temp = rawdata_;
  rawdata_ = NULL;
  return temp;
}
inline void GyrometerData::set_allocated_rawdata(::naothmessages::DoubleVector3* rawdata) {
  delete rawdata_;
  rawdata_ = rawdata;
  if (rawdata) {
    set_has_rawdata();
  } else {
    clear_has_rawdata();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.GyrometerData.rawData)
}

// optional double ref = 4;
inline bool GyrometerData::has_ref() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GyrometerData::set_has_ref() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GyrometerData::clear_has_ref() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GyrometerData::clear_ref() {
  ref_ = 0;
  clear_has_ref();
}
inline double GyrometerData::ref() const {
  // @@protoc_insertion_point(field_get:naothmessages.GyrometerData.ref)
  return ref_;
}
inline void GyrometerData::set_ref(double value) {
  set_has_ref();
  ref_ = value;
  // @@protoc_insertion_point(field_set:naothmessages.GyrometerData.ref)
}

// -------------------------------------------------------------------

// InertialSensorData

// repeated double legacyPackedData = 1 [deprecated = true];
inline int InertialSensorData::legacypackeddata_size() const {
  return legacypackeddata_.size();
}
inline void InertialSensorData::clear_legacypackeddata() {
  legacypackeddata_.Clear();
}
inline double InertialSensorData::legacypackeddata(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.InertialSensorData.legacyPackedData)
  return legacypackeddata_.Get(index);
}
inline void InertialSensorData::set_legacypackeddata(int index, double value) {
  legacypackeddata_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.InertialSensorData.legacyPackedData)
}
inline void InertialSensorData::add_legacypackeddata(double value) {
  legacypackeddata_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.InertialSensorData.legacyPackedData)
}
inline const ::google::protobuf::RepeatedField< double >&
InertialSensorData::legacypackeddata() const {
  // @@protoc_insertion_point(field_list:naothmessages.InertialSensorData.legacyPackedData)
  return legacypackeddata_;
}
inline ::google::protobuf::RepeatedField< double >*
InertialSensorData::mutable_legacypackeddata() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.InertialSensorData.legacyPackedData)
  return &legacypackeddata_;
}

// optional .naothmessages.DoubleVector2 data = 2;
inline bool InertialSensorData::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InertialSensorData::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InertialSensorData::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InertialSensorData::clear_data() {
  if (data_ != NULL) data_->::naothmessages::DoubleVector2::Clear();
  clear_has_data();
}
inline const ::naothmessages::DoubleVector2& InertialSensorData::data() const {
  const ::naothmessages::DoubleVector2* p = data_;
  // @@protoc_insertion_point(field_get:naothmessages.InertialSensorData.data)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::DoubleVector2*>(
      &::naothmessages::_DoubleVector2_default_instance_);
}
inline ::naothmessages::DoubleVector2* InertialSensorData::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::naothmessages::DoubleVector2;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.InertialSensorData.data)
  return data_;
}
inline ::naothmessages::DoubleVector2* InertialSensorData::release_data() {
  // @@protoc_insertion_point(field_release:naothmessages.InertialSensorData.data)
  clear_has_data();
  ::naothmessages::DoubleVector2* temp = data_;
  data_ = NULL;
  return temp;
}
inline void InertialSensorData::set_allocated_data(::naothmessages::DoubleVector2* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.InertialSensorData.data)
}

// -------------------------------------------------------------------

// GPSData

// required .naothmessages.Pose3D pose = 1;
inline bool GPSData::has_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GPSData::set_has_pose() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GPSData::clear_has_pose() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GPSData::clear_pose() {
  if (pose_ != NULL) pose_->::naothmessages::Pose3D::Clear();
  clear_has_pose();
}
inline const ::naothmessages::Pose3D& GPSData::pose() const {
  const ::naothmessages::Pose3D* p = pose_;
  // @@protoc_insertion_point(field_get:naothmessages.GPSData.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::Pose3D*>(
      &::naothmessages::_Pose3D_default_instance_);
}
inline ::naothmessages::Pose3D* GPSData::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::naothmessages::Pose3D;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.GPSData.pose)
  return pose_;
}
inline ::naothmessages::Pose3D* GPSData::release_pose() {
  // @@protoc_insertion_point(field_release:naothmessages.GPSData.pose)
  clear_has_pose();
  ::naothmessages::Pose3D* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void GPSData::set_allocated_pose(::naothmessages::Pose3D* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.GPSData.pose)
}

// -------------------------------------------------------------------

// OptiTrackData_TrackableItem

// required string name = 1;
inline bool OptiTrackData_TrackableItem::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptiTrackData_TrackableItem::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptiTrackData_TrackableItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptiTrackData_TrackableItem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& OptiTrackData_TrackableItem::name() const {
  // @@protoc_insertion_point(field_get:naothmessages.OptiTrackData.TrackableItem.name)
  return name_.GetNoArena();
}
inline void OptiTrackData_TrackableItem::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:naothmessages.OptiTrackData.TrackableItem.name)
}
#if LANG_CXX11
inline void OptiTrackData_TrackableItem::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:naothmessages.OptiTrackData.TrackableItem.name)
}
#endif
inline void OptiTrackData_TrackableItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:naothmessages.OptiTrackData.TrackableItem.name)
}
inline void OptiTrackData_TrackableItem::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:naothmessages.OptiTrackData.TrackableItem.name)
}
inline ::std::string* OptiTrackData_TrackableItem::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:naothmessages.OptiTrackData.TrackableItem.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptiTrackData_TrackableItem::release_name() {
  // @@protoc_insertion_point(field_release:naothmessages.OptiTrackData.TrackableItem.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptiTrackData_TrackableItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:naothmessages.OptiTrackData.TrackableItem.name)
}

// required .naothmessages.Pose3D pose = 2;
inline bool OptiTrackData_TrackableItem::has_pose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptiTrackData_TrackableItem::set_has_pose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptiTrackData_TrackableItem::clear_has_pose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptiTrackData_TrackableItem::clear_pose() {
  if (pose_ != NULL) pose_->::naothmessages::Pose3D::Clear();
  clear_has_pose();
}
inline const ::naothmessages::Pose3D& OptiTrackData_TrackableItem::pose() const {
  const ::naothmessages::Pose3D* p = pose_;
  // @@protoc_insertion_point(field_get:naothmessages.OptiTrackData.TrackableItem.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::naothmessages::Pose3D*>(
      &::naothmessages::_Pose3D_default_instance_);
}
inline ::naothmessages::Pose3D* OptiTrackData_TrackableItem::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::naothmessages::Pose3D;
  }
  // @@protoc_insertion_point(field_mutable:naothmessages.OptiTrackData.TrackableItem.pose)
  return pose_;
}
inline ::naothmessages::Pose3D* OptiTrackData_TrackableItem::release_pose() {
  // @@protoc_insertion_point(field_release:naothmessages.OptiTrackData.TrackableItem.pose)
  clear_has_pose();
  ::naothmessages::Pose3D* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void OptiTrackData_TrackableItem::set_allocated_pose(::naothmessages::Pose3D* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:naothmessages.OptiTrackData.TrackableItem.pose)
}

// -------------------------------------------------------------------

// OptiTrackData

// repeated .naothmessages.OptiTrackData.TrackableItem trackables = 1;
inline int OptiTrackData::trackables_size() const {
  return trackables_.size();
}
inline void OptiTrackData::clear_trackables() {
  trackables_.Clear();
}
inline const ::naothmessages::OptiTrackData_TrackableItem& OptiTrackData::trackables(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.OptiTrackData.trackables)
  return trackables_.Get(index);
}
inline ::naothmessages::OptiTrackData_TrackableItem* OptiTrackData::mutable_trackables(int index) {
  // @@protoc_insertion_point(field_mutable:naothmessages.OptiTrackData.trackables)
  return trackables_.Mutable(index);
}
inline ::naothmessages::OptiTrackData_TrackableItem* OptiTrackData::add_trackables() {
  // @@protoc_insertion_point(field_add:naothmessages.OptiTrackData.trackables)
  return trackables_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::naothmessages::OptiTrackData_TrackableItem >*
OptiTrackData::mutable_trackables() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.OptiTrackData.trackables)
  return &trackables_;
}
inline const ::google::protobuf::RepeatedPtrField< ::naothmessages::OptiTrackData_TrackableItem >&
OptiTrackData::trackables() const {
  // @@protoc_insertion_point(field_list:naothmessages.OptiTrackData.trackables)
  return trackables_;
}

// -------------------------------------------------------------------

// ButtonData

// repeated bool isPressed = 1;
inline int ButtonData::ispressed_size() const {
  return ispressed_.size();
}
inline void ButtonData::clear_ispressed() {
  ispressed_.Clear();
}
inline bool ButtonData::ispressed(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.ButtonData.isPressed)
  return ispressed_.Get(index);
}
inline void ButtonData::set_ispressed(int index, bool value) {
  ispressed_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.ButtonData.isPressed)
}
inline void ButtonData::add_ispressed(bool value) {
  ispressed_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.ButtonData.isPressed)
}
inline const ::google::protobuf::RepeatedField< bool >&
ButtonData::ispressed() const {
  // @@protoc_insertion_point(field_list:naothmessages.ButtonData.isPressed)
  return ispressed_;
}
inline ::google::protobuf::RepeatedField< bool >*
ButtonData::mutable_ispressed() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.ButtonData.isPressed)
  return &ispressed_;
}

// repeated uint32 numOfFramesPressed = 2;
inline int ButtonData::numofframespressed_size() const {
  return numofframespressed_.size();
}
inline void ButtonData::clear_numofframespressed() {
  numofframespressed_.Clear();
}
inline ::google::protobuf::uint32 ButtonData::numofframespressed(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.ButtonData.numOfFramesPressed)
  return numofframespressed_.Get(index);
}
inline void ButtonData::set_numofframespressed(int index, ::google::protobuf::uint32 value) {
  numofframespressed_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.ButtonData.numOfFramesPressed)
}
inline void ButtonData::add_numofframespressed(::google::protobuf::uint32 value) {
  numofframespressed_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.ButtonData.numOfFramesPressed)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ButtonData::numofframespressed() const {
  // @@protoc_insertion_point(field_list:naothmessages.ButtonData.numOfFramesPressed)
  return numofframespressed_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ButtonData::mutable_numofframespressed() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.ButtonData.numOfFramesPressed)
  return &numofframespressed_;
}

// repeated uint32 eventCounter = 3;
inline int ButtonData::eventcounter_size() const {
  return eventcounter_.size();
}
inline void ButtonData::clear_eventcounter() {
  eventcounter_.Clear();
}
inline ::google::protobuf::uint32 ButtonData::eventcounter(int index) const {
  // @@protoc_insertion_point(field_get:naothmessages.ButtonData.eventCounter)
  return eventcounter_.Get(index);
}
inline void ButtonData::set_eventcounter(int index, ::google::protobuf::uint32 value) {
  eventcounter_.Set(index, value);
  // @@protoc_insertion_point(field_set:naothmessages.ButtonData.eventCounter)
}
inline void ButtonData::add_eventcounter(::google::protobuf::uint32 value) {
  eventcounter_.Add(value);
  // @@protoc_insertion_point(field_add:naothmessages.ButtonData.eventCounter)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ButtonData::eventcounter() const {
  // @@protoc_insertion_point(field_list:naothmessages.ButtonData.eventCounter)
  return eventcounter_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ButtonData::mutable_eventcounter() {
  // @@protoc_insertion_point(field_mutable_list:naothmessages.ButtonData.eventCounter)
  return &eventcounter_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace naothmessages

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::naothmessages::Image_Format> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::naothmessages::Image_Format>() {
  return ::naothmessages::Image_Format_descriptor();
}
template <> struct is_proto_enum< ::naothmessages::ButtonData_ButtonID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::naothmessages::ButtonData_ButtonID>() {
  return ::naothmessages::ButtonData_ButtonID_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Framework_2dRepresentations_2eproto__INCLUDED
