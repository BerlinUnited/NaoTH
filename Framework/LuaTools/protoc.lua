-- as found on http://lua-users.org/wiki/SplitJoin
local function split(str, delim, maxNb)
    -- Eliminate bad cases...
    if string.find(str, delim) == nil then
        return { str }
    end
    if maxNb == nil or maxNb < 1 then
        maxNb = 0    -- No limit
    end
    local result = {}
    local pat = "(.-)" .. delim .. "()"
    local nb = 0
    local lastPos
    for part, pos in string.gfind(str, pat) do
        nb = nb + 1
        result[nb] = part
        lastPos = pos
        if nb == maxNb then break end
    end
    -- Handle the last field
    if nb ~= maxNb then
        result[nb + 1] = string.sub(str, lastPos)
    end
    return result
end

local function getShadowFile(file)
  name = path.getname(file)
  dir = path.getdirectory(file)
  return dir .. "/." .. name .. ".lastCompile~"
end

local function checkRecompileNeeded(file)

  file_info = os.stat(file)
  shadow_info = os.stat(getShadowFile(file))
  if(shadow_info == nil or (file_info ~= nil and file_info.mtime > shadow_info.mtime)) then
    print ("INFO: " .. file ..  " was changed")
    return true
  end
  return false
end

local function touchShadow(file, time)
  local shadowFile = getShadowFile(file)
  io.output(shadowFile)
  io.write(time)
  io.close()  
end

local function protocCompile(inputFiles, cppOut, javaOut, ipaths)
  -- get the protobuf compiler from the EXTERN_PATH
  compiler = "protoc"
  if(os.is("windows")) then
    compiler = "protoc.exe"
  end
  -- TODO: should we search on additional locations?
  compilerPath = os.pathsearch(compiler, EXTERN_PATH .. "/bin/")
  if compilerPath == nil then
    print "ERROR: could not find protoc compiler executable in EXTERN_PATH/bin"
    return false
  end
  
  local args = ""
  if(cppOut ~= nil) then
    args = args .. "--cpp_out=\"" ..  cppOut .. "\" " -- always mind the space at the end
  end
  if(javaOut ~= nil) then
    args = args .. "--java_out=\"" ..  javaOut .. "\" " -- always mind the space at the end
  end
  if(ipaths ~= nil) then
    for i=1,#ipaths do
      args = args .. "--proto_path=\"" ..  ipaths[i] .. "\" " -- always mind the space at the end
    end
  end 

  args = args .. table.concat(inputFiles, " ")
  
  local cmd = compilerPath .. "/" .. compiler .. " " .. args
  print("INFO: executing " .. cmd)
  local returnCode = os.execute(cmd)
  return returnCode == 0
end

function invokeprotoc(inputFiles, cppOut, javaOut, ipaths)
    -- iterate over all files to check if any of them was changed
    local compile = false        
    for i = 1, #inputFiles do
      if(checkRecompileNeeded(inputFiles[i])) then
        compile = true
        break
      end
    end

    if(compile) then
      
      -- execute compile process for each file
      local time = os.time()
      
      -- do the recompilation
     if( protocCompile(inputFiles, cppOut, javaOut, ipaths)) then
       -- if successfull touch the shadow files
       for i = 1, #inputFiles do
          -- touch shadow file in order to remember this build date
          touchShadow(inputFiles[i], time)
      end -- end for each file to compile
     end
    end -- end if compile
end


newoption {
  trigger = "protoc-ipath",
  value = "INCLUDE-DIRS",
  description = "Include paths seperated by a \":\""
}

newoption {
  trigger = "protoc-cpp",
  value = "OUT-DIR",
  description = "Output directory for the C++ classes generated by protoc"
}

newoption {
  trigger = "protoc-java",
  value = "OUT-DIR",
  description = "Output directory for the Java classes generated by protoc"
}


-- the action protoc takes the files to compile as argument
-- see also the "protoc-cpp" and "protoc-java" arguments for specifying what kind of file
-- to generate and where to generate them
newaction {
  trigger = "protoc",
  description = "Compile premake4 messages given as argument",
  execute = function ()
    invokeprotoc(_ARGS, _OPTIONS["protoc-cpp"], _OPTIONS["protoc-java"], split(_OPTIONS["protoc-ipath"], ":") )    
  end
}
