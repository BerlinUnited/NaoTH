// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace naothmessages {

namespace {

const ::google::protobuf::Descriptor* CMDArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMDArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerModel_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamCommMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamCommMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopwatchItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopwatchItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stopwatches_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stopwatches_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlotItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlotItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PlotItem_PlotType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PlotStroke2D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlotStroke2D_reflection_ = NULL;
const ::google::protobuf::Descriptor* Plots_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plots_reflection_ = NULL;
const ::google::protobuf::Descriptor* XABSLParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XABSLParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* XABSLParameter_ParamType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* XABSLAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XABSLAction_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* XABSLAction_ActionType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BehaviorStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BehaviorStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Module_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Module_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModuleList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModuleList_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeatureKeyPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureKeyPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeatureDetectionResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureDetectionResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleDescriptor_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeatureClass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureClass_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeatureTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureTable_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Messages_2eproto() {
  protobuf_AddDesc_Messages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Messages.proto");
  GOOGLE_CHECK(file != NULL);
  CMDArg_descriptor_ = file->message_type(0);
  static const int CMDArg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMDArg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMDArg, bytes_),
  };
  CMDArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMDArg_descriptor_,
      CMDArg::default_instance_,
      CMDArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMDArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMDArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMDArg));
  CMD_descriptor_ = file->message_type(1);
  static const int CMD_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD, args_),
  };
  CMD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_descriptor_,
      CMD::default_instance_,
      CMD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD));
  PlayerModel_descriptor_ = file->message_type(2);
  static const int PlayerModel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerModel, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerModel, poseonfield_),
  };
  PlayerModel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerModel_descriptor_,
      PlayerModel::default_instance_,
      PlayerModel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerModel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerModel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerModel));
  TeamCommMessage_descriptor_ = file->message_type(3);
  static const int TeamCommMessage_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamCommMessage, playernumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamCommMessage, teamnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamCommMessage, wasstriker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamCommMessage, ispenalized_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamCommMessage, timesinceballwasseen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamCommMessage, ballposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamCommMessage, positiononfield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamCommMessage, opponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamCommMessage, isfallendown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamCommMessage, timetoball_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamCommMessage, bodyid_),
  };
  TeamCommMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamCommMessage_descriptor_,
      TeamCommMessage::default_instance_,
      TeamCommMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamCommMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamCommMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamCommMessage));
  StopwatchItem_descriptor_ = file->message_type(4);
  static const int StopwatchItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopwatchItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopwatchItem, time_),
  };
  StopwatchItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopwatchItem_descriptor_,
      StopwatchItem::default_instance_,
      StopwatchItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopwatchItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopwatchItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopwatchItem));
  Stopwatches_descriptor_ = file->message_type(5);
  static const int Stopwatches_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stopwatches, stopwatches_),
  };
  Stopwatches_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stopwatches_descriptor_,
      Stopwatches::default_instance_,
      Stopwatches_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stopwatches, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stopwatches, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stopwatches));
  PlotItem_descriptor_ = file->message_type(6);
  static const int PlotItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlotItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlotItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlotItem, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlotItem, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlotItem, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlotItem, rotation_),
  };
  PlotItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlotItem_descriptor_,
      PlotItem::default_instance_,
      PlotItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlotItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlotItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlotItem));
  PlotItem_PlotType_descriptor_ = PlotItem_descriptor_->enum_type(0);
  PlotStroke2D_descriptor_ = file->message_type(7);
  static const int PlotStroke2D_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlotStroke2D, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlotStroke2D, points_),
  };
  PlotStroke2D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlotStroke2D_descriptor_,
      PlotStroke2D::default_instance_,
      PlotStroke2D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlotStroke2D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlotStroke2D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlotStroke2D));
  Plots_descriptor_ = file->message_type(8);
  static const int Plots_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plots, plots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plots, plotstrokes_),
  };
  Plots_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plots_descriptor_,
      Plots::default_instance_,
      Plots_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plots, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plots, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plots));
  XABSLParameter_descriptor_ = file->message_type(9);
  static const int XABSLParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XABSLParameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XABSLParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XABSLParameter, decimalvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XABSLParameter, boolvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XABSLParameter, enumvalue_),
  };
  XABSLParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      XABSLParameter_descriptor_,
      XABSLParameter::default_instance_,
      XABSLParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XABSLParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XABSLParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(XABSLParameter));
  XABSLParameter_ParamType_descriptor_ = XABSLParameter_descriptor_->enum_type(0);
  XABSLAction_descriptor_ = file->message_type(10);
  static const int XABSLAction_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XABSLAction, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XABSLAction, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XABSLAction, timeofexecution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XABSLAction, activestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XABSLAction, statetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XABSLAction, parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XABSLAction, activesubactions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XABSLAction, decimalvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XABSLAction, boolvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XABSLAction, enumvalue_),
  };
  XABSLAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      XABSLAction_descriptor_,
      XABSLAction::default_instance_,
      XABSLAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XABSLAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XABSLAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(XABSLAction));
  XABSLAction_ActionType_descriptor_ = XABSLAction_descriptor_->enum_type(0);
  BehaviorStatus_descriptor_ = file->message_type(11);
  static const int BehaviorStatus_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorStatus, agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorStatus, activerootactions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorStatus, inputsymbols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorStatus, outputsymbols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorStatus, framenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorStatus, errormessage_),
  };
  BehaviorStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BehaviorStatus_descriptor_,
      BehaviorStatus::default_instance_,
      BehaviorStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BehaviorStatus));
  Module_descriptor_ = file->message_type(12);
  static const int Module_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Module, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Module, usedrepresentations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Module, providedrepresentations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Module, active_),
  };
  Module_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Module_descriptor_,
      Module::default_instance_,
      Module_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Module, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Module, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Module));
  ModuleList_descriptor_ = file->message_type(13);
  static const int ModuleList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleList, modules_),
  };
  ModuleList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModuleList_descriptor_,
      ModuleList::default_instance_,
      ModuleList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModuleList));
  FeatureKeyPoint_descriptor_ = file->message_type(14);
  static const int FeatureKeyPoint_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureKeyPoint, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureKeyPoint, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureKeyPoint, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureKeyPoint, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureKeyPoint, octave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureKeyPoint, class_id_),
  };
  FeatureKeyPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeatureKeyPoint_descriptor_,
      FeatureKeyPoint::default_instance_,
      FeatureKeyPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureKeyPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureKeyPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeatureKeyPoint));
  FeatureDetectionResult_descriptor_ = file->message_type(15);
  static const int FeatureDetectionResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureDetectionResult, grayscaleimage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureDetectionResult, keypoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureDetectionResult, descriptors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureDetectionResult, namesforkeypoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureDetectionResult, numberoffeatureelements_),
  };
  FeatureDetectionResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeatureDetectionResult_descriptor_,
      FeatureDetectionResult::default_instance_,
      FeatureDetectionResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureDetectionResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureDetectionResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeatureDetectionResult));
  SingleDescriptor_descriptor_ = file->message_type(16);
  static const int SingleDescriptor_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDescriptor, d_),
  };
  SingleDescriptor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleDescriptor_descriptor_,
      SingleDescriptor::default_instance_,
      SingleDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDescriptor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDescriptor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleDescriptor));
  FeatureClass_descriptor_ = file->message_type(17);
  static const int FeatureClass_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureClass, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureClass, samples_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureClass, objectheight_),
  };
  FeatureClass_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeatureClass_descriptor_,
      FeatureClass::default_instance_,
      FeatureClass_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureClass, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureClass, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeatureClass));
  FeatureTable_descriptor_ = file->message_type(18);
  static const int FeatureTable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureTable, classes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureTable, numberoffeatureelements_),
  };
  FeatureTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeatureTable_descriptor_,
      FeatureTable::default_instance_,
      FeatureTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeatureTable));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Messages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMDArg_descriptor_, &CMDArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_descriptor_, &CMD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerModel_descriptor_, &PlayerModel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamCommMessage_descriptor_, &TeamCommMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopwatchItem_descriptor_, &StopwatchItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stopwatches_descriptor_, &Stopwatches::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlotItem_descriptor_, &PlotItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlotStroke2D_descriptor_, &PlotStroke2D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plots_descriptor_, &Plots::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    XABSLParameter_descriptor_, &XABSLParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    XABSLAction_descriptor_, &XABSLAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BehaviorStatus_descriptor_, &BehaviorStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Module_descriptor_, &Module::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModuleList_descriptor_, &ModuleList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeatureKeyPoint_descriptor_, &FeatureKeyPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeatureDetectionResult_descriptor_, &FeatureDetectionResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleDescriptor_descriptor_, &SingleDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeatureClass_descriptor_, &FeatureClass::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeatureTable_descriptor_, &FeatureTable::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Messages_2eproto() {
  delete CMDArg::default_instance_;
  delete CMDArg_reflection_;
  delete CMD::default_instance_;
  delete CMD_reflection_;
  delete PlayerModel::default_instance_;
  delete PlayerModel_reflection_;
  delete TeamCommMessage::default_instance_;
  delete TeamCommMessage_reflection_;
  delete StopwatchItem::default_instance_;
  delete StopwatchItem_reflection_;
  delete Stopwatches::default_instance_;
  delete Stopwatches_reflection_;
  delete PlotItem::default_instance_;
  delete PlotItem_reflection_;
  delete PlotStroke2D::default_instance_;
  delete PlotStroke2D_reflection_;
  delete Plots::default_instance_;
  delete Plots_reflection_;
  delete XABSLParameter::default_instance_;
  delete XABSLParameter_reflection_;
  delete XABSLAction::default_instance_;
  delete XABSLAction_reflection_;
  delete BehaviorStatus::default_instance_;
  delete BehaviorStatus_reflection_;
  delete Module::default_instance_;
  delete Module_reflection_;
  delete ModuleList::default_instance_;
  delete ModuleList_reflection_;
  delete FeatureKeyPoint::default_instance_;
  delete FeatureKeyPoint_reflection_;
  delete FeatureDetectionResult::default_instance_;
  delete FeatureDetectionResult_reflection_;
  delete SingleDescriptor::default_instance_;
  delete SingleDescriptor_reflection_;
  delete FeatureClass::default_instance_;
  delete FeatureClass_reflection_;
  delete FeatureTable::default_instance_;
  delete FeatureTable_reflection_;
}

void protobuf_AddDesc_Messages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::naothmessages::protobuf_AddDesc_CommonTypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Messages.proto\022\rnaothmessages\032\021CommonT"
    "ypes.proto\"%\n\006CMDArg\022\014\n\004name\030\001 \002(\t\022\r\n\005by"
    "tes\030\003 \001(\014\"8\n\003CMD\022\014\n\004name\030\001 \002(\t\022#\n\004args\030\002"
    " \003(\0132\025.naothmessages.CMDArg\"I\n\013PlayerMod"
    "el\022\016\n\006number\030\001 \002(\005\022*\n\013poseOnField\030\002 \001(\0132"
    "\025.naothmessages.Pose2D\"\343\002\n\017TeamCommMessa"
    "ge\022\024\n\014playerNumber\030\001 \002(\005\022\022\n\nteamNumber\030\002"
    " \002(\005\022\031\n\nwasStriker\030\003 \001(\010:\005false\022\032\n\013isPen"
    "alized\030\004 \001(\010:\005false\022\034\n\024timeSinceBallWasS"
    "een\030\005 \001(\001\0222\n\014ballPosition\030\006 \001(\0132\034.naothm"
    "essages.DoubleVector2\022.\n\017positionOnField"
    "\030\007 \001(\0132\025.naothmessages.Pose2D\022,\n\010opponen"
    "t\030\010 \001(\0132\032.naothmessages.PlayerModel\022\033\n\014i"
    "sFallenDown\030\t \001(\010:\005false\022\022\n\ntimeToBall\030\n"
    " \001(\001\022\016\n\006bodyID\030\013 \001(\t\"+\n\rStopwatchItem\022\014\n"
    "\004name\030\001 \002(\t\022\014\n\004time\030\002 \002(\005\"@\n\013Stopwatches"
    "\0221\n\013stopwatches\030\001 \003(\0132\034.naothmessages.St"
    "opwatchItem\"\262\001\n\010PlotItem\022.\n\004type\030\001 \002(\0162 "
    ".naothmessages.PlotItem.PlotType\022\014\n\004name"
    "\030\002 \002(\t\022\r\n\005value\030\003 \001(\001\022\t\n\001x\030\004 \001(\001\022\t\n\001y\030\005 "
    "\001(\001\022\020\n\010rotation\030\006 \001(\001\"1\n\010PlotType\022\013\n\007Def"
    "ault\020\001\022\n\n\006Plot2D\020\002\022\014\n\010Origin2D\020\003\"J\n\014Plot"
    "Stroke2D\022\014\n\004name\030\002 \002(\t\022,\n\006points\030\001 \003(\0132\034"
    ".naothmessages.DoubleVector2\"a\n\005Plots\022&\n"
    "\005plots\030\001 \003(\0132\027.naothmessages.PlotItem\0220\n"
    "\013plotstrokes\030\002 \003(\0132\033.naothmessages.PlotS"
    "troke2D\"\341\001\n\016XABSLParameter\022\025\n\004name\030\001 \001(\t"
    ":\007unknown\022>\n\004type\030\002 \001(\0162\'.naothmessages."
    "XABSLParameter.ParamType:\007Unknown\022\024\n\014dec"
    "imalValue\030\003 \001(\001\022\021\n\tboolValue\030\004 \001(\010\022\021\n\ten"
    "umValue\030\005 \001(\t\"<\n\tParamType\022\013\n\007Decimal\020\000\022"
    "\013\n\007Boolean\020\001\022\010\n\004Enum\020\002\022\013\n\007Unknown\020\003\"\316\003\n\013"
    "XABSLAction\022<\n\004type\030\001 \001(\0162%.naothmessage"
    "s.XABSLAction.ActionType:\007Unknown\022\025\n\004nam"
    "e\030\002 \001(\t:\007unknown\022\032\n\017timeOfExecution\030\003 \001("
    "\003:\0010\022\023\n\013activeState\030\004 \001(\t\022\021\n\tstateTime\030\005"
    " \001(\003\0221\n\nparameters\030\006 \003(\0132\035.naothmessages"
    ".XABSLParameter\0224\n\020activeSubActions\030\007 \003("
    "\0132\032.naothmessages.XABSLAction\022\024\n\014decimal"
    "Value\030\010 \001(\001\022\021\n\tboolValue\030\t \001(\010\022\021\n\tenumVa"
    "lue\030\n \001(\t\"\200\001\n\nActionType\022\n\n\006Option\020\000\022\021\n\r"
    "BasicBehavior\020\001\022\027\n\023DecimalOutputSymbol\020\002"
    "\022\027\n\023BooleanOutputSymbol\020\003\022\024\n\020EnumOutputS"
    "ymbol\020\004\022\013\n\007Unknown\020\005\"\354\001\n\016BehaviorStatus\022"
    "\r\n\005agent\030\001 \001(\t\0225\n\021activeRootActions\030\002 \003("
    "\0132\032.naothmessages.XABSLAction\0223\n\014inputSy"
    "mbols\030\003 \003(\0132\035.naothmessages.XABSLParamet"
    "er\0224\n\routputSymbols\030\004 \003(\0132\035.naothmessage"
    "s.XABSLParameter\022\023\n\013frameNumber\030\005 \001(\r\022\024\n"
    "\014errorMessage\030\006 \001(\t\"k\n\006Module\022\014\n\004name\030\001 "
    "\002(\t\022\033\n\023usedRepresentations\030\002 \003(\t\022\037\n\027prov"
    "idedRepresentations\030\003 \003(\t\022\025\n\006active\030\004 \001("
    "\010:\005false\"4\n\nModuleList\022&\n\007modules\030\001 \003(\0132"
    "\025.naothmessages.Module\"\213\001\n\017FeatureKeyPoi"
    "nt\022\'\n\002pt\030\001 \002(\0132\033.naothmessages.FloatVect"
    "or2\022\014\n\004size\030\002 \002(\002\022\r\n\005angle\030\003 \002(\002\022\020\n\010resp"
    "onse\030\004 \002(\002\022\016\n\006octave\030\005 \002(\005\022\020\n\010class_id\030\006"
    " \002(\005\"\331\001\n\026FeatureDetectionResult\022\026\n\016grayS"
    "caleImage\030\001 \002(\014\0221\n\tkeyPoints\030\002 \003(\0132\036.nao"
    "thmessages.FeatureKeyPoint\0224\n\013descriptor"
    "s\030\003 \003(\0132\037.naothmessages.SingleDescriptor"
    "\022\031\n\021namesForKeyPoints\030\004 \003(\t\022#\n\027numberOfF"
    "eatureElements\030\005 \001(\005:\00264\"\035\n\020SingleDescri"
    "ptor\022\t\n\001d\030\001 \003(\002\"d\n\014FeatureClass\022\014\n\004name\030"
    "\001 \002(\t\0220\n\007samples\030\002 \003(\0132\037.naothmessages.S"
    "ingleDescriptor\022\024\n\014objectHeight\030\003 \001(\001\"a\n"
    "\014FeatureTable\022,\n\007classes\030\001 \003(\0132\033.naothme"
    "ssages.FeatureClass\022#\n\027numberOfFeatureEl"
    "ements\030\002 \001(\005:\00264B\026\n\024de.naoth.rc.messages", 2760);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Messages.proto", &protobuf_RegisterTypes);
  CMDArg::default_instance_ = new CMDArg();
  CMD::default_instance_ = new CMD();
  PlayerModel::default_instance_ = new PlayerModel();
  TeamCommMessage::default_instance_ = new TeamCommMessage();
  StopwatchItem::default_instance_ = new StopwatchItem();
  Stopwatches::default_instance_ = new Stopwatches();
  PlotItem::default_instance_ = new PlotItem();
  PlotStroke2D::default_instance_ = new PlotStroke2D();
  Plots::default_instance_ = new Plots();
  XABSLParameter::default_instance_ = new XABSLParameter();
  XABSLAction::default_instance_ = new XABSLAction();
  BehaviorStatus::default_instance_ = new BehaviorStatus();
  Module::default_instance_ = new Module();
  ModuleList::default_instance_ = new ModuleList();
  FeatureKeyPoint::default_instance_ = new FeatureKeyPoint();
  FeatureDetectionResult::default_instance_ = new FeatureDetectionResult();
  SingleDescriptor::default_instance_ = new SingleDescriptor();
  FeatureClass::default_instance_ = new FeatureClass();
  FeatureTable::default_instance_ = new FeatureTable();
  CMDArg::default_instance_->InitAsDefaultInstance();
  CMD::default_instance_->InitAsDefaultInstance();
  PlayerModel::default_instance_->InitAsDefaultInstance();
  TeamCommMessage::default_instance_->InitAsDefaultInstance();
  StopwatchItem::default_instance_->InitAsDefaultInstance();
  Stopwatches::default_instance_->InitAsDefaultInstance();
  PlotItem::default_instance_->InitAsDefaultInstance();
  PlotStroke2D::default_instance_->InitAsDefaultInstance();
  Plots::default_instance_->InitAsDefaultInstance();
  XABSLParameter::default_instance_->InitAsDefaultInstance();
  XABSLAction::default_instance_->InitAsDefaultInstance();
  BehaviorStatus::default_instance_->InitAsDefaultInstance();
  Module::default_instance_->InitAsDefaultInstance();
  ModuleList::default_instance_->InitAsDefaultInstance();
  FeatureKeyPoint::default_instance_->InitAsDefaultInstance();
  FeatureDetectionResult::default_instance_->InitAsDefaultInstance();
  SingleDescriptor::default_instance_->InitAsDefaultInstance();
  FeatureClass::default_instance_->InitAsDefaultInstance();
  FeatureTable::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Messages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Messages_2eproto {
  StaticDescriptorInitializer_Messages_2eproto() {
    protobuf_AddDesc_Messages_2eproto();
  }
} static_descriptor_initializer_Messages_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CMDArg::kNameFieldNumber;
const int CMDArg::kBytesFieldNumber;
#endif  // !_MSC_VER

CMDArg::CMDArg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMDArg::InitAsDefaultInstance() {
}

CMDArg::CMDArg(const CMDArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMDArg::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMDArg::~CMDArg() {
  SharedDtor();
}

void CMDArg::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete bytes_;
  }
  if (this != default_instance_) {
  }
}

void CMDArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMDArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMDArg_descriptor_;
}

const CMDArg& CMDArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();  return *default_instance_;
}

CMDArg* CMDArg::default_instance_ = NULL;

CMDArg* CMDArg::New() const {
  return new CMDArg;
}

void CMDArg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_bytes()) {
      if (bytes_ != &::google::protobuf::internal::kEmptyString) {
        bytes_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMDArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bytes;
        break;
      }
      
      // optional bytes bytes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMDArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional bytes bytes = 3;
  if (has_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->bytes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMDArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional bytes bytes = 3;
  if (has_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->bytes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMDArg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional bytes bytes = 3;
    if (has_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMDArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMDArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMDArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMDArg::MergeFrom(const CMDArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_bytes()) {
      set_bytes(from.bytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMDArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMDArg::CopyFrom(const CMDArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMDArg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CMDArg::Swap(CMDArg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(bytes_, other->bytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMDArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMDArg_descriptor_;
  metadata.reflection = CMDArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD::kNameFieldNumber;
const int CMD::kArgsFieldNumber;
#endif  // !_MSC_VER

CMD::CMD()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD::InitAsDefaultInstance() {
}

CMD::CMD(const CMD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD::~CMD() {
  SharedDtor();
}

void CMD::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CMD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_descriptor_;
}

const CMD& CMD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();  return *default_instance_;
}

CMD* CMD::default_instance_ = NULL;

CMD* CMD::New() const {
  return new CMD;
}

void CMD::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_args;
        break;
      }
      
      // repeated .naothmessages.CMDArg args = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // repeated .naothmessages.CMDArg args = 2;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->args(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // repeated .naothmessages.CMDArg args = 2;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->args(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  // repeated .naothmessages.CMDArg args = 2;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->args(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD::MergeFrom(const CMD& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD::CopyFrom(const CMD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < args_size(); i++) {
    if (!this->args(i).IsInitialized()) return false;
  }
  return true;
}

void CMD::Swap(CMD* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_descriptor_;
  metadata.reflection = CMD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerModel::kNumberFieldNumber;
const int PlayerModel::kPoseOnFieldFieldNumber;
#endif  // !_MSC_VER

PlayerModel::PlayerModel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerModel::InitAsDefaultInstance() {
  poseonfield_ = const_cast< ::naothmessages::Pose2D*>(&::naothmessages::Pose2D::default_instance());
}

PlayerModel::PlayerModel(const PlayerModel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerModel::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0;
  poseonfield_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerModel::~PlayerModel() {
  SharedDtor();
}

void PlayerModel::SharedDtor() {
  if (this != default_instance_) {
    delete poseonfield_;
  }
}

void PlayerModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerModel_descriptor_;
}

const PlayerModel& PlayerModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();  return *default_instance_;
}

PlayerModel* PlayerModel::default_instance_ = NULL;

PlayerModel* PlayerModel::New() const {
  return new PlayerModel;
}

void PlayerModel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0;
    if (has_poseonfield()) {
      if (poseonfield_ != NULL) poseonfield_->::naothmessages::Pose2D::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_poseOnField;
        break;
      }
      
      // optional .naothmessages.Pose2D poseOnField = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poseOnField:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_poseonfield()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number(), output);
  }
  
  // optional .naothmessages.Pose2D poseOnField = 2;
  if (has_poseonfield()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->poseonfield(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerModel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->number(), target);
  }
  
  // optional .naothmessages.Pose2D poseOnField = 2;
  if (has_poseonfield()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->poseonfield(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerModel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }
    
    // optional .naothmessages.Pose2D poseOnField = 2;
    if (has_poseonfield()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->poseonfield());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerModel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerModel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerModel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerModel::MergeFrom(const PlayerModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_poseonfield()) {
      mutable_poseonfield()->::naothmessages::Pose2D::MergeFrom(from.poseonfield());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerModel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerModel::CopyFrom(const PlayerModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerModel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_poseonfield()) {
    if (!this->poseonfield().IsInitialized()) return false;
  }
  return true;
}

void PlayerModel::Swap(PlayerModel* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(poseonfield_, other->poseonfield_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerModel_descriptor_;
  metadata.reflection = PlayerModel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamCommMessage::kPlayerNumberFieldNumber;
const int TeamCommMessage::kTeamNumberFieldNumber;
const int TeamCommMessage::kWasStrikerFieldNumber;
const int TeamCommMessage::kIsPenalizedFieldNumber;
const int TeamCommMessage::kTimeSinceBallWasSeenFieldNumber;
const int TeamCommMessage::kBallPositionFieldNumber;
const int TeamCommMessage::kPositionOnFieldFieldNumber;
const int TeamCommMessage::kOpponentFieldNumber;
const int TeamCommMessage::kIsFallenDownFieldNumber;
const int TeamCommMessage::kTimeToBallFieldNumber;
const int TeamCommMessage::kBodyIDFieldNumber;
#endif  // !_MSC_VER

TeamCommMessage::TeamCommMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamCommMessage::InitAsDefaultInstance() {
  ballposition_ = const_cast< ::naothmessages::DoubleVector2*>(&::naothmessages::DoubleVector2::default_instance());
  positiononfield_ = const_cast< ::naothmessages::Pose2D*>(&::naothmessages::Pose2D::default_instance());
  opponent_ = const_cast< ::naothmessages::PlayerModel*>(&::naothmessages::PlayerModel::default_instance());
}

TeamCommMessage::TeamCommMessage(const TeamCommMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamCommMessage::SharedCtor() {
  _cached_size_ = 0;
  playernumber_ = 0;
  teamnumber_ = 0;
  wasstriker_ = false;
  ispenalized_ = false;
  timesinceballwasseen_ = 0;
  ballposition_ = NULL;
  positiononfield_ = NULL;
  opponent_ = NULL;
  isfallendown_ = false;
  timetoball_ = 0;
  bodyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamCommMessage::~TeamCommMessage() {
  SharedDtor();
}

void TeamCommMessage::SharedDtor() {
  if (bodyid_ != &::google::protobuf::internal::kEmptyString) {
    delete bodyid_;
  }
  if (this != default_instance_) {
    delete ballposition_;
    delete positiononfield_;
    delete opponent_;
  }
}

void TeamCommMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamCommMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamCommMessage_descriptor_;
}

const TeamCommMessage& TeamCommMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();  return *default_instance_;
}

TeamCommMessage* TeamCommMessage::default_instance_ = NULL;

TeamCommMessage* TeamCommMessage::New() const {
  return new TeamCommMessage;
}

void TeamCommMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playernumber_ = 0;
    teamnumber_ = 0;
    wasstriker_ = false;
    ispenalized_ = false;
    timesinceballwasseen_ = 0;
    if (has_ballposition()) {
      if (ballposition_ != NULL) ballposition_->::naothmessages::DoubleVector2::Clear();
    }
    if (has_positiononfield()) {
      if (positiononfield_ != NULL) positiononfield_->::naothmessages::Pose2D::Clear();
    }
    if (has_opponent()) {
      if (opponent_ != NULL) opponent_->::naothmessages::PlayerModel::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isfallendown_ = false;
    timetoball_ = 0;
    if (has_bodyid()) {
      if (bodyid_ != &::google::protobuf::internal::kEmptyString) {
        bodyid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamCommMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 playerNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playernumber_)));
          set_has_playernumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_teamNumber;
        break;
      }
      
      // required int32 teamNumber = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamnumber_)));
          set_has_teamnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wasStriker;
        break;
      }
      
      // optional bool wasStriker = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wasStriker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wasstriker_)));
          set_has_wasstriker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isPenalized;
        break;
      }
      
      // optional bool isPenalized = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPenalized:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispenalized_)));
          set_has_ispenalized();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_timeSinceBallWasSeen;
        break;
      }
      
      // optional double timeSinceBallWasSeen = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_timeSinceBallWasSeen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timesinceballwasseen_)));
          set_has_timesinceballwasseen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ballPosition;
        break;
      }
      
      // optional .naothmessages.DoubleVector2 ballPosition = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ballPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ballposition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_positionOnField;
        break;
      }
      
      // optional .naothmessages.Pose2D positionOnField = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_positionOnField:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_positiononfield()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_opponent;
        break;
      }
      
      // optional .naothmessages.PlayerModel opponent = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opponent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opponent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isFallenDown;
        break;
      }
      
      // optional bool isFallenDown = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFallenDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfallendown_)));
          set_has_isfallendown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_timeToBall;
        break;
      }
      
      // optional double timeToBall = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_timeToBall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timetoball_)));
          set_has_timetoball();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_bodyID;
        break;
      }
      
      // optional string bodyID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bodyID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bodyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bodyid().data(), this->bodyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamCommMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 playerNumber = 1;
  if (has_playernumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playernumber(), output);
  }
  
  // required int32 teamNumber = 2;
  if (has_teamnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->teamnumber(), output);
  }
  
  // optional bool wasStriker = 3 [default = false];
  if (has_wasstriker()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->wasstriker(), output);
  }
  
  // optional bool isPenalized = 4 [default = false];
  if (has_ispenalized()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ispenalized(), output);
  }
  
  // optional double timeSinceBallWasSeen = 5;
  if (has_timesinceballwasseen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->timesinceballwasseen(), output);
  }
  
  // optional .naothmessages.DoubleVector2 ballPosition = 6;
  if (has_ballposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ballposition(), output);
  }
  
  // optional .naothmessages.Pose2D positionOnField = 7;
  if (has_positiononfield()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->positiononfield(), output);
  }
  
  // optional .naothmessages.PlayerModel opponent = 8;
  if (has_opponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->opponent(), output);
  }
  
  // optional bool isFallenDown = 9 [default = false];
  if (has_isfallendown()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isfallendown(), output);
  }
  
  // optional double timeToBall = 10;
  if (has_timetoball()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->timetoball(), output);
  }
  
  // optional string bodyID = 11;
  if (has_bodyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bodyid().data(), this->bodyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->bodyid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamCommMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 playerNumber = 1;
  if (has_playernumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playernumber(), target);
  }
  
  // required int32 teamNumber = 2;
  if (has_teamnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->teamnumber(), target);
  }
  
  // optional bool wasStriker = 3 [default = false];
  if (has_wasstriker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->wasstriker(), target);
  }
  
  // optional bool isPenalized = 4 [default = false];
  if (has_ispenalized()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ispenalized(), target);
  }
  
  // optional double timeSinceBallWasSeen = 5;
  if (has_timesinceballwasseen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->timesinceballwasseen(), target);
  }
  
  // optional .naothmessages.DoubleVector2 ballPosition = 6;
  if (has_ballposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ballposition(), target);
  }
  
  // optional .naothmessages.Pose2D positionOnField = 7;
  if (has_positiononfield()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->positiononfield(), target);
  }
  
  // optional .naothmessages.PlayerModel opponent = 8;
  if (has_opponent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->opponent(), target);
  }
  
  // optional bool isFallenDown = 9 [default = false];
  if (has_isfallendown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isfallendown(), target);
  }
  
  // optional double timeToBall = 10;
  if (has_timetoball()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->timetoball(), target);
  }
  
  // optional string bodyID = 11;
  if (has_bodyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bodyid().data(), this->bodyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->bodyid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamCommMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 playerNumber = 1;
    if (has_playernumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playernumber());
    }
    
    // required int32 teamNumber = 2;
    if (has_teamnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamnumber());
    }
    
    // optional bool wasStriker = 3 [default = false];
    if (has_wasstriker()) {
      total_size += 1 + 1;
    }
    
    // optional bool isPenalized = 4 [default = false];
    if (has_ispenalized()) {
      total_size += 1 + 1;
    }
    
    // optional double timeSinceBallWasSeen = 5;
    if (has_timesinceballwasseen()) {
      total_size += 1 + 8;
    }
    
    // optional .naothmessages.DoubleVector2 ballPosition = 6;
    if (has_ballposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ballposition());
    }
    
    // optional .naothmessages.Pose2D positionOnField = 7;
    if (has_positiononfield()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->positiononfield());
    }
    
    // optional .naothmessages.PlayerModel opponent = 8;
    if (has_opponent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opponent());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool isFallenDown = 9 [default = false];
    if (has_isfallendown()) {
      total_size += 1 + 1;
    }
    
    // optional double timeToBall = 10;
    if (has_timetoball()) {
      total_size += 1 + 8;
    }
    
    // optional string bodyID = 11;
    if (has_bodyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bodyid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamCommMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamCommMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamCommMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamCommMessage::MergeFrom(const TeamCommMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playernumber()) {
      set_playernumber(from.playernumber());
    }
    if (from.has_teamnumber()) {
      set_teamnumber(from.teamnumber());
    }
    if (from.has_wasstriker()) {
      set_wasstriker(from.wasstriker());
    }
    if (from.has_ispenalized()) {
      set_ispenalized(from.ispenalized());
    }
    if (from.has_timesinceballwasseen()) {
      set_timesinceballwasseen(from.timesinceballwasseen());
    }
    if (from.has_ballposition()) {
      mutable_ballposition()->::naothmessages::DoubleVector2::MergeFrom(from.ballposition());
    }
    if (from.has_positiononfield()) {
      mutable_positiononfield()->::naothmessages::Pose2D::MergeFrom(from.positiononfield());
    }
    if (from.has_opponent()) {
      mutable_opponent()->::naothmessages::PlayerModel::MergeFrom(from.opponent());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isfallendown()) {
      set_isfallendown(from.isfallendown());
    }
    if (from.has_timetoball()) {
      set_timetoball(from.timetoball());
    }
    if (from.has_bodyid()) {
      set_bodyid(from.bodyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamCommMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamCommMessage::CopyFrom(const TeamCommMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamCommMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_ballposition()) {
    if (!this->ballposition().IsInitialized()) return false;
  }
  if (has_positiononfield()) {
    if (!this->positiononfield().IsInitialized()) return false;
  }
  if (has_opponent()) {
    if (!this->opponent().IsInitialized()) return false;
  }
  return true;
}

void TeamCommMessage::Swap(TeamCommMessage* other) {
  if (other != this) {
    std::swap(playernumber_, other->playernumber_);
    std::swap(teamnumber_, other->teamnumber_);
    std::swap(wasstriker_, other->wasstriker_);
    std::swap(ispenalized_, other->ispenalized_);
    std::swap(timesinceballwasseen_, other->timesinceballwasseen_);
    std::swap(ballposition_, other->ballposition_);
    std::swap(positiononfield_, other->positiononfield_);
    std::swap(opponent_, other->opponent_);
    std::swap(isfallendown_, other->isfallendown_);
    std::swap(timetoball_, other->timetoball_);
    std::swap(bodyid_, other->bodyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamCommMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamCommMessage_descriptor_;
  metadata.reflection = TeamCommMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StopwatchItem::kNameFieldNumber;
const int StopwatchItem::kTimeFieldNumber;
#endif  // !_MSC_VER

StopwatchItem::StopwatchItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StopwatchItem::InitAsDefaultInstance() {
}

StopwatchItem::StopwatchItem(const StopwatchItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StopwatchItem::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopwatchItem::~StopwatchItem() {
  SharedDtor();
}

void StopwatchItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void StopwatchItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopwatchItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopwatchItem_descriptor_;
}

const StopwatchItem& StopwatchItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();  return *default_instance_;
}

StopwatchItem* StopwatchItem::default_instance_ = NULL;

StopwatchItem* StopwatchItem::New() const {
  return new StopwatchItem;
}

void StopwatchItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopwatchItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // required int32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StopwatchItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required int32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StopwatchItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required int32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StopwatchItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopwatchItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopwatchItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopwatchItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopwatchItem::MergeFrom(const StopwatchItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopwatchItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopwatchItem::CopyFrom(const StopwatchItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopwatchItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void StopwatchItem::Swap(StopwatchItem* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopwatchItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopwatchItem_descriptor_;
  metadata.reflection = StopwatchItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Stopwatches::kStopwatchesFieldNumber;
#endif  // !_MSC_VER

Stopwatches::Stopwatches()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Stopwatches::InitAsDefaultInstance() {
}

Stopwatches::Stopwatches(const Stopwatches& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Stopwatches::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stopwatches::~Stopwatches() {
  SharedDtor();
}

void Stopwatches::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Stopwatches::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stopwatches::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stopwatches_descriptor_;
}

const Stopwatches& Stopwatches::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();  return *default_instance_;
}

Stopwatches* Stopwatches::default_instance_ = NULL;

Stopwatches* Stopwatches::New() const {
  return new Stopwatches;
}

void Stopwatches::Clear() {
  stopwatches_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stopwatches::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .naothmessages.StopwatchItem stopwatches = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stopwatches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stopwatches()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stopwatches;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Stopwatches::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .naothmessages.StopwatchItem stopwatches = 1;
  for (int i = 0; i < this->stopwatches_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stopwatches(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Stopwatches::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .naothmessages.StopwatchItem stopwatches = 1;
  for (int i = 0; i < this->stopwatches_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stopwatches(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Stopwatches::ByteSize() const {
  int total_size = 0;
  
  // repeated .naothmessages.StopwatchItem stopwatches = 1;
  total_size += 1 * this->stopwatches_size();
  for (int i = 0; i < this->stopwatches_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stopwatches(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stopwatches::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stopwatches* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stopwatches*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stopwatches::MergeFrom(const Stopwatches& from) {
  GOOGLE_CHECK_NE(&from, this);
  stopwatches_.MergeFrom(from.stopwatches_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stopwatches::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stopwatches::CopyFrom(const Stopwatches& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stopwatches::IsInitialized() const {
  
  for (int i = 0; i < stopwatches_size(); i++) {
    if (!this->stopwatches(i).IsInitialized()) return false;
  }
  return true;
}

void Stopwatches::Swap(Stopwatches* other) {
  if (other != this) {
    stopwatches_.Swap(&other->stopwatches_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stopwatches::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stopwatches_descriptor_;
  metadata.reflection = Stopwatches_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PlotItem_PlotType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlotItem_PlotType_descriptor_;
}
bool PlotItem_PlotType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PlotItem_PlotType PlotItem::Default;
const PlotItem_PlotType PlotItem::Plot2D;
const PlotItem_PlotType PlotItem::Origin2D;
const PlotItem_PlotType PlotItem::PlotType_MIN;
const PlotItem_PlotType PlotItem::PlotType_MAX;
const int PlotItem::PlotType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PlotItem::kTypeFieldNumber;
const int PlotItem::kNameFieldNumber;
const int PlotItem::kValueFieldNumber;
const int PlotItem::kXFieldNumber;
const int PlotItem::kYFieldNumber;
const int PlotItem::kRotationFieldNumber;
#endif  // !_MSC_VER

PlotItem::PlotItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlotItem::InitAsDefaultInstance() {
}

PlotItem::PlotItem(const PlotItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlotItem::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = 0;
  x_ = 0;
  y_ = 0;
  rotation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlotItem::~PlotItem() {
  SharedDtor();
}

void PlotItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PlotItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlotItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlotItem_descriptor_;
}

const PlotItem& PlotItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();  return *default_instance_;
}

PlotItem* PlotItem::default_instance_ = NULL;

PlotItem* PlotItem::New() const {
  return new PlotItem;
}

void PlotItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    value_ = 0;
    x_ = 0;
    y_ = 0;
    rotation_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlotItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .naothmessages.PlotItem.PlotType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::naothmessages::PlotItem_PlotType_IsValid(value)) {
            set_type(static_cast< ::naothmessages::PlotItem_PlotType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_value;
        break;
      }
      
      // optional double value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_x;
        break;
      }
      
      // optional double x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_y;
        break;
      }
      
      // optional double y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_rotation;
        break;
      }
      
      // optional double rotation = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotation_)));
          set_has_rotation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlotItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .naothmessages.PlotItem.PlotType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional double value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->value(), output);
  }
  
  // optional double x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->x(), output);
  }
  
  // optional double y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->y(), output);
  }
  
  // optional double rotation = 6;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->rotation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlotItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .naothmessages.PlotItem.PlotType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional double value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->value(), target);
  }
  
  // optional double x = 4;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->x(), target);
  }
  
  // optional double y = 5;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->y(), target);
  }
  
  // optional double rotation = 6;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->rotation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlotItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .naothmessages.PlotItem.PlotType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional double value = 3;
    if (has_value()) {
      total_size += 1 + 8;
    }
    
    // optional double x = 4;
    if (has_x()) {
      total_size += 1 + 8;
    }
    
    // optional double y = 5;
    if (has_y()) {
      total_size += 1 + 8;
    }
    
    // optional double rotation = 6;
    if (has_rotation()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlotItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlotItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlotItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlotItem::MergeFrom(const PlotItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_rotation()) {
      set_rotation(from.rotation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlotItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlotItem::CopyFrom(const PlotItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlotItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PlotItem::Swap(PlotItem* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(rotation_, other->rotation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlotItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlotItem_descriptor_;
  metadata.reflection = PlotItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlotStroke2D::kNameFieldNumber;
const int PlotStroke2D::kPointsFieldNumber;
#endif  // !_MSC_VER

PlotStroke2D::PlotStroke2D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlotStroke2D::InitAsDefaultInstance() {
}

PlotStroke2D::PlotStroke2D(const PlotStroke2D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlotStroke2D::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlotStroke2D::~PlotStroke2D() {
  SharedDtor();
}

void PlotStroke2D::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PlotStroke2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlotStroke2D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlotStroke2D_descriptor_;
}

const PlotStroke2D& PlotStroke2D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();  return *default_instance_;
}

PlotStroke2D* PlotStroke2D::default_instance_ = NULL;

PlotStroke2D* PlotStroke2D::New() const {
  return new PlotStroke2D;
}

void PlotStroke2D::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlotStroke2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .naothmessages.DoubleVector2 points = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_points;
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlotStroke2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .naothmessages.DoubleVector2 points = 1;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->points(i), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlotStroke2D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .naothmessages.DoubleVector2 points = 1;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->points(i), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlotStroke2D::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  // repeated .naothmessages.DoubleVector2 points = 1;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlotStroke2D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlotStroke2D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlotStroke2D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlotStroke2D::MergeFrom(const PlotStroke2D& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_.MergeFrom(from.points_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlotStroke2D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlotStroke2D::CopyFrom(const PlotStroke2D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlotStroke2D::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < points_size(); i++) {
    if (!this->points(i).IsInitialized()) return false;
  }
  return true;
}

void PlotStroke2D::Swap(PlotStroke2D* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    points_.Swap(&other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlotStroke2D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlotStroke2D_descriptor_;
  metadata.reflection = PlotStroke2D_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Plots::kPlotsFieldNumber;
const int Plots::kPlotstrokesFieldNumber;
#endif  // !_MSC_VER

Plots::Plots()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Plots::InitAsDefaultInstance() {
}

Plots::Plots(const Plots& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Plots::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plots::~Plots() {
  SharedDtor();
}

void Plots::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Plots::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plots::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plots_descriptor_;
}

const Plots& Plots::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();  return *default_instance_;
}

Plots* Plots::default_instance_ = NULL;

Plots* Plots::New() const {
  return new Plots;
}

void Plots::Clear() {
  plots_.Clear();
  plotstrokes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plots::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .naothmessages.PlotItem plots = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plots()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_plots;
        if (input->ExpectTag(18)) goto parse_plotstrokes;
        break;
      }
      
      // repeated .naothmessages.PlotStroke2D plotstrokes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plotstrokes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plotstrokes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_plotstrokes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Plots::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .naothmessages.PlotItem plots = 1;
  for (int i = 0; i < this->plots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->plots(i), output);
  }
  
  // repeated .naothmessages.PlotStroke2D plotstrokes = 2;
  for (int i = 0; i < this->plotstrokes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->plotstrokes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Plots::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .naothmessages.PlotItem plots = 1;
  for (int i = 0; i < this->plots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->plots(i), target);
  }
  
  // repeated .naothmessages.PlotStroke2D plotstrokes = 2;
  for (int i = 0; i < this->plotstrokes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->plotstrokes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Plots::ByteSize() const {
  int total_size = 0;
  
  // repeated .naothmessages.PlotItem plots = 1;
  total_size += 1 * this->plots_size();
  for (int i = 0; i < this->plots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->plots(i));
  }
  
  // repeated .naothmessages.PlotStroke2D plotstrokes = 2;
  total_size += 1 * this->plotstrokes_size();
  for (int i = 0; i < this->plotstrokes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->plotstrokes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plots::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plots* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plots*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plots::MergeFrom(const Plots& from) {
  GOOGLE_CHECK_NE(&from, this);
  plots_.MergeFrom(from.plots_);
  plotstrokes_.MergeFrom(from.plotstrokes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plots::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plots::CopyFrom(const Plots& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plots::IsInitialized() const {
  
  for (int i = 0; i < plots_size(); i++) {
    if (!this->plots(i).IsInitialized()) return false;
  }
  for (int i = 0; i < plotstrokes_size(); i++) {
    if (!this->plotstrokes(i).IsInitialized()) return false;
  }
  return true;
}

void Plots::Swap(Plots* other) {
  if (other != this) {
    plots_.Swap(&other->plots_);
    plotstrokes_.Swap(&other->plotstrokes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plots::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plots_descriptor_;
  metadata.reflection = Plots_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* XABSLParameter_ParamType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XABSLParameter_ParamType_descriptor_;
}
bool XABSLParameter_ParamType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const XABSLParameter_ParamType XABSLParameter::Decimal;
const XABSLParameter_ParamType XABSLParameter::Boolean;
const XABSLParameter_ParamType XABSLParameter::Enum;
const XABSLParameter_ParamType XABSLParameter::Unknown;
const XABSLParameter_ParamType XABSLParameter::ParamType_MIN;
const XABSLParameter_ParamType XABSLParameter::ParamType_MAX;
const int XABSLParameter::ParamType_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string XABSLParameter::_default_name_("unknown");
#ifndef _MSC_VER
const int XABSLParameter::kNameFieldNumber;
const int XABSLParameter::kTypeFieldNumber;
const int XABSLParameter::kDecimalValueFieldNumber;
const int XABSLParameter::kBoolValueFieldNumber;
const int XABSLParameter::kEnumValueFieldNumber;
#endif  // !_MSC_VER

XABSLParameter::XABSLParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void XABSLParameter::InitAsDefaultInstance() {
}

XABSLParameter::XABSLParameter(const XABSLParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void XABSLParameter::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  type_ = 3;
  decimalvalue_ = 0;
  boolvalue_ = false;
  enumvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XABSLParameter::~XABSLParameter() {
  SharedDtor();
}

void XABSLParameter::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (enumvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete enumvalue_;
  }
  if (this != default_instance_) {
  }
}

void XABSLParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XABSLParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XABSLParameter_descriptor_;
}

const XABSLParameter& XABSLParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();  return *default_instance_;
}

XABSLParameter* XABSLParameter::default_instance_ = NULL;

XABSLParameter* XABSLParameter::New() const {
  return new XABSLParameter;
}

void XABSLParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &_default_name_) {
        name_->assign(_default_name_);
      }
    }
    type_ = 3;
    decimalvalue_ = 0;
    boolvalue_ = false;
    if (has_enumvalue()) {
      if (enumvalue_ != &::google::protobuf::internal::kEmptyString) {
        enumvalue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool XABSLParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "unknown"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional .naothmessages.XABSLParameter.ParamType type = 2 [default = Unknown];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::naothmessages::XABSLParameter_ParamType_IsValid(value)) {
            set_type(static_cast< ::naothmessages::XABSLParameter_ParamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_decimalValue;
        break;
      }
      
      // optional double decimalValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_decimalValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &decimalvalue_)));
          set_has_decimalvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_boolValue;
        break;
      }
      
      // optional bool boolValue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boolValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boolvalue_)));
          set_has_boolvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_enumValue;
        break;
      }
      
      // optional string enumValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enumValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enumvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->enumvalue().data(), this->enumvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void XABSLParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1 [default = "unknown"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional .naothmessages.XABSLParameter.ParamType type = 2 [default = Unknown];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // optional double decimalValue = 3;
  if (has_decimalvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->decimalvalue(), output);
  }
  
  // optional bool boolValue = 4;
  if (has_boolvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->boolvalue(), output);
  }
  
  // optional string enumValue = 5;
  if (has_enumvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enumvalue().data(), this->enumvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->enumvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* XABSLParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1 [default = "unknown"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional .naothmessages.XABSLParameter.ParamType type = 2 [default = Unknown];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // optional double decimalValue = 3;
  if (has_decimalvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->decimalvalue(), target);
  }
  
  // optional bool boolValue = 4;
  if (has_boolvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->boolvalue(), target);
  }
  
  // optional string enumValue = 5;
  if (has_enumvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enumvalue().data(), this->enumvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->enumvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int XABSLParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = "unknown"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional .naothmessages.XABSLParameter.ParamType type = 2 [default = Unknown];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional double decimalValue = 3;
    if (has_decimalvalue()) {
      total_size += 1 + 8;
    }
    
    // optional bool boolValue = 4;
    if (has_boolvalue()) {
      total_size += 1 + 1;
    }
    
    // optional string enumValue = 5;
    if (has_enumvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enumvalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XABSLParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const XABSLParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const XABSLParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void XABSLParameter::MergeFrom(const XABSLParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_decimalvalue()) {
      set_decimalvalue(from.decimalvalue());
    }
    if (from.has_boolvalue()) {
      set_boolvalue(from.boolvalue());
    }
    if (from.has_enumvalue()) {
      set_enumvalue(from.enumvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void XABSLParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XABSLParameter::CopyFrom(const XABSLParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XABSLParameter::IsInitialized() const {
  
  return true;
}

void XABSLParameter::Swap(XABSLParameter* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(decimalvalue_, other->decimalvalue_);
    std::swap(boolvalue_, other->boolvalue_);
    std::swap(enumvalue_, other->enumvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata XABSLParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XABSLParameter_descriptor_;
  metadata.reflection = XABSLParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* XABSLAction_ActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XABSLAction_ActionType_descriptor_;
}
bool XABSLAction_ActionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const XABSLAction_ActionType XABSLAction::Option;
const XABSLAction_ActionType XABSLAction::BasicBehavior;
const XABSLAction_ActionType XABSLAction::DecimalOutputSymbol;
const XABSLAction_ActionType XABSLAction::BooleanOutputSymbol;
const XABSLAction_ActionType XABSLAction::EnumOutputSymbol;
const XABSLAction_ActionType XABSLAction::Unknown;
const XABSLAction_ActionType XABSLAction::ActionType_MIN;
const XABSLAction_ActionType XABSLAction::ActionType_MAX;
const int XABSLAction::ActionType_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string XABSLAction::_default_name_("unknown");
#ifndef _MSC_VER
const int XABSLAction::kTypeFieldNumber;
const int XABSLAction::kNameFieldNumber;
const int XABSLAction::kTimeOfExecutionFieldNumber;
const int XABSLAction::kActiveStateFieldNumber;
const int XABSLAction::kStateTimeFieldNumber;
const int XABSLAction::kParametersFieldNumber;
const int XABSLAction::kActiveSubActionsFieldNumber;
const int XABSLAction::kDecimalValueFieldNumber;
const int XABSLAction::kBoolValueFieldNumber;
const int XABSLAction::kEnumValueFieldNumber;
#endif  // !_MSC_VER

XABSLAction::XABSLAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void XABSLAction::InitAsDefaultInstance() {
}

XABSLAction::XABSLAction(const XABSLAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void XABSLAction::SharedCtor() {
  _cached_size_ = 0;
  type_ = 5;
  name_ = const_cast< ::std::string*>(&_default_name_);
  timeofexecution_ = GOOGLE_LONGLONG(0);
  activestate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  statetime_ = GOOGLE_LONGLONG(0);
  decimalvalue_ = 0;
  boolvalue_ = false;
  enumvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XABSLAction::~XABSLAction() {
  SharedDtor();
}

void XABSLAction::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (activestate_ != &::google::protobuf::internal::kEmptyString) {
    delete activestate_;
  }
  if (enumvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete enumvalue_;
  }
  if (this != default_instance_) {
  }
}

void XABSLAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XABSLAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XABSLAction_descriptor_;
}

const XABSLAction& XABSLAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();  return *default_instance_;
}

XABSLAction* XABSLAction::default_instance_ = NULL;

XABSLAction* XABSLAction::New() const {
  return new XABSLAction;
}

void XABSLAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 5;
    if (has_name()) {
      if (name_ != &_default_name_) {
        name_->assign(_default_name_);
      }
    }
    timeofexecution_ = GOOGLE_LONGLONG(0);
    if (has_activestate()) {
      if (activestate_ != &::google::protobuf::internal::kEmptyString) {
        activestate_->clear();
      }
    }
    statetime_ = GOOGLE_LONGLONG(0);
    decimalvalue_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    boolvalue_ = false;
    if (has_enumvalue()) {
      if (enumvalue_ != &::google::protobuf::internal::kEmptyString) {
        enumvalue_->clear();
      }
    }
  }
  parameters_.Clear();
  activesubactions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool XABSLAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .naothmessages.XABSLAction.ActionType type = 1 [default = Unknown];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::naothmessages::XABSLAction_ActionType_IsValid(value)) {
            set_type(static_cast< ::naothmessages::XABSLAction_ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2 [default = "unknown"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timeOfExecution;
        break;
      }
      
      // optional int64 timeOfExecution = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeOfExecution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timeofexecution_)));
          set_has_timeofexecution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_activeState;
        break;
      }
      
      // optional string activeState = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activeState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activestate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activestate().data(), this->activestate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_stateTime;
        break;
      }
      
      // optional int64 stateTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &statetime_)));
          set_has_statetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_parameters;
        break;
      }
      
      // repeated .naothmessages.XABSLParameter parameters = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parameters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_parameters;
        if (input->ExpectTag(58)) goto parse_activeSubActions;
        break;
      }
      
      // repeated .naothmessages.XABSLAction activeSubActions = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activeSubActions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activesubactions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_activeSubActions;
        if (input->ExpectTag(65)) goto parse_decimalValue;
        break;
      }
      
      // optional double decimalValue = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_decimalValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &decimalvalue_)));
          set_has_decimalvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_boolValue;
        break;
      }
      
      // optional bool boolValue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boolValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boolvalue_)));
          set_has_boolvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_enumValue;
        break;
      }
      
      // optional string enumValue = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enumValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enumvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->enumvalue().data(), this->enumvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void XABSLAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .naothmessages.XABSLAction.ActionType type = 1 [default = Unknown];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional string name = 2 [default = "unknown"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int64 timeOfExecution = 3 [default = 0];
  if (has_timeofexecution()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timeofexecution(), output);
  }
  
  // optional string activeState = 4;
  if (has_activestate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activestate().data(), this->activestate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->activestate(), output);
  }
  
  // optional int64 stateTime = 5;
  if (has_statetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->statetime(), output);
  }
  
  // repeated .naothmessages.XABSLParameter parameters = 6;
  for (int i = 0; i < this->parameters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->parameters(i), output);
  }
  
  // repeated .naothmessages.XABSLAction activeSubActions = 7;
  for (int i = 0; i < this->activesubactions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->activesubactions(i), output);
  }
  
  // optional double decimalValue = 8;
  if (has_decimalvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->decimalvalue(), output);
  }
  
  // optional bool boolValue = 9;
  if (has_boolvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->boolvalue(), output);
  }
  
  // optional string enumValue = 10;
  if (has_enumvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enumvalue().data(), this->enumvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->enumvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* XABSLAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .naothmessages.XABSLAction.ActionType type = 1 [default = Unknown];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional string name = 2 [default = "unknown"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int64 timeOfExecution = 3 [default = 0];
  if (has_timeofexecution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timeofexecution(), target);
  }
  
  // optional string activeState = 4;
  if (has_activestate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activestate().data(), this->activestate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->activestate(), target);
  }
  
  // optional int64 stateTime = 5;
  if (has_statetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->statetime(), target);
  }
  
  // repeated .naothmessages.XABSLParameter parameters = 6;
  for (int i = 0; i < this->parameters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->parameters(i), target);
  }
  
  // repeated .naothmessages.XABSLAction activeSubActions = 7;
  for (int i = 0; i < this->activesubactions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->activesubactions(i), target);
  }
  
  // optional double decimalValue = 8;
  if (has_decimalvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->decimalvalue(), target);
  }
  
  // optional bool boolValue = 9;
  if (has_boolvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->boolvalue(), target);
  }
  
  // optional string enumValue = 10;
  if (has_enumvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enumvalue().data(), this->enumvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->enumvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int XABSLAction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .naothmessages.XABSLAction.ActionType type = 1 [default = Unknown];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string name = 2 [default = "unknown"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int64 timeOfExecution = 3 [default = 0];
    if (has_timeofexecution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timeofexecution());
    }
    
    // optional string activeState = 4;
    if (has_activestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activestate());
    }
    
    // optional int64 stateTime = 5;
    if (has_statetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->statetime());
    }
    
    // optional double decimalValue = 8;
    if (has_decimalvalue()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool boolValue = 9;
    if (has_boolvalue()) {
      total_size += 1 + 1;
    }
    
    // optional string enumValue = 10;
    if (has_enumvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enumvalue());
    }
    
  }
  // repeated .naothmessages.XABSLParameter parameters = 6;
  total_size += 1 * this->parameters_size();
  for (int i = 0; i < this->parameters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parameters(i));
  }
  
  // repeated .naothmessages.XABSLAction activeSubActions = 7;
  total_size += 1 * this->activesubactions_size();
  for (int i = 0; i < this->activesubactions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activesubactions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XABSLAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const XABSLAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const XABSLAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void XABSLAction::MergeFrom(const XABSLAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  parameters_.MergeFrom(from.parameters_);
  activesubactions_.MergeFrom(from.activesubactions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_timeofexecution()) {
      set_timeofexecution(from.timeofexecution());
    }
    if (from.has_activestate()) {
      set_activestate(from.activestate());
    }
    if (from.has_statetime()) {
      set_statetime(from.statetime());
    }
    if (from.has_decimalvalue()) {
      set_decimalvalue(from.decimalvalue());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_boolvalue()) {
      set_boolvalue(from.boolvalue());
    }
    if (from.has_enumvalue()) {
      set_enumvalue(from.enumvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void XABSLAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XABSLAction::CopyFrom(const XABSLAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XABSLAction::IsInitialized() const {
  
  return true;
}

void XABSLAction::Swap(XABSLAction* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(timeofexecution_, other->timeofexecution_);
    std::swap(activestate_, other->activestate_);
    std::swap(statetime_, other->statetime_);
    parameters_.Swap(&other->parameters_);
    activesubactions_.Swap(&other->activesubactions_);
    std::swap(decimalvalue_, other->decimalvalue_);
    std::swap(boolvalue_, other->boolvalue_);
    std::swap(enumvalue_, other->enumvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata XABSLAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XABSLAction_descriptor_;
  metadata.reflection = XABSLAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BehaviorStatus::kAgentFieldNumber;
const int BehaviorStatus::kActiveRootActionsFieldNumber;
const int BehaviorStatus::kInputSymbolsFieldNumber;
const int BehaviorStatus::kOutputSymbolsFieldNumber;
const int BehaviorStatus::kFrameNumberFieldNumber;
const int BehaviorStatus::kErrorMessageFieldNumber;
#endif  // !_MSC_VER

BehaviorStatus::BehaviorStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BehaviorStatus::InitAsDefaultInstance() {
}

BehaviorStatus::BehaviorStatus(const BehaviorStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BehaviorStatus::SharedCtor() {
  _cached_size_ = 0;
  agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  framenumber_ = 0u;
  errormessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BehaviorStatus::~BehaviorStatus() {
  SharedDtor();
}

void BehaviorStatus::SharedDtor() {
  if (agent_ != &::google::protobuf::internal::kEmptyString) {
    delete agent_;
  }
  if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
    delete errormessage_;
  }
  if (this != default_instance_) {
  }
}

void BehaviorStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BehaviorStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BehaviorStatus_descriptor_;
}

const BehaviorStatus& BehaviorStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();  return *default_instance_;
}

BehaviorStatus* BehaviorStatus::default_instance_ = NULL;

BehaviorStatus* BehaviorStatus::New() const {
  return new BehaviorStatus;
}

void BehaviorStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_agent()) {
      if (agent_ != &::google::protobuf::internal::kEmptyString) {
        agent_->clear();
      }
    }
    framenumber_ = 0u;
    if (has_errormessage()) {
      if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
        errormessage_->clear();
      }
    }
  }
  activerootactions_.Clear();
  inputsymbols_.Clear();
  outputsymbols_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BehaviorStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string agent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->agent().data(), this->agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_activeRootActions;
        break;
      }
      
      // repeated .naothmessages.XABSLAction activeRootActions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activeRootActions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activerootactions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_activeRootActions;
        if (input->ExpectTag(26)) goto parse_inputSymbols;
        break;
      }
      
      // repeated .naothmessages.XABSLParameter inputSymbols = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inputSymbols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inputsymbols()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_inputSymbols;
        if (input->ExpectTag(34)) goto parse_outputSymbols;
        break;
      }
      
      // repeated .naothmessages.XABSLParameter outputSymbols = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outputSymbols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outputsymbols()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_outputSymbols;
        if (input->ExpectTag(40)) goto parse_frameNumber;
        break;
      }
      
      // optional uint32 frameNumber = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frameNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framenumber_)));
          set_has_framenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_errorMessage;
        break;
      }
      
      // optional string errorMessage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormessage().data(), this->errormessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BehaviorStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string agent = 1;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agent().data(), this->agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->agent(), output);
  }
  
  // repeated .naothmessages.XABSLAction activeRootActions = 2;
  for (int i = 0; i < this->activerootactions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->activerootactions(i), output);
  }
  
  // repeated .naothmessages.XABSLParameter inputSymbols = 3;
  for (int i = 0; i < this->inputsymbols_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->inputsymbols(i), output);
  }
  
  // repeated .naothmessages.XABSLParameter outputSymbols = 4;
  for (int i = 0; i < this->outputsymbols_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->outputsymbols(i), output);
  }
  
  // optional uint32 frameNumber = 5;
  if (has_framenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->framenumber(), output);
  }
  
  // optional string errorMessage = 6;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->errormessage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BehaviorStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string agent = 1;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agent().data(), this->agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->agent(), target);
  }
  
  // repeated .naothmessages.XABSLAction activeRootActions = 2;
  for (int i = 0; i < this->activerootactions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->activerootactions(i), target);
  }
  
  // repeated .naothmessages.XABSLParameter inputSymbols = 3;
  for (int i = 0; i < this->inputsymbols_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->inputsymbols(i), target);
  }
  
  // repeated .naothmessages.XABSLParameter outputSymbols = 4;
  for (int i = 0; i < this->outputsymbols_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->outputsymbols(i), target);
  }
  
  // optional uint32 frameNumber = 5;
  if (has_framenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->framenumber(), target);
  }
  
  // optional string errorMessage = 6;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->errormessage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BehaviorStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string agent = 1;
    if (has_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agent());
    }
    
    // optional uint32 frameNumber = 5;
    if (has_framenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framenumber());
    }
    
    // optional string errorMessage = 6;
    if (has_errormessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormessage());
    }
    
  }
  // repeated .naothmessages.XABSLAction activeRootActions = 2;
  total_size += 1 * this->activerootactions_size();
  for (int i = 0; i < this->activerootactions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activerootactions(i));
  }
  
  // repeated .naothmessages.XABSLParameter inputSymbols = 3;
  total_size += 1 * this->inputsymbols_size();
  for (int i = 0; i < this->inputsymbols_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inputsymbols(i));
  }
  
  // repeated .naothmessages.XABSLParameter outputSymbols = 4;
  total_size += 1 * this->outputsymbols_size();
  for (int i = 0; i < this->outputsymbols_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->outputsymbols(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BehaviorStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BehaviorStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BehaviorStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BehaviorStatus::MergeFrom(const BehaviorStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  activerootactions_.MergeFrom(from.activerootactions_);
  inputsymbols_.MergeFrom(from.inputsymbols_);
  outputsymbols_.MergeFrom(from.outputsymbols_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent()) {
      set_agent(from.agent());
    }
    if (from.has_framenumber()) {
      set_framenumber(from.framenumber());
    }
    if (from.has_errormessage()) {
      set_errormessage(from.errormessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BehaviorStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BehaviorStatus::CopyFrom(const BehaviorStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BehaviorStatus::IsInitialized() const {
  
  return true;
}

void BehaviorStatus::Swap(BehaviorStatus* other) {
  if (other != this) {
    std::swap(agent_, other->agent_);
    activerootactions_.Swap(&other->activerootactions_);
    inputsymbols_.Swap(&other->inputsymbols_);
    outputsymbols_.Swap(&other->outputsymbols_);
    std::swap(framenumber_, other->framenumber_);
    std::swap(errormessage_, other->errormessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BehaviorStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BehaviorStatus_descriptor_;
  metadata.reflection = BehaviorStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Module::kNameFieldNumber;
const int Module::kUsedRepresentationsFieldNumber;
const int Module::kProvidedRepresentationsFieldNumber;
const int Module::kActiveFieldNumber;
#endif  // !_MSC_VER

Module::Module()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Module::InitAsDefaultInstance() {
}

Module::Module(const Module& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Module::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Module::~Module() {
  SharedDtor();
}

void Module::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Module::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Module::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Module_descriptor_;
}

const Module& Module::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();  return *default_instance_;
}

Module* Module::default_instance_ = NULL;

Module* Module::New() const {
  return new Module;
}

void Module::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    active_ = false;
  }
  usedrepresentations_.Clear();
  providedrepresentations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Module::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_usedRepresentations;
        break;
      }
      
      // repeated string usedRepresentations = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_usedRepresentations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_usedrepresentations()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->usedrepresentations(0).data(), this->usedrepresentations(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_usedRepresentations;
        if (input->ExpectTag(26)) goto parse_providedRepresentations;
        break;
      }
      
      // repeated string providedRepresentations = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_providedRepresentations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_providedrepresentations()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->providedrepresentations(0).data(), this->providedrepresentations(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_providedRepresentations;
        if (input->ExpectTag(32)) goto parse_active;
        break;
      }
      
      // optional bool active = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Module::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // repeated string usedRepresentations = 2;
  for (int i = 0; i < this->usedrepresentations_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->usedrepresentations(i).data(), this->usedrepresentations(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->usedrepresentations(i), output);
  }
  
  // repeated string providedRepresentations = 3;
  for (int i = 0; i < this->providedrepresentations_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->providedrepresentations(i).data(), this->providedrepresentations(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->providedrepresentations(i), output);
  }
  
  // optional bool active = 4 [default = false];
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->active(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Module::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // repeated string usedRepresentations = 2;
  for (int i = 0; i < this->usedrepresentations_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usedrepresentations(i).data(), this->usedrepresentations(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->usedrepresentations(i), target);
  }
  
  // repeated string providedRepresentations = 3;
  for (int i = 0; i < this->providedrepresentations_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providedrepresentations(i).data(), this->providedrepresentations(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->providedrepresentations(i), target);
  }
  
  // optional bool active = 4 [default = false];
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->active(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Module::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional bool active = 4 [default = false];
    if (has_active()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated string usedRepresentations = 2;
  total_size += 1 * this->usedrepresentations_size();
  for (int i = 0; i < this->usedrepresentations_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->usedrepresentations(i));
  }
  
  // repeated string providedRepresentations = 3;
  total_size += 1 * this->providedrepresentations_size();
  for (int i = 0; i < this->providedrepresentations_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->providedrepresentations(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Module::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Module* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Module*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Module::MergeFrom(const Module& from) {
  GOOGLE_CHECK_NE(&from, this);
  usedrepresentations_.MergeFrom(from.usedrepresentations_);
  providedrepresentations_.MergeFrom(from.providedrepresentations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Module::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Module::CopyFrom(const Module& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Module::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Module::Swap(Module* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    usedrepresentations_.Swap(&other->usedrepresentations_);
    providedrepresentations_.Swap(&other->providedrepresentations_);
    std::swap(active_, other->active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Module::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Module_descriptor_;
  metadata.reflection = Module_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModuleList::kModulesFieldNumber;
#endif  // !_MSC_VER

ModuleList::ModuleList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModuleList::InitAsDefaultInstance() {
}

ModuleList::ModuleList(const ModuleList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModuleList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModuleList::~ModuleList() {
  SharedDtor();
}

void ModuleList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ModuleList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModuleList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModuleList_descriptor_;
}

const ModuleList& ModuleList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();  return *default_instance_;
}

ModuleList* ModuleList::default_instance_ = NULL;

ModuleList* ModuleList::New() const {
  return new ModuleList;
}

void ModuleList::Clear() {
  modules_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModuleList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .naothmessages.Module modules = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_modules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_modules;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModuleList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .naothmessages.Module modules = 1;
  for (int i = 0; i < this->modules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->modules(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModuleList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .naothmessages.Module modules = 1;
  for (int i = 0; i < this->modules_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->modules(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModuleList::ByteSize() const {
  int total_size = 0;
  
  // repeated .naothmessages.Module modules = 1;
  total_size += 1 * this->modules_size();
  for (int i = 0; i < this->modules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->modules(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModuleList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModuleList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModuleList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModuleList::MergeFrom(const ModuleList& from) {
  GOOGLE_CHECK_NE(&from, this);
  modules_.MergeFrom(from.modules_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModuleList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModuleList::CopyFrom(const ModuleList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleList::IsInitialized() const {
  
  for (int i = 0; i < modules_size(); i++) {
    if (!this->modules(i).IsInitialized()) return false;
  }
  return true;
}

void ModuleList::Swap(ModuleList* other) {
  if (other != this) {
    modules_.Swap(&other->modules_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModuleList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModuleList_descriptor_;
  metadata.reflection = ModuleList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeatureKeyPoint::kPtFieldNumber;
const int FeatureKeyPoint::kSizeFieldNumber;
const int FeatureKeyPoint::kAngleFieldNumber;
const int FeatureKeyPoint::kResponseFieldNumber;
const int FeatureKeyPoint::kOctaveFieldNumber;
const int FeatureKeyPoint::kClassIdFieldNumber;
#endif  // !_MSC_VER

FeatureKeyPoint::FeatureKeyPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FeatureKeyPoint::InitAsDefaultInstance() {
  pt_ = const_cast< ::naothmessages::FloatVector2*>(&::naothmessages::FloatVector2::default_instance());
}

FeatureKeyPoint::FeatureKeyPoint(const FeatureKeyPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FeatureKeyPoint::SharedCtor() {
  _cached_size_ = 0;
  pt_ = NULL;
  size_ = 0;
  angle_ = 0;
  response_ = 0;
  octave_ = 0;
  class_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeatureKeyPoint::~FeatureKeyPoint() {
  SharedDtor();
}

void FeatureKeyPoint::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void FeatureKeyPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureKeyPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureKeyPoint_descriptor_;
}

const FeatureKeyPoint& FeatureKeyPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();  return *default_instance_;
}

FeatureKeyPoint* FeatureKeyPoint::default_instance_ = NULL;

FeatureKeyPoint* FeatureKeyPoint::New() const {
  return new FeatureKeyPoint;
}

void FeatureKeyPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pt()) {
      if (pt_ != NULL) pt_->::naothmessages::FloatVector2::Clear();
    }
    size_ = 0;
    angle_ = 0;
    response_ = 0;
    octave_ = 0;
    class_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeatureKeyPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .naothmessages.FloatVector2 pt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_size;
        break;
      }
      
      // required float size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_angle;
        break;
      }
      
      // required float angle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_response;
        break;
      }
      
      // required float response = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_response:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &response_)));
          set_has_response();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_octave;
        break;
      }
      
      // required int32 octave = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_octave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &octave_)));
          set_has_octave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_class_id;
        break;
      }
      
      // required int32 class_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_class_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &class_id_)));
          set_has_class_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FeatureKeyPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .naothmessages.FloatVector2 pt = 1;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pt(), output);
  }
  
  // required float size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->size(), output);
  }
  
  // required float angle = 3;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->angle(), output);
  }
  
  // required float response = 4;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->response(), output);
  }
  
  // required int32 octave = 5;
  if (has_octave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->octave(), output);
  }
  
  // required int32 class_id = 6;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->class_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FeatureKeyPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .naothmessages.FloatVector2 pt = 1;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pt(), target);
  }
  
  // required float size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->size(), target);
  }
  
  // required float angle = 3;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->angle(), target);
  }
  
  // required float response = 4;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->response(), target);
  }
  
  // required int32 octave = 5;
  if (has_octave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->octave(), target);
  }
  
  // required int32 class_id = 6;
  if (has_class_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->class_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FeatureKeyPoint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .naothmessages.FloatVector2 pt = 1;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }
    
    // required float size = 2;
    if (has_size()) {
      total_size += 1 + 4;
    }
    
    // required float angle = 3;
    if (has_angle()) {
      total_size += 1 + 4;
    }
    
    // required float response = 4;
    if (has_response()) {
      total_size += 1 + 4;
    }
    
    // required int32 octave = 5;
    if (has_octave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->octave());
    }
    
    // required int32 class_id = 6;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->class_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureKeyPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeatureKeyPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeatureKeyPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeatureKeyPoint::MergeFrom(const FeatureKeyPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pt()) {
      mutable_pt()->::naothmessages::FloatVector2::MergeFrom(from.pt());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_response()) {
      set_response(from.response());
    }
    if (from.has_octave()) {
      set_octave(from.octave());
    }
    if (from.has_class_id()) {
      set_class_id(from.class_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeatureKeyPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureKeyPoint::CopyFrom(const FeatureKeyPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureKeyPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  if (has_pt()) {
    if (!this->pt().IsInitialized()) return false;
  }
  return true;
}

void FeatureKeyPoint::Swap(FeatureKeyPoint* other) {
  if (other != this) {
    std::swap(pt_, other->pt_);
    std::swap(size_, other->size_);
    std::swap(angle_, other->angle_);
    std::swap(response_, other->response_);
    std::swap(octave_, other->octave_);
    std::swap(class_id_, other->class_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeatureKeyPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureKeyPoint_descriptor_;
  metadata.reflection = FeatureKeyPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeatureDetectionResult::kGrayScaleImageFieldNumber;
const int FeatureDetectionResult::kKeyPointsFieldNumber;
const int FeatureDetectionResult::kDescriptorsFieldNumber;
const int FeatureDetectionResult::kNamesForKeyPointsFieldNumber;
const int FeatureDetectionResult::kNumberOfFeatureElementsFieldNumber;
#endif  // !_MSC_VER

FeatureDetectionResult::FeatureDetectionResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FeatureDetectionResult::InitAsDefaultInstance() {
}

FeatureDetectionResult::FeatureDetectionResult(const FeatureDetectionResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FeatureDetectionResult::SharedCtor() {
  _cached_size_ = 0;
  grayscaleimage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  numberoffeatureelements_ = 64;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeatureDetectionResult::~FeatureDetectionResult() {
  SharedDtor();
}

void FeatureDetectionResult::SharedDtor() {
  if (grayscaleimage_ != &::google::protobuf::internal::kEmptyString) {
    delete grayscaleimage_;
  }
  if (this != default_instance_) {
  }
}

void FeatureDetectionResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureDetectionResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureDetectionResult_descriptor_;
}

const FeatureDetectionResult& FeatureDetectionResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();  return *default_instance_;
}

FeatureDetectionResult* FeatureDetectionResult::default_instance_ = NULL;

FeatureDetectionResult* FeatureDetectionResult::New() const {
  return new FeatureDetectionResult;
}

void FeatureDetectionResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_grayscaleimage()) {
      if (grayscaleimage_ != &::google::protobuf::internal::kEmptyString) {
        grayscaleimage_->clear();
      }
    }
    numberoffeatureelements_ = 64;
  }
  keypoints_.Clear();
  descriptors_.Clear();
  namesforkeypoints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeatureDetectionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes grayScaleImage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_grayscaleimage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_keyPoints;
        break;
      }
      
      // repeated .naothmessages.FeatureKeyPoint keyPoints = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyPoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keypoints()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_keyPoints;
        if (input->ExpectTag(26)) goto parse_descriptors;
        break;
      }
      
      // repeated .naothmessages.SingleDescriptor descriptors = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_descriptors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_descriptors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_descriptors;
        if (input->ExpectTag(34)) goto parse_namesForKeyPoints;
        break;
      }
      
      // repeated string namesForKeyPoints = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_namesForKeyPoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_namesforkeypoints()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->namesforkeypoints(0).data(), this->namesforkeypoints(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_namesForKeyPoints;
        if (input->ExpectTag(40)) goto parse_numberOfFeatureElements;
        break;
      }
      
      // optional int32 numberOfFeatureElements = 5 [default = 64];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numberOfFeatureElements:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numberoffeatureelements_)));
          set_has_numberoffeatureelements();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FeatureDetectionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes grayScaleImage = 1;
  if (has_grayscaleimage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->grayscaleimage(), output);
  }
  
  // repeated .naothmessages.FeatureKeyPoint keyPoints = 2;
  for (int i = 0; i < this->keypoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->keypoints(i), output);
  }
  
  // repeated .naothmessages.SingleDescriptor descriptors = 3;
  for (int i = 0; i < this->descriptors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->descriptors(i), output);
  }
  
  // repeated string namesForKeyPoints = 4;
  for (int i = 0; i < this->namesforkeypoints_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->namesforkeypoints(i).data(), this->namesforkeypoints(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->namesforkeypoints(i), output);
  }
  
  // optional int32 numberOfFeatureElements = 5 [default = 64];
  if (has_numberoffeatureelements()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->numberoffeatureelements(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FeatureDetectionResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes grayScaleImage = 1;
  if (has_grayscaleimage()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->grayscaleimage(), target);
  }
  
  // repeated .naothmessages.FeatureKeyPoint keyPoints = 2;
  for (int i = 0; i < this->keypoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->keypoints(i), target);
  }
  
  // repeated .naothmessages.SingleDescriptor descriptors = 3;
  for (int i = 0; i < this->descriptors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->descriptors(i), target);
  }
  
  // repeated string namesForKeyPoints = 4;
  for (int i = 0; i < this->namesforkeypoints_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namesforkeypoints(i).data(), this->namesforkeypoints(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->namesforkeypoints(i), target);
  }
  
  // optional int32 numberOfFeatureElements = 5 [default = 64];
  if (has_numberoffeatureelements()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->numberoffeatureelements(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FeatureDetectionResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes grayScaleImage = 1;
    if (has_grayscaleimage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->grayscaleimage());
    }
    
    // optional int32 numberOfFeatureElements = 5 [default = 64];
    if (has_numberoffeatureelements()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numberoffeatureelements());
    }
    
  }
  // repeated .naothmessages.FeatureKeyPoint keyPoints = 2;
  total_size += 1 * this->keypoints_size();
  for (int i = 0; i < this->keypoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keypoints(i));
  }
  
  // repeated .naothmessages.SingleDescriptor descriptors = 3;
  total_size += 1 * this->descriptors_size();
  for (int i = 0; i < this->descriptors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->descriptors(i));
  }
  
  // repeated string namesForKeyPoints = 4;
  total_size += 1 * this->namesforkeypoints_size();
  for (int i = 0; i < this->namesforkeypoints_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->namesforkeypoints(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureDetectionResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeatureDetectionResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeatureDetectionResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeatureDetectionResult::MergeFrom(const FeatureDetectionResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  keypoints_.MergeFrom(from.keypoints_);
  descriptors_.MergeFrom(from.descriptors_);
  namesforkeypoints_.MergeFrom(from.namesforkeypoints_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grayscaleimage()) {
      set_grayscaleimage(from.grayscaleimage());
    }
    if (from.has_numberoffeatureelements()) {
      set_numberoffeatureelements(from.numberoffeatureelements());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeatureDetectionResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureDetectionResult::CopyFrom(const FeatureDetectionResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureDetectionResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < keypoints_size(); i++) {
    if (!this->keypoints(i).IsInitialized()) return false;
  }
  return true;
}

void FeatureDetectionResult::Swap(FeatureDetectionResult* other) {
  if (other != this) {
    std::swap(grayscaleimage_, other->grayscaleimage_);
    keypoints_.Swap(&other->keypoints_);
    descriptors_.Swap(&other->descriptors_);
    namesforkeypoints_.Swap(&other->namesforkeypoints_);
    std::swap(numberoffeatureelements_, other->numberoffeatureelements_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeatureDetectionResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureDetectionResult_descriptor_;
  metadata.reflection = FeatureDetectionResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleDescriptor::kDFieldNumber;
#endif  // !_MSC_VER

SingleDescriptor::SingleDescriptor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleDescriptor::InitAsDefaultInstance() {
}

SingleDescriptor::SingleDescriptor(const SingleDescriptor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleDescriptor::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleDescriptor::~SingleDescriptor() {
  SharedDtor();
}

void SingleDescriptor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SingleDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleDescriptor_descriptor_;
}

const SingleDescriptor& SingleDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();  return *default_instance_;
}

SingleDescriptor* SingleDescriptor::default_instance_ = NULL;

SingleDescriptor* SingleDescriptor::New() const {
  return new SingleDescriptor;
}

void SingleDescriptor::Clear() {
  d_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float d = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_d())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_d())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_d;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float d = 1;
  for (int i = 0; i < this->d_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->d(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float d = 1;
  for (int i = 0; i < this->d_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->d(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleDescriptor::ByteSize() const {
  int total_size = 0;
  
  // repeated float d = 1;
  {
    int data_size = 0;
    data_size = 4 * this->d_size();
    total_size += 1 * this->d_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleDescriptor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleDescriptor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleDescriptor::MergeFrom(const SingleDescriptor& from) {
  GOOGLE_CHECK_NE(&from, this);
  d_.MergeFrom(from.d_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleDescriptor::CopyFrom(const SingleDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleDescriptor::IsInitialized() const {
  
  return true;
}

void SingleDescriptor::Swap(SingleDescriptor* other) {
  if (other != this) {
    d_.Swap(&other->d_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleDescriptor_descriptor_;
  metadata.reflection = SingleDescriptor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeatureClass::kNameFieldNumber;
const int FeatureClass::kSamplesFieldNumber;
const int FeatureClass::kObjectHeightFieldNumber;
#endif  // !_MSC_VER

FeatureClass::FeatureClass()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FeatureClass::InitAsDefaultInstance() {
}

FeatureClass::FeatureClass(const FeatureClass& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FeatureClass::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  objectheight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeatureClass::~FeatureClass() {
  SharedDtor();
}

void FeatureClass::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FeatureClass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureClass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureClass_descriptor_;
}

const FeatureClass& FeatureClass::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();  return *default_instance_;
}

FeatureClass* FeatureClass::default_instance_ = NULL;

FeatureClass* FeatureClass::New() const {
  return new FeatureClass;
}

void FeatureClass::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    objectheight_ = 0;
  }
  samples_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeatureClass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_samples;
        break;
      }
      
      // repeated .naothmessages.SingleDescriptor samples = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_samples:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_samples()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_samples;
        if (input->ExpectTag(25)) goto parse_objectHeight;
        break;
      }
      
      // optional double objectHeight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_objectHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &objectheight_)));
          set_has_objectheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FeatureClass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // repeated .naothmessages.SingleDescriptor samples = 2;
  for (int i = 0; i < this->samples_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->samples(i), output);
  }
  
  // optional double objectHeight = 3;
  if (has_objectheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->objectheight(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FeatureClass::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // repeated .naothmessages.SingleDescriptor samples = 2;
  for (int i = 0; i < this->samples_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->samples(i), target);
  }
  
  // optional double objectHeight = 3;
  if (has_objectheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->objectheight(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FeatureClass::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional double objectHeight = 3;
    if (has_objectheight()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated .naothmessages.SingleDescriptor samples = 2;
  total_size += 1 * this->samples_size();
  for (int i = 0; i < this->samples_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->samples(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureClass::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeatureClass* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeatureClass*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeatureClass::MergeFrom(const FeatureClass& from) {
  GOOGLE_CHECK_NE(&from, this);
  samples_.MergeFrom(from.samples_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_objectheight()) {
      set_objectheight(from.objectheight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeatureClass::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureClass::CopyFrom(const FeatureClass& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureClass::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FeatureClass::Swap(FeatureClass* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    samples_.Swap(&other->samples_);
    std::swap(objectheight_, other->objectheight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeatureClass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureClass_descriptor_;
  metadata.reflection = FeatureClass_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeatureTable::kClassesFieldNumber;
const int FeatureTable::kNumberOfFeatureElementsFieldNumber;
#endif  // !_MSC_VER

FeatureTable::FeatureTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FeatureTable::InitAsDefaultInstance() {
}

FeatureTable::FeatureTable(const FeatureTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FeatureTable::SharedCtor() {
  _cached_size_ = 0;
  numberoffeatureelements_ = 64;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeatureTable::~FeatureTable() {
  SharedDtor();
}

void FeatureTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FeatureTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureTable_descriptor_;
}

const FeatureTable& FeatureTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();  return *default_instance_;
}

FeatureTable* FeatureTable::default_instance_ = NULL;

FeatureTable* FeatureTable::New() const {
  return new FeatureTable;
}

void FeatureTable::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    numberoffeatureelements_ = 64;
  }
  classes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeatureTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .naothmessages.FeatureClass classes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_classes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_classes;
        if (input->ExpectTag(16)) goto parse_numberOfFeatureElements;
        break;
      }
      
      // optional int32 numberOfFeatureElements = 2 [default = 64];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numberOfFeatureElements:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numberoffeatureelements_)));
          set_has_numberoffeatureelements();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FeatureTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .naothmessages.FeatureClass classes = 1;
  for (int i = 0; i < this->classes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->classes(i), output);
  }
  
  // optional int32 numberOfFeatureElements = 2 [default = 64];
  if (has_numberoffeatureelements()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->numberoffeatureelements(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FeatureTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .naothmessages.FeatureClass classes = 1;
  for (int i = 0; i < this->classes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->classes(i), target);
  }
  
  // optional int32 numberOfFeatureElements = 2 [default = 64];
  if (has_numberoffeatureelements()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numberoffeatureelements(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FeatureTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 numberOfFeatureElements = 2 [default = 64];
    if (has_numberoffeatureelements()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numberoffeatureelements());
    }
    
  }
  // repeated .naothmessages.FeatureClass classes = 1;
  total_size += 1 * this->classes_size();
  for (int i = 0; i < this->classes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->classes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeatureTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeatureTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeatureTable::MergeFrom(const FeatureTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  classes_.MergeFrom(from.classes_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_numberoffeatureelements()) {
      set_numberoffeatureelements(from.numberoffeatureelements());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeatureTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureTable::CopyFrom(const FeatureTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureTable::IsInitialized() const {
  
  for (int i = 0; i < classes_size(); i++) {
    if (!this->classes(i).IsInitialized()) return false;
  }
  return true;
}

void FeatureTable::Swap(FeatureTable* other) {
  if (other != this) {
    classes_.Swap(&other->classes_);
    std::swap(numberoffeatureelements_, other->numberoffeatureelements_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeatureTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureTable_descriptor_;
  metadata.reflection = FeatureTable_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace naothmessages

// @@protoc_insertion_point(global_scope)
