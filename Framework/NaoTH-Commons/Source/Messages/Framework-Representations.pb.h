// added by NaoTH 
#if defined(__GNUC__) && defined(_NAOTH_CHECK_CONVERSION_)
#if __GNUC__ > 3 && __GNUC_MINOR__ > 5
#pragma GCC diagnostic push
#endif
#pragma GCC diagnostic ignored "-Wconversion"
#endif

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Framework-Representations.proto

#ifndef PROTOBUF_Framework_2dRepresentations_2eproto__INCLUDED
#define PROTOBUF_Framework_2dRepresentations_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "CommonTypes.pb.h"
// @@protoc_insertion_point(includes)

namespace naothmessages {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Framework_2dRepresentations_2eproto();
void protobuf_AssignDesc_Framework_2dRepresentations_2eproto();
void protobuf_ShutdownFile_Framework_2dRepresentations_2eproto();

class Image;
class CameraInfo;
class JointData;
class SensorJointData;
class UltraSoundReceiveData;
class FrameInfo;
class FSRData;

enum Image_Format {
  Image_Format_YUV = 0,
  Image_Format_YUV422 = 1
};
bool Image_Format_IsValid(int value);
const Image_Format Image_Format_Format_MIN = Image_Format_YUV;
const Image_Format Image_Format_Format_MAX = Image_Format_YUV422;
const int Image_Format_Format_ARRAYSIZE = Image_Format_Format_MAX + 1;

const ::google::protobuf::EnumDescriptor* Image_Format_descriptor();
inline const ::std::string& Image_Format_Name(Image_Format value) {
  return ::google::protobuf::internal::NameOfEnum(
    Image_Format_descriptor(), value);
}
inline bool Image_Format_Parse(
    const ::std::string& name, Image_Format* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Image_Format>(
    Image_Format_descriptor(), name, value);
}
// ===================================================================

class Image : public ::google::protobuf::Message {
 public:
  Image();
  virtual ~Image();
  
  Image(const Image& from);
  
  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();
  
  void Swap(Image* other);
  
  // implements Message ----------------------------------------------
  
  Image* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Image_Format Format;
  static const Format YUV = Image_Format_YUV;
  static const Format YUV422 = Image_Format_YUV422;
  static inline bool Format_IsValid(int value) {
    return Image_Format_IsValid(value);
  }
  static const Format Format_MIN =
    Image_Format_Format_MIN;
  static const Format Format_MAX =
    Image_Format_Format_MAX;
  static const int Format_ARRAYSIZE =
    Image_Format_Format_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Format_descriptor() {
    return Image_Format_descriptor();
  }
  static inline const ::std::string& Format_Name(Format value) {
    return Image_Format_Name(value);
  }
  static inline bool Format_Parse(const ::std::string& name,
      Format* value) {
    return Image_Format_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required bytes data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  
  // optional int32 width = 2 [default = 320];
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 2;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);
  
  // optional int32 height = 3 [default = 240];
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);
  
  // optional .naothmessages.CameraInfo cameraInfo = 4;
  inline bool has_camerainfo() const;
  inline void clear_camerainfo();
  static const int kCameraInfoFieldNumber = 4;
  inline const ::naothmessages::CameraInfo& camerainfo() const;
  inline ::naothmessages::CameraInfo* mutable_camerainfo();
  inline ::naothmessages::CameraInfo* release_camerainfo();
  
  // optional .naothmessages.Image.Format format = 5 [default = YUV];
  inline bool has_format() const;
  inline void clear_format();
  static const int kFormatFieldNumber = 5;
  inline ::naothmessages::Image_Format format() const;
  inline void set_format(::naothmessages::Image_Format value);
  
  // optional uint32 timestamp = 6;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:naothmessages.Image)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_camerainfo();
  inline void clear_has_camerainfo();
  inline void set_has_format();
  inline void clear_has_format();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* data_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::naothmessages::CameraInfo* camerainfo_;
  int format_;
  ::google::protobuf::uint32 timestamp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_Framework_2dRepresentations_2eproto();
  friend void protobuf_AssignDesc_Framework_2dRepresentations_2eproto();
  friend void protobuf_ShutdownFile_Framework_2dRepresentations_2eproto();
  
  void InitAsDefaultInstance();
  static Image* default_instance_;
};
// -------------------------------------------------------------------

class CameraInfo : public ::google::protobuf::Message {
 public:
  CameraInfo();
  virtual ~CameraInfo();
  
  CameraInfo(const CameraInfo& from);
  
  inline CameraInfo& operator=(const CameraInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraInfo& default_instance();
  
  void Swap(CameraInfo* other);
  
  // implements Message ----------------------------------------------
  
  CameraInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraInfo& from);
  void MergeFrom(const CameraInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 resolutionWidth = 1;
  inline bool has_resolutionwidth() const;
  inline void clear_resolutionwidth();
  static const int kResolutionWidthFieldNumber = 1;
  inline ::google::protobuf::int32 resolutionwidth() const;
  inline void set_resolutionwidth(::google::protobuf::int32 value);
  
  // required int32 resolutionHeight = 2;
  inline bool has_resolutionheight() const;
  inline void clear_resolutionheight();
  static const int kResolutionHeightFieldNumber = 2;
  inline ::google::protobuf::int32 resolutionheight() const;
  inline void set_resolutionheight(::google::protobuf::int32 value);
  
  // optional .naothmessages.CameraID cameraID = 4 [default = bottom];
  inline bool has_cameraid() const;
  inline void clear_cameraid();
  static const int kCameraIDFieldNumber = 4;
  inline naothmessages::CameraID cameraid() const;
  inline void set_cameraid(naothmessages::CameraID value);
  
  // optional double focalLength = 5 [deprecated = true];
  inline bool has_focallength() const PROTOBUF_DEPRECATED;
  inline void clear_focallength() PROTOBUF_DEPRECATED;
  static const int kFocalLengthFieldNumber = 5;
  inline double focallength() const PROTOBUF_DEPRECATED;
  inline void set_focallength(double value) PROTOBUF_DEPRECATED;
  
  // optional double openingAngleWidth = 6 [deprecated = true];
  inline bool has_openinganglewidth() const PROTOBUF_DEPRECATED;
  inline void clear_openinganglewidth() PROTOBUF_DEPRECATED;
  static const int kOpeningAngleWidthFieldNumber = 6;
  inline double openinganglewidth() const PROTOBUF_DEPRECATED;
  inline void set_openinganglewidth(double value) PROTOBUF_DEPRECATED;
  
  // optional double openingAngleHeight = 7 [deprecated = true];
  inline bool has_openingangleheight() const PROTOBUF_DEPRECATED;
  inline void clear_openingangleheight() PROTOBUF_DEPRECATED;
  static const int kOpeningAngleHeightFieldNumber = 7;
  inline double openingangleheight() const PROTOBUF_DEPRECATED;
  inline void set_openingangleheight(double value) PROTOBUF_DEPRECATED;
  
  // optional double opticalCenterX = 8 [deprecated = true];
  inline bool has_opticalcenterx() const PROTOBUF_DEPRECATED;
  inline void clear_opticalcenterx() PROTOBUF_DEPRECATED;
  static const int kOpticalCenterXFieldNumber = 8;
  inline double opticalcenterx() const PROTOBUF_DEPRECATED;
  inline void set_opticalcenterx(double value) PROTOBUF_DEPRECATED;
  
  // optional double opticalCenterY = 9 [deprecated = true];
  inline bool has_opticalcentery() const PROTOBUF_DEPRECATED;
  inline void clear_opticalcentery() PROTOBUF_DEPRECATED;
  static const int kOpticalCenterYFieldNumber = 9;
  inline double opticalcentery() const PROTOBUF_DEPRECATED;
  inline void set_opticalcentery(double value) PROTOBUF_DEPRECATED;
  
  // optional int64 size = 10 [deprecated = true];
  inline bool has_size() const PROTOBUF_DEPRECATED;
  inline void clear_size() PROTOBUF_DEPRECATED;
  static const int kSizeFieldNumber = 10;
  inline ::google::protobuf::int64 size() const PROTOBUF_DEPRECATED;
  inline void set_size(::google::protobuf::int64 value) PROTOBUF_DEPRECATED;
  
  // optional int64 memorysize = 11 [deprecated = true];
  inline bool has_memorysize() const PROTOBUF_DEPRECATED;
  inline void clear_memorysize() PROTOBUF_DEPRECATED;
  static const int kMemorysizeFieldNumber = 11;
  inline ::google::protobuf::int64 memorysize() const PROTOBUF_DEPRECATED;
  inline void set_memorysize(::google::protobuf::int64 value) PROTOBUF_DEPRECATED;
  
  // optional double cameraRollOffset = 12 [deprecated = true];
  inline bool has_camerarolloffset() const PROTOBUF_DEPRECATED;
  inline void clear_camerarolloffset() PROTOBUF_DEPRECATED;
  static const int kCameraRollOffsetFieldNumber = 12;
  inline double camerarolloffset() const PROTOBUF_DEPRECATED;
  inline void set_camerarolloffset(double value) PROTOBUF_DEPRECATED;
  
  // optional double cameraTiltOffset = 13 [deprecated = true];
  inline bool has_cameratiltoffset() const PROTOBUF_DEPRECATED;
  inline void clear_cameratiltoffset() PROTOBUF_DEPRECATED;
  static const int kCameraTiltOffsetFieldNumber = 13;
  inline double cameratiltoffset() const PROTOBUF_DEPRECATED;
  inline void set_cameratiltoffset(double value) PROTOBUF_DEPRECATED;
  
  // repeated .naothmessages.DoubleVector2 correctionOffset = 18;
  inline int correctionoffset_size() const;
  inline void clear_correctionoffset();
  static const int kCorrectionOffsetFieldNumber = 18;
  inline const ::naothmessages::DoubleVector2& correctionoffset(int index) const;
  inline ::naothmessages::DoubleVector2* mutable_correctionoffset(int index);
  inline ::naothmessages::DoubleVector2* add_correctionoffset();
  inline const ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 >&
      correctionoffset() const;
  inline ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 >*
      mutable_correctionoffset();
  
  // repeated .naothmessages.DoubleVector2 headJointOffset = 19;
  inline int headjointoffset_size() const;
  inline void clear_headjointoffset();
  static const int kHeadJointOffsetFieldNumber = 19;
  inline const ::naothmessages::DoubleVector2& headjointoffset(int index) const;
  inline ::naothmessages::DoubleVector2* mutable_headjointoffset(int index);
  inline ::naothmessages::DoubleVector2* add_headjointoffset();
  inline const ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 >&
      headjointoffset() const;
  inline ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 >*
      mutable_headjointoffset();
  
  // repeated .naothmessages.Pose3D transformation = 14;
  inline int transformation_size() const;
  inline void clear_transformation();
  static const int kTransformationFieldNumber = 14;
  inline const ::naothmessages::Pose3D& transformation(int index) const;
  inline ::naothmessages::Pose3D* mutable_transformation(int index);
  inline ::naothmessages::Pose3D* add_transformation();
  inline const ::google::protobuf::RepeatedPtrField< ::naothmessages::Pose3D >&
      transformation() const;
  inline ::google::protobuf::RepeatedPtrField< ::naothmessages::Pose3D >*
      mutable_transformation();
  
  // optional double openingAngleDiagonal = 15;
  inline bool has_openinganglediagonal() const;
  inline void clear_openinganglediagonal();
  static const int kOpeningAngleDiagonalFieldNumber = 15;
  inline double openinganglediagonal() const;
  inline void set_openinganglediagonal(double value);
  
  // optional double pixelSize = 16;
  inline bool has_pixelsize() const;
  inline void clear_pixelsize();
  static const int kPixelSizeFieldNumber = 16;
  inline double pixelsize() const;
  inline void set_pixelsize(double value);
  
  // optional double focus = 17;
  inline bool has_focus() const;
  inline void clear_focus();
  static const int kFocusFieldNumber = 17;
  inline double focus() const;
  inline void set_focus(double value);
  
  // @@protoc_insertion_point(class_scope:naothmessages.CameraInfo)
 private:
  inline void set_has_resolutionwidth();
  inline void clear_has_resolutionwidth();
  inline void set_has_resolutionheight();
  inline void clear_has_resolutionheight();
  inline void set_has_cameraid();
  inline void clear_has_cameraid();
  inline void set_has_focallength();
  inline void clear_has_focallength();
  inline void set_has_openinganglewidth();
  inline void clear_has_openinganglewidth();
  inline void set_has_openingangleheight();
  inline void clear_has_openingangleheight();
  inline void set_has_opticalcenterx();
  inline void clear_has_opticalcenterx();
  inline void set_has_opticalcentery();
  inline void clear_has_opticalcentery();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_memorysize();
  inline void clear_has_memorysize();
  inline void set_has_camerarolloffset();
  inline void clear_has_camerarolloffset();
  inline void set_has_cameratiltoffset();
  inline void clear_has_cameratiltoffset();
  inline void set_has_openinganglediagonal();
  inline void clear_has_openinganglediagonal();
  inline void set_has_pixelsize();
  inline void clear_has_pixelsize();
  inline void set_has_focus();
  inline void clear_has_focus();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 resolutionwidth_;
  ::google::protobuf::int32 resolutionheight_;
  double focallength_;
  double openinganglewidth_;
  double openingangleheight_;
  double opticalcenterx_;
  double opticalcentery_;
  ::google::protobuf::int64 size_;
  ::google::protobuf::int64 memorysize_;
  double camerarolloffset_;
  double cameratiltoffset_;
  ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 > correctionoffset_;
  ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 > headjointoffset_;
  ::google::protobuf::RepeatedPtrField< ::naothmessages::Pose3D > transformation_;
  double openinganglediagonal_;
  double pixelsize_;
  double focus_;
  int cameraid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  friend void  protobuf_AddDesc_Framework_2dRepresentations_2eproto();
  friend void protobuf_AssignDesc_Framework_2dRepresentations_2eproto();
  friend void protobuf_ShutdownFile_Framework_2dRepresentations_2eproto();
  
  void InitAsDefaultInstance();
  static CameraInfo* default_instance_;
};
// -------------------------------------------------------------------

class JointData : public ::google::protobuf::Message {
 public:
  JointData();
  virtual ~JointData();
  
  JointData(const JointData& from);
  
  inline JointData& operator=(const JointData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const JointData& default_instance();
  
  void Swap(JointData* other);
  
  // implements Message ----------------------------------------------
  
  JointData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JointData& from);
  void MergeFrom(const JointData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated double position = 1;
  inline int position_size() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline double position(int index) const;
  inline void set_position(int index, double value);
  inline void add_position(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      position() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_position();
  
  // repeated double stiffness = 2;
  inline int stiffness_size() const;
  inline void clear_stiffness();
  static const int kStiffnessFieldNumber = 2;
  inline double stiffness(int index) const;
  inline void set_stiffness(int index, double value);
  inline void add_stiffness(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      stiffness() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_stiffness();
  
  // repeated double dp = 3;
  inline int dp_size() const;
  inline void clear_dp();
  static const int kDpFieldNumber = 3;
  inline double dp(int index) const;
  inline void set_dp(int index, double value);
  inline void add_dp(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      dp() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_dp();
  
  // repeated double ddp = 4;
  inline int ddp_size() const;
  inline void clear_ddp();
  static const int kDdpFieldNumber = 4;
  inline double ddp(int index) const;
  inline void set_ddp(int index, double value);
  inline void add_ddp(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      ddp() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_ddp();
  
  // @@protoc_insertion_point(class_scope:naothmessages.JointData)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< double > position_;
  ::google::protobuf::RepeatedField< double > stiffness_;
  ::google::protobuf::RepeatedField< double > dp_;
  ::google::protobuf::RepeatedField< double > ddp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Framework_2dRepresentations_2eproto();
  friend void protobuf_AssignDesc_Framework_2dRepresentations_2eproto();
  friend void protobuf_ShutdownFile_Framework_2dRepresentations_2eproto();
  
  void InitAsDefaultInstance();
  static JointData* default_instance_;
};
// -------------------------------------------------------------------

class SensorJointData : public ::google::protobuf::Message {
 public:
  SensorJointData();
  virtual ~SensorJointData();
  
  SensorJointData(const SensorJointData& from);
  
  inline SensorJointData& operator=(const SensorJointData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorJointData& default_instance();
  
  void Swap(SensorJointData* other);
  
  // implements Message ----------------------------------------------
  
  SensorJointData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SensorJointData& from);
  void MergeFrom(const SensorJointData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .naothmessages.JointData jointData = 1;
  inline bool has_jointdata() const;
  inline void clear_jointdata();
  static const int kJointDataFieldNumber = 1;
  inline const ::naothmessages::JointData& jointdata() const;
  inline ::naothmessages::JointData* mutable_jointdata();
  inline ::naothmessages::JointData* release_jointdata();
  
  // repeated double temperature = 2;
  inline int temperature_size() const;
  inline void clear_temperature();
  static const int kTemperatureFieldNumber = 2;
  inline double temperature(int index) const;
  inline void set_temperature(int index, double value);
  inline void add_temperature(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      temperature() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_temperature();
  
  // repeated double electricCurrent = 3;
  inline int electriccurrent_size() const;
  inline void clear_electriccurrent();
  static const int kElectricCurrentFieldNumber = 3;
  inline double electriccurrent(int index) const;
  inline void set_electriccurrent(int index, double value);
  inline void add_electriccurrent(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      electriccurrent() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_electriccurrent();
  
  // @@protoc_insertion_point(class_scope:naothmessages.SensorJointData)
 private:
  inline void set_has_jointdata();
  inline void clear_has_jointdata();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::naothmessages::JointData* jointdata_;
  ::google::protobuf::RepeatedField< double > temperature_;
  ::google::protobuf::RepeatedField< double > electriccurrent_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Framework_2dRepresentations_2eproto();
  friend void protobuf_AssignDesc_Framework_2dRepresentations_2eproto();
  friend void protobuf_ShutdownFile_Framework_2dRepresentations_2eproto();
  
  void InitAsDefaultInstance();
  static SensorJointData* default_instance_;
};
// -------------------------------------------------------------------

class UltraSoundReceiveData : public ::google::protobuf::Message {
 public:
  UltraSoundReceiveData();
  virtual ~UltraSoundReceiveData();
  
  UltraSoundReceiveData(const UltraSoundReceiveData& from);
  
  inline UltraSoundReceiveData& operator=(const UltraSoundReceiveData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UltraSoundReceiveData& default_instance();
  
  void Swap(UltraSoundReceiveData* other);
  
  // implements Message ----------------------------------------------
  
  UltraSoundReceiveData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UltraSoundReceiveData& from);
  void MergeFrom(const UltraSoundReceiveData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 ultraSoundTimeStep = 1;
  inline bool has_ultrasoundtimestep() const;
  inline void clear_ultrasoundtimestep();
  static const int kUltraSoundTimeStepFieldNumber = 1;
  inline ::google::protobuf::uint32 ultrasoundtimestep() const;
  inline void set_ultrasoundtimestep(::google::protobuf::uint32 value);
  
  // required double rawdata = 2;
  inline bool has_rawdata() const;
  inline void clear_rawdata();
  static const int kRawdataFieldNumber = 2;
  inline double rawdata() const;
  inline void set_rawdata(double value);
  
  // repeated double dataLeft = 3;
  inline int dataleft_size() const;
  inline void clear_dataleft();
  static const int kDataLeftFieldNumber = 3;
  inline double dataleft(int index) const;
  inline void set_dataleft(int index, double value);
  inline void add_dataleft(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      dataleft() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_dataleft();
  
  // repeated double dataRight = 4;
  inline int dataright_size() const;
  inline void clear_dataright();
  static const int kDataRightFieldNumber = 4;
  inline double dataright(int index) const;
  inline void set_dataright(int index, double value);
  inline void add_dataright(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      dataright() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_dataright();
  
  // @@protoc_insertion_point(class_scope:naothmessages.UltraSoundReceiveData)
 private:
  inline void set_has_ultrasoundtimestep();
  inline void clear_has_ultrasoundtimestep();
  inline void set_has_rawdata();
  inline void clear_has_rawdata();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double rawdata_;
  ::google::protobuf::RepeatedField< double > dataleft_;
  ::google::protobuf::RepeatedField< double > dataright_;
  ::google::protobuf::uint32 ultrasoundtimestep_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Framework_2dRepresentations_2eproto();
  friend void protobuf_AssignDesc_Framework_2dRepresentations_2eproto();
  friend void protobuf_ShutdownFile_Framework_2dRepresentations_2eproto();
  
  void InitAsDefaultInstance();
  static UltraSoundReceiveData* default_instance_;
};
// -------------------------------------------------------------------

class FrameInfo : public ::google::protobuf::Message {
 public:
  FrameInfo();
  virtual ~FrameInfo();
  
  FrameInfo(const FrameInfo& from);
  
  inline FrameInfo& operator=(const FrameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameInfo& default_instance();
  
  void Swap(FrameInfo* other);
  
  // implements Message ----------------------------------------------
  
  FrameInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FrameInfo& from);
  void MergeFrom(const FrameInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 frameNumber = 1;
  inline bool has_framenumber() const;
  inline void clear_framenumber();
  static const int kFrameNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 framenumber() const;
  inline void set_framenumber(::google::protobuf::uint32 value);
  
  // required uint32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:naothmessages.FrameInfo)
 private:
  inline void set_has_framenumber();
  inline void clear_has_framenumber();
  inline void set_has_time();
  inline void clear_has_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 framenumber_;
  ::google::protobuf::uint32 time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Framework_2dRepresentations_2eproto();
  friend void protobuf_AssignDesc_Framework_2dRepresentations_2eproto();
  friend void protobuf_ShutdownFile_Framework_2dRepresentations_2eproto();
  
  void InitAsDefaultInstance();
  static FrameInfo* default_instance_;
};
// -------------------------------------------------------------------

class FSRData : public ::google::protobuf::Message {
 public:
  FSRData();
  virtual ~FSRData();
  
  FSRData(const FSRData& from);
  
  inline FSRData& operator=(const FSRData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FSRData& default_instance();
  
  void Swap(FSRData* other);
  
  // implements Message ----------------------------------------------
  
  FSRData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FSRData& from);
  void MergeFrom(const FSRData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated double force = 1;
  inline int force_size() const;
  inline void clear_force();
  static const int kForceFieldNumber = 1;
  inline double force(int index) const;
  inline void set_force(int index, double value);
  inline void add_force(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      force() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_force();
  
  // repeated double data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline double data(int index) const;
  inline void set_data(int index, double value);
  inline void add_data(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      data() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_data();
  
  // repeated bool valid = 3;
  inline int valid_size() const;
  inline void clear_valid();
  static const int kValidFieldNumber = 3;
  inline bool valid(int index) const;
  inline void set_valid(int index, bool value);
  inline void add_valid(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      valid() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_valid();
  
  // @@protoc_insertion_point(class_scope:naothmessages.FSRData)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< double > force_;
  ::google::protobuf::RepeatedField< double > data_;
  ::google::protobuf::RepeatedField< bool > valid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Framework_2dRepresentations_2eproto();
  friend void protobuf_AssignDesc_Framework_2dRepresentations_2eproto();
  friend void protobuf_ShutdownFile_Framework_2dRepresentations_2eproto();
  
  void InitAsDefaultInstance();
  static FSRData* default_instance_;
};
// ===================================================================


// ===================================================================

// Image

// required bytes data = 1;
inline bool Image::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Image::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Image::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Image::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Image::data() const {
  return *data_;
}
inline void Image::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Image::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Image::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Image::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* Image::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 width = 2 [default = 320];
inline bool Image::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Image::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Image::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Image::clear_width() {
  width_ = 320;
  clear_has_width();
}
inline ::google::protobuf::int32 Image::width() const {
  return width_;
}
inline void Image::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// optional int32 height = 3 [default = 240];
inline bool Image::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Image::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Image::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Image::clear_height() {
  height_ = 240;
  clear_has_height();
}
inline ::google::protobuf::int32 Image::height() const {
  return height_;
}
inline void Image::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// optional .naothmessages.CameraInfo cameraInfo = 4;
inline bool Image::has_camerainfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Image::set_has_camerainfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Image::clear_has_camerainfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Image::clear_camerainfo() {
  if (camerainfo_ != NULL) camerainfo_->::naothmessages::CameraInfo::Clear();
  clear_has_camerainfo();
}
inline const ::naothmessages::CameraInfo& Image::camerainfo() const {
  return camerainfo_ != NULL ? *camerainfo_ : *default_instance_->camerainfo_;
}
inline ::naothmessages::CameraInfo* Image::mutable_camerainfo() {
  set_has_camerainfo();
  if (camerainfo_ == NULL) camerainfo_ = new ::naothmessages::CameraInfo;
  return camerainfo_;
}
inline ::naothmessages::CameraInfo* Image::release_camerainfo() {
  clear_has_camerainfo();
  ::naothmessages::CameraInfo* temp = camerainfo_;
  camerainfo_ = NULL;
  return temp;
}

// optional .naothmessages.Image.Format format = 5 [default = YUV];
inline bool Image::has_format() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Image::set_has_format() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Image::clear_has_format() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Image::clear_format() {
  format_ = 0;
  clear_has_format();
}
inline ::naothmessages::Image_Format Image::format() const {
  return static_cast< ::naothmessages::Image_Format >(format_);
}
inline void Image::set_format(::naothmessages::Image_Format value) {
  GOOGLE_DCHECK(::naothmessages::Image_Format_IsValid(value));
  set_has_format();
  format_ = value;
}

// optional uint32 timestamp = 6;
inline bool Image::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Image::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Image::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Image::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 Image::timestamp() const {
  return timestamp_;
}
inline void Image::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// -------------------------------------------------------------------

// CameraInfo

// required int32 resolutionWidth = 1;
inline bool CameraInfo::has_resolutionwidth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraInfo::set_has_resolutionwidth() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraInfo::clear_has_resolutionwidth() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraInfo::clear_resolutionwidth() {
  resolutionwidth_ = 0;
  clear_has_resolutionwidth();
}
inline ::google::protobuf::int32 CameraInfo::resolutionwidth() const {
  return resolutionwidth_;
}
inline void CameraInfo::set_resolutionwidth(::google::protobuf::int32 value) {
  set_has_resolutionwidth();
  resolutionwidth_ = value;
}

// required int32 resolutionHeight = 2;
inline bool CameraInfo::has_resolutionheight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraInfo::set_has_resolutionheight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraInfo::clear_has_resolutionheight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraInfo::clear_resolutionheight() {
  resolutionheight_ = 0;
  clear_has_resolutionheight();
}
inline ::google::protobuf::int32 CameraInfo::resolutionheight() const {
  return resolutionheight_;
}
inline void CameraInfo::set_resolutionheight(::google::protobuf::int32 value) {
  set_has_resolutionheight();
  resolutionheight_ = value;
}

// optional .naothmessages.CameraID cameraID = 4 [default = bottom];
inline bool CameraInfo::has_cameraid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraInfo::set_has_cameraid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CameraInfo::clear_has_cameraid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CameraInfo::clear_cameraid() {
  cameraid_ = 1;
  clear_has_cameraid();
}
inline naothmessages::CameraID CameraInfo::cameraid() const {
  return static_cast< naothmessages::CameraID >(cameraid_);
}
inline void CameraInfo::set_cameraid(naothmessages::CameraID value) {
  GOOGLE_DCHECK(naothmessages::CameraID_IsValid(value));
  set_has_cameraid();
  cameraid_ = value;
}

// optional double focalLength = 5 [deprecated = true];
inline bool CameraInfo::has_focallength() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraInfo::set_has_focallength() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CameraInfo::clear_has_focallength() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CameraInfo::clear_focallength() {
  focallength_ = 0;
  clear_has_focallength();
}
inline double CameraInfo::focallength() const {
  return focallength_;
}
inline void CameraInfo::set_focallength(double value) {
  set_has_focallength();
  focallength_ = value;
}

// optional double openingAngleWidth = 6 [deprecated = true];
inline bool CameraInfo::has_openinganglewidth() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CameraInfo::set_has_openinganglewidth() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CameraInfo::clear_has_openinganglewidth() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CameraInfo::clear_openinganglewidth() {
  openinganglewidth_ = 0;
  clear_has_openinganglewidth();
}
inline double CameraInfo::openinganglewidth() const {
  return openinganglewidth_;
}
inline void CameraInfo::set_openinganglewidth(double value) {
  set_has_openinganglewidth();
  openinganglewidth_ = value;
}

// optional double openingAngleHeight = 7 [deprecated = true];
inline bool CameraInfo::has_openingangleheight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CameraInfo::set_has_openingangleheight() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CameraInfo::clear_has_openingangleheight() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CameraInfo::clear_openingangleheight() {
  openingangleheight_ = 0;
  clear_has_openingangleheight();
}
inline double CameraInfo::openingangleheight() const {
  return openingangleheight_;
}
inline void CameraInfo::set_openingangleheight(double value) {
  set_has_openingangleheight();
  openingangleheight_ = value;
}

// optional double opticalCenterX = 8 [deprecated = true];
inline bool CameraInfo::has_opticalcenterx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CameraInfo::set_has_opticalcenterx() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CameraInfo::clear_has_opticalcenterx() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CameraInfo::clear_opticalcenterx() {
  opticalcenterx_ = 0;
  clear_has_opticalcenterx();
}
inline double CameraInfo::opticalcenterx() const {
  return opticalcenterx_;
}
inline void CameraInfo::set_opticalcenterx(double value) {
  set_has_opticalcenterx();
  opticalcenterx_ = value;
}

// optional double opticalCenterY = 9 [deprecated = true];
inline bool CameraInfo::has_opticalcentery() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CameraInfo::set_has_opticalcentery() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CameraInfo::clear_has_opticalcentery() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CameraInfo::clear_opticalcentery() {
  opticalcentery_ = 0;
  clear_has_opticalcentery();
}
inline double CameraInfo::opticalcentery() const {
  return opticalcentery_;
}
inline void CameraInfo::set_opticalcentery(double value) {
  set_has_opticalcentery();
  opticalcentery_ = value;
}

// optional int64 size = 10 [deprecated = true];
inline bool CameraInfo::has_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CameraInfo::set_has_size() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CameraInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CameraInfo::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::int64 CameraInfo::size() const {
  return size_;
}
inline void CameraInfo::set_size(::google::protobuf::int64 value) {
  set_has_size();
  size_ = value;
}

// optional int64 memorysize = 11 [deprecated = true];
inline bool CameraInfo::has_memorysize() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CameraInfo::set_has_memorysize() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CameraInfo::clear_has_memorysize() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CameraInfo::clear_memorysize() {
  memorysize_ = GOOGLE_LONGLONG(0);
  clear_has_memorysize();
}
inline ::google::protobuf::int64 CameraInfo::memorysize() const {
  return memorysize_;
}
inline void CameraInfo::set_memorysize(::google::protobuf::int64 value) {
  set_has_memorysize();
  memorysize_ = value;
}

// optional double cameraRollOffset = 12 [deprecated = true];
inline bool CameraInfo::has_camerarolloffset() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CameraInfo::set_has_camerarolloffset() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CameraInfo::clear_has_camerarolloffset() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CameraInfo::clear_camerarolloffset() {
  camerarolloffset_ = 0;
  clear_has_camerarolloffset();
}
inline double CameraInfo::camerarolloffset() const {
  return camerarolloffset_;
}
inline void CameraInfo::set_camerarolloffset(double value) {
  set_has_camerarolloffset();
  camerarolloffset_ = value;
}

// optional double cameraTiltOffset = 13 [deprecated = true];
inline bool CameraInfo::has_cameratiltoffset() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CameraInfo::set_has_cameratiltoffset() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CameraInfo::clear_has_cameratiltoffset() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CameraInfo::clear_cameratiltoffset() {
  cameratiltoffset_ = 0;
  clear_has_cameratiltoffset();
}
inline double CameraInfo::cameratiltoffset() const {
  return cameratiltoffset_;
}
inline void CameraInfo::set_cameratiltoffset(double value) {
  set_has_cameratiltoffset();
  cameratiltoffset_ = value;
}

// repeated .naothmessages.DoubleVector2 correctionOffset = 18;
inline int CameraInfo::correctionoffset_size() const {
  return correctionoffset_.size();
}
inline void CameraInfo::clear_correctionoffset() {
  correctionoffset_.Clear();
}
inline const ::naothmessages::DoubleVector2& CameraInfo::correctionoffset(int index) const {
  return correctionoffset_.Get(index);
}
inline ::naothmessages::DoubleVector2* CameraInfo::mutable_correctionoffset(int index) {
  return correctionoffset_.Mutable(index);
}
inline ::naothmessages::DoubleVector2* CameraInfo::add_correctionoffset() {
  return correctionoffset_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 >&
CameraInfo::correctionoffset() const {
  return correctionoffset_;
}
inline ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 >*
CameraInfo::mutable_correctionoffset() {
  return &correctionoffset_;
}

// repeated .naothmessages.DoubleVector2 headJointOffset = 19;
inline int CameraInfo::headjointoffset_size() const {
  return headjointoffset_.size();
}
inline void CameraInfo::clear_headjointoffset() {
  headjointoffset_.Clear();
}
inline const ::naothmessages::DoubleVector2& CameraInfo::headjointoffset(int index) const {
  return headjointoffset_.Get(index);
}
inline ::naothmessages::DoubleVector2* CameraInfo::mutable_headjointoffset(int index) {
  return headjointoffset_.Mutable(index);
}
inline ::naothmessages::DoubleVector2* CameraInfo::add_headjointoffset() {
  return headjointoffset_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 >&
CameraInfo::headjointoffset() const {
  return headjointoffset_;
}
inline ::google::protobuf::RepeatedPtrField< ::naothmessages::DoubleVector2 >*
CameraInfo::mutable_headjointoffset() {
  return &headjointoffset_;
}

// repeated .naothmessages.Pose3D transformation = 14;
inline int CameraInfo::transformation_size() const {
  return transformation_.size();
}
inline void CameraInfo::clear_transformation() {
  transformation_.Clear();
}
inline const ::naothmessages::Pose3D& CameraInfo::transformation(int index) const {
  return transformation_.Get(index);
}
inline ::naothmessages::Pose3D* CameraInfo::mutable_transformation(int index) {
  return transformation_.Mutable(index);
}
inline ::naothmessages::Pose3D* CameraInfo::add_transformation() {
  return transformation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::naothmessages::Pose3D >&
CameraInfo::transformation() const {
  return transformation_;
}
inline ::google::protobuf::RepeatedPtrField< ::naothmessages::Pose3D >*
CameraInfo::mutable_transformation() {
  return &transformation_;
}

// optional double openingAngleDiagonal = 15;
inline bool CameraInfo::has_openinganglediagonal() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CameraInfo::set_has_openinganglediagonal() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CameraInfo::clear_has_openinganglediagonal() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CameraInfo::clear_openinganglediagonal() {
  openinganglediagonal_ = 0;
  clear_has_openinganglediagonal();
}
inline double CameraInfo::openinganglediagonal() const {
  return openinganglediagonal_;
}
inline void CameraInfo::set_openinganglediagonal(double value) {
  set_has_openinganglediagonal();
  openinganglediagonal_ = value;
}

// optional double pixelSize = 16;
inline bool CameraInfo::has_pixelsize() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CameraInfo::set_has_pixelsize() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CameraInfo::clear_has_pixelsize() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CameraInfo::clear_pixelsize() {
  pixelsize_ = 0;
  clear_has_pixelsize();
}
inline double CameraInfo::pixelsize() const {
  return pixelsize_;
}
inline void CameraInfo::set_pixelsize(double value) {
  set_has_pixelsize();
  pixelsize_ = value;
}

// optional double focus = 17;
inline bool CameraInfo::has_focus() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CameraInfo::set_has_focus() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CameraInfo::clear_has_focus() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CameraInfo::clear_focus() {
  focus_ = 0;
  clear_has_focus();
}
inline double CameraInfo::focus() const {
  return focus_;
}
inline void CameraInfo::set_focus(double value) {
  set_has_focus();
  focus_ = value;
}

// -------------------------------------------------------------------

// JointData

// repeated double position = 1;
inline int JointData::position_size() const {
  return position_.size();
}
inline void JointData::clear_position() {
  position_.Clear();
}
inline double JointData::position(int index) const {
  return position_.Get(index);
}
inline void JointData::set_position(int index, double value) {
  position_.Set(index, value);
}
inline void JointData::add_position(double value) {
  position_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
JointData::position() const {
  return position_;
}
inline ::google::protobuf::RepeatedField< double >*
JointData::mutable_position() {
  return &position_;
}

// repeated double stiffness = 2;
inline int JointData::stiffness_size() const {
  return stiffness_.size();
}
inline void JointData::clear_stiffness() {
  stiffness_.Clear();
}
inline double JointData::stiffness(int index) const {
  return stiffness_.Get(index);
}
inline void JointData::set_stiffness(int index, double value) {
  stiffness_.Set(index, value);
}
inline void JointData::add_stiffness(double value) {
  stiffness_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
JointData::stiffness() const {
  return stiffness_;
}
inline ::google::protobuf::RepeatedField< double >*
JointData::mutable_stiffness() {
  return &stiffness_;
}

// repeated double dp = 3;
inline int JointData::dp_size() const {
  return dp_.size();
}
inline void JointData::clear_dp() {
  dp_.Clear();
}
inline double JointData::dp(int index) const {
  return dp_.Get(index);
}
inline void JointData::set_dp(int index, double value) {
  dp_.Set(index, value);
}
inline void JointData::add_dp(double value) {
  dp_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
JointData::dp() const {
  return dp_;
}
inline ::google::protobuf::RepeatedField< double >*
JointData::mutable_dp() {
  return &dp_;
}

// repeated double ddp = 4;
inline int JointData::ddp_size() const {
  return ddp_.size();
}
inline void JointData::clear_ddp() {
  ddp_.Clear();
}
inline double JointData::ddp(int index) const {
  return ddp_.Get(index);
}
inline void JointData::set_ddp(int index, double value) {
  ddp_.Set(index, value);
}
inline void JointData::add_ddp(double value) {
  ddp_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
JointData::ddp() const {
  return ddp_;
}
inline ::google::protobuf::RepeatedField< double >*
JointData::mutable_ddp() {
  return &ddp_;
}

// -------------------------------------------------------------------

// SensorJointData

// required .naothmessages.JointData jointData = 1;
inline bool SensorJointData::has_jointdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorJointData::set_has_jointdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SensorJointData::clear_has_jointdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SensorJointData::clear_jointdata() {
  if (jointdata_ != NULL) jointdata_->::naothmessages::JointData::Clear();
  clear_has_jointdata();
}
inline const ::naothmessages::JointData& SensorJointData::jointdata() const {
  return jointdata_ != NULL ? *jointdata_ : *default_instance_->jointdata_;
}
inline ::naothmessages::JointData* SensorJointData::mutable_jointdata() {
  set_has_jointdata();
  if (jointdata_ == NULL) jointdata_ = new ::naothmessages::JointData;
  return jointdata_;
}
inline ::naothmessages::JointData* SensorJointData::release_jointdata() {
  clear_has_jointdata();
  ::naothmessages::JointData* temp = jointdata_;
  jointdata_ = NULL;
  return temp;
}

// repeated double temperature = 2;
inline int SensorJointData::temperature_size() const {
  return temperature_.size();
}
inline void SensorJointData::clear_temperature() {
  temperature_.Clear();
}
inline double SensorJointData::temperature(int index) const {
  return temperature_.Get(index);
}
inline void SensorJointData::set_temperature(int index, double value) {
  temperature_.Set(index, value);
}
inline void SensorJointData::add_temperature(double value) {
  temperature_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
SensorJointData::temperature() const {
  return temperature_;
}
inline ::google::protobuf::RepeatedField< double >*
SensorJointData::mutable_temperature() {
  return &temperature_;
}

// repeated double electricCurrent = 3;
inline int SensorJointData::electriccurrent_size() const {
  return electriccurrent_.size();
}
inline void SensorJointData::clear_electriccurrent() {
  electriccurrent_.Clear();
}
inline double SensorJointData::electriccurrent(int index) const {
  return electriccurrent_.Get(index);
}
inline void SensorJointData::set_electriccurrent(int index, double value) {
  electriccurrent_.Set(index, value);
}
inline void SensorJointData::add_electriccurrent(double value) {
  electriccurrent_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
SensorJointData::electriccurrent() const {
  return electriccurrent_;
}
inline ::google::protobuf::RepeatedField< double >*
SensorJointData::mutable_electriccurrent() {
  return &electriccurrent_;
}

// -------------------------------------------------------------------

// UltraSoundReceiveData

// optional uint32 ultraSoundTimeStep = 1;
inline bool UltraSoundReceiveData::has_ultrasoundtimestep() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UltraSoundReceiveData::set_has_ultrasoundtimestep() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UltraSoundReceiveData::clear_has_ultrasoundtimestep() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UltraSoundReceiveData::clear_ultrasoundtimestep() {
  ultrasoundtimestep_ = 0u;
  clear_has_ultrasoundtimestep();
}
inline ::google::protobuf::uint32 UltraSoundReceiveData::ultrasoundtimestep() const {
  return ultrasoundtimestep_;
}
inline void UltraSoundReceiveData::set_ultrasoundtimestep(::google::protobuf::uint32 value) {
  set_has_ultrasoundtimestep();
  ultrasoundtimestep_ = value;
}

// required double rawdata = 2;
inline bool UltraSoundReceiveData::has_rawdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UltraSoundReceiveData::set_has_rawdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UltraSoundReceiveData::clear_has_rawdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UltraSoundReceiveData::clear_rawdata() {
  rawdata_ = 0;
  clear_has_rawdata();
}
inline double UltraSoundReceiveData::rawdata() const {
  return rawdata_;
}
inline void UltraSoundReceiveData::set_rawdata(double value) {
  set_has_rawdata();
  rawdata_ = value;
}

// repeated double dataLeft = 3;
inline int UltraSoundReceiveData::dataleft_size() const {
  return dataleft_.size();
}
inline void UltraSoundReceiveData::clear_dataleft() {
  dataleft_.Clear();
}
inline double UltraSoundReceiveData::dataleft(int index) const {
  return dataleft_.Get(index);
}
inline void UltraSoundReceiveData::set_dataleft(int index, double value) {
  dataleft_.Set(index, value);
}
inline void UltraSoundReceiveData::add_dataleft(double value) {
  dataleft_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
UltraSoundReceiveData::dataleft() const {
  return dataleft_;
}
inline ::google::protobuf::RepeatedField< double >*
UltraSoundReceiveData::mutable_dataleft() {
  return &dataleft_;
}

// repeated double dataRight = 4;
inline int UltraSoundReceiveData::dataright_size() const {
  return dataright_.size();
}
inline void UltraSoundReceiveData::clear_dataright() {
  dataright_.Clear();
}
inline double UltraSoundReceiveData::dataright(int index) const {
  return dataright_.Get(index);
}
inline void UltraSoundReceiveData::set_dataright(int index, double value) {
  dataright_.Set(index, value);
}
inline void UltraSoundReceiveData::add_dataright(double value) {
  dataright_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
UltraSoundReceiveData::dataright() const {
  return dataright_;
}
inline ::google::protobuf::RepeatedField< double >*
UltraSoundReceiveData::mutable_dataright() {
  return &dataright_;
}

// -------------------------------------------------------------------

// FrameInfo

// required uint32 frameNumber = 1;
inline bool FrameInfo::has_framenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FrameInfo::set_has_framenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FrameInfo::clear_has_framenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FrameInfo::clear_framenumber() {
  framenumber_ = 0u;
  clear_has_framenumber();
}
inline ::google::protobuf::uint32 FrameInfo::framenumber() const {
  return framenumber_;
}
inline void FrameInfo::set_framenumber(::google::protobuf::uint32 value) {
  set_has_framenumber();
  framenumber_ = value;
}

// required uint32 time = 2;
inline bool FrameInfo::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FrameInfo::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FrameInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FrameInfo::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 FrameInfo::time() const {
  return time_;
}
inline void FrameInfo::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// FSRData

// repeated double force = 1;
inline int FSRData::force_size() const {
  return force_.size();
}
inline void FSRData::clear_force() {
  force_.Clear();
}
inline double FSRData::force(int index) const {
  return force_.Get(index);
}
inline void FSRData::set_force(int index, double value) {
  force_.Set(index, value);
}
inline void FSRData::add_force(double value) {
  force_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
FSRData::force() const {
  return force_;
}
inline ::google::protobuf::RepeatedField< double >*
FSRData::mutable_force() {
  return &force_;
}

// repeated double data = 2;
inline int FSRData::data_size() const {
  return data_.size();
}
inline void FSRData::clear_data() {
  data_.Clear();
}
inline double FSRData::data(int index) const {
  return data_.Get(index);
}
inline void FSRData::set_data(int index, double value) {
  data_.Set(index, value);
}
inline void FSRData::add_data(double value) {
  data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
FSRData::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedField< double >*
FSRData::mutable_data() {
  return &data_;
}

// repeated bool valid = 3;
inline int FSRData::valid_size() const {
  return valid_.size();
}
inline void FSRData::clear_valid() {
  valid_.Clear();
}
inline bool FSRData::valid(int index) const {
  return valid_.Get(index);
}
inline void FSRData::set_valid(int index, bool value) {
  valid_.Set(index, value);
}
inline void FSRData::add_valid(bool value) {
  valid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
FSRData::valid() const {
  return valid_;
}
inline ::google::protobuf::RepeatedField< bool >*
FSRData::mutable_valid() {
  return &valid_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace naothmessages

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::naothmessages::Image_Format>() {
  return ::naothmessages::Image_Format_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Framework_2dRepresentations_2eproto__INCLUDED


// added by NaoTH 
#if defined(__GNUC__) && defined(_NAOTH_CHECK_CONVERSION_)
#if __GNUC__ > 3 && __GNUC_MINOR__ > 5
#pragma GCC diagnostic pop
#else
#pragma GCC diagnostic error "-Wconversion"
#endif
#endif

