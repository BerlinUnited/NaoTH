// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Representations.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace naothmessages {

namespace {

const ::google::protobuf::Descriptor* Image_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Image_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Image_Format_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CameraInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JointData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JointData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SensorJointData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorJointData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UltraSoundReceiveData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UltraSoundReceiveData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraMatrix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraMatrix_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BallPercept_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BallPercept_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoalPercept_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoalPercept_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeadMotionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeadMotionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StepControlRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StepControlRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WalkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WalkRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MotionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MotionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LinePercept_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LinePercept_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScanLineEndPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScanLineEndPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScanLineEdgelPercept_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScanLineEdgelPercept_reflection_ = NULL;
const ::google::protobuf::Descriptor* FSRData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FSRData_reflection_ = NULL;
const ::google::protobuf::Descriptor* StepControlStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StepControlStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* MotionStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MotionStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* OdometryData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OdometryData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalibrationData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalibrationData_reflection_ = NULL;
const ::google::protobuf::Descriptor* InertialModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InertialModel_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Representations_2eproto() {
  protobuf_AddDesc_Representations_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Representations.proto");
  GOOGLE_CHECK(file != NULL);
  Image_descriptor_ = file->message_type(0);
  static const int Image_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, camerainfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, timestamp_),
  };
  Image_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Image_descriptor_,
      Image::default_instance_,
      Image_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Image));
  Image_Format_descriptor_ = Image_descriptor_->enum_type(0);
  CameraInfo_descriptor_ = file->message_type(1);
  static const int CameraInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, resolutionwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, resolutionheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, cameraid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, focallength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, openinganglewidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, openingangleheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, opticalcenterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, opticalcentery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, memorysize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, camerarolloffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, cameratiltoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, transformation_),
  };
  CameraInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraInfo_descriptor_,
      CameraInfo::default_instance_,
      CameraInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraInfo));
  JointData_descriptor_ = file->message_type(2);
  static const int JointData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointData, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointData, stiffness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointData, dp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointData, ddp_),
  };
  JointData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JointData_descriptor_,
      JointData::default_instance_,
      JointData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JointData));
  SensorJointData_descriptor_ = file->message_type(3);
  static const int SensorJointData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorJointData, jointdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorJointData, temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorJointData, electriccurrent_),
  };
  SensorJointData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SensorJointData_descriptor_,
      SensorJointData::default_instance_,
      SensorJointData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorJointData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorJointData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SensorJointData));
  UltraSoundReceiveData_descriptor_ = file->message_type(4);
  static const int UltraSoundReceiveData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltraSoundReceiveData, ultrasoundtimestep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltraSoundReceiveData, rawdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltraSoundReceiveData, dataleft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltraSoundReceiveData, dataright_),
  };
  UltraSoundReceiveData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UltraSoundReceiveData_descriptor_,
      UltraSoundReceiveData::default_instance_,
      UltraSoundReceiveData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltraSoundReceiveData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltraSoundReceiveData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UltraSoundReceiveData));
  CameraMatrix_descriptor_ = file->message_type(5);
  static const int CameraMatrix_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMatrix, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMatrix, cameraid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMatrix, valid_),
  };
  CameraMatrix_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraMatrix_descriptor_,
      CameraMatrix::default_instance_,
      CameraMatrix_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMatrix, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMatrix, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraMatrix));
  FrameInfo_descriptor_ = file->message_type(6);
  static const int FrameInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameInfo, framenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameInfo, time_),
  };
  FrameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameInfo_descriptor_,
      FrameInfo::default_instance_,
      FrameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameInfo));
  BallPercept_descriptor_ = file->message_type(7);
  static const int BallPercept_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPercept, ballwasseen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPercept, centerinimage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPercept, radiusinimage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPercept, ballcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPercept, bearingbasedoffsetonfield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPercept, frameinfowhenballwasseen_),
  };
  BallPercept_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BallPercept_descriptor_,
      BallPercept::default_instance_,
      BallPercept_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPercept, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPercept, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BallPercept));
  GoalPercept_descriptor_ = file->message_type(8);
  static const int GoalPercept_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalPercept, angletoseengoal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalPercept, goalcentroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalPercept, numberofseenposts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalPercept, post_),
  };
  GoalPercept_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoalPercept_descriptor_,
      GoalPercept::default_instance_,
      GoalPercept_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalPercept, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalPercept, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoalPercept));
  HeadMotionRequest_descriptor_ = file->message_type(9);
  static const int HeadMotionRequest_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMotionRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMotionRequest, cameraid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMotionRequest, targetjointposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMotionRequest, targetpointinimage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMotionRequest, targetpointintheworld_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMotionRequest, searchcenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMotionRequest, searchsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMotionRequest, searchdirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMotionRequest, targetpointontheground_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMotionRequest, coordinate_),
  };
  HeadMotionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeadMotionRequest_descriptor_,
      HeadMotionRequest::default_instance_,
      HeadMotionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMotionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadMotionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeadMotionRequest));
  StepControlRequest_descriptor_ = file->message_type(10);
  static const int StepControlRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepControlRequest, stepid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepControlRequest, moveleftfoot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepControlRequest, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepControlRequest, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepControlRequest, speeddirection_),
  };
  StepControlRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StepControlRequest_descriptor_,
      StepControlRequest::default_instance_,
      StepControlRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepControlRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepControlRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StepControlRequest));
  WalkRequest_descriptor_ = file->message_type(11);
  static const int WalkRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WalkRequest, coordinate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WalkRequest, character_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WalkRequest, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WalkRequest, stepcontrol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WalkRequest, offset_),
  };
  WalkRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WalkRequest_descriptor_,
      WalkRequest::default_instance_,
      WalkRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WalkRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WalkRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WalkRequest));
  KickRequest_descriptor_ = file->message_type(12);
  static const int KickRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickRequest, kickpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickRequest, kickdirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickRequest, kickfoot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickRequest, finishkick_),
  };
  KickRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickRequest_descriptor_,
      KickRequest::default_instance_,
      KickRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickRequest));
  MotionRequest_descriptor_ = file->message_type(13);
  static const int MotionRequest_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionRequest, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionRequest, forced_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionRequest, walkrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionRequest, starndardstand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionRequest, kickrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionRequest, standheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionRequest, calibratefoottouchdetector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionRequest, cognitionframenumber_),
  };
  MotionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MotionRequest_descriptor_,
      MotionRequest::default_instance_,
      MotionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MotionRequest));
  LinePercept_descriptor_ = file->message_type(14);
  static const int LinePercept_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePercept, lines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePercept, intersections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePercept, middlecirclecenter_),
  };
  LinePercept_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LinePercept_descriptor_,
      LinePercept::default_instance_,
      LinePercept_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePercept, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinePercept, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LinePercept));
  ScanLineEndPoint_descriptor_ = file->message_type(15);
  static const int ScanLineEndPoint_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLineEndPoint, posinimage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLineEndPoint, posonfield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLineEndPoint, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLineEndPoint, scanlineid_),
  };
  ScanLineEndPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScanLineEndPoint_descriptor_,
      ScanLineEndPoint::default_instance_,
      ScanLineEndPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLineEndPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLineEndPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScanLineEndPoint));
  ScanLineEdgelPercept_descriptor_ = file->message_type(16);
  static const int ScanLineEdgelPercept_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLineEdgelPercept, endpoints_),
  };
  ScanLineEdgelPercept_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScanLineEdgelPercept_descriptor_,
      ScanLineEdgelPercept::default_instance_,
      ScanLineEdgelPercept_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLineEdgelPercept, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLineEdgelPercept, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScanLineEdgelPercept));
  FSRData_descriptor_ = file->message_type(17);
  static const int FSRData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSRData, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSRData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSRData, valid_),
  };
  FSRData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FSRData_descriptor_,
      FSRData::default_instance_,
      FSRData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSRData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSRData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FSRData));
  StepControlStatus_descriptor_ = file->message_type(18);
  static const int StepControlStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepControlStatus, stepid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepControlStatus, moveablefoot_),
  };
  StepControlStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StepControlStatus_descriptor_,
      StepControlStatus::default_instance_,
      StepControlStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepControlStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepControlStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StepControlStatus));
  MotionStatus_descriptor_ = file->message_type(19);
  static const int MotionStatus_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, lastmotion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, currentmotion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, headmotion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, currentmotionstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, plannedmotionleftfoot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, plannedmotionrightfoot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, plannedmotionhip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, stepcontrolstatus_),
  };
  MotionStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MotionStatus_descriptor_,
      MotionStatus::default_instance_,
      MotionStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MotionStatus));
  OdometryData_descriptor_ = file->message_type(20);
  static const int OdometryData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryData, pose_),
  };
  OdometryData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OdometryData_descriptor_,
      OdometryData::default_instance_,
      OdometryData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OdometryData));
  CalibrationData_descriptor_ = file->message_type(21);
  static const int CalibrationData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationData, inertialsensoroffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationData, gyrosensoroffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationData, accsensoroffset_),
  };
  CalibrationData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CalibrationData_descriptor_,
      CalibrationData::default_instance_,
      CalibrationData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CalibrationData));
  InertialModel_descriptor_ = file->message_type(22);
  static const int InertialModel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InertialModel, orientation_),
  };
  InertialModel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InertialModel_descriptor_,
      InertialModel::default_instance_,
      InertialModel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InertialModel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InertialModel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InertialModel));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Representations_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Image_descriptor_, &Image::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraInfo_descriptor_, &CameraInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JointData_descriptor_, &JointData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SensorJointData_descriptor_, &SensorJointData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UltraSoundReceiveData_descriptor_, &UltraSoundReceiveData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraMatrix_descriptor_, &CameraMatrix::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameInfo_descriptor_, &FrameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BallPercept_descriptor_, &BallPercept::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoalPercept_descriptor_, &GoalPercept::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeadMotionRequest_descriptor_, &HeadMotionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StepControlRequest_descriptor_, &StepControlRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WalkRequest_descriptor_, &WalkRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickRequest_descriptor_, &KickRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MotionRequest_descriptor_, &MotionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LinePercept_descriptor_, &LinePercept::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScanLineEndPoint_descriptor_, &ScanLineEndPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScanLineEdgelPercept_descriptor_, &ScanLineEdgelPercept::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FSRData_descriptor_, &FSRData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StepControlStatus_descriptor_, &StepControlStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MotionStatus_descriptor_, &MotionStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OdometryData_descriptor_, &OdometryData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CalibrationData_descriptor_, &CalibrationData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InertialModel_descriptor_, &InertialModel::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Representations_2eproto() {
  delete Image::default_instance_;
  delete Image_reflection_;
  delete CameraInfo::default_instance_;
  delete CameraInfo_reflection_;
  delete JointData::default_instance_;
  delete JointData_reflection_;
  delete SensorJointData::default_instance_;
  delete SensorJointData_reflection_;
  delete UltraSoundReceiveData::default_instance_;
  delete UltraSoundReceiveData_reflection_;
  delete CameraMatrix::default_instance_;
  delete CameraMatrix_reflection_;
  delete FrameInfo::default_instance_;
  delete FrameInfo_reflection_;
  delete BallPercept::default_instance_;
  delete BallPercept_reflection_;
  delete GoalPercept::default_instance_;
  delete GoalPercept_reflection_;
  delete HeadMotionRequest::default_instance_;
  delete HeadMotionRequest_reflection_;
  delete StepControlRequest::default_instance_;
  delete StepControlRequest_reflection_;
  delete WalkRequest::default_instance_;
  delete WalkRequest_reflection_;
  delete KickRequest::default_instance_;
  delete KickRequest_reflection_;
  delete MotionRequest::default_instance_;
  delete MotionRequest_reflection_;
  delete LinePercept::default_instance_;
  delete LinePercept_reflection_;
  delete ScanLineEndPoint::default_instance_;
  delete ScanLineEndPoint_reflection_;
  delete ScanLineEdgelPercept::default_instance_;
  delete ScanLineEdgelPercept_reflection_;
  delete FSRData::default_instance_;
  delete FSRData_reflection_;
  delete StepControlStatus::default_instance_;
  delete StepControlStatus_reflection_;
  delete MotionStatus::default_instance_;
  delete MotionStatus_reflection_;
  delete OdometryData::default_instance_;
  delete OdometryData_reflection_;
  delete CalibrationData::default_instance_;
  delete CalibrationData_reflection_;
  delete InertialModel::default_instance_;
  delete InertialModel_reflection_;
}

void protobuf_AddDesc_Representations_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::naothmessages::protobuf_AddDesc_CommonTypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025Representations.proto\022\rnaothmessages\032\021"
    "CommonTypes.proto\"\321\001\n\005Image\022\014\n\004data\030\001 \002("
    "\014\022\022\n\005width\030\002 \001(\005:\003320\022\023\n\006height\030\003 \001(\005:\0032"
    "40\022-\n\ncameraInfo\030\004 \001(\0132\031.naothmessages.C"
    "ameraInfo\0220\n\006format\030\005 \001(\0162\033.naothmessage"
    "s.Image.Format:\003YUV\022\021\n\ttimestamp\030\006 \001(\r\"\035"
    "\n\006Format\022\007\n\003YUV\020\000\022\n\n\006YUV422\020\001\"\363\002\n\nCamera"
    "Info\022\027\n\017resolutionWidth\030\001 \002(\005\022\030\n\020resolut"
    "ionHeight\030\002 \002(\005\0221\n\010cameraID\030\004 \001(\0162\027.naot"
    "hmessages.CameraID:\006bottom\022\023\n\013focalLengt"
    "h\030\005 \001(\001\022\031\n\021openingAngleWidth\030\006 \001(\001\022\032\n\022op"
    "eningAngleHeight\030\007 \001(\001\022\026\n\016opticalCenterX"
    "\030\010 \001(\001\022\026\n\016opticalCenterY\030\t \001(\001\022\014\n\004size\030\n"
    " \001(\003\022\022\n\nmemorysize\030\013 \001(\003\022\030\n\020cameraRollOf"
    "fset\030\014 \001(\001\022\030\n\020cameraTiltOffset\030\r \001(\001\022-\n\016"
    "transformation\030\016 \003(\0132\025.naothmessages.Pos"
    "e3D\"I\n\tJointData\022\020\n\010position\030\001 \003(\001\022\021\n\tst"
    "iffness\030\002 \003(\001\022\n\n\002dp\030\003 \003(\001\022\013\n\003ddp\030\004 \003(\001\"l"
    "\n\017SensorJointData\022+\n\tjointData\030\001 \002(\0132\030.n"
    "aothmessages.JointData\022\023\n\013temperature\030\002 "
    "\003(\001\022\027\n\017electricCurrent\030\003 \003(\001\"i\n\025UltraSou"
    "ndReceiveData\022\032\n\022ultraSoundTimeStep\030\001 \001("
    "\r\022\017\n\007rawdata\030\002 \002(\001\022\020\n\010dataLeft\030\003 \003(\001\022\021\n\t"
    "dataRight\030\004 \003(\001\"u\n\014CameraMatrix\022#\n\004pose\030"
    "\001 \002(\0132\025.naothmessages.Pose3D\0221\n\010cameraID"
    "\030\002 \001(\0162\027.naothmessages.CameraID:\006bottom\022"
    "\r\n\005valid\030\003 \001(\010\".\n\tFrameInfo\022\023\n\013frameNumb"
    "er\030\001 \002(\r\022\014\n\004time\030\002 \002(\r\"\224\002\n\013BallPercept\022\023"
    "\n\013ballWasSeen\030\001 \001(\010\0223\n\rcenterInImage\030\002 \001"
    "(\0132\034.naothmessages.DoubleVector2\022\025\n\rradi"
    "usInImage\030\003 \001(\001\022\'\n\tballColor\030\004 \001(\0162\024.nao"
    "thmessages.Color\022\?\n\031bearingBasedOffsetOn"
    "Field\030\005 \001(\0132\034.naothmessages.DoubleVector"
    "2\022:\n\030frameInfoWhenBallWasSeen\030\006 \001(\0132\030.na"
    "othmessages.FrameInfo\"\234\001\n\013GoalPercept\022\027\n"
    "\017angleToSeenGoal\030\001 \001(\001\0222\n\014goalCentroid\030\002"
    " \001(\0132\034.naothmessages.DoubleVector3\022\031\n\021nu"
    "mberOfSeenPosts\030\003 \001(\005\022%\n\004post\030\004 \003(\0132\027.na"
    "othmessages.GoalPost\"\264\003\n\021HeadMotionReque"
    "st\022\n\n\002id\030\001 \002(\r\022\020\n\010cameraID\030\002 \002(\r\0229\n\023targ"
    "etJointPosition\030\003 \001(\0132\034.naothmessages.Do"
    "ubleVector2\0228\n\022targetPointInImage\030\004 \001(\0132"
    "\034.naothmessages.DoubleVector2\022;\n\025targetP"
    "ointInTheWorld\030\005 \001(\0132\034.naothmessages.Dou"
    "bleVector3\0222\n\014searchCenter\030\006 \001(\0132\034.naoth"
    "messages.DoubleVector3\0220\n\nsearchSize\030\007 \001"
    "(\0132\034.naothmessages.DoubleVector3\022\027\n\017sear"
    "chDirection\030\010 \001(\010\022<\n\026targetPointOnTheGro"
    "und\030\t \001(\0132\034.naothmessages.DoubleVector2\022"
    "\022\n\ncoordinate\030\n \001(\r\"\207\001\n\022StepControlReque"
    "st\022\016\n\006stepID\030\001 \002(\r\022\024\n\014moveLeftFoot\030\002 \002(\010"
    "\022%\n\006target\030\003 \002(\0132\025.naothmessages.Pose2D\022"
    "\014\n\004time\030\004 \002(\r\022\026\n\016speedDirection\030\005 \002(\001\"\272\001"
    "\n\013WalkRequest\022\022\n\ncoordinate\030\001 \002(\r\022\021\n\tcha"
    "racter\030\002 \002(\001\022%\n\006target\030\003 \002(\0132\025.naothmess"
    "ages.Pose2D\0226\n\013stepControl\030\004 \001(\0132!.naoth"
    "messages.StepControlRequest\022%\n\006offset\030\005 "
    "\002(\0132\025.naothmessages.Pose2D\"{\n\013KickReques"
    "t\022/\n\tkickPoint\030\001 \002(\0132\034.naothmessages.Dou"
    "bleVector3\022\025\n\rkickDirection\030\002 \002(\001\022\020\n\010kic"
    "kFoot\030\003 \002(\005\022\022\n\nfinishKick\030\004 \002(\010\"\212\002\n\rMoti"
    "onRequest\022\n\n\002id\030\001 \002(\r\022\014\n\004time\030\002 \002(\r\022\016\n\006f"
    "orced\030\003 \002(\010\022/\n\013walkRequest\030\004 \001(\0132\032.naoth"
    "messages.WalkRequest\022\026\n\016starndardStand\030\005"
    " \001(\010\022/\n\013kickRequest\030\006 \001(\0132\032.naothmessage"
    "s.KickRequest\022\023\n\013standHeight\030\007 \001(\001\022\"\n\032ca"
    "librateFootTouchDetector\030\010 \001(\010\022\034\n\024cognit"
    "ionFrameNumber\030\t \001(\r\"\253\001\n\013LinePercept\022.\n\005"
    "lines\030\001 \003(\0132\037.naothmessages.FieldLineSeg"
    "ment\0222\n\rintersections\030\002 \003(\0132\033.naothmessa"
    "ges.Intersection\0228\n\022middleCircleCenter\030\003"
    " \001(\0132\034.naothmessages.DoubleVector2\"\254\001\n\020S"
    "canLineEndPoint\022-\n\nposInImage\030\001 \002(\0132\031.na"
    "othmessages.IntVector2\0220\n\nposOnField\030\002 \002"
    "(\0132\034.naothmessages.DoubleVector2\022#\n\005colo"
    "r\030\003 \002(\0162\024.naothmessages.Color\022\022\n\nScanLin"
    "eID\030\004 \002(\r\"J\n\024ScanLineEdgelPercept\0222\n\tend"
    "Points\030\002 \003(\0132\037.naothmessages.ScanLineEnd"
    "Point\"5\n\007FSRData\022\r\n\005force\030\001 \003(\001\022\014\n\004data\030"
    "\002 \003(\001\022\r\n\005valid\030\003 \003(\010\"9\n\021StepControlStatu"
    "s\022\016\n\006stepID\030\001 \002(\r\022\024\n\014moveableFoot\030\002 \002(\r\""
    "\322\002\n\014MotionStatus\022\014\n\004time\030\001 \002(\r\022\022\n\nlastMo"
    "tion\030\002 \002(\r\022\025\n\rcurrentMotion\030\003 \002(\r\022\022\n\nhea"
    "dMotion\030\004 \002(\r\022\032\n\022currentMotionState\030\005 \002("
    "\r\0224\n\025plannedMotionLeftFoot\030\006 \002(\0132\025.naoth"
    "messages.Pose2D\0225\n\026plannedMotionRightFoo"
    "t\030\007 \002(\0132\025.naothmessages.Pose2D\022/\n\020planne"
    "dMotionHip\030\010 \002(\0132\025.naothmessages.Pose2D\022"
    ";\n\021stepControlStatus\030\t \001(\0132 .naothmessag"
    "es.StepControlStatus\"3\n\014OdometryData\022#\n\004"
    "pose\030\001 \002(\0132\025.naothmessages.Pose2D\"\274\001\n\017Ca"
    "librationData\022:\n\024inertialSensorOffset\030\001 "
    "\001(\0132\034.naothmessages.DoubleVector2\0226\n\020gyr"
    "oSensorOffset\030\002 \001(\0132\034.naothmessages.Doub"
    "leVector2\0225\n\017accSensorOffset\030\003 \001(\0132\034.nao"
    "thmessages.DoubleVector3\"B\n\rInertialMode"
    "l\0221\n\013orientation\030\001 \001(\0132\034.naothmessages.D"
    "oubleVector2B\026\n\024de.naoth.rc.messages", 3916);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Representations.proto", &protobuf_RegisterTypes);
  Image::default_instance_ = new Image();
  CameraInfo::default_instance_ = new CameraInfo();
  JointData::default_instance_ = new JointData();
  SensorJointData::default_instance_ = new SensorJointData();
  UltraSoundReceiveData::default_instance_ = new UltraSoundReceiveData();
  CameraMatrix::default_instance_ = new CameraMatrix();
  FrameInfo::default_instance_ = new FrameInfo();
  BallPercept::default_instance_ = new BallPercept();
  GoalPercept::default_instance_ = new GoalPercept();
  HeadMotionRequest::default_instance_ = new HeadMotionRequest();
  StepControlRequest::default_instance_ = new StepControlRequest();
  WalkRequest::default_instance_ = new WalkRequest();
  KickRequest::default_instance_ = new KickRequest();
  MotionRequest::default_instance_ = new MotionRequest();
  LinePercept::default_instance_ = new LinePercept();
  ScanLineEndPoint::default_instance_ = new ScanLineEndPoint();
  ScanLineEdgelPercept::default_instance_ = new ScanLineEdgelPercept();
  FSRData::default_instance_ = new FSRData();
  StepControlStatus::default_instance_ = new StepControlStatus();
  MotionStatus::default_instance_ = new MotionStatus();
  OdometryData::default_instance_ = new OdometryData();
  CalibrationData::default_instance_ = new CalibrationData();
  InertialModel::default_instance_ = new InertialModel();
  Image::default_instance_->InitAsDefaultInstance();
  CameraInfo::default_instance_->InitAsDefaultInstance();
  JointData::default_instance_->InitAsDefaultInstance();
  SensorJointData::default_instance_->InitAsDefaultInstance();
  UltraSoundReceiveData::default_instance_->InitAsDefaultInstance();
  CameraMatrix::default_instance_->InitAsDefaultInstance();
  FrameInfo::default_instance_->InitAsDefaultInstance();
  BallPercept::default_instance_->InitAsDefaultInstance();
  GoalPercept::default_instance_->InitAsDefaultInstance();
  HeadMotionRequest::default_instance_->InitAsDefaultInstance();
  StepControlRequest::default_instance_->InitAsDefaultInstance();
  WalkRequest::default_instance_->InitAsDefaultInstance();
  KickRequest::default_instance_->InitAsDefaultInstance();
  MotionRequest::default_instance_->InitAsDefaultInstance();
  LinePercept::default_instance_->InitAsDefaultInstance();
  ScanLineEndPoint::default_instance_->InitAsDefaultInstance();
  ScanLineEdgelPercept::default_instance_->InitAsDefaultInstance();
  FSRData::default_instance_->InitAsDefaultInstance();
  StepControlStatus::default_instance_->InitAsDefaultInstance();
  MotionStatus::default_instance_->InitAsDefaultInstance();
  OdometryData::default_instance_->InitAsDefaultInstance();
  CalibrationData::default_instance_->InitAsDefaultInstance();
  InertialModel::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Representations_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Representations_2eproto {
  StaticDescriptorInitializer_Representations_2eproto() {
    protobuf_AddDesc_Representations_2eproto();
  }
} static_descriptor_initializer_Representations_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Image_Format_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Image_Format_descriptor_;
}
bool Image_Format_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Image_Format Image::YUV;
const Image_Format Image::YUV422;
const Image_Format Image::Format_MIN;
const Image_Format Image::Format_MAX;
const int Image::Format_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Image::kDataFieldNumber;
const int Image::kWidthFieldNumber;
const int Image::kHeightFieldNumber;
const int Image::kCameraInfoFieldNumber;
const int Image::kFormatFieldNumber;
const int Image::kTimestampFieldNumber;
#endif  // !_MSC_VER

Image::Image()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Image::InitAsDefaultInstance() {
  camerainfo_ = const_cast< ::naothmessages::CameraInfo*>(&::naothmessages::CameraInfo::default_instance());
}

Image::Image(const Image& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Image::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  width_ = 320;
  height_ = 240;
  camerainfo_ = NULL;
  format_ = 0;
  timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Image::~Image() {
  SharedDtor();
}

void Image::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
    delete camerainfo_;
  }
}

void Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Image::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Image_descriptor_;
}

const Image& Image::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Representations_2eproto();  return *default_instance_;
}

Image* Image::default_instance_ = NULL;

Image* Image::New() const {
  return new Image;
}

void Image::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    width_ = 320;
    height_ = 240;
    if (has_camerainfo()) {
      if (camerainfo_ != NULL) camerainfo_->::naothmessages::CameraInfo::Clear();
    }
    format_ = 0;
    timestamp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }
      
      // optional int32 width = 2 [default = 320];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }
      
      // optional int32 height = 3 [default = 240];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cameraInfo;
        break;
      }
      
      // optional .naothmessages.CameraInfo cameraInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cameraInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camerainfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_format;
        break;
      }
      
      // optional .naothmessages.Image.Format format = 5 [default = YUV];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::naothmessages::Image_Format_IsValid(value)) {
            set_format(static_cast< ::naothmessages::Image_Format >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_timestamp;
        break;
      }
      
      // optional uint32 timestamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(), output);
  }
  
  // optional int32 width = 2 [default = 320];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }
  
  // optional int32 height = 3 [default = 240];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }
  
  // optional .naothmessages.CameraInfo cameraInfo = 4;
  if (has_camerainfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->camerainfo(), output);
  }
  
  // optional .naothmessages.Image.Format format = 5 [default = YUV];
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->format(), output);
  }
  
  // optional uint32 timestamp = 6;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Image::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }
  
  // optional int32 width = 2 [default = 320];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }
  
  // optional int32 height = 3 [default = 240];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }
  
  // optional .naothmessages.CameraInfo cameraInfo = 4;
  if (has_camerainfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->camerainfo(), target);
  }
  
  // optional .naothmessages.Image.Format format = 5 [default = YUV];
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->format(), target);
  }
  
  // optional uint32 timestamp = 6;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Image::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
    // optional int32 width = 2 [default = 320];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }
    
    // optional int32 height = 3 [default = 240];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }
    
    // optional .naothmessages.CameraInfo cameraInfo = 4;
    if (has_camerainfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camerainfo());
    }
    
    // optional .naothmessages.Image.Format format = 5 [default = YUV];
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
    }
    
    // optional uint32 timestamp = 6;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Image::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Image* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Image*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_camerainfo()) {
      mutable_camerainfo()->::naothmessages::CameraInfo::MergeFrom(from.camerainfo());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Image::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_camerainfo()) {
    if (!this->camerainfo().IsInitialized()) return false;
  }
  return true;
}

void Image::Swap(Image* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(camerainfo_, other->camerainfo_);
    std::swap(format_, other->format_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Image::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Image_descriptor_;
  metadata.reflection = Image_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CameraInfo::kResolutionWidthFieldNumber;
const int CameraInfo::kResolutionHeightFieldNumber;
const int CameraInfo::kCameraIDFieldNumber;
const int CameraInfo::kFocalLengthFieldNumber;
const int CameraInfo::kOpeningAngleWidthFieldNumber;
const int CameraInfo::kOpeningAngleHeightFieldNumber;
const int CameraInfo::kOpticalCenterXFieldNumber;
const int CameraInfo::kOpticalCenterYFieldNumber;
const int CameraInfo::kSizeFieldNumber;
const int CameraInfo::kMemorysizeFieldNumber;
const int CameraInfo::kCameraRollOffsetFieldNumber;
const int CameraInfo::kCameraTiltOffsetFieldNumber;
const int CameraInfo::kTransformationFieldNumber;
#endif  // !_MSC_VER

CameraInfo::CameraInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CameraInfo::InitAsDefaultInstance() {
}

CameraInfo::CameraInfo(const CameraInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CameraInfo::SharedCtor() {
  _cached_size_ = 0;
  resolutionwidth_ = 0;
  resolutionheight_ = 0;
  cameraid_ = 1;
  focallength_ = 0;
  openinganglewidth_ = 0;
  openingangleheight_ = 0;
  opticalcenterx_ = 0;
  opticalcentery_ = 0;
  size_ = GOOGLE_LONGLONG(0);
  memorysize_ = GOOGLE_LONGLONG(0);
  camerarolloffset_ = 0;
  cameratiltoffset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraInfo::~CameraInfo() {
  SharedDtor();
}

void CameraInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CameraInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraInfo_descriptor_;
}

const CameraInfo& CameraInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Representations_2eproto();  return *default_instance_;
}

CameraInfo* CameraInfo::default_instance_ = NULL;

CameraInfo* CameraInfo::New() const {
  return new CameraInfo;
}

void CameraInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resolutionwidth_ = 0;
    resolutionheight_ = 0;
    cameraid_ = 1;
    focallength_ = 0;
    openinganglewidth_ = 0;
    openingangleheight_ = 0;
    opticalcenterx_ = 0;
    opticalcentery_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    size_ = GOOGLE_LONGLONG(0);
    memorysize_ = GOOGLE_LONGLONG(0);
    camerarolloffset_ = 0;
    cameratiltoffset_ = 0;
  }
  transformation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 resolutionWidth = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resolutionwidth_)));
          set_has_resolutionwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_resolutionHeight;
        break;
      }
      
      // required int32 resolutionHeight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resolutionHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resolutionheight_)));
          set_has_resolutionheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cameraID;
        break;
      }
      
      // optional .naothmessages.CameraID cameraID = 4 [default = bottom];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cameraID:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (naothmessages::CameraID_IsValid(value)) {
            set_cameraid(static_cast< naothmessages::CameraID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_focalLength;
        break;
      }
      
      // optional double focalLength = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_focalLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &focallength_)));
          set_has_focallength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_openingAngleWidth;
        break;
      }
      
      // optional double openingAngleWidth = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_openingAngleWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openinganglewidth_)));
          set_has_openinganglewidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_openingAngleHeight;
        break;
      }
      
      // optional double openingAngleHeight = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_openingAngleHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openingangleheight_)));
          set_has_openingangleheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_opticalCenterX;
        break;
      }
      
      // optional double opticalCenterX = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_opticalCenterX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &opticalcenterx_)));
          set_has_opticalcenterx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_opticalCenterY;
        break;
      }
      
      // optional double opticalCenterY = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_opticalCenterY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &opticalcentery_)));
          set_has_opticalcentery();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_size;
        break;
      }
      
      // optional int64 size = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_memorysize;
        break;
      }
      
      // optional int64 memorysize = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memorysize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &memorysize_)));
          set_has_memorysize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_cameraRollOffset;
        break;
      }
      
      // optional double cameraRollOffset = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cameraRollOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &camerarolloffset_)));
          set_has_camerarolloffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_cameraTiltOffset;
        break;
      }
      
      // optional double cameraTiltOffset = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cameraTiltOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cameratiltoffset_)));
          set_has_cameratiltoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_transformation;
        break;
      }
      
      // repeated .naothmessages.Pose3D transformation = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transformation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_transformation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_transformation;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CameraInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 resolutionWidth = 1;
  if (has_resolutionwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->resolutionwidth(), output);
  }
  
  // required int32 resolutionHeight = 2;
  if (has_resolutionheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->resolutionheight(), output);
  }
  
  // optional .naothmessages.CameraID cameraID = 4 [default = bottom];
  if (has_cameraid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->cameraid(), output);
  }
  
  // optional double focalLength = 5;
  if (has_focallength()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->focallength(), output);
  }
  
  // optional double openingAngleWidth = 6;
  if (has_openinganglewidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->openinganglewidth(), output);
  }
  
  // optional double openingAngleHeight = 7;
  if (has_openingangleheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->openingangleheight(), output);
  }
  
  // optional double opticalCenterX = 8;
  if (has_opticalcenterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->opticalcenterx(), output);
  }
  
  // optional double opticalCenterY = 9;
  if (has_opticalcentery()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->opticalcentery(), output);
  }
  
  // optional int64 size = 10;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->size(), output);
  }
  
  // optional int64 memorysize = 11;
  if (has_memorysize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->memorysize(), output);
  }
  
  // optional double cameraRollOffset = 12;
  if (has_camerarolloffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->camerarolloffset(), output);
  }
  
  // optional double cameraTiltOffset = 13;
  if (has_cameratiltoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->cameratiltoffset(), output);
  }
  
  // repeated .naothmessages.Pose3D transformation = 14;
  for (int i = 0; i < this->transformation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->transformation(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CameraInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 resolutionWidth = 1;
  if (has_resolutionwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->resolutionwidth(), target);
  }
  
  // required int32 resolutionHeight = 2;
  if (has_resolutionheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->resolutionheight(), target);
  }
  
  // optional .naothmessages.CameraID cameraID = 4 [default = bottom];
  if (has_cameraid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->cameraid(), target);
  }
  
  // optional double focalLength = 5;
  if (has_focallength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->focallength(), target);
  }
  
  // optional double openingAngleWidth = 6;
  if (has_openinganglewidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->openinganglewidth(), target);
  }
  
  // optional double openingAngleHeight = 7;
  if (has_openingangleheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->openingangleheight(), target);
  }
  
  // optional double opticalCenterX = 8;
  if (has_opticalcenterx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->opticalcenterx(), target);
  }
  
  // optional double opticalCenterY = 9;
  if (has_opticalcentery()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->opticalcentery(), target);
  }
  
  // optional int64 size = 10;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->size(), target);
  }
  
  // optional int64 memorysize = 11;
  if (has_memorysize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->memorysize(), target);
  }
  
  // optional double cameraRollOffset = 12;
  if (has_camerarolloffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->camerarolloffset(), target);
  }
  
  // optional double cameraTiltOffset = 13;
  if (has_cameratiltoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->cameratiltoffset(), target);
  }
  
  // repeated .naothmessages.Pose3D transformation = 14;
  for (int i = 0; i < this->transformation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->transformation(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CameraInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 resolutionWidth = 1;
    if (has_resolutionwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resolutionwidth());
    }
    
    // required int32 resolutionHeight = 2;
    if (has_resolutionheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resolutionheight());
    }
    
    // optional .naothmessages.CameraID cameraID = 4 [default = bottom];
    if (has_cameraid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cameraid());
    }
    
    // optional double focalLength = 5;
    if (has_focallength()) {
      total_size += 1 + 8;
    }
    
    // optional double openingAngleWidth = 6;
    if (has_openinganglewidth()) {
      total_size += 1 + 8;
    }
    
    // optional double openingAngleHeight = 7;
    if (has_openingangleheight()) {
      total_size += 1 + 8;
    }
    
    // optional double opticalCenterX = 8;
    if (has_opticalcenterx()) {
      total_size += 1 + 8;
    }
    
    // optional double opticalCenterY = 9;
    if (has_opticalcentery()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 size = 10;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->size());
    }
    
    // optional int64 memorysize = 11;
    if (has_memorysize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->memorysize());
    }
    
    // optional double cameraRollOffset = 12;
    if (has_camerarolloffset()) {
      total_size += 1 + 8;
    }
    
    // optional double cameraTiltOffset = 13;
    if (has_cameratiltoffset()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated .naothmessages.Pose3D transformation = 14;
  total_size += 1 * this->transformation_size();
  for (int i = 0; i < this->transformation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transformation(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraInfo::MergeFrom(const CameraInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  transformation_.MergeFrom(from.transformation_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resolutionwidth()) {
      set_resolutionwidth(from.resolutionwidth());
    }
    if (from.has_resolutionheight()) {
      set_resolutionheight(from.resolutionheight());
    }
    if (from.has_cameraid()) {
      set_cameraid(from.cameraid());
    }
    if (from.has_focallength()) {
      set_focallength(from.focallength());
    }
    if (from.has_openinganglewidth()) {
      set_openinganglewidth(from.openinganglewidth());
    }
    if (from.has_openingangleheight()) {
      set_openingangleheight(from.openingangleheight());
    }
    if (from.has_opticalcenterx()) {
      set_opticalcenterx(from.opticalcenterx());
    }
    if (from.has_opticalcentery()) {
      set_opticalcentery(from.opticalcentery());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_memorysize()) {
      set_memorysize(from.memorysize());
    }
    if (from.has_camerarolloffset()) {
      set_camerarolloffset(from.camerarolloffset());
    }
    if (from.has_cameratiltoffset()) {
      set_cameratiltoffset(from.cameratiltoffset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraInfo::CopyFrom(const CameraInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < transformation_size(); i++) {
    if (!this->transformation(i).IsInitialized()) return false;
  }
  return true;
}

void CameraInfo::Swap(CameraInfo* other) {
  if (other != this) {
    std::swap(resolutionwidth_, other->resolutionwidth_);
    std::swap(resolutionheight_, other->resolutionheight_);
    std::swap(cameraid_, other->cameraid_);
    std::swap(focallength_, other->focallength_);
    std::swap(openinganglewidth_, other->openinganglewidth_);
    std::swap(openingangleheight_, other->openingangleheight_);
    std::swap(opticalcenterx_, other->opticalcenterx_);
    std::swap(opticalcentery_, other->opticalcentery_);
    std::swap(size_, other->size_);
    std::swap(memorysize_, other->memorysize_);
    std::swap(camerarolloffset_, other->camerarolloffset_);
    std::swap(cameratiltoffset_, other->cameratiltoffset_);
    transformation_.Swap(&other->transformation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraInfo_descriptor_;
  metadata.reflection = CameraInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JointData::kPositionFieldNumber;
const int JointData::kStiffnessFieldNumber;
const int JointData::kDpFieldNumber;
const int JointData::kDdpFieldNumber;
#endif  // !_MSC_VER

JointData::JointData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JointData::InitAsDefaultInstance() {
}

JointData::JointData(const JointData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JointData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JointData::~JointData() {
  SharedDtor();
}

void JointData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JointData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JointData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JointData_descriptor_;
}

const JointData& JointData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Representations_2eproto();  return *default_instance_;
}

JointData* JointData::default_instance_ = NULL;

JointData* JointData::New() const {
  return new JointData;
}

void JointData::Clear() {
  position_.Clear();
  stiffness_.Clear();
  dp_.Clear();
  ddp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JointData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_position())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_position())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_position;
        if (input->ExpectTag(17)) goto parse_stiffness;
        break;
      }
      
      // repeated double stiffness = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_stiffness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_stiffness())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_stiffness())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_stiffness;
        if (input->ExpectTag(25)) goto parse_dp;
        break;
      }
      
      // repeated double dp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_dp())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dp())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_dp;
        if (input->ExpectTag(33)) goto parse_ddp;
        break;
      }
      
      // repeated double ddp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ddp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_ddp())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_ddp())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_ddp;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JointData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double position = 1;
  for (int i = 0; i < this->position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->position(i), output);
  }
  
  // repeated double stiffness = 2;
  for (int i = 0; i < this->stiffness_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->stiffness(i), output);
  }
  
  // repeated double dp = 3;
  for (int i = 0; i < this->dp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->dp(i), output);
  }
  
  // repeated double ddp = 4;
  for (int i = 0; i < this->ddp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->ddp(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JointData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double position = 1;
  for (int i = 0; i < this->position_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->position(i), target);
  }
  
  // repeated double stiffness = 2;
  for (int i = 0; i < this->stiffness_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->stiffness(i), target);
  }
  
  // repeated double dp = 3;
  for (int i = 0; i < this->dp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->dp(i), target);
  }
  
  // repeated double ddp = 4;
  for (int i = 0; i < this->ddp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->ddp(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JointData::ByteSize() const {
  int total_size = 0;
  
  // repeated double position = 1;
  {
    int data_size = 0;
    data_size = 8 * this->position_size();
    total_size += 1 * this->position_size() + data_size;
  }
  
  // repeated double stiffness = 2;
  {
    int data_size = 0;
    data_size = 8 * this->stiffness_size();
    total_size += 1 * this->stiffness_size() + data_size;
  }
  
  // repeated double dp = 3;
  {
    int data_size = 0;
    data_size = 8 * this->dp_size();
    total_size += 1 * this->dp_size() + data_size;
  }
  
  // repeated double ddp = 4;
  {
    int data_size = 0;
    data_size = 8 * this->ddp_size();
    total_size += 1 * this->ddp_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JointData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JointData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JointData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JointData::MergeFrom(const JointData& from) {
  GOOGLE_CHECK_NE(&from, this);
  position_.MergeFrom(from.position_);
  stiffness_.MergeFrom(from.stiffness_);
  dp_.MergeFrom(from.dp_);
  ddp_.MergeFrom(from.ddp_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JointData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointData::CopyFrom(const JointData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointData::IsInitialized() const {
  
  return true;
}

void JointData::Swap(JointData* other) {
  if (other != this) {
    position_.Swap(&other->position_);
    stiffness_.Swap(&other->stiffness_);
    dp_.Swap(&other->dp_);
    ddp_.Swap(&other->ddp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JointData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JointData_descriptor_;
  metadata.reflection = JointData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SensorJointData::kJointDataFieldNumber;
const int SensorJointData::kTemperatureFieldNumber;
const int SensorJointData::kElectricCurrentFieldNumber;
#endif  // !_MSC_VER

SensorJointData::SensorJointData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SensorJointData::InitAsDefaultInstance() {
  jointdata_ = const_cast< ::naothmessages::JointData*>(&::naothmessages::JointData::default_instance());
}

SensorJointData::SensorJointData(const SensorJointData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SensorJointData::SharedCtor() {
  _cached_size_ = 0;
  jointdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorJointData::~SensorJointData() {
  SharedDtor();
}

void SensorJointData::SharedDtor() {
  if (this != default_instance_) {
    delete jointdata_;
  }
}

void SensorJointData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorJointData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorJointData_descriptor_;
}

const SensorJointData& SensorJointData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Representations_2eproto();  return *default_instance_;
}

SensorJointData* SensorJointData::default_instance_ = NULL;

SensorJointData* SensorJointData::New() const {
  return new SensorJointData;
}

void SensorJointData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_jointdata()) {
      if (jointdata_ != NULL) jointdata_->::naothmessages::JointData::Clear();
    }
  }
  temperature_.Clear();
  electriccurrent_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SensorJointData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .naothmessages.JointData jointData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jointdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_temperature;
        break;
      }
      
      // repeated double temperature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_temperature())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_temperature())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_temperature;
        if (input->ExpectTag(25)) goto parse_electricCurrent;
        break;
      }
      
      // repeated double electricCurrent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_electricCurrent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_electriccurrent())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_electriccurrent())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_electricCurrent;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SensorJointData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .naothmessages.JointData jointData = 1;
  if (has_jointdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->jointdata(), output);
  }
  
  // repeated double temperature = 2;
  for (int i = 0; i < this->temperature_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->temperature(i), output);
  }
  
  // repeated double electricCurrent = 3;
  for (int i = 0; i < this->electriccurrent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->electriccurrent(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SensorJointData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .naothmessages.JointData jointData = 1;
  if (has_jointdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->jointdata(), target);
  }
  
  // repeated double temperature = 2;
  for (int i = 0; i < this->temperature_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->temperature(i), target);
  }
  
  // repeated double electricCurrent = 3;
  for (int i = 0; i < this->electriccurrent_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->electriccurrent(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SensorJointData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .naothmessages.JointData jointData = 1;
    if (has_jointdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jointdata());
    }
    
  }
  // repeated double temperature = 2;
  {
    int data_size = 0;
    data_size = 8 * this->temperature_size();
    total_size += 1 * this->temperature_size() + data_size;
  }
  
  // repeated double electricCurrent = 3;
  {
    int data_size = 0;
    data_size = 8 * this->electriccurrent_size();
    total_size += 1 * this->electriccurrent_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorJointData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SensorJointData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SensorJointData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SensorJointData::MergeFrom(const SensorJointData& from) {
  GOOGLE_CHECK_NE(&from, this);
  temperature_.MergeFrom(from.temperature_);
  electriccurrent_.MergeFrom(from.electriccurrent_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jointdata()) {
      mutable_jointdata()->::naothmessages::JointData::MergeFrom(from.jointdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SensorJointData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorJointData::CopyFrom(const SensorJointData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorJointData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SensorJointData::Swap(SensorJointData* other) {
  if (other != this) {
    std::swap(jointdata_, other->jointdata_);
    temperature_.Swap(&other->temperature_);
    electriccurrent_.Swap(&other->electriccurrent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SensorJointData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorJointData_descriptor_;
  metadata.reflection = SensorJointData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UltraSoundReceiveData::kUltraSoundTimeStepFieldNumber;
const int UltraSoundReceiveData::kRawdataFieldNumber;
const int UltraSoundReceiveData::kDataLeftFieldNumber;
const int UltraSoundReceiveData::kDataRightFieldNumber;
#endif  // !_MSC_VER

UltraSoundReceiveData::UltraSoundReceiveData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UltraSoundReceiveData::InitAsDefaultInstance() {
}

UltraSoundReceiveData::UltraSoundReceiveData(const UltraSoundReceiveData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UltraSoundReceiveData::SharedCtor() {
  _cached_size_ = 0;
  ultrasoundtimestep_ = 0u;
  rawdata_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UltraSoundReceiveData::~UltraSoundReceiveData() {
  SharedDtor();
}

void UltraSoundReceiveData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UltraSoundReceiveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UltraSoundReceiveData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UltraSoundReceiveData_descriptor_;
}

const UltraSoundReceiveData& UltraSoundReceiveData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Representations_2eproto();  return *default_instance_;
}

UltraSoundReceiveData* UltraSoundReceiveData::default_instance_ = NULL;

UltraSoundReceiveData* UltraSoundReceiveData::New() const {
  return new UltraSoundReceiveData;
}

void UltraSoundReceiveData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ultrasoundtimestep_ = 0u;
    rawdata_ = 0;
  }
  dataleft_.Clear();
  dataright_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UltraSoundReceiveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ultraSoundTimeStep = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ultrasoundtimestep_)));
          set_has_ultrasoundtimestep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_rawdata;
        break;
      }
      
      // required double rawdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_rawdata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rawdata_)));
          set_has_rawdata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_dataLeft;
        break;
      }
      
      // repeated double dataLeft = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dataLeft:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_dataleft())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dataleft())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_dataLeft;
        if (input->ExpectTag(33)) goto parse_dataRight;
        break;
      }
      
      // repeated double dataRight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dataRight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_dataright())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dataright())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_dataRight;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UltraSoundReceiveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ultraSoundTimeStep = 1;
  if (has_ultrasoundtimestep()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ultrasoundtimestep(), output);
  }
  
  // required double rawdata = 2;
  if (has_rawdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->rawdata(), output);
  }
  
  // repeated double dataLeft = 3;
  for (int i = 0; i < this->dataleft_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->dataleft(i), output);
  }
  
  // repeated double dataRight = 4;
  for (int i = 0; i < this->dataright_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->dataright(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UltraSoundReceiveData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ultraSoundTimeStep = 1;
  if (has_ultrasoundtimestep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ultrasoundtimestep(), target);
  }
  
  // required double rawdata = 2;
  if (has_rawdata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->rawdata(), target);
  }
  
  // repeated double dataLeft = 3;
  for (int i = 0; i < this->dataleft_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->dataleft(i), target);
  }
  
  // repeated double dataRight = 4;
  for (int i = 0; i < this->dataright_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->dataright(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UltraSoundReceiveData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ultraSoundTimeStep = 1;
    if (has_ultrasoundtimestep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ultrasoundtimestep());
    }
    
    // required double rawdata = 2;
    if (has_rawdata()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated double dataLeft = 3;
  {
    int data_size = 0;
    data_size = 8 * this->dataleft_size();
    total_size += 1 * this->dataleft_size() + data_size;
  }
  
  // repeated double dataRight = 4;
  {
    int data_size = 0;
    data_size = 8 * this->dataright_size();
    total_size += 1 * this->dataright_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UltraSoundReceiveData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UltraSoundReceiveData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UltraSoundReceiveData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UltraSoundReceiveData::MergeFrom(const UltraSoundReceiveData& from) {
  GOOGLE_CHECK_NE(&from, this);
  dataleft_.MergeFrom(from.dataleft_);
  dataright_.MergeFrom(from.dataright_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ultrasoundtimestep()) {
      set_ultrasoundtimestep(from.ultrasoundtimestep());
    }
    if (from.has_rawdata()) {
      set_rawdata(from.rawdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UltraSoundReceiveData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UltraSoundReceiveData::CopyFrom(const UltraSoundReceiveData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltraSoundReceiveData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void UltraSoundReceiveData::Swap(UltraSoundReceiveData* other) {
  if (other != this) {
    std::swap(ultrasoundtimestep_, other->ultrasoundtimestep_);
    std::swap(rawdata_, other->rawdata_);
    dataleft_.Swap(&other->dataleft_);
    dataright_.Swap(&other->dataright_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UltraSoundReceiveData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UltraSoundReceiveData_descriptor_;
  metadata.reflection = UltraSoundReceiveData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CameraMatrix::kPoseFieldNumber;
const int CameraMatrix::kCameraIDFieldNumber;
const int CameraMatrix::kValidFieldNumber;
#endif  // !_MSC_VER

CameraMatrix::CameraMatrix()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CameraMatrix::InitAsDefaultInstance() {
  pose_ = const_cast< ::naothmessages::Pose3D*>(&::naothmessages::Pose3D::default_instance());
}

CameraMatrix::CameraMatrix(const CameraMatrix& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CameraMatrix::SharedCtor() {
  _cached_size_ = 0;
  pose_ = NULL;
  cameraid_ = 1;
  valid_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraMatrix::~CameraMatrix() {
  SharedDtor();
}

void CameraMatrix::SharedDtor() {
  if (this != default_instance_) {
    delete pose_;
  }
}

void CameraMatrix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraMatrix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraMatrix_descriptor_;
}

const CameraMatrix& CameraMatrix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Representations_2eproto();  return *default_instance_;
}

CameraMatrix* CameraMatrix::default_instance_ = NULL;

CameraMatrix* CameraMatrix::New() const {
  return new CameraMatrix;
}

void CameraMatrix::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pose()) {
      if (pose_ != NULL) pose_->::naothmessages::Pose3D::Clear();
    }
    cameraid_ = 1;
    valid_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraMatrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .naothmessages.Pose3D pose = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cameraID;
        break;
      }
      
      // optional .naothmessages.CameraID cameraID = 2 [default = bottom];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cameraID:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (naothmessages::CameraID_IsValid(value)) {
            set_cameraid(static_cast< naothmessages::CameraID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valid;
        break;
      }
      
      // optional bool valid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
          set_has_valid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CameraMatrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .naothmessages.Pose3D pose = 1;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pose(), output);
  }
  
  // optional .naothmessages.CameraID cameraID = 2 [default = bottom];
  if (has_cameraid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cameraid(), output);
  }
  
  // optional bool valid = 3;
  if (has_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->valid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CameraMatrix::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .naothmessages.Pose3D pose = 1;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pose(), target);
  }
  
  // optional .naothmessages.CameraID cameraID = 2 [default = bottom];
  if (has_cameraid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cameraid(), target);
  }
  
  // optional bool valid = 3;
  if (has_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->valid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CameraMatrix::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .naothmessages.Pose3D pose = 1;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }
    
    // optional .naothmessages.CameraID cameraID = 2 [default = bottom];
    if (has_cameraid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cameraid());
    }
    
    // optional bool valid = 3;
    if (has_valid()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraMatrix::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraMatrix* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraMatrix*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraMatrix::MergeFrom(const CameraMatrix& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pose()) {
      mutable_pose()->::naothmessages::Pose3D::MergeFrom(from.pose());
    }
    if (from.has_cameraid()) {
      set_cameraid(from.cameraid());
    }
    if (from.has_valid()) {
      set_valid(from.valid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraMatrix::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraMatrix::CopyFrom(const CameraMatrix& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraMatrix::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  return true;
}

void CameraMatrix::Swap(CameraMatrix* other) {
  if (other != this) {
    std::swap(pose_, other->pose_);
    std::swap(cameraid_, other->cameraid_);
    std::swap(valid_, other->valid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraMatrix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraMatrix_descriptor_;
  metadata.reflection = CameraMatrix_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrameInfo::kFrameNumberFieldNumber;
const int FrameInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

FrameInfo::FrameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FrameInfo::InitAsDefaultInstance() {
}

FrameInfo::FrameInfo(const FrameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FrameInfo::SharedCtor() {
  _cached_size_ = 0;
  framenumber_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameInfo::~FrameInfo() {
  SharedDtor();
}

void FrameInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FrameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameInfo_descriptor_;
}

const FrameInfo& FrameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Representations_2eproto();  return *default_instance_;
}

FrameInfo* FrameInfo::default_instance_ = NULL;

FrameInfo* FrameInfo::New() const {
  return new FrameInfo;
}

void FrameInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    framenumber_ = 0u;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 frameNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framenumber_)));
          set_has_framenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // required uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FrameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 frameNumber = 1;
  if (has_framenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->framenumber(), output);
  }
  
  // required uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FrameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 frameNumber = 1;
  if (has_framenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->framenumber(), target);
  }
  
  // required uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FrameInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 frameNumber = 1;
    if (has_framenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framenumber());
    }
    
    // required uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameInfo::MergeFrom(const FrameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framenumber()) {
      set_framenumber(from.framenumber());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameInfo::CopyFrom(const FrameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void FrameInfo::Swap(FrameInfo* other) {
  if (other != this) {
    std::swap(framenumber_, other->framenumber_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameInfo_descriptor_;
  metadata.reflection = FrameInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BallPercept::kBallWasSeenFieldNumber;
const int BallPercept::kCenterInImageFieldNumber;
const int BallPercept::kRadiusInImageFieldNumber;
const int BallPercept::kBallColorFieldNumber;
const int BallPercept::kBearingBasedOffsetOnFieldFieldNumber;
const int BallPercept::kFrameInfoWhenBallWasSeenFieldNumber;
#endif  // !_MSC_VER

BallPercept::BallPercept()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BallPercept::InitAsDefaultInstance() {
  centerinimage_ = const_cast< ::naothmessages::DoubleVector2*>(&::naothmessages::DoubleVector2::default_instance());
  bearingbasedoffsetonfield_ = const_cast< ::naothmessages::DoubleVector2*>(&::naothmessages::DoubleVector2::default_instance());
  frameinfowhenballwasseen_ = const_cast< ::naothmessages::FrameInfo*>(&::naothmessages::FrameInfo::default_instance());
}

BallPercept::BallPercept(const BallPercept& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BallPercept::SharedCtor() {
  _cached_size_ = 0;
  ballwasseen_ = false;
  centerinimage_ = NULL;
  radiusinimage_ = 0;
  ballcolor_ = 0;
  bearingbasedoffsetonfield_ = NULL;
  frameinfowhenballwasseen_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BallPercept::~BallPercept() {
  SharedDtor();
}

void BallPercept::SharedDtor() {
  if (this != default_instance_) {
    delete centerinimage_;
    delete bearingbasedoffsetonfield_;
    delete frameinfowhenballwasseen_;
  }
}

void BallPercept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BallPercept::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BallPercept_descriptor_;
}

const BallPercept& BallPercept::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Representations_2eproto();  return *default_instance_;
}

BallPercept* BallPercept::default_instance_ = NULL;

BallPercept* BallPercept::New() const {
  return new BallPercept;
}

void BallPercept::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ballwasseen_ = false;
    if (has_centerinimage()) {
      if (centerinimage_ != NULL) centerinimage_->::naothmessages::DoubleVector2::Clear();
    }
    radiusinimage_ = 0;
    ballcolor_ = 0;
    if (has_bearingbasedoffsetonfield()) {
      if (bearingbasedoffsetonfield_ != NULL) bearingbasedoffsetonfield_->::naothmessages::DoubleVector2::Clear();
    }
    if (has_frameinfowhenballwasseen()) {
      if (frameinfowhenballwasseen_ != NULL) frameinfowhenballwasseen_->::naothmessages::FrameInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BallPercept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool ballWasSeen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ballwasseen_)));
          set_has_ballwasseen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_centerInImage;
        break;
      }
      
      // optional .naothmessages.DoubleVector2 centerInImage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_centerInImage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_centerinimage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_radiusInImage;
        break;
      }
      
      // optional double radiusInImage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_radiusInImage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radiusinimage_)));
          set_has_radiusinimage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ballColor;
        break;
      }
      
      // optional .naothmessages.Color ballColor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ballColor:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (naothmessages::Color_IsValid(value)) {
            set_ballcolor(static_cast< naothmessages::Color >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bearingBasedOffsetOnField;
        break;
      }
      
      // optional .naothmessages.DoubleVector2 bearingBasedOffsetOnField = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bearingBasedOffsetOnField:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bearingbasedoffsetonfield()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_frameInfoWhenBallWasSeen;
        break;
      }
      
      // optional .naothmessages.FrameInfo frameInfoWhenBallWasSeen = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frameInfoWhenBallWasSeen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frameinfowhenballwasseen()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BallPercept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool ballWasSeen = 1;
  if (has_ballwasseen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ballwasseen(), output);
  }
  
  // optional .naothmessages.DoubleVector2 centerInImage = 2;
  if (has_centerinimage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->centerinimage(), output);
  }
  
  // optional double radiusInImage = 3;
  if (has_radiusinimage()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->radiusinimage(), output);
  }
  
  // optional .naothmessages.Color ballColor = 4;
  if (has_ballcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ballcolor(), output);
  }
  
  // optional .naothmessages.DoubleVector2 bearingBasedOffsetOnField = 5;
  if (has_bearingbasedoffsetonfield()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bearingbasedoffsetonfield(), output);
  }
  
  // optional .naothmessages.FrameInfo frameInfoWhenBallWasSeen = 6;
  if (has_frameinfowhenballwasseen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->frameinfowhenballwasseen(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BallPercept::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool ballWasSeen = 1;
  if (has_ballwasseen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ballwasseen(), target);
  }
  
  // optional .naothmessages.DoubleVector2 centerInImage = 2;
  if (has_centerinimage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->centerinimage(), target);
  }
  
  // optional double radiusInImage = 3;
  if (has_radiusinimage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->radiusinimage(), target);
  }
  
  // optional .naothmessages.Color ballColor = 4;
  if (has_ballcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ballcolor(), target);
  }
  
  // optional .naothmessages.DoubleVector2 bearingBasedOffsetOnField = 5;
  if (has_bearingbasedoffsetonfield()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bearingbasedoffsetonfield(), target);
  }
  
  // optional .naothmessages.FrameInfo frameInfoWhenBallWasSeen = 6;
  if (has_frameinfowhenballwasseen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->frameinfowhenballwasseen(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BallPercept::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool ballWasSeen = 1;
    if (has_ballwasseen()) {
      total_size += 1 + 1;
    }
    
    // optional .naothmessages.DoubleVector2 centerInImage = 2;
    if (has_centerinimage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->centerinimage());
    }
    
    // optional double radiusInImage = 3;
    if (has_radiusinimage()) {
      total_size += 1 + 8;
    }
    
    // optional .naothmessages.Color ballColor = 4;
    if (has_ballcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ballcolor());
    }
    
    // optional .naothmessages.DoubleVector2 bearingBasedOffsetOnField = 5;
    if (has_bearingbasedoffsetonfield()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bearingbasedoffsetonfield());
    }
    
    // optional .naothmessages.FrameInfo frameInfoWhenBallWasSeen = 6;
    if (has_frameinfowhenballwasseen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frameinfowhenballwasseen());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BallPercept::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BallPercept* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BallPercept*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BallPercept::MergeFrom(const BallPercept& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ballwasseen()) {
      set_ballwasseen(from.ballwasseen());
    }
    if (from.has_centerinimage()) {
      mutable_centerinimage()->::naothmessages::DoubleVector2::MergeFrom(from.centerinimage());
    }
    if (from.has_radiusinimage()) {
      set_radiusinimage(from.radiusinimage());
    }
    if (from.has_ballcolor()) {
      set_ballcolor(from.ballcolor());
    }
    if (from.has_bearingbasedoffsetonfield()) {
      mutable_bearingbasedoffsetonfield()->::naothmessages::DoubleVector2::MergeFrom(from.bearingbasedoffsetonfield());
    }
    if (from.has_frameinfowhenballwasseen()) {
      mutable_frameinfowhenballwasseen()->::naothmessages::FrameInfo::MergeFrom(from.frameinfowhenballwasseen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BallPercept::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallPercept::CopyFrom(const BallPercept& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallPercept::IsInitialized() const {
  
  if (has_centerinimage()) {
    if (!this->centerinimage().IsInitialized()) return false;
  }
  if (has_bearingbasedoffsetonfield()) {
    if (!this->bearingbasedoffsetonfield().IsInitialized()) return false;
  }
  if (has_frameinfowhenballwasseen()) {
    if (!this->frameinfowhenballwasseen().IsInitialized()) return false;
  }
  return true;
}

void BallPercept::Swap(BallPercept* other) {
  if (other != this) {
    std::swap(ballwasseen_, other->ballwasseen_);
    std::swap(centerinimage_, other->centerinimage_);
    std::swap(radiusinimage_, other->radiusinimage_);
    std::swap(ballcolor_, other->ballcolor_);
    std::swap(bearingbasedoffsetonfield_, other->bearingbasedoffsetonfield_);
    std::swap(frameinfowhenballwasseen_, other->frameinfowhenballwasseen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BallPercept::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BallPercept_descriptor_;
  metadata.reflection = BallPercept_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoalPercept::kAngleToSeenGoalFieldNumber;
const int GoalPercept::kGoalCentroidFieldNumber;
const int GoalPercept::kNumberOfSeenPostsFieldNumber;
const int GoalPercept::kPostFieldNumber;
#endif  // !_MSC_VER

GoalPercept::GoalPercept()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GoalPercept::InitAsDefaultInstance() {
  goalcentroid_ = const_cast< ::naothmessages::DoubleVector3*>(&::naothmessages::DoubleVector3::default_instance());
}

GoalPercept::GoalPercept(const GoalPercept& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GoalPercept::SharedCtor() {
  _cached_size_ = 0;
  angletoseengoal_ = 0;
  goalcentroid_ = NULL;
  numberofseenposts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoalPercept::~GoalPercept() {
  SharedDtor();
}

void GoalPercept::SharedDtor() {
  if (this != default_instance_) {
    delete goalcentroid_;
  }
}

void GoalPercept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoalPercept::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoalPercept_descriptor_;
}

const GoalPercept& GoalPercept::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Representations_2eproto();  return *default_instance_;
}

GoalPercept* GoalPercept::default_instance_ = NULL;

GoalPercept* GoalPercept::New() const {
  return new GoalPercept;
}

void GoalPercept::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    angletoseengoal_ = 0;
    if (has_goalcentroid()) {
      if (goalcentroid_ != NULL) goalcentroid_->::naothmessages::DoubleVector3::Clear();
    }
    numberofseenposts_ = 0;
  }
  post_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoalPercept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double angleToSeenGoal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angletoseengoal_)));
          set_has_angletoseengoal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_goalCentroid;
        break;
      }
      
      // optional .naothmessages.DoubleVector3 goalCentroid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goalCentroid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_goalcentroid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_numberOfSeenPosts;
        break;
      }
      
      // optional int32 numberOfSeenPosts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numberOfSeenPosts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numberofseenposts_)));
          set_has_numberofseenposts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_post;
        break;
      }
      
      // repeated .naothmessages.GoalPost post = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_post:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_post()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_post;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GoalPercept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double angleToSeenGoal = 1;
  if (has_angletoseengoal()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->angletoseengoal(), output);
  }
  
  // optional .naothmessages.DoubleVector3 goalCentroid = 2;
  if (has_goalcentroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->goalcentroid(), output);
  }
  
  // optional int32 numberOfSeenPosts = 3;
  if (has_numberofseenposts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->numberofseenposts(), output);
  }
  
  // repeated .naothmessages.GoalPost post = 4;
  for (int i = 0; i < this->post_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->post(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GoalPercept::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double angleToSeenGoal = 1;
  if (has_angletoseengoal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->angletoseengoal(), target);
  }
  
  // optional .naothmessages.DoubleVector3 goalCentroid = 2;
  if (has_goalcentroid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->goalcentroid(), target);
  }
  
  // optional int32 numberOfSeenPosts = 3;
  if (has_numberofseenposts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->numberofseenposts(), target);
  }
  
  // repeated .naothmessages.GoalPost post = 4;
  for (int i = 0; i < this->post_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->post(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GoalPercept::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double angleToSeenGoal = 1;
    if (has_angletoseengoal()) {
      total_size += 1 + 8;
    }
    
    // optional .naothmessages.DoubleVector3 goalCentroid = 2;
    if (has_goalcentroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->goalcentroid());
    }
    
    // optional int32 numberOfSeenPosts = 3;
    if (has_numberofseenposts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numberofseenposts());
    }
    
  }
  // repeated .naothmessages.GoalPost post = 4;
  total_size += 1 * this->post_size();
  for (int i = 0; i < this->post_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->post(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoalPercept::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoalPercept* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoalPercept*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoalPercept::MergeFrom(const GoalPercept& from) {
  GOOGLE_CHECK_NE(&from, this);
  post_.MergeFrom(from.post_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_angletoseengoal()) {
      set_angletoseengoal(from.angletoseengoal());
    }
    if (from.has_goalcentroid()) {
      mutable_goalcentroid()->::naothmessages::DoubleVector3::MergeFrom(from.goalcentroid());
    }
    if (from.has_numberofseenposts()) {
      set_numberofseenposts(from.numberofseenposts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoalPercept::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoalPercept::CopyFrom(const GoalPercept& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoalPercept::IsInitialized() const {
  
  if (has_goalcentroid()) {
    if (!this->goalcentroid().IsInitialized()) return false;
  }
  for (int i = 0; i < post_size(); i++) {
    if (!this->post(i).IsInitialized()) return false;
  }
  return true;
}

void GoalPercept::Swap(GoalPercept* other) {
  if (other != this) {
    std::swap(angletoseengoal_, other->angletoseengoal_);
    std::swap(goalcentroid_, other->goalcentroid_);
    std::swap(numberofseenposts_, other->numberofseenposts_);
    post_.Swap(&other->post_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoalPercept::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoalPercept_descriptor_;
  metadata.reflection = GoalPercept_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeadMotionRequest::kIdFieldNumber;
const int HeadMotionRequest::kCameraIDFieldNumber;
const int HeadMotionRequest::kTargetJointPositionFieldNumber;
const int HeadMotionRequest::kTargetPointInImageFieldNumber;
const int HeadMotionRequest::kTargetPointInTheWorldFieldNumber;
const int HeadMotionRequest::kSearchCenterFieldNumber;
const int HeadMotionRequest::kSearchSizeFieldNumber;
const int HeadMotionRequest::kSearchDirectionFieldNumber;
const int HeadMotionRequest::kTargetPointOnTheGroundFieldNumber;
const int HeadMotionRequest::kCoordinateFieldNumber;
#endif  // !_MSC_VER

HeadMotionRequest::HeadMotionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeadMotionRequest::InitAsDefaultInstance() {
  targetjointposition_ = const_cast< ::naothmessages::DoubleVector2*>(&::naothmessages::DoubleVector2::default_instance());
  targetpointinimage_ = const_cast< ::naothmessages::DoubleVector2*>(&::naothmessages::DoubleVector2::default_instance());
  targetpointintheworld_ = const_cast< ::naothmessages::DoubleVector3*>(&::naothmessages::DoubleVector3::default_instance());
  searchcenter_ = const_cast< ::naothmessages::DoubleVector3*>(&::naothmessages::DoubleVector3::default_instance());
  searchsize_ = const_cast< ::naothmessages::DoubleVector3*>(&::naothmessages::DoubleVector3::default_instance());
  targetpointontheground_ = const_cast< ::naothmessages::DoubleVector2*>(&::naothmessages::DoubleVector2::default_instance());
}

HeadMotionRequest::HeadMotionRequest(const HeadMotionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeadMotionRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  cameraid_ = 0u;
  targetjointposition_ = NULL;
  targetpointinimage_ = NULL;
  targetpointintheworld_ = NULL;
  searchcenter_ = NULL;
  searchsize_ = NULL;
  searchdirection_ = false;
  targetpointontheground_ = NULL;
  coordinate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeadMotionRequest::~HeadMotionRequest() {
  SharedDtor();
}

void HeadMotionRequest::SharedDtor() {
  if (this != default_instance_) {
    delete targetjointposition_;
    delete targetpointinimage_;
    delete targetpointintheworld_;
    delete searchcenter_;
    delete searchsize_;
    delete targetpointontheground_;
  }
}

void HeadMotionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeadMotionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeadMotionRequest_descriptor_;
}

const HeadMotionRequest& HeadMotionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Representations_2eproto();  return *default_instance_;
}

HeadMotionRequest* HeadMotionRequest::default_instance_ = NULL;

HeadMotionRequest* HeadMotionRequest::New() const {
  return new HeadMotionRequest;
}

void HeadMotionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    cameraid_ = 0u;
    if (has_targetjointposition()) {
      if (targetjointposition_ != NULL) targetjointposition_->::naothmessages::DoubleVector2::Clear();
    }
    if (has_targetpointinimage()) {
      if (targetpointinimage_ != NULL) targetpointinimage_->::naothmessages::DoubleVector2::Clear();
    }
    if (has_targetpointintheworld()) {
      if (targetpointintheworld_ != NULL) targetpointintheworld_->::naothmessages::DoubleVector3::Clear();
    }
    if (has_searchcenter()) {
      if (searchcenter_ != NULL) searchcenter_->::naothmessages::DoubleVector3::Clear();
    }
    if (has_searchsize()) {
      if (searchsize_ != NULL) searchsize_->::naothmessages::DoubleVector3::Clear();
    }
    searchdirection_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_targetpointontheground()) {
      if (targetpointontheground_ != NULL) targetpointontheground_->::naothmessages::DoubleVector2::Clear();
    }
    coordinate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeadMotionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cameraID;
        break;
      }
      
      // required uint32 cameraID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cameraID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cameraid_)));
          set_has_cameraid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_targetJointPosition;
        break;
      }
      
      // optional .naothmessages.DoubleVector2 targetJointPosition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetJointPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetjointposition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_targetPointInImage;
        break;
      }
      
      // optional .naothmessages.DoubleVector2 targetPointInImage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetPointInImage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpointinimage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_targetPointInTheWorld;
        break;
      }
      
      // optional .naothmessages.DoubleVector3 targetPointInTheWorld = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetPointInTheWorld:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpointintheworld()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_searchCenter;
        break;
      }
      
      // optional .naothmessages.DoubleVector3 searchCenter = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_searchCenter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_searchcenter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_searchSize;
        break;
      }
      
      // optional .naothmessages.DoubleVector3 searchSize = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_searchSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_searchsize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_searchDirection;
        break;
      }
      
      // optional bool searchDirection = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_searchDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &searchdirection_)));
          set_has_searchdirection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_targetPointOnTheGround;
        break;
      }
      
      // optional .naothmessages.DoubleVector2 targetPointOnTheGround = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetPointOnTheGround:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpointontheground()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_coordinate;
        break;
      }
      
      // optional uint32 coordinate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coordinate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coordinate_)));
          set_has_coordinate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeadMotionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 cameraID = 2;
  if (has_cameraid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cameraid(), output);
  }
  
  // optional .naothmessages.DoubleVector2 targetJointPosition = 3;
  if (has_targetjointposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->targetjointposition(), output);
  }
  
  // optional .naothmessages.DoubleVector2 targetPointInImage = 4;
  if (has_targetpointinimage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->targetpointinimage(), output);
  }
  
  // optional .naothmessages.DoubleVector3 targetPointInTheWorld = 5;
  if (has_targetpointintheworld()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->targetpointintheworld(), output);
  }
  
  // optional .naothmessages.DoubleVector3 searchCenter = 6;
  if (has_searchcenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->searchcenter(), output);
  }
  
  // optional .naothmessages.DoubleVector3 searchSize = 7;
  if (has_searchsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->searchsize(), output);
  }
  
  // optional bool searchDirection = 8;
  if (has_searchdirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->searchdirection(), output);
  }
  
  // optional .naothmessages.DoubleVector2 targetPointOnTheGround = 9;
  if (has_targetpointontheground()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->targetpointontheground(), output);
  }
  
  // optional uint32 coordinate = 10;
  if (has_coordinate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->coordinate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeadMotionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 cameraID = 2;
  if (has_cameraid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cameraid(), target);
  }
  
  // optional .naothmessages.DoubleVector2 targetJointPosition = 3;
  if (has_targetjointposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->targetjointposition(), target);
  }
  
  // optional .naothmessages.DoubleVector2 targetPointInImage = 4;
  if (has_targetpointinimage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->targetpointinimage(), target);
  }
  
  // optional .naothmessages.DoubleVector3 targetPointInTheWorld = 5;
  if (has_targetpointintheworld()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->targetpointintheworld(), target);
  }
  
  // optional .naothmessages.DoubleVector3 searchCenter = 6;
  if (has_searchcenter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->searchcenter(), target);
  }
  
  // optional .naothmessages.DoubleVector3 searchSize = 7;
  if (has_searchsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->searchsize(), target);
  }
  
  // optional bool searchDirection = 8;
  if (has_searchdirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->searchdirection(), target);
  }
  
  // optional .naothmessages.DoubleVector2 targetPointOnTheGround = 9;
  if (has_targetpointontheground()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->targetpointontheground(), target);
  }
  
  // optional uint32 coordinate = 10;
  if (has_coordinate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->coordinate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeadMotionRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 cameraID = 2;
    if (has_cameraid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cameraid());
    }
    
    // optional .naothmessages.DoubleVector2 targetJointPosition = 3;
    if (has_targetjointposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetjointposition());
    }
    
    // optional .naothmessages.DoubleVector2 targetPointInImage = 4;
    if (has_targetpointinimage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpointinimage());
    }
    
    // optional .naothmessages.DoubleVector3 targetPointInTheWorld = 5;
    if (has_targetpointintheworld()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpointintheworld());
    }
    
    // optional .naothmessages.DoubleVector3 searchCenter = 6;
    if (has_searchcenter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->searchcenter());
    }
    
    // optional .naothmessages.DoubleVector3 searchSize = 7;
    if (has_searchsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->searchsize());
    }
    
    // optional bool searchDirection = 8;
    if (has_searchdirection()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .naothmessages.DoubleVector2 targetPointOnTheGround = 9;
    if (has_targetpointontheground()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpointontheground());
    }
    
    // optional uint32 coordinate = 10;
    if (has_coordinate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coordinate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeadMotionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeadMotionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeadMotionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeadMotionRequest::MergeFrom(const HeadMotionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cameraid()) {
      set_cameraid(from.cameraid());
    }
    if (from.has_targetjointposition()) {
      mutable_targetjointposition()->::naothmessages::DoubleVector2::MergeFrom(from.targetjointposition());
    }
    if (from.has_targetpointinimage()) {
      mutable_targetpointinimage()->::naothmessages::DoubleVector2::MergeFrom(from.targetpointinimage());
    }
    if (from.has_targetpointintheworld()) {
      mutable_targetpointintheworld()->::naothmessages::DoubleVector3::MergeFrom(from.targetpointintheworld());
    }
    if (from.has_searchcenter()) {
      mutable_searchcenter()->::naothmessages::DoubleVector3::MergeFrom(from.searchcenter());
    }
    if (from.has_searchsize()) {
      mutable_searchsize()->::naothmessages::DoubleVector3::MergeFrom(from.searchsize());
    }
    if (from.has_searchdirection()) {
      set_searchdirection(from.searchdirection());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_targetpointontheground()) {
      mutable_targetpointontheground()->::naothmessages::DoubleVector2::MergeFrom(from.targetpointontheground());
    }
    if (from.has_coordinate()) {
      set_coordinate(from.coordinate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeadMotionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeadMotionRequest::CopyFrom(const HeadMotionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeadMotionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_targetjointposition()) {
    if (!this->targetjointposition().IsInitialized()) return false;
  }
  if (has_targetpointinimage()) {
    if (!this->targetpointinimage().IsInitialized()) return false;
  }
  if (has_targetpointintheworld()) {
    if (!this->targetpointintheworld().IsInitialized()) return false;
  }
  if (has_searchcenter()) {
    if (!this->searchcenter().IsInitialized()) return false;
  }
  if (has_searchsize()) {
    if (!this->searchsize().IsInitialized()) return false;
  }
  if (has_targetpointontheground()) {
    if (!this->targetpointontheground().IsInitialized()) return false;
  }
  return true;
}

void HeadMotionRequest::Swap(HeadMotionRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cameraid_, other->cameraid_);
    std::swap(targetjointposition_, other->targetjointposition_);
    std::swap(targetpointinimage_, other->targetpointinimage_);
    std::swap(targetpointintheworld_, other->targetpointintheworld_);
    std::swap(searchcenter_, other->searchcenter_);
    std::swap(searchsize_, other->searchsize_);
    std::swap(searchdirection_, other->searchdirection_);
    std::swap(targetpointontheground_, other->targetpointontheground_);
    std::swap(coordinate_, other->coordinate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeadMotionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeadMotionRequest_descriptor_;
  metadata.reflection = HeadMotionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StepControlRequest::kStepIDFieldNumber;
const int StepControlRequest::kMoveLeftFootFieldNumber;
const int StepControlRequest::kTargetFieldNumber;
const int StepControlRequest::kTimeFieldNumber;
const int StepControlRequest::kSpeedDirectionFieldNumber;
#endif  // !_MSC_VER

StepControlRequest::StepControlRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StepControlRequest::InitAsDefaultInstance() {
  target_ = const_cast< ::naothmessages::Pose2D*>(&::naothmessages::Pose2D::default_instance());
}

StepControlRequest::StepControlRequest(const StepControlRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StepControlRequest::SharedCtor() {
  _cached_size_ = 0;
  stepid_ = 0u;
  moveleftfoot_ = false;
  target_ = NULL;
  time_ = 0u;
  speeddirection_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StepControlRequest::~StepControlRequest() {
  SharedDtor();
}

void StepControlRequest::SharedDtor() {
  if (this != default_instance_) {
    delete target_;
  }
}

void StepControlRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StepControlRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StepControlRequest_descriptor_;
}

const StepControlRequest& StepControlRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Representations_2eproto();  return *default_instance_;
}

StepControlRequest* StepControlRequest::default_instance_ = NULL;

StepControlRequest* StepControlRequest::New() const {
  return new StepControlRequest;
}

void StepControlRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stepid_ = 0u;
    moveleftfoot_ = false;
    if (has_target()) {
      if (target_ != NULL) target_->::naothmessages::Pose2D::Clear();
    }
    time_ = 0u;
    speeddirection_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StepControlRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 stepID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moveLeftFoot;
        break;
      }
      
      // required bool moveLeftFoot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveLeftFoot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &moveleftfoot_)));
          set_has_moveleftfoot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_target;
        break;
      }
      
      // required .naothmessages.Pose2D target = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }
      
      // required uint32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_speedDirection;
        break;
      }
      
      // required double speedDirection = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_speedDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speeddirection_)));
          set_has_speeddirection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StepControlRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 stepID = 1;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stepid(), output);
  }
  
  // required bool moveLeftFoot = 2;
  if (has_moveleftfoot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->moveleftfoot(), output);
  }
  
  // required .naothmessages.Pose2D target = 3;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->target(), output);
  }
  
  // required uint32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }
  
  // required double speedDirection = 5;
  if (has_speeddirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->speeddirection(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StepControlRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 stepID = 1;
  if (has_stepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stepid(), target);
  }
  
  // required bool moveLeftFoot = 2;
  if (has_moveleftfoot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->moveleftfoot(), target);
  }
  
  // required .naothmessages.Pose2D target = 3;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->target(), target);
  }
  
  // required uint32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }
  
  // required double speedDirection = 5;
  if (has_speeddirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->speeddirection(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StepControlRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 stepID = 1;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stepid());
    }
    
    // required bool moveLeftFoot = 2;
    if (has_moveleftfoot()) {
      total_size += 1 + 1;
    }
    
    // required .naothmessages.Pose2D target = 3;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }
    
    // required uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
    // required double speedDirection = 5;
    if (has_speeddirection()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StepControlRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StepControlRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StepControlRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StepControlRequest::MergeFrom(const StepControlRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
    if (from.has_moveleftfoot()) {
      set_moveleftfoot(from.moveleftfoot());
    }
    if (from.has_target()) {
      mutable_target()->::naothmessages::Pose2D::MergeFrom(from.target());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_speeddirection()) {
      set_speeddirection(from.speeddirection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StepControlRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepControlRequest::CopyFrom(const StepControlRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepControlRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_target()) {
    if (!this->target().IsInitialized()) return false;
  }
  return true;
}

void StepControlRequest::Swap(StepControlRequest* other) {
  if (other != this) {
    std::swap(stepid_, other->stepid_);
    std::swap(moveleftfoot_, other->moveleftfoot_);
    std::swap(target_, other->target_);
    std::swap(time_, other->time_);
    std::swap(speeddirection_, other->speeddirection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StepControlRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StepControlRequest_descriptor_;
  metadata.reflection = StepControlRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WalkRequest::kCoordinateFieldNumber;
const int WalkRequest::kCharacterFieldNumber;
const int WalkRequest::kTargetFieldNumber;
const int WalkRequest::kStepControlFieldNumber;
const int WalkRequest::kOffsetFieldNumber;
#endif  // !_MSC_VER

WalkRequest::WalkRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WalkRequest::InitAsDefaultInstance() {
  target_ = const_cast< ::naothmessages::Pose2D*>(&::naothmessages::Pose2D::default_instance());
  stepcontrol_ = const_cast< ::naothmessages::StepControlRequest*>(&::naothmessages::StepControlRequest::default_instance());
  offset_ = const_cast< ::naothmessages::Pose2D*>(&::naothmessages::Pose2D::default_instance());
}

WalkRequest::WalkRequest(const WalkRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WalkRequest::SharedCtor() {
  _cached_size_ = 0;
  coordinate_ = 0u;
  character_ = 0;
  target_ = NULL;
  stepcontrol_ = NULL;
  offset_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WalkRequest::~WalkRequest() {
  SharedDtor();
}

void WalkRequest::SharedDtor() {
  if (this != default_instance_) {
    delete target_;
    delete stepcontrol_;
    delete offset_;
  }
}

void WalkRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WalkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WalkRequest_descriptor_;
}

const WalkRequest& WalkRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Representations_2eproto();  return *default_instance_;
}

WalkRequest* WalkRequest::default_instance_ = NULL;

WalkRequest* WalkRequest::New() const {
  return new WalkRequest;
}

void WalkRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    coordinate_ = 0u;
    character_ = 0;
    if (has_target()) {
      if (target_ != NULL) target_->::naothmessages::Pose2D::Clear();
    }
    if (has_stepcontrol()) {
      if (stepcontrol_ != NULL) stepcontrol_->::naothmessages::StepControlRequest::Clear();
    }
    if (has_offset()) {
      if (offset_ != NULL) offset_->::naothmessages::Pose2D::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WalkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 coordinate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coordinate_)));
          set_has_coordinate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_character;
        break;
      }
      
      // required double character = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_character:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &character_)));
          set_has_character();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_target;
        break;
      }
      
      // required .naothmessages.Pose2D target = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stepControl;
        break;
      }
      
      // optional .naothmessages.StepControlRequest stepControl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stepControl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stepcontrol()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_offset;
        break;
      }
      
      // required .naothmessages.Pose2D offset = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WalkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 coordinate = 1;
  if (has_coordinate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->coordinate(), output);
  }
  
  // required double character = 2;
  if (has_character()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->character(), output);
  }
  
  // required .naothmessages.Pose2D target = 3;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->target(), output);
  }
  
  // optional .naothmessages.StepControlRequest stepControl = 4;
  if (has_stepcontrol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stepcontrol(), output);
  }
  
  // required .naothmessages.Pose2D offset = 5;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->offset(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WalkRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 coordinate = 1;
  if (has_coordinate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->coordinate(), target);
  }
  
  // required double character = 2;
  if (has_character()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->character(), target);
  }
  
  // required .naothmessages.Pose2D target = 3;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->target(), target);
  }
  
  // optional .naothmessages.StepControlRequest stepControl = 4;
  if (has_stepcontrol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stepcontrol(), target);
  }
  
  // required .naothmessages.Pose2D offset = 5;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->offset(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WalkRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 coordinate = 1;
    if (has_coordinate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coordinate());
    }
    
    // required double character = 2;
    if (has_character()) {
      total_size += 1 + 8;
    }
    
    // required .naothmessages.Pose2D target = 3;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }
    
    // optional .naothmessages.StepControlRequest stepControl = 4;
    if (has_stepcontrol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stepcontrol());
    }
    
    // required .naothmessages.Pose2D offset = 5;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->offset());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WalkRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WalkRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WalkRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WalkRequest::MergeFrom(const WalkRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coordinate()) {
      set_coordinate(from.coordinate());
    }
    if (from.has_character()) {
      set_character(from.character());
    }
    if (from.has_target()) {
      mutable_target()->::naothmessages::Pose2D::MergeFrom(from.target());
    }
    if (from.has_stepcontrol()) {
      mutable_stepcontrol()->::naothmessages::StepControlRequest::MergeFrom(from.stepcontrol());
    }
    if (from.has_offset()) {
      mutable_offset()->::naothmessages::Pose2D::MergeFrom(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WalkRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WalkRequest::CopyFrom(const WalkRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WalkRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;
  
  if (has_target()) {
    if (!this->target().IsInitialized()) return false;
  }
  if (has_stepcontrol()) {
    if (!this->stepcontrol().IsInitialized()) return false;
  }
  if (has_offset()) {
    if (!this->offset().IsInitialized()) return false;
  }
  return true;
}

void WalkRequest::Swap(WalkRequest* other) {
  if (other != this) {
    std::swap(coordinate_, other->coordinate_);
    std::swap(character_, other->character_);
    std::swap(target_, other->target_);
    std::swap(stepcontrol_, other->stepcontrol_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WalkRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WalkRequest_descriptor_;
  metadata.reflection = WalkRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickRequest::kKickPointFieldNumber;
const int KickRequest::kKickDirectionFieldNumber;
const int KickRequest::kKickFootFieldNumber;
const int KickRequest::kFinishKickFieldNumber;
#endif  // !_MSC_VER

KickRequest::KickRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KickRequest::InitAsDefaultInstance() {
  kickpoint_ = const_cast< ::naothmessages::DoubleVector3*>(&::naothmessages::DoubleVector3::default_instance());
}

KickRequest::KickRequest(const KickRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KickRequest::SharedCtor() {
  _cached_size_ = 0;
  kickpoint_ = NULL;
  kickdirection_ = 0;
  kickfoot_ = 0;
  finishkick_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickRequest::~KickRequest() {
  SharedDtor();
}

void KickRequest::SharedDtor() {
  if (this != default_instance_) {
    delete kickpoint_;
  }
}

void KickRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickRequest_descriptor_;
}

const KickRequest& KickRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Representations_2eproto();  return *default_instance_;
}

KickRequest* KickRequest::default_instance_ = NULL;

KickRequest* KickRequest::New() const {
  return new KickRequest;
}

void KickRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_kickpoint()) {
      if (kickpoint_ != NULL) kickpoint_->::naothmessages::DoubleVector3::Clear();
    }
    kickdirection_ = 0;
    kickfoot_ = 0;
    finishkick_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .naothmessages.DoubleVector3 kickPoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kickpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_kickDirection;
        break;
      }
      
      // required double kickDirection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_kickDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kickdirection_)));
          set_has_kickdirection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kickFoot;
        break;
      }
      
      // required int32 kickFoot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kickFoot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kickfoot_)));
          set_has_kickfoot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_finishKick;
        break;
      }
      
      // required bool finishKick = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finishKick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finishkick_)));
          set_has_finishkick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KickRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .naothmessages.DoubleVector3 kickPoint = 1;
  if (has_kickpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->kickpoint(), output);
  }
  
  // required double kickDirection = 2;
  if (has_kickdirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->kickdirection(), output);
  }
  
  // required int32 kickFoot = 3;
  if (has_kickfoot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->kickfoot(), output);
  }
  
  // required bool finishKick = 4;
  if (has_finishkick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->finishkick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KickRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .naothmessages.DoubleVector3 kickPoint = 1;
  if (has_kickpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->kickpoint(), target);
  }
  
  // required double kickDirection = 2;
  if (has_kickdirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->kickdirection(), target);
  }
  
  // required int32 kickFoot = 3;
  if (has_kickfoot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->kickfoot(), target);
  }
  
  // required bool finishKick = 4;
  if (has_finishkick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->finishkick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KickRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .naothmessages.DoubleVector3 kickPoint = 1;
    if (has_kickpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kickpoint());
    }
    
    // required double kickDirection = 2;
    if (has_kickdirection()) {
      total_size += 1 + 8;
    }
    
    // required int32 kickFoot = 3;
    if (has_kickfoot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kickfoot());
    }
    
    // required bool finishKick = 4;
    if (has_finishkick()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickRequest::MergeFrom(const KickRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kickpoint()) {
      mutable_kickpoint()->::naothmessages::DoubleVector3::MergeFrom(from.kickpoint());
    }
    if (from.has_kickdirection()) {
      set_kickdirection(from.kickdirection());
    }
    if (from.has_kickfoot()) {
      set_kickfoot(from.kickfoot());
    }
    if (from.has_finishkick()) {
      set_finishkick(from.finishkick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickRequest::CopyFrom(const KickRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_kickpoint()) {
    if (!this->kickpoint().IsInitialized()) return false;
  }
  return true;
}

void KickRequest::Swap(KickRequest* other) {
  if (other != this) {
    std::swap(kickpoint_, other->kickpoint_);
    std::swap(kickdirection_, other->kickdirection_);
    std::swap(kickfoot_, other->kickfoot_);
    std::swap(finishkick_, other->finishkick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickRequest_descriptor_;
  metadata.reflection = KickRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MotionRequest::kIdFieldNumber;
const int MotionRequest::kTimeFieldNumber;
const int MotionRequest::kForcedFieldNumber;
const int MotionRequest::kWalkRequestFieldNumber;
const int MotionRequest::kStarndardStandFieldNumber;
const int MotionRequest::kKickRequestFieldNumber;
const int MotionRequest::kStandHeightFieldNumber;
const int MotionRequest::kCalibrateFootTouchDetectorFieldNumber;
const int MotionRequest::kCognitionFrameNumberFieldNumber;
#endif  // !_MSC_VER

MotionRequest::MotionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MotionRequest::InitAsDefaultInstance() {
  walkrequest_ = const_cast< ::naothmessages::WalkRequest*>(&::naothmessages::WalkRequest::default_instance());
  kickrequest_ = const_cast< ::naothmessages::KickRequest*>(&::naothmessages::KickRequest::default_instance());
}

MotionRequest::MotionRequest(const MotionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MotionRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  time_ = 0u;
  forced_ = false;
  walkrequest_ = NULL;
  starndardstand_ = false;
  kickrequest_ = NULL;
  standheight_ = 0;
  calibratefoottouchdetector_ = false;
  cognitionframenumber_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MotionRequest::~MotionRequest() {
  SharedDtor();
}

void MotionRequest::SharedDtor() {
  if (this != default_instance_) {
    delete walkrequest_;
    delete kickrequest_;
  }
}

void MotionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MotionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MotionRequest_descriptor_;
}

const MotionRequest& MotionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Representations_2eproto();  return *default_instance_;
}

MotionRequest* MotionRequest::default_instance_ = NULL;

MotionRequest* MotionRequest::New() const {
  return new MotionRequest;
}

void MotionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    time_ = 0u;
    forced_ = false;
    if (has_walkrequest()) {
      if (walkrequest_ != NULL) walkrequest_->::naothmessages::WalkRequest::Clear();
    }
    starndardstand_ = false;
    if (has_kickrequest()) {
      if (kickrequest_ != NULL) kickrequest_->::naothmessages::KickRequest::Clear();
    }
    standheight_ = 0;
    calibratefoottouchdetector_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cognitionframenumber_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MotionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // required uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_forced;
        break;
      }
      
      // required bool forced = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forced:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forced_)));
          set_has_forced();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_walkRequest;
        break;
      }
      
      // optional .naothmessages.WalkRequest walkRequest = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_walkRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_walkrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_starndardStand;
        break;
      }
      
      // optional bool starndardStand = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starndardStand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &starndardstand_)));
          set_has_starndardstand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_kickRequest;
        break;
      }
      
      // optional .naothmessages.KickRequest kickRequest = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kickRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kickrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_standHeight;
        break;
      }
      
      // optional double standHeight = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_standHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &standheight_)));
          set_has_standheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_calibrateFootTouchDetector;
        break;
      }
      
      // optional bool calibrateFootTouchDetector = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_calibrateFootTouchDetector:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &calibratefoottouchdetector_)));
          set_has_calibratefoottouchdetector();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cognitionFrameNumber;
        break;
      }
      
      // optional uint32 cognitionFrameNumber = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cognitionFrameNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cognitionframenumber_)));
          set_has_cognitionframenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MotionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }
  
  // required bool forced = 3;
  if (has_forced()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->forced(), output);
  }
  
  // optional .naothmessages.WalkRequest walkRequest = 4;
  if (has_walkrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->walkrequest(), output);
  }
  
  // optional bool starndardStand = 5;
  if (has_starndardstand()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->starndardstand(), output);
  }
  
  // optional .naothmessages.KickRequest kickRequest = 6;
  if (has_kickrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->kickrequest(), output);
  }
  
  // optional double standHeight = 7;
  if (has_standheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->standheight(), output);
  }
  
  // optional bool calibrateFootTouchDetector = 8;
  if (has_calibratefoottouchdetector()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->calibratefoottouchdetector(), output);
  }
  
  // optional uint32 cognitionFrameNumber = 9;
  if (has_cognitionframenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->cognitionframenumber(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MotionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }
  
  // required bool forced = 3;
  if (has_forced()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->forced(), target);
  }
  
  // optional .naothmessages.WalkRequest walkRequest = 4;
  if (has_walkrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->walkrequest(), target);
  }
  
  // optional bool starndardStand = 5;
  if (has_starndardstand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->starndardstand(), target);
  }
  
  // optional .naothmessages.KickRequest kickRequest = 6;
  if (has_kickrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->kickrequest(), target);
  }
  
  // optional double standHeight = 7;
  if (has_standheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->standheight(), target);
  }
  
  // optional bool calibrateFootTouchDetector = 8;
  if (has_calibratefoottouchdetector()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->calibratefoottouchdetector(), target);
  }
  
  // optional uint32 cognitionFrameNumber = 9;
  if (has_cognitionframenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->cognitionframenumber(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MotionRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
    // required bool forced = 3;
    if (has_forced()) {
      total_size += 1 + 1;
    }
    
    // optional .naothmessages.WalkRequest walkRequest = 4;
    if (has_walkrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->walkrequest());
    }
    
    // optional bool starndardStand = 5;
    if (has_starndardstand()) {
      total_size += 1 + 1;
    }
    
    // optional .naothmessages.KickRequest kickRequest = 6;
    if (has_kickrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kickrequest());
    }
    
    // optional double standHeight = 7;
    if (has_standheight()) {
      total_size += 1 + 8;
    }
    
    // optional bool calibrateFootTouchDetector = 8;
    if (has_calibratefoottouchdetector()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 cognitionFrameNumber = 9;
    if (has_cognitionframenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cognitionframenumber());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MotionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MotionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MotionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MotionRequest::MergeFrom(const MotionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_forced()) {
      set_forced(from.forced());
    }
    if (from.has_walkrequest()) {
      mutable_walkrequest()->::naothmessages::WalkRequest::MergeFrom(from.walkrequest());
    }
    if (from.has_starndardstand()) {
      set_starndardstand(from.starndardstand());
    }
    if (from.has_kickrequest()) {
      mutable_kickrequest()->::naothmessages::KickRequest::MergeFrom(from.kickrequest());
    }
    if (from.has_standheight()) {
      set_standheight(from.standheight());
    }
    if (from.has_calibratefoottouchdetector()) {
      set_calibratefoottouchdetector(from.calibratefoottouchdetector());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cognitionframenumber()) {
      set_cognitionframenumber(from.cognitionframenumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MotionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionRequest::CopyFrom(const MotionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_walkrequest()) {
    if (!this->walkrequest().IsInitialized()) return false;
  }
  if (has_kickrequest()) {
    if (!this->kickrequest().IsInitialized()) return false;
  }
  return true;
}

void MotionRequest::Swap(MotionRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(time_, other->time_);
    std::swap(forced_, other->forced_);
    std::swap(walkrequest_, other->walkrequest_);
    std::swap(starndardstand_, other->starndardstand_);
    std::swap(kickrequest_, other->kickrequest_);
    std::swap(standheight_, other->standheight_);
    std::swap(calibratefoottouchdetector_, other->calibratefoottouchdetector_);
    std::swap(cognitionframenumber_, other->cognitionframenumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MotionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MotionRequest_descriptor_;
  metadata.reflection = MotionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LinePercept::kLinesFieldNumber;
const int LinePercept::kIntersectionsFieldNumber;
const int LinePercept::kMiddleCircleCenterFieldNumber;
#endif  // !_MSC_VER

LinePercept::LinePercept()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LinePercept::InitAsDefaultInstance() {
  middlecirclecenter_ = const_cast< ::naothmessages::DoubleVector2*>(&::naothmessages::DoubleVector2::default_instance());
}

LinePercept::LinePercept(const LinePercept& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LinePercept::SharedCtor() {
  _cached_size_ = 0;
  middlecirclecenter_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LinePercept::~LinePercept() {
  SharedDtor();
}

void LinePercept::SharedDtor() {
  if (this != default_instance_) {
    delete middlecirclecenter_;
  }
}

void LinePercept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinePercept::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinePercept_descriptor_;
}

const LinePercept& LinePercept::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Representations_2eproto();  return *default_instance_;
}

LinePercept* LinePercept::default_instance_ = NULL;

LinePercept* LinePercept::New() const {
  return new LinePercept;
}

void LinePercept::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_middlecirclecenter()) {
      if (middlecirclecenter_ != NULL) middlecirclecenter_->::naothmessages::DoubleVector2::Clear();
    }
  }
  lines_.Clear();
  intersections_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LinePercept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .naothmessages.FieldLineSegment lines = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lines()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_lines;
        if (input->ExpectTag(18)) goto parse_intersections;
        break;
      }
      
      // repeated .naothmessages.Intersection intersections = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_intersections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_intersections()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_intersections;
        if (input->ExpectTag(26)) goto parse_middleCircleCenter;
        break;
      }
      
      // optional .naothmessages.DoubleVector2 middleCircleCenter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_middleCircleCenter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_middlecirclecenter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LinePercept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .naothmessages.FieldLineSegment lines = 1;
  for (int i = 0; i < this->lines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lines(i), output);
  }
  
  // repeated .naothmessages.Intersection intersections = 2;
  for (int i = 0; i < this->intersections_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->intersections(i), output);
  }
  
  // optional .naothmessages.DoubleVector2 middleCircleCenter = 3;
  if (has_middlecirclecenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->middlecirclecenter(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LinePercept::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .naothmessages.FieldLineSegment lines = 1;
  for (int i = 0; i < this->lines_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lines(i), target);
  }
  
  // repeated .naothmessages.Intersection intersections = 2;
  for (int i = 0; i < this->intersections_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->intersections(i), target);
  }
  
  // optional .naothmessages.DoubleVector2 middleCircleCenter = 3;
  if (has_middlecirclecenter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->middlecirclecenter(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LinePercept::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .naothmessages.DoubleVector2 middleCircleCenter = 3;
    if (has_middlecirclecenter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->middlecirclecenter());
    }
    
  }
  // repeated .naothmessages.FieldLineSegment lines = 1;
  total_size += 1 * this->lines_size();
  for (int i = 0; i < this->lines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lines(i));
  }
  
  // repeated .naothmessages.Intersection intersections = 2;
  total_size += 1 * this->intersections_size();
  for (int i = 0; i < this->intersections_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->intersections(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinePercept::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LinePercept* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LinePercept*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LinePercept::MergeFrom(const LinePercept& from) {
  GOOGLE_CHECK_NE(&from, this);
  lines_.MergeFrom(from.lines_);
  intersections_.MergeFrom(from.intersections_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_middlecirclecenter()) {
      mutable_middlecirclecenter()->::naothmessages::DoubleVector2::MergeFrom(from.middlecirclecenter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LinePercept::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinePercept::CopyFrom(const LinePercept& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinePercept::IsInitialized() const {
  
  for (int i = 0; i < lines_size(); i++) {
    if (!this->lines(i).IsInitialized()) return false;
  }
  for (int i = 0; i < intersections_size(); i++) {
    if (!this->intersections(i).IsInitialized()) return false;
  }
  if (has_middlecirclecenter()) {
    if (!this->middlecirclecenter().IsInitialized()) return false;
  }
  return true;
}

void LinePercept::Swap(LinePercept* other) {
  if (other != this) {
    lines_.Swap(&other->lines_);
    intersections_.Swap(&other->intersections_);
    std::swap(middlecirclecenter_, other->middlecirclecenter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LinePercept::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LinePercept_descriptor_;
  metadata.reflection = LinePercept_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScanLineEndPoint::kPosInImageFieldNumber;
const int ScanLineEndPoint::kPosOnFieldFieldNumber;
const int ScanLineEndPoint::kColorFieldNumber;
const int ScanLineEndPoint::kScanLineIDFieldNumber;
#endif  // !_MSC_VER

ScanLineEndPoint::ScanLineEndPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScanLineEndPoint::InitAsDefaultInstance() {
  posinimage_ = const_cast< ::naothmessages::IntVector2*>(&::naothmessages::IntVector2::default_instance());
  posonfield_ = const_cast< ::naothmessages::DoubleVector2*>(&::naothmessages::DoubleVector2::default_instance());
}

ScanLineEndPoint::ScanLineEndPoint(const ScanLineEndPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScanLineEndPoint::SharedCtor() {
  _cached_size_ = 0;
  posinimage_ = NULL;
  posonfield_ = NULL;
  color_ = 0;
  scanlineid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScanLineEndPoint::~ScanLineEndPoint() {
  SharedDtor();
}

void ScanLineEndPoint::SharedDtor() {
  if (this != default_instance_) {
    delete posinimage_;
    delete posonfield_;
  }
}

void ScanLineEndPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanLineEndPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanLineEndPoint_descriptor_;
}

const ScanLineEndPoint& ScanLineEndPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Representations_2eproto();  return *default_instance_;
}

ScanLineEndPoint* ScanLineEndPoint::default_instance_ = NULL;

ScanLineEndPoint* ScanLineEndPoint::New() const {
  return new ScanLineEndPoint;
}

void ScanLineEndPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_posinimage()) {
      if (posinimage_ != NULL) posinimage_->::naothmessages::IntVector2::Clear();
    }
    if (has_posonfield()) {
      if (posonfield_ != NULL) posonfield_->::naothmessages::DoubleVector2::Clear();
    }
    color_ = 0;
    scanlineid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScanLineEndPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .naothmessages.IntVector2 posInImage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_posinimage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_posOnField;
        break;
      }
      
      // required .naothmessages.DoubleVector2 posOnField = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_posOnField:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_posonfield()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_color;
        break;
      }
      
      // required .naothmessages.Color color = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (naothmessages::Color_IsValid(value)) {
            set_color(static_cast< naothmessages::Color >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ScanLineID;
        break;
      }
      
      // required uint32 ScanLineID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ScanLineID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scanlineid_)));
          set_has_scanlineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScanLineEndPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .naothmessages.IntVector2 posInImage = 1;
  if (has_posinimage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->posinimage(), output);
  }
  
  // required .naothmessages.DoubleVector2 posOnField = 2;
  if (has_posonfield()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->posonfield(), output);
  }
  
  // required .naothmessages.Color color = 3;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->color(), output);
  }
  
  // required uint32 ScanLineID = 4;
  if (has_scanlineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scanlineid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScanLineEndPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .naothmessages.IntVector2 posInImage = 1;
  if (has_posinimage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->posinimage(), target);
  }
  
  // required .naothmessages.DoubleVector2 posOnField = 2;
  if (has_posonfield()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->posonfield(), target);
  }
  
  // required .naothmessages.Color color = 3;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->color(), target);
  }
  
  // required uint32 ScanLineID = 4;
  if (has_scanlineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scanlineid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScanLineEndPoint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .naothmessages.IntVector2 posInImage = 1;
    if (has_posinimage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->posinimage());
    }
    
    // required .naothmessages.DoubleVector2 posOnField = 2;
    if (has_posonfield()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->posonfield());
    }
    
    // required .naothmessages.Color color = 3;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }
    
    // required uint32 ScanLineID = 4;
    if (has_scanlineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scanlineid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanLineEndPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScanLineEndPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScanLineEndPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScanLineEndPoint::MergeFrom(const ScanLineEndPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_posinimage()) {
      mutable_posinimage()->::naothmessages::IntVector2::MergeFrom(from.posinimage());
    }
    if (from.has_posonfield()) {
      mutable_posonfield()->::naothmessages::DoubleVector2::MergeFrom(from.posonfield());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_scanlineid()) {
      set_scanlineid(from.scanlineid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScanLineEndPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanLineEndPoint::CopyFrom(const ScanLineEndPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanLineEndPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_posinimage()) {
    if (!this->posinimage().IsInitialized()) return false;
  }
  if (has_posonfield()) {
    if (!this->posonfield().IsInitialized()) return false;
  }
  return true;
}

void ScanLineEndPoint::Swap(ScanLineEndPoint* other) {
  if (other != this) {
    std::swap(posinimage_, other->posinimage_);
    std::swap(posonfield_, other->posonfield_);
    std::swap(color_, other->color_);
    std::swap(scanlineid_, other->scanlineid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScanLineEndPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScanLineEndPoint_descriptor_;
  metadata.reflection = ScanLineEndPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScanLineEdgelPercept::kEndPointsFieldNumber;
#endif  // !_MSC_VER

ScanLineEdgelPercept::ScanLineEdgelPercept()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScanLineEdgelPercept::InitAsDefaultInstance() {
}

ScanLineEdgelPercept::ScanLineEdgelPercept(const ScanLineEdgelPercept& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScanLineEdgelPercept::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScanLineEdgelPercept::~ScanLineEdgelPercept() {
  SharedDtor();
}

void ScanLineEdgelPercept::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScanLineEdgelPercept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanLineEdgelPercept::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanLineEdgelPercept_descriptor_;
}

const ScanLineEdgelPercept& ScanLineEdgelPercept::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Representations_2eproto();  return *default_instance_;
}

ScanLineEdgelPercept* ScanLineEdgelPercept::default_instance_ = NULL;

ScanLineEdgelPercept* ScanLineEdgelPercept::New() const {
  return new ScanLineEdgelPercept;
}

void ScanLineEdgelPercept::Clear() {
  endpoints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScanLineEdgelPercept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .naothmessages.ScanLineEndPoint endPoints = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endPoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_endpoints()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_endPoints;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScanLineEdgelPercept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .naothmessages.ScanLineEndPoint endPoints = 2;
  for (int i = 0; i < this->endpoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->endpoints(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScanLineEdgelPercept::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .naothmessages.ScanLineEndPoint endPoints = 2;
  for (int i = 0; i < this->endpoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->endpoints(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScanLineEdgelPercept::ByteSize() const {
  int total_size = 0;
  
  // repeated .naothmessages.ScanLineEndPoint endPoints = 2;
  total_size += 1 * this->endpoints_size();
  for (int i = 0; i < this->endpoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->endpoints(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanLineEdgelPercept::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScanLineEdgelPercept* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScanLineEdgelPercept*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScanLineEdgelPercept::MergeFrom(const ScanLineEdgelPercept& from) {
  GOOGLE_CHECK_NE(&from, this);
  endpoints_.MergeFrom(from.endpoints_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScanLineEdgelPercept::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanLineEdgelPercept::CopyFrom(const ScanLineEdgelPercept& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanLineEdgelPercept::IsInitialized() const {
  
  for (int i = 0; i < endpoints_size(); i++) {
    if (!this->endpoints(i).IsInitialized()) return false;
  }
  return true;
}

void ScanLineEdgelPercept::Swap(ScanLineEdgelPercept* other) {
  if (other != this) {
    endpoints_.Swap(&other->endpoints_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScanLineEdgelPercept::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScanLineEdgelPercept_descriptor_;
  metadata.reflection = ScanLineEdgelPercept_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FSRData::kForceFieldNumber;
const int FSRData::kDataFieldNumber;
const int FSRData::kValidFieldNumber;
#endif  // !_MSC_VER

FSRData::FSRData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FSRData::InitAsDefaultInstance() {
}

FSRData::FSRData(const FSRData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FSRData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FSRData::~FSRData() {
  SharedDtor();
}

void FSRData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FSRData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FSRData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FSRData_descriptor_;
}

const FSRData& FSRData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Representations_2eproto();  return *default_instance_;
}

FSRData* FSRData::default_instance_ = NULL;

FSRData* FSRData::New() const {
  return new FSRData;
}

void FSRData::Clear() {
  force_.Clear();
  data_.Clear();
  valid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FSRData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double force = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_force())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_force())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_force;
        if (input->ExpectTag(17)) goto parse_data;
        break;
      }
      
      // repeated double data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_data;
        if (input->ExpectTag(24)) goto parse_valid;
        break;
      }
      
      // repeated bool valid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 24, input, this->mutable_valid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_valid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FSRData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double force = 1;
  for (int i = 0; i < this->force_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->force(i), output);
  }
  
  // repeated double data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->data(i), output);
  }
  
  // repeated bool valid = 3;
  for (int i = 0; i < this->valid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      3, this->valid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FSRData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double force = 1;
  for (int i = 0; i < this->force_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->force(i), target);
  }
  
  // repeated double data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->data(i), target);
  }
  
  // repeated bool valid = 3;
  for (int i = 0; i < this->valid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(3, this->valid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FSRData::ByteSize() const {
  int total_size = 0;
  
  // repeated double force = 1;
  {
    int data_size = 0;
    data_size = 8 * this->force_size();
    total_size += 1 * this->force_size() + data_size;
  }
  
  // repeated double data = 2;
  {
    int data_size = 0;
    data_size = 8 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }
  
  // repeated bool valid = 3;
  {
    int data_size = 0;
    data_size = 1 * this->valid_size();
    total_size += 1 * this->valid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FSRData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FSRData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FSRData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FSRData::MergeFrom(const FSRData& from) {
  GOOGLE_CHECK_NE(&from, this);
  force_.MergeFrom(from.force_);
  data_.MergeFrom(from.data_);
  valid_.MergeFrom(from.valid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FSRData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FSRData::CopyFrom(const FSRData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FSRData::IsInitialized() const {
  
  return true;
}

void FSRData::Swap(FSRData* other) {
  if (other != this) {
    force_.Swap(&other->force_);
    data_.Swap(&other->data_);
    valid_.Swap(&other->valid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FSRData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FSRData_descriptor_;
  metadata.reflection = FSRData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StepControlStatus::kStepIDFieldNumber;
const int StepControlStatus::kMoveableFootFieldNumber;
#endif  // !_MSC_VER

StepControlStatus::StepControlStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StepControlStatus::InitAsDefaultInstance() {
}

StepControlStatus::StepControlStatus(const StepControlStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StepControlStatus::SharedCtor() {
  _cached_size_ = 0;
  stepid_ = 0u;
  moveablefoot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StepControlStatus::~StepControlStatus() {
  SharedDtor();
}

void StepControlStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StepControlStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StepControlStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StepControlStatus_descriptor_;
}

const StepControlStatus& StepControlStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Representations_2eproto();  return *default_instance_;
}

StepControlStatus* StepControlStatus::default_instance_ = NULL;

StepControlStatus* StepControlStatus::New() const {
  return new StepControlStatus;
}

void StepControlStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stepid_ = 0u;
    moveablefoot_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StepControlStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 stepID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moveableFoot;
        break;
      }
      
      // required uint32 moveableFoot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveableFoot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moveablefoot_)));
          set_has_moveablefoot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StepControlStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 stepID = 1;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stepid(), output);
  }
  
  // required uint32 moveableFoot = 2;
  if (has_moveablefoot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->moveablefoot(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StepControlStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 stepID = 1;
  if (has_stepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stepid(), target);
  }
  
  // required uint32 moveableFoot = 2;
  if (has_moveablefoot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->moveablefoot(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StepControlStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 stepID = 1;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stepid());
    }
    
    // required uint32 moveableFoot = 2;
    if (has_moveablefoot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moveablefoot());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StepControlStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StepControlStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StepControlStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StepControlStatus::MergeFrom(const StepControlStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
    if (from.has_moveablefoot()) {
      set_moveablefoot(from.moveablefoot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StepControlStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepControlStatus::CopyFrom(const StepControlStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepControlStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void StepControlStatus::Swap(StepControlStatus* other) {
  if (other != this) {
    std::swap(stepid_, other->stepid_);
    std::swap(moveablefoot_, other->moveablefoot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StepControlStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StepControlStatus_descriptor_;
  metadata.reflection = StepControlStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MotionStatus::kTimeFieldNumber;
const int MotionStatus::kLastMotionFieldNumber;
const int MotionStatus::kCurrentMotionFieldNumber;
const int MotionStatus::kHeadMotionFieldNumber;
const int MotionStatus::kCurrentMotionStateFieldNumber;
const int MotionStatus::kPlannedMotionLeftFootFieldNumber;
const int MotionStatus::kPlannedMotionRightFootFieldNumber;
const int MotionStatus::kPlannedMotionHipFieldNumber;
const int MotionStatus::kStepControlStatusFieldNumber;
#endif  // !_MSC_VER

MotionStatus::MotionStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MotionStatus::InitAsDefaultInstance() {
  plannedmotionleftfoot_ = const_cast< ::naothmessages::Pose2D*>(&::naothmessages::Pose2D::default_instance());
  plannedmotionrightfoot_ = const_cast< ::naothmessages::Pose2D*>(&::naothmessages::Pose2D::default_instance());
  plannedmotionhip_ = const_cast< ::naothmessages::Pose2D*>(&::naothmessages::Pose2D::default_instance());
  stepcontrolstatus_ = const_cast< ::naothmessages::StepControlStatus*>(&::naothmessages::StepControlStatus::default_instance());
}

MotionStatus::MotionStatus(const MotionStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MotionStatus::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  lastmotion_ = 0u;
  currentmotion_ = 0u;
  headmotion_ = 0u;
  currentmotionstate_ = 0u;
  plannedmotionleftfoot_ = NULL;
  plannedmotionrightfoot_ = NULL;
  plannedmotionhip_ = NULL;
  stepcontrolstatus_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MotionStatus::~MotionStatus() {
  SharedDtor();
}

void MotionStatus::SharedDtor() {
  if (this != default_instance_) {
    delete plannedmotionleftfoot_;
    delete plannedmotionrightfoot_;
    delete plannedmotionhip_;
    delete stepcontrolstatus_;
  }
}

void MotionStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MotionStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MotionStatus_descriptor_;
}

const MotionStatus& MotionStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Representations_2eproto();  return *default_instance_;
}

MotionStatus* MotionStatus::default_instance_ = NULL;

MotionStatus* MotionStatus::New() const {
  return new MotionStatus;
}

void MotionStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    lastmotion_ = 0u;
    currentmotion_ = 0u;
    headmotion_ = 0u;
    currentmotionstate_ = 0u;
    if (has_plannedmotionleftfoot()) {
      if (plannedmotionleftfoot_ != NULL) plannedmotionleftfoot_->::naothmessages::Pose2D::Clear();
    }
    if (has_plannedmotionrightfoot()) {
      if (plannedmotionrightfoot_ != NULL) plannedmotionrightfoot_->::naothmessages::Pose2D::Clear();
    }
    if (has_plannedmotionhip()) {
      if (plannedmotionhip_ != NULL) plannedmotionhip_->::naothmessages::Pose2D::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_stepcontrolstatus()) {
      if (stepcontrolstatus_ != NULL) stepcontrolstatus_->::naothmessages::StepControlStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MotionStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lastMotion;
        break;
      }
      
      // required uint32 lastMotion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastMotion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastmotion_)));
          set_has_lastmotion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_currentMotion;
        break;
      }
      
      // required uint32 currentMotion = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentMotion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currentmotion_)));
          set_has_currentmotion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_headMotion;
        break;
      }
      
      // required uint32 headMotion = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headMotion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headmotion_)));
          set_has_headmotion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_currentMotionState;
        break;
      }
      
      // required uint32 currentMotionState = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentMotionState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currentmotionstate_)));
          set_has_currentmotionstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_plannedMotionLeftFoot;
        break;
      }
      
      // required .naothmessages.Pose2D plannedMotionLeftFoot = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plannedMotionLeftFoot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plannedmotionleftfoot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_plannedMotionRightFoot;
        break;
      }
      
      // required .naothmessages.Pose2D plannedMotionRightFoot = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plannedMotionRightFoot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plannedmotionrightfoot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_plannedMotionHip;
        break;
      }
      
      // required .naothmessages.Pose2D plannedMotionHip = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plannedMotionHip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plannedmotionhip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_stepControlStatus;
        break;
      }
      
      // optional .naothmessages.StepControlStatus stepControlStatus = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stepControlStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stepcontrolstatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MotionStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }
  
  // required uint32 lastMotion = 2;
  if (has_lastmotion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lastmotion(), output);
  }
  
  // required uint32 currentMotion = 3;
  if (has_currentmotion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->currentmotion(), output);
  }
  
  // required uint32 headMotion = 4;
  if (has_headmotion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->headmotion(), output);
  }
  
  // required uint32 currentMotionState = 5;
  if (has_currentmotionstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->currentmotionstate(), output);
  }
  
  // required .naothmessages.Pose2D plannedMotionLeftFoot = 6;
  if (has_plannedmotionleftfoot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->plannedmotionleftfoot(), output);
  }
  
  // required .naothmessages.Pose2D plannedMotionRightFoot = 7;
  if (has_plannedmotionrightfoot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->plannedmotionrightfoot(), output);
  }
  
  // required .naothmessages.Pose2D plannedMotionHip = 8;
  if (has_plannedmotionhip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->plannedmotionhip(), output);
  }
  
  // optional .naothmessages.StepControlStatus stepControlStatus = 9;
  if (has_stepcontrolstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->stepcontrolstatus(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MotionStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }
  
  // required uint32 lastMotion = 2;
  if (has_lastmotion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lastmotion(), target);
  }
  
  // required uint32 currentMotion = 3;
  if (has_currentmotion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->currentmotion(), target);
  }
  
  // required uint32 headMotion = 4;
  if (has_headmotion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->headmotion(), target);
  }
  
  // required uint32 currentMotionState = 5;
  if (has_currentmotionstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->currentmotionstate(), target);
  }
  
  // required .naothmessages.Pose2D plannedMotionLeftFoot = 6;
  if (has_plannedmotionleftfoot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->plannedmotionleftfoot(), target);
  }
  
  // required .naothmessages.Pose2D plannedMotionRightFoot = 7;
  if (has_plannedmotionrightfoot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->plannedmotionrightfoot(), target);
  }
  
  // required .naothmessages.Pose2D plannedMotionHip = 8;
  if (has_plannedmotionhip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->plannedmotionhip(), target);
  }
  
  // optional .naothmessages.StepControlStatus stepControlStatus = 9;
  if (has_stepcontrolstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->stepcontrolstatus(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MotionStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
    // required uint32 lastMotion = 2;
    if (has_lastmotion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastmotion());
    }
    
    // required uint32 currentMotion = 3;
    if (has_currentmotion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currentmotion());
    }
    
    // required uint32 headMotion = 4;
    if (has_headmotion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headmotion());
    }
    
    // required uint32 currentMotionState = 5;
    if (has_currentmotionstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currentmotionstate());
    }
    
    // required .naothmessages.Pose2D plannedMotionLeftFoot = 6;
    if (has_plannedmotionleftfoot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plannedmotionleftfoot());
    }
    
    // required .naothmessages.Pose2D plannedMotionRightFoot = 7;
    if (has_plannedmotionrightfoot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plannedmotionrightfoot());
    }
    
    // required .naothmessages.Pose2D plannedMotionHip = 8;
    if (has_plannedmotionhip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plannedmotionhip());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .naothmessages.StepControlStatus stepControlStatus = 9;
    if (has_stepcontrolstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stepcontrolstatus());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MotionStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MotionStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MotionStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MotionStatus::MergeFrom(const MotionStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_lastmotion()) {
      set_lastmotion(from.lastmotion());
    }
    if (from.has_currentmotion()) {
      set_currentmotion(from.currentmotion());
    }
    if (from.has_headmotion()) {
      set_headmotion(from.headmotion());
    }
    if (from.has_currentmotionstate()) {
      set_currentmotionstate(from.currentmotionstate());
    }
    if (from.has_plannedmotionleftfoot()) {
      mutable_plannedmotionleftfoot()->::naothmessages::Pose2D::MergeFrom(from.plannedmotionleftfoot());
    }
    if (from.has_plannedmotionrightfoot()) {
      mutable_plannedmotionrightfoot()->::naothmessages::Pose2D::MergeFrom(from.plannedmotionrightfoot());
    }
    if (from.has_plannedmotionhip()) {
      mutable_plannedmotionhip()->::naothmessages::Pose2D::MergeFrom(from.plannedmotionhip());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_stepcontrolstatus()) {
      mutable_stepcontrolstatus()->::naothmessages::StepControlStatus::MergeFrom(from.stepcontrolstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MotionStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionStatus::CopyFrom(const MotionStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  if (has_plannedmotionleftfoot()) {
    if (!this->plannedmotionleftfoot().IsInitialized()) return false;
  }
  if (has_plannedmotionrightfoot()) {
    if (!this->plannedmotionrightfoot().IsInitialized()) return false;
  }
  if (has_plannedmotionhip()) {
    if (!this->plannedmotionhip().IsInitialized()) return false;
  }
  if (has_stepcontrolstatus()) {
    if (!this->stepcontrolstatus().IsInitialized()) return false;
  }
  return true;
}

void MotionStatus::Swap(MotionStatus* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(lastmotion_, other->lastmotion_);
    std::swap(currentmotion_, other->currentmotion_);
    std::swap(headmotion_, other->headmotion_);
    std::swap(currentmotionstate_, other->currentmotionstate_);
    std::swap(plannedmotionleftfoot_, other->plannedmotionleftfoot_);
    std::swap(plannedmotionrightfoot_, other->plannedmotionrightfoot_);
    std::swap(plannedmotionhip_, other->plannedmotionhip_);
    std::swap(stepcontrolstatus_, other->stepcontrolstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MotionStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MotionStatus_descriptor_;
  metadata.reflection = MotionStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OdometryData::kPoseFieldNumber;
#endif  // !_MSC_VER

OdometryData::OdometryData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OdometryData::InitAsDefaultInstance() {
  pose_ = const_cast< ::naothmessages::Pose2D*>(&::naothmessages::Pose2D::default_instance());
}

OdometryData::OdometryData(const OdometryData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OdometryData::SharedCtor() {
  _cached_size_ = 0;
  pose_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OdometryData::~OdometryData() {
  SharedDtor();
}

void OdometryData::SharedDtor() {
  if (this != default_instance_) {
    delete pose_;
  }
}

void OdometryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OdometryData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OdometryData_descriptor_;
}

const OdometryData& OdometryData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Representations_2eproto();  return *default_instance_;
}

OdometryData* OdometryData::default_instance_ = NULL;

OdometryData* OdometryData::New() const {
  return new OdometryData;
}

void OdometryData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pose()) {
      if (pose_ != NULL) pose_->::naothmessages::Pose2D::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OdometryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .naothmessages.Pose2D pose = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OdometryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .naothmessages.Pose2D pose = 1;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pose(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OdometryData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .naothmessages.Pose2D pose = 1;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pose(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OdometryData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .naothmessages.Pose2D pose = 1;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OdometryData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OdometryData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OdometryData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OdometryData::MergeFrom(const OdometryData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pose()) {
      mutable_pose()->::naothmessages::Pose2D::MergeFrom(from.pose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OdometryData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OdometryData::CopyFrom(const OdometryData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OdometryData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  return true;
}

void OdometryData::Swap(OdometryData* other) {
  if (other != this) {
    std::swap(pose_, other->pose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OdometryData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OdometryData_descriptor_;
  metadata.reflection = OdometryData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CalibrationData::kInertialSensorOffsetFieldNumber;
const int CalibrationData::kGyroSensorOffsetFieldNumber;
const int CalibrationData::kAccSensorOffsetFieldNumber;
#endif  // !_MSC_VER

CalibrationData::CalibrationData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CalibrationData::InitAsDefaultInstance() {
  inertialsensoroffset_ = const_cast< ::naothmessages::DoubleVector2*>(&::naothmessages::DoubleVector2::default_instance());
  gyrosensoroffset_ = const_cast< ::naothmessages::DoubleVector2*>(&::naothmessages::DoubleVector2::default_instance());
  accsensoroffset_ = const_cast< ::naothmessages::DoubleVector3*>(&::naothmessages::DoubleVector3::default_instance());
}

CalibrationData::CalibrationData(const CalibrationData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CalibrationData::SharedCtor() {
  _cached_size_ = 0;
  inertialsensoroffset_ = NULL;
  gyrosensoroffset_ = NULL;
  accsensoroffset_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalibrationData::~CalibrationData() {
  SharedDtor();
}

void CalibrationData::SharedDtor() {
  if (this != default_instance_) {
    delete inertialsensoroffset_;
    delete gyrosensoroffset_;
    delete accsensoroffset_;
  }
}

void CalibrationData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalibrationData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalibrationData_descriptor_;
}

const CalibrationData& CalibrationData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Representations_2eproto();  return *default_instance_;
}

CalibrationData* CalibrationData::default_instance_ = NULL;

CalibrationData* CalibrationData::New() const {
  return new CalibrationData;
}

void CalibrationData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_inertialsensoroffset()) {
      if (inertialsensoroffset_ != NULL) inertialsensoroffset_->::naothmessages::DoubleVector2::Clear();
    }
    if (has_gyrosensoroffset()) {
      if (gyrosensoroffset_ != NULL) gyrosensoroffset_->::naothmessages::DoubleVector2::Clear();
    }
    if (has_accsensoroffset()) {
      if (accsensoroffset_ != NULL) accsensoroffset_->::naothmessages::DoubleVector3::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CalibrationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .naothmessages.DoubleVector2 inertialSensorOffset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inertialsensoroffset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gyroSensorOffset;
        break;
      }
      
      // optional .naothmessages.DoubleVector2 gyroSensorOffset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gyroSensorOffset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gyrosensoroffset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_accSensorOffset;
        break;
      }
      
      // optional .naothmessages.DoubleVector3 accSensorOffset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accSensorOffset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accsensoroffset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CalibrationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .naothmessages.DoubleVector2 inertialSensorOffset = 1;
  if (has_inertialsensoroffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->inertialsensoroffset(), output);
  }
  
  // optional .naothmessages.DoubleVector2 gyroSensorOffset = 2;
  if (has_gyrosensoroffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gyrosensoroffset(), output);
  }
  
  // optional .naothmessages.DoubleVector3 accSensorOffset = 3;
  if (has_accsensoroffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->accsensoroffset(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CalibrationData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .naothmessages.DoubleVector2 inertialSensorOffset = 1;
  if (has_inertialsensoroffset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->inertialsensoroffset(), target);
  }
  
  // optional .naothmessages.DoubleVector2 gyroSensorOffset = 2;
  if (has_gyrosensoroffset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gyrosensoroffset(), target);
  }
  
  // optional .naothmessages.DoubleVector3 accSensorOffset = 3;
  if (has_accsensoroffset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->accsensoroffset(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CalibrationData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .naothmessages.DoubleVector2 inertialSensorOffset = 1;
    if (has_inertialsensoroffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inertialsensoroffset());
    }
    
    // optional .naothmessages.DoubleVector2 gyroSensorOffset = 2;
    if (has_gyrosensoroffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gyrosensoroffset());
    }
    
    // optional .naothmessages.DoubleVector3 accSensorOffset = 3;
    if (has_accsensoroffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accsensoroffset());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalibrationData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CalibrationData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalibrationData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalibrationData::MergeFrom(const CalibrationData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inertialsensoroffset()) {
      mutable_inertialsensoroffset()->::naothmessages::DoubleVector2::MergeFrom(from.inertialsensoroffset());
    }
    if (from.has_gyrosensoroffset()) {
      mutable_gyrosensoroffset()->::naothmessages::DoubleVector2::MergeFrom(from.gyrosensoroffset());
    }
    if (from.has_accsensoroffset()) {
      mutable_accsensoroffset()->::naothmessages::DoubleVector3::MergeFrom(from.accsensoroffset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CalibrationData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrationData::CopyFrom(const CalibrationData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrationData::IsInitialized() const {
  
  if (has_inertialsensoroffset()) {
    if (!this->inertialsensoroffset().IsInitialized()) return false;
  }
  if (has_gyrosensoroffset()) {
    if (!this->gyrosensoroffset().IsInitialized()) return false;
  }
  if (has_accsensoroffset()) {
    if (!this->accsensoroffset().IsInitialized()) return false;
  }
  return true;
}

void CalibrationData::Swap(CalibrationData* other) {
  if (other != this) {
    std::swap(inertialsensoroffset_, other->inertialsensoroffset_);
    std::swap(gyrosensoroffset_, other->gyrosensoroffset_);
    std::swap(accsensoroffset_, other->accsensoroffset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CalibrationData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalibrationData_descriptor_;
  metadata.reflection = CalibrationData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InertialModel::kOrientationFieldNumber;
#endif  // !_MSC_VER

InertialModel::InertialModel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InertialModel::InitAsDefaultInstance() {
  orientation_ = const_cast< ::naothmessages::DoubleVector2*>(&::naothmessages::DoubleVector2::default_instance());
}

InertialModel::InertialModel(const InertialModel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InertialModel::SharedCtor() {
  _cached_size_ = 0;
  orientation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InertialModel::~InertialModel() {
  SharedDtor();
}

void InertialModel::SharedDtor() {
  if (this != default_instance_) {
    delete orientation_;
  }
}

void InertialModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InertialModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InertialModel_descriptor_;
}

const InertialModel& InertialModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Representations_2eproto();  return *default_instance_;
}

InertialModel* InertialModel::default_instance_ = NULL;

InertialModel* InertialModel::New() const {
  return new InertialModel;
}

void InertialModel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_orientation()) {
      if (orientation_ != NULL) orientation_->::naothmessages::DoubleVector2::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InertialModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .naothmessages.DoubleVector2 orientation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InertialModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .naothmessages.DoubleVector2 orientation = 1;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->orientation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InertialModel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .naothmessages.DoubleVector2 orientation = 1;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->orientation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InertialModel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .naothmessages.DoubleVector2 orientation = 1;
    if (has_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->orientation());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InertialModel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InertialModel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InertialModel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InertialModel::MergeFrom(const InertialModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orientation()) {
      mutable_orientation()->::naothmessages::DoubleVector2::MergeFrom(from.orientation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InertialModel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InertialModel::CopyFrom(const InertialModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InertialModel::IsInitialized() const {
  
  if (has_orientation()) {
    if (!this->orientation().IsInitialized()) return false;
  }
  return true;
}

void InertialModel::Swap(InertialModel* other) {
  if (other != this) {
    std::swap(orientation_, other->orientation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InertialModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InertialModel_descriptor_;
  metadata.reflection = InertialModel_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace naothmessages

// @@protoc_insertion_point(global_scope)
