// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Representations.proto

#ifndef PROTOBUF_Representations_2eproto__INCLUDED
#define PROTOBUF_Representations_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "CommonTypes.pb.h"
// @@protoc_insertion_point(includes)

namespace naothmessages {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Representations_2eproto();
void protobuf_AssignDesc_Representations_2eproto();
void protobuf_ShutdownFile_Representations_2eproto();

class Image;
class CameraInfo;
class JointData;
class SensorJointData;
class CameraMatrix;
class FrameInfo;
class BallPercept;
class GoalPercept;
class HeadMotionRequest;
class WalkRequest;
class MotionRequest;
class LinePercept;
class FSRData;
class MotionStatus;
class OdometryData;

enum Image_Format {
  Image_Format_YUV = 0,
  Image_Format_YUV422 = 1
};
bool Image_Format_IsValid(int value);
const Image_Format Image_Format_Format_MIN = Image_Format_YUV;
const Image_Format Image_Format_Format_MAX = Image_Format_YUV422;
const int Image_Format_Format_ARRAYSIZE = Image_Format_Format_MAX + 1;

const ::google::protobuf::EnumDescriptor* Image_Format_descriptor();
inline const ::std::string& Image_Format_Name(Image_Format value) {
  return ::google::protobuf::internal::NameOfEnum(
    Image_Format_descriptor(), value);
}
inline bool Image_Format_Parse(
    const ::std::string& name, Image_Format* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Image_Format>(
    Image_Format_descriptor(), name, value);
}
// ===================================================================

class Image : public ::google::protobuf::Message {
 public:
  Image();
  virtual ~Image();
  
  Image(const Image& from);
  
  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();
  
  void Swap(Image* other);
  
  // implements Message ----------------------------------------------
  
  Image* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Image_Format Format;
  static const Format YUV = Image_Format_YUV;
  static const Format YUV422 = Image_Format_YUV422;
  static inline bool Format_IsValid(int value) {
    return Image_Format_IsValid(value);
  }
  static const Format Format_MIN =
    Image_Format_Format_MIN;
  static const Format Format_MAX =
    Image_Format_Format_MAX;
  static const int Format_ARRAYSIZE =
    Image_Format_Format_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Format_descriptor() {
    return Image_Format_descriptor();
  }
  static inline const ::std::string& Format_Name(Format value) {
    return Image_Format_Name(value);
  }
  static inline bool Format_Parse(const ::std::string& name,
      Format* value) {
    return Image_Format_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required bytes data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  
  // optional int32 width = 2 [default = 320];
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 2;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);
  
  // optional int32 height = 3 [default = 240];
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);
  
  // optional .naothmessages.CameraInfo cameraInfo = 4;
  inline bool has_camerainfo() const;
  inline void clear_camerainfo();
  static const int kCameraInfoFieldNumber = 4;
  inline const ::naothmessages::CameraInfo& camerainfo() const;
  inline ::naothmessages::CameraInfo* mutable_camerainfo();
  inline ::naothmessages::CameraInfo* release_camerainfo();
  
  // optional .naothmessages.Image.Format format = 5 [default = YUV];
  inline bool has_format() const;
  inline void clear_format();
  static const int kFormatFieldNumber = 5;
  inline ::naothmessages::Image_Format format() const;
  inline void set_format(::naothmessages::Image_Format value);
  
  // optional uint32 timestamp = 6;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:naothmessages.Image)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_camerainfo();
  inline void clear_has_camerainfo();
  inline void set_has_format();
  inline void clear_has_format();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* data_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::naothmessages::CameraInfo* camerainfo_;
  int format_;
  ::google::protobuf::uint32 timestamp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static Image* default_instance_;
};
// -------------------------------------------------------------------

class CameraInfo : public ::google::protobuf::Message {
 public:
  CameraInfo();
  virtual ~CameraInfo();
  
  CameraInfo(const CameraInfo& from);
  
  inline CameraInfo& operator=(const CameraInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraInfo& default_instance();
  
  void Swap(CameraInfo* other);
  
  // implements Message ----------------------------------------------
  
  CameraInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraInfo& from);
  void MergeFrom(const CameraInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 resolutionWidth = 1;
  inline bool has_resolutionwidth() const;
  inline void clear_resolutionwidth();
  static const int kResolutionWidthFieldNumber = 1;
  inline ::google::protobuf::int32 resolutionwidth() const;
  inline void set_resolutionwidth(::google::protobuf::int32 value);
  
  // required int32 resolutionHeight = 2;
  inline bool has_resolutionheight() const;
  inline void clear_resolutionheight();
  static const int kResolutionHeightFieldNumber = 2;
  inline ::google::protobuf::int32 resolutionheight() const;
  inline void set_resolutionheight(::google::protobuf::int32 value);
  
  // optional .naothmessages.CameraID cameraID = 4 [default = bottom];
  inline bool has_cameraid() const;
  inline void clear_cameraid();
  static const int kCameraIDFieldNumber = 4;
  inline naothmessages::CameraID cameraid() const;
  inline void set_cameraid(naothmessages::CameraID value);
  
  // optional double focalLength = 5;
  inline bool has_focallength() const;
  inline void clear_focallength();
  static const int kFocalLengthFieldNumber = 5;
  inline double focallength() const;
  inline void set_focallength(double value);
  
  // optional double openingAngleWidth = 6;
  inline bool has_openinganglewidth() const;
  inline void clear_openinganglewidth();
  static const int kOpeningAngleWidthFieldNumber = 6;
  inline double openinganglewidth() const;
  inline void set_openinganglewidth(double value);
  
  // optional double openingAngleHeight = 7;
  inline bool has_openingangleheight() const;
  inline void clear_openingangleheight();
  static const int kOpeningAngleHeightFieldNumber = 7;
  inline double openingangleheight() const;
  inline void set_openingangleheight(double value);
  
  // optional double opticalCenterX = 8;
  inline bool has_opticalcenterx() const;
  inline void clear_opticalcenterx();
  static const int kOpticalCenterXFieldNumber = 8;
  inline double opticalcenterx() const;
  inline void set_opticalcenterx(double value);
  
  // optional double opticalCenterY = 9;
  inline bool has_opticalcentery() const;
  inline void clear_opticalcentery();
  static const int kOpticalCenterYFieldNumber = 9;
  inline double opticalcentery() const;
  inline void set_opticalcentery(double value);
  
  // optional int64 size = 10;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 10;
  inline ::google::protobuf::int64 size() const;
  inline void set_size(::google::protobuf::int64 value);
  
  // optional int64 memorysize = 11;
  inline bool has_memorysize() const;
  inline void clear_memorysize();
  static const int kMemorysizeFieldNumber = 11;
  inline ::google::protobuf::int64 memorysize() const;
  inline void set_memorysize(::google::protobuf::int64 value);
  
  // optional double cameraRollOffset = 12;
  inline bool has_camerarolloffset() const;
  inline void clear_camerarolloffset();
  static const int kCameraRollOffsetFieldNumber = 12;
  inline double camerarolloffset() const;
  inline void set_camerarolloffset(double value);
  
  // optional double cameraTiltOffset = 13;
  inline bool has_cameratiltoffset() const;
  inline void clear_cameratiltoffset();
  static const int kCameraTiltOffsetFieldNumber = 13;
  inline double cameratiltoffset() const;
  inline void set_cameratiltoffset(double value);
  
  // @@protoc_insertion_point(class_scope:naothmessages.CameraInfo)
 private:
  inline void set_has_resolutionwidth();
  inline void clear_has_resolutionwidth();
  inline void set_has_resolutionheight();
  inline void clear_has_resolutionheight();
  inline void set_has_cameraid();
  inline void clear_has_cameraid();
  inline void set_has_focallength();
  inline void clear_has_focallength();
  inline void set_has_openinganglewidth();
  inline void clear_has_openinganglewidth();
  inline void set_has_openingangleheight();
  inline void clear_has_openingangleheight();
  inline void set_has_opticalcenterx();
  inline void clear_has_opticalcenterx();
  inline void set_has_opticalcentery();
  inline void clear_has_opticalcentery();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_memorysize();
  inline void clear_has_memorysize();
  inline void set_has_camerarolloffset();
  inline void clear_has_camerarolloffset();
  inline void set_has_cameratiltoffset();
  inline void clear_has_cameratiltoffset();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 resolutionwidth_;
  ::google::protobuf::int32 resolutionheight_;
  double focallength_;
  double openinganglewidth_;
  double openingangleheight_;
  double opticalcenterx_;
  double opticalcentery_;
  ::google::protobuf::int64 size_;
  ::google::protobuf::int64 memorysize_;
  double camerarolloffset_;
  double cameratiltoffset_;
  int cameraid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static CameraInfo* default_instance_;
};
// -------------------------------------------------------------------

class JointData : public ::google::protobuf::Message {
 public:
  JointData();
  virtual ~JointData();
  
  JointData(const JointData& from);
  
  inline JointData& operator=(const JointData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const JointData& default_instance();
  
  void Swap(JointData* other);
  
  // implements Message ----------------------------------------------
  
  JointData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JointData& from);
  void MergeFrom(const JointData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated double position = 1;
  inline int position_size() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline double position(int index) const;
  inline void set_position(int index, double value);
  inline void add_position(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      position() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_position();
  
  // repeated double stiffness = 2;
  inline int stiffness_size() const;
  inline void clear_stiffness();
  static const int kStiffnessFieldNumber = 2;
  inline double stiffness(int index) const;
  inline void set_stiffness(int index, double value);
  inline void add_stiffness(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      stiffness() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_stiffness();
  
  // repeated double dp = 3;
  inline int dp_size() const;
  inline void clear_dp();
  static const int kDpFieldNumber = 3;
  inline double dp(int index) const;
  inline void set_dp(int index, double value);
  inline void add_dp(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      dp() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_dp();
  
  // repeated double ddp = 4;
  inline int ddp_size() const;
  inline void clear_ddp();
  static const int kDdpFieldNumber = 4;
  inline double ddp(int index) const;
  inline void set_ddp(int index, double value);
  inline void add_ddp(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      ddp() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_ddp();
  
  // @@protoc_insertion_point(class_scope:naothmessages.JointData)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< double > position_;
  ::google::protobuf::RepeatedField< double > stiffness_;
  ::google::protobuf::RepeatedField< double > dp_;
  ::google::protobuf::RepeatedField< double > ddp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static JointData* default_instance_;
};
// -------------------------------------------------------------------

class SensorJointData : public ::google::protobuf::Message {
 public:
  SensorJointData();
  virtual ~SensorJointData();
  
  SensorJointData(const SensorJointData& from);
  
  inline SensorJointData& operator=(const SensorJointData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorJointData& default_instance();
  
  void Swap(SensorJointData* other);
  
  // implements Message ----------------------------------------------
  
  SensorJointData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SensorJointData& from);
  void MergeFrom(const SensorJointData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .naothmessages.JointData jointData = 1;
  inline bool has_jointdata() const;
  inline void clear_jointdata();
  static const int kJointDataFieldNumber = 1;
  inline const ::naothmessages::JointData& jointdata() const;
  inline ::naothmessages::JointData* mutable_jointdata();
  inline ::naothmessages::JointData* release_jointdata();
  
  // repeated double temperature = 2;
  inline int temperature_size() const;
  inline void clear_temperature();
  static const int kTemperatureFieldNumber = 2;
  inline double temperature(int index) const;
  inline void set_temperature(int index, double value);
  inline void add_temperature(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      temperature() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_temperature();
  
  // repeated double electricCurrent = 3;
  inline int electriccurrent_size() const;
  inline void clear_electriccurrent();
  static const int kElectricCurrentFieldNumber = 3;
  inline double electriccurrent(int index) const;
  inline void set_electriccurrent(int index, double value);
  inline void add_electriccurrent(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      electriccurrent() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_electriccurrent();
  
  // @@protoc_insertion_point(class_scope:naothmessages.SensorJointData)
 private:
  inline void set_has_jointdata();
  inline void clear_has_jointdata();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::naothmessages::JointData* jointdata_;
  ::google::protobuf::RepeatedField< double > temperature_;
  ::google::protobuf::RepeatedField< double > electriccurrent_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static SensorJointData* default_instance_;
};
// -------------------------------------------------------------------

class CameraMatrix : public ::google::protobuf::Message {
 public:
  CameraMatrix();
  virtual ~CameraMatrix();
  
  CameraMatrix(const CameraMatrix& from);
  
  inline CameraMatrix& operator=(const CameraMatrix& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraMatrix& default_instance();
  
  void Swap(CameraMatrix* other);
  
  // implements Message ----------------------------------------------
  
  CameraMatrix* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraMatrix& from);
  void MergeFrom(const CameraMatrix& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .naothmessages.Pose3D pose = 1;
  inline bool has_pose() const;
  inline void clear_pose();
  static const int kPoseFieldNumber = 1;
  inline const ::naothmessages::Pose3D& pose() const;
  inline ::naothmessages::Pose3D* mutable_pose();
  inline ::naothmessages::Pose3D* release_pose();
  
  // @@protoc_insertion_point(class_scope:naothmessages.CameraMatrix)
 private:
  inline void set_has_pose();
  inline void clear_has_pose();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::naothmessages::Pose3D* pose_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static CameraMatrix* default_instance_;
};
// -------------------------------------------------------------------

class FrameInfo : public ::google::protobuf::Message {
 public:
  FrameInfo();
  virtual ~FrameInfo();
  
  FrameInfo(const FrameInfo& from);
  
  inline FrameInfo& operator=(const FrameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameInfo& default_instance();
  
  void Swap(FrameInfo* other);
  
  // implements Message ----------------------------------------------
  
  FrameInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FrameInfo& from);
  void MergeFrom(const FrameInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 frameNumber = 1;
  inline bool has_framenumber() const;
  inline void clear_framenumber();
  static const int kFrameNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 framenumber() const;
  inline void set_framenumber(::google::protobuf::uint32 value);
  
  // required uint32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);
  
  // required uint32 basicTimeStep = 3;
  inline bool has_basictimestep() const;
  inline void clear_basictimestep();
  static const int kBasicTimeStepFieldNumber = 3;
  inline ::google::protobuf::uint32 basictimestep() const;
  inline void set_basictimestep(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:naothmessages.FrameInfo)
 private:
  inline void set_has_framenumber();
  inline void clear_has_framenumber();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_basictimestep();
  inline void clear_has_basictimestep();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 framenumber_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 basictimestep_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static FrameInfo* default_instance_;
};
// -------------------------------------------------------------------

class BallPercept : public ::google::protobuf::Message {
 public:
  BallPercept();
  virtual ~BallPercept();
  
  BallPercept(const BallPercept& from);
  
  inline BallPercept& operator=(const BallPercept& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BallPercept& default_instance();
  
  void Swap(BallPercept* other);
  
  // implements Message ----------------------------------------------
  
  BallPercept* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BallPercept& from);
  void MergeFrom(const BallPercept& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool ballWasSeen = 1;
  inline bool has_ballwasseen() const;
  inline void clear_ballwasseen();
  static const int kBallWasSeenFieldNumber = 1;
  inline bool ballwasseen() const;
  inline void set_ballwasseen(bool value);
  
  // optional .naothmessages.DoubleVector2 centerInImage = 2;
  inline bool has_centerinimage() const;
  inline void clear_centerinimage();
  static const int kCenterInImageFieldNumber = 2;
  inline const ::naothmessages::DoubleVector2& centerinimage() const;
  inline ::naothmessages::DoubleVector2* mutable_centerinimage();
  inline ::naothmessages::DoubleVector2* release_centerinimage();
  
  // optional double radiusInImage = 3;
  inline bool has_radiusinimage() const;
  inline void clear_radiusinimage();
  static const int kRadiusInImageFieldNumber = 3;
  inline double radiusinimage() const;
  inline void set_radiusinimage(double value);
  
  // optional .naothmessages.Color ballColor = 4;
  inline bool has_ballcolor() const;
  inline void clear_ballcolor();
  static const int kBallColorFieldNumber = 4;
  inline naothmessages::Color ballcolor() const;
  inline void set_ballcolor(naothmessages::Color value);
  
  // optional .naothmessages.DoubleVector2 bearingBasedOffsetOnField = 5;
  inline bool has_bearingbasedoffsetonfield() const;
  inline void clear_bearingbasedoffsetonfield();
  static const int kBearingBasedOffsetOnFieldFieldNumber = 5;
  inline const ::naothmessages::DoubleVector2& bearingbasedoffsetonfield() const;
  inline ::naothmessages::DoubleVector2* mutable_bearingbasedoffsetonfield();
  inline ::naothmessages::DoubleVector2* release_bearingbasedoffsetonfield();
  
  // optional .naothmessages.FrameInfo frameInfoWhenBallWasSeen = 6;
  inline bool has_frameinfowhenballwasseen() const;
  inline void clear_frameinfowhenballwasseen();
  static const int kFrameInfoWhenBallWasSeenFieldNumber = 6;
  inline const ::naothmessages::FrameInfo& frameinfowhenballwasseen() const;
  inline ::naothmessages::FrameInfo* mutable_frameinfowhenballwasseen();
  inline ::naothmessages::FrameInfo* release_frameinfowhenballwasseen();
  
  // @@protoc_insertion_point(class_scope:naothmessages.BallPercept)
 private:
  inline void set_has_ballwasseen();
  inline void clear_has_ballwasseen();
  inline void set_has_centerinimage();
  inline void clear_has_centerinimage();
  inline void set_has_radiusinimage();
  inline void clear_has_radiusinimage();
  inline void set_has_ballcolor();
  inline void clear_has_ballcolor();
  inline void set_has_bearingbasedoffsetonfield();
  inline void clear_has_bearingbasedoffsetonfield();
  inline void set_has_frameinfowhenballwasseen();
  inline void clear_has_frameinfowhenballwasseen();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::naothmessages::DoubleVector2* centerinimage_;
  bool ballwasseen_;
  int ballcolor_;
  double radiusinimage_;
  ::naothmessages::DoubleVector2* bearingbasedoffsetonfield_;
  ::naothmessages::FrameInfo* frameinfowhenballwasseen_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static BallPercept* default_instance_;
};
// -------------------------------------------------------------------

class GoalPercept : public ::google::protobuf::Message {
 public:
  GoalPercept();
  virtual ~GoalPercept();
  
  GoalPercept(const GoalPercept& from);
  
  inline GoalPercept& operator=(const GoalPercept& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GoalPercept& default_instance();
  
  void Swap(GoalPercept* other);
  
  // implements Message ----------------------------------------------
  
  GoalPercept* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GoalPercept& from);
  void MergeFrom(const GoalPercept& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional double angleToSeenGoal = 1;
  inline bool has_angletoseengoal() const;
  inline void clear_angletoseengoal();
  static const int kAngleToSeenGoalFieldNumber = 1;
  inline double angletoseengoal() const;
  inline void set_angletoseengoal(double value);
  
  // optional .naothmessages.DoubleVector3 goalCentroid = 2;
  inline bool has_goalcentroid() const;
  inline void clear_goalcentroid();
  static const int kGoalCentroidFieldNumber = 2;
  inline const ::naothmessages::DoubleVector3& goalcentroid() const;
  inline ::naothmessages::DoubleVector3* mutable_goalcentroid();
  inline ::naothmessages::DoubleVector3* release_goalcentroid();
  
  // optional int32 numberOfSeenPosts = 3;
  inline bool has_numberofseenposts() const;
  inline void clear_numberofseenposts();
  static const int kNumberOfSeenPostsFieldNumber = 3;
  inline ::google::protobuf::int32 numberofseenposts() const;
  inline void set_numberofseenposts(::google::protobuf::int32 value);
  
  // repeated .naothmessages.GoalPost post = 4;
  inline int post_size() const;
  inline void clear_post();
  static const int kPostFieldNumber = 4;
  inline const ::naothmessages::GoalPost& post(int index) const;
  inline ::naothmessages::GoalPost* mutable_post(int index);
  inline ::naothmessages::GoalPost* add_post();
  inline const ::google::protobuf::RepeatedPtrField< ::naothmessages::GoalPost >&
      post() const;
  inline ::google::protobuf::RepeatedPtrField< ::naothmessages::GoalPost >*
      mutable_post();
  
  // @@protoc_insertion_point(class_scope:naothmessages.GoalPercept)
 private:
  inline void set_has_angletoseengoal();
  inline void clear_has_angletoseengoal();
  inline void set_has_goalcentroid();
  inline void clear_has_goalcentroid();
  inline void set_has_numberofseenposts();
  inline void clear_has_numberofseenposts();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double angletoseengoal_;
  ::naothmessages::DoubleVector3* goalcentroid_;
  ::google::protobuf::RepeatedPtrField< ::naothmessages::GoalPost > post_;
  ::google::protobuf::int32 numberofseenposts_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static GoalPercept* default_instance_;
};
// -------------------------------------------------------------------

class HeadMotionRequest : public ::google::protobuf::Message {
 public:
  HeadMotionRequest();
  virtual ~HeadMotionRequest();
  
  HeadMotionRequest(const HeadMotionRequest& from);
  
  inline HeadMotionRequest& operator=(const HeadMotionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeadMotionRequest& default_instance();
  
  void Swap(HeadMotionRequest* other);
  
  // implements Message ----------------------------------------------
  
  HeadMotionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeadMotionRequest& from);
  void MergeFrom(const HeadMotionRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required uint32 cameraID = 2;
  inline bool has_cameraid() const;
  inline void clear_cameraid();
  static const int kCameraIDFieldNumber = 2;
  inline ::google::protobuf::uint32 cameraid() const;
  inline void set_cameraid(::google::protobuf::uint32 value);
  
  // optional .naothmessages.DoubleVector2 targetJointPosition = 3;
  inline bool has_targetjointposition() const;
  inline void clear_targetjointposition();
  static const int kTargetJointPositionFieldNumber = 3;
  inline const ::naothmessages::DoubleVector2& targetjointposition() const;
  inline ::naothmessages::DoubleVector2* mutable_targetjointposition();
  inline ::naothmessages::DoubleVector2* release_targetjointposition();
  
  // optional .naothmessages.DoubleVector2 targetPointInImage = 4;
  inline bool has_targetpointinimage() const;
  inline void clear_targetpointinimage();
  static const int kTargetPointInImageFieldNumber = 4;
  inline const ::naothmessages::DoubleVector2& targetpointinimage() const;
  inline ::naothmessages::DoubleVector2* mutable_targetpointinimage();
  inline ::naothmessages::DoubleVector2* release_targetpointinimage();
  
  // optional .naothmessages.DoubleVector3 targetPointInTheWorld = 5;
  inline bool has_targetpointintheworld() const;
  inline void clear_targetpointintheworld();
  static const int kTargetPointInTheWorldFieldNumber = 5;
  inline const ::naothmessages::DoubleVector3& targetpointintheworld() const;
  inline ::naothmessages::DoubleVector3* mutable_targetpointintheworld();
  inline ::naothmessages::DoubleVector3* release_targetpointintheworld();
  
  // optional .naothmessages.DoubleVector3 searchCenter = 6;
  inline bool has_searchcenter() const;
  inline void clear_searchcenter();
  static const int kSearchCenterFieldNumber = 6;
  inline const ::naothmessages::DoubleVector3& searchcenter() const;
  inline ::naothmessages::DoubleVector3* mutable_searchcenter();
  inline ::naothmessages::DoubleVector3* release_searchcenter();
  
  // optional .naothmessages.DoubleVector3 searchSize = 7;
  inline bool has_searchsize() const;
  inline void clear_searchsize();
  static const int kSearchSizeFieldNumber = 7;
  inline const ::naothmessages::DoubleVector3& searchsize() const;
  inline ::naothmessages::DoubleVector3* mutable_searchsize();
  inline ::naothmessages::DoubleVector3* release_searchsize();
  
  // optional bool searchDirection = 8;
  inline bool has_searchdirection() const;
  inline void clear_searchdirection();
  static const int kSearchDirectionFieldNumber = 8;
  inline bool searchdirection() const;
  inline void set_searchdirection(bool value);
  
  // @@protoc_insertion_point(class_scope:naothmessages.HeadMotionRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cameraid();
  inline void clear_has_cameraid();
  inline void set_has_targetjointposition();
  inline void clear_has_targetjointposition();
  inline void set_has_targetpointinimage();
  inline void clear_has_targetpointinimage();
  inline void set_has_targetpointintheworld();
  inline void clear_has_targetpointintheworld();
  inline void set_has_searchcenter();
  inline void clear_has_searchcenter();
  inline void set_has_searchsize();
  inline void clear_has_searchsize();
  inline void set_has_searchdirection();
  inline void clear_has_searchdirection();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 cameraid_;
  ::naothmessages::DoubleVector2* targetjointposition_;
  ::naothmessages::DoubleVector2* targetpointinimage_;
  ::naothmessages::DoubleVector3* targetpointintheworld_;
  ::naothmessages::DoubleVector3* searchcenter_;
  ::naothmessages::DoubleVector3* searchsize_;
  bool searchdirection_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static HeadMotionRequest* default_instance_;
};
// -------------------------------------------------------------------

class WalkRequest : public ::google::protobuf::Message {
 public:
  WalkRequest();
  virtual ~WalkRequest();
  
  WalkRequest(const WalkRequest& from);
  
  inline WalkRequest& operator=(const WalkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WalkRequest& default_instance();
  
  void Swap(WalkRequest* other);
  
  // implements Message ----------------------------------------------
  
  WalkRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WalkRequest& from);
  void MergeFrom(const WalkRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 coordinate = 1;
  inline bool has_coordinate() const;
  inline void clear_coordinate();
  static const int kCoordinateFieldNumber = 1;
  inline ::google::protobuf::uint32 coordinate() const;
  inline void set_coordinate(::google::protobuf::uint32 value);
  
  // required bool stopWithStand = 2;
  inline bool has_stopwithstand() const;
  inline void clear_stopwithstand();
  static const int kStopWithStandFieldNumber = 2;
  inline bool stopwithstand() const;
  inline void set_stopwithstand(bool value);
  
  // required .naothmessages.Pose2D pose = 3;
  inline bool has_pose() const;
  inline void clear_pose();
  static const int kPoseFieldNumber = 3;
  inline const ::naothmessages::Pose2D& pose() const;
  inline ::naothmessages::Pose2D* mutable_pose();
  inline ::naothmessages::Pose2D* release_pose();
  
  // @@protoc_insertion_point(class_scope:naothmessages.WalkRequest)
 private:
  inline void set_has_coordinate();
  inline void clear_has_coordinate();
  inline void set_has_stopwithstand();
  inline void clear_has_stopwithstand();
  inline void set_has_pose();
  inline void clear_has_pose();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 coordinate_;
  bool stopwithstand_;
  ::naothmessages::Pose2D* pose_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static WalkRequest* default_instance_;
};
// -------------------------------------------------------------------

class MotionRequest : public ::google::protobuf::Message {
 public:
  MotionRequest();
  virtual ~MotionRequest();
  
  MotionRequest(const MotionRequest& from);
  
  inline MotionRequest& operator=(const MotionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MotionRequest& default_instance();
  
  void Swap(MotionRequest* other);
  
  // implements Message ----------------------------------------------
  
  MotionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MotionRequest& from);
  void MergeFrom(const MotionRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required uint32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);
  
  // required bool forced = 3;
  inline bool has_forced() const;
  inline void clear_forced();
  static const int kForcedFieldNumber = 3;
  inline bool forced() const;
  inline void set_forced(bool value);
  
  // optional .naothmessages.WalkRequest walkRequest = 4;
  inline bool has_walkrequest() const;
  inline void clear_walkrequest();
  static const int kWalkRequestFieldNumber = 4;
  inline const ::naothmessages::WalkRequest& walkrequest() const;
  inline ::naothmessages::WalkRequest* mutable_walkrequest();
  inline ::naothmessages::WalkRequest* release_walkrequest();
  
  // @@protoc_insertion_point(class_scope:naothmessages.MotionRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_forced();
  inline void clear_has_forced();
  inline void set_has_walkrequest();
  inline void clear_has_walkrequest();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 time_;
  ::naothmessages::WalkRequest* walkrequest_;
  bool forced_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static MotionRequest* default_instance_;
};
// -------------------------------------------------------------------

class LinePercept : public ::google::protobuf::Message {
 public:
  LinePercept();
  virtual ~LinePercept();
  
  LinePercept(const LinePercept& from);
  
  inline LinePercept& operator=(const LinePercept& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LinePercept& default_instance();
  
  void Swap(LinePercept* other);
  
  // implements Message ----------------------------------------------
  
  LinePercept* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LinePercept& from);
  void MergeFrom(const LinePercept& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .naothmessages.FieldLineSegment lines = 1;
  inline int lines_size() const;
  inline void clear_lines();
  static const int kLinesFieldNumber = 1;
  inline const ::naothmessages::FieldLineSegment& lines(int index) const;
  inline ::naothmessages::FieldLineSegment* mutable_lines(int index);
  inline ::naothmessages::FieldLineSegment* add_lines();
  inline const ::google::protobuf::RepeatedPtrField< ::naothmessages::FieldLineSegment >&
      lines() const;
  inline ::google::protobuf::RepeatedPtrField< ::naothmessages::FieldLineSegment >*
      mutable_lines();
  
  // repeated .naothmessages.Intersection intersections = 2;
  inline int intersections_size() const;
  inline void clear_intersections();
  static const int kIntersectionsFieldNumber = 2;
  inline const ::naothmessages::Intersection& intersections(int index) const;
  inline ::naothmessages::Intersection* mutable_intersections(int index);
  inline ::naothmessages::Intersection* add_intersections();
  inline const ::google::protobuf::RepeatedPtrField< ::naothmessages::Intersection >&
      intersections() const;
  inline ::google::protobuf::RepeatedPtrField< ::naothmessages::Intersection >*
      mutable_intersections();
  
  // optional .naothmessages.DoubleVector2 middleCircleCenter = 3;
  inline bool has_middlecirclecenter() const;
  inline void clear_middlecirclecenter();
  static const int kMiddleCircleCenterFieldNumber = 3;
  inline const ::naothmessages::DoubleVector2& middlecirclecenter() const;
  inline ::naothmessages::DoubleVector2* mutable_middlecirclecenter();
  inline ::naothmessages::DoubleVector2* release_middlecirclecenter();
  
  // @@protoc_insertion_point(class_scope:naothmessages.LinePercept)
 private:
  inline void set_has_middlecirclecenter();
  inline void clear_has_middlecirclecenter();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::naothmessages::FieldLineSegment > lines_;
  ::google::protobuf::RepeatedPtrField< ::naothmessages::Intersection > intersections_;
  ::naothmessages::DoubleVector2* middlecirclecenter_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static LinePercept* default_instance_;
};
// -------------------------------------------------------------------

class FSRData : public ::google::protobuf::Message {
 public:
  FSRData();
  virtual ~FSRData();
  
  FSRData(const FSRData& from);
  
  inline FSRData& operator=(const FSRData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FSRData& default_instance();
  
  void Swap(FSRData* other);
  
  // implements Message ----------------------------------------------
  
  FSRData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FSRData& from);
  void MergeFrom(const FSRData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated double force = 1;
  inline int force_size() const;
  inline void clear_force();
  static const int kForceFieldNumber = 1;
  inline double force(int index) const;
  inline void set_force(int index, double value);
  inline void add_force(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      force() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_force();
  
  // repeated double data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline double data(int index) const;
  inline void set_data(int index, double value);
  inline void add_data(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      data() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_data();
  
  // repeated bool valid = 3;
  inline int valid_size() const;
  inline void clear_valid();
  static const int kValidFieldNumber = 3;
  inline bool valid(int index) const;
  inline void set_valid(int index, bool value);
  inline void add_valid(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      valid() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_valid();
  
  // @@protoc_insertion_point(class_scope:naothmessages.FSRData)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< double > force_;
  ::google::protobuf::RepeatedField< double > data_;
  ::google::protobuf::RepeatedField< bool > valid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static FSRData* default_instance_;
};
// -------------------------------------------------------------------

class MotionStatus : public ::google::protobuf::Message {
 public:
  MotionStatus();
  virtual ~MotionStatus();
  
  MotionStatus(const MotionStatus& from);
  
  inline MotionStatus& operator=(const MotionStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MotionStatus& default_instance();
  
  void Swap(MotionStatus* other);
  
  // implements Message ----------------------------------------------
  
  MotionStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MotionStatus& from);
  void MergeFrom(const MotionStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);
  
  // required uint32 lastMotion = 2;
  inline bool has_lastmotion() const;
  inline void clear_lastmotion();
  static const int kLastMotionFieldNumber = 2;
  inline ::google::protobuf::uint32 lastmotion() const;
  inline void set_lastmotion(::google::protobuf::uint32 value);
  
  // required uint32 currentMotion = 3;
  inline bool has_currentmotion() const;
  inline void clear_currentmotion();
  static const int kCurrentMotionFieldNumber = 3;
  inline ::google::protobuf::uint32 currentmotion() const;
  inline void set_currentmotion(::google::protobuf::uint32 value);
  
  // required uint32 headMotion = 4;
  inline bool has_headmotion() const;
  inline void clear_headmotion();
  static const int kHeadMotionFieldNumber = 4;
  inline ::google::protobuf::uint32 headmotion() const;
  inline void set_headmotion(::google::protobuf::uint32 value);
  
  // required uint32 currentMotionState = 5;
  inline bool has_currentmotionstate() const;
  inline void clear_currentmotionstate();
  static const int kCurrentMotionStateFieldNumber = 5;
  inline ::google::protobuf::uint32 currentmotionstate() const;
  inline void set_currentmotionstate(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:naothmessages.MotionStatus)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_lastmotion();
  inline void clear_has_lastmotion();
  inline void set_has_currentmotion();
  inline void clear_has_currentmotion();
  inline void set_has_headmotion();
  inline void clear_has_headmotion();
  inline void set_has_currentmotionstate();
  inline void clear_has_currentmotionstate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 lastmotion_;
  ::google::protobuf::uint32 currentmotion_;
  ::google::protobuf::uint32 headmotion_;
  ::google::protobuf::uint32 currentmotionstate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static MotionStatus* default_instance_;
};
// -------------------------------------------------------------------

class OdometryData : public ::google::protobuf::Message {
 public:
  OdometryData();
  virtual ~OdometryData();
  
  OdometryData(const OdometryData& from);
  
  inline OdometryData& operator=(const OdometryData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OdometryData& default_instance();
  
  void Swap(OdometryData* other);
  
  // implements Message ----------------------------------------------
  
  OdometryData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OdometryData& from);
  void MergeFrom(const OdometryData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .naothmessages.Pose2D pose = 1;
  inline bool has_pose() const;
  inline void clear_pose();
  static const int kPoseFieldNumber = 1;
  inline const ::naothmessages::Pose2D& pose() const;
  inline ::naothmessages::Pose2D* mutable_pose();
  inline ::naothmessages::Pose2D* release_pose();
  
  // @@protoc_insertion_point(class_scope:naothmessages.OdometryData)
 private:
  inline void set_has_pose();
  inline void clear_has_pose();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::naothmessages::Pose2D* pose_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static OdometryData* default_instance_;
};
// ===================================================================


// ===================================================================

// Image

// required bytes data = 1;
inline bool Image::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Image::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Image::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Image::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Image::data() const {
  return *data_;
}
inline void Image::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Image::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Image::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Image::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* Image::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 width = 2 [default = 320];
inline bool Image::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Image::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Image::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Image::clear_width() {
  width_ = 320;
  clear_has_width();
}
inline ::google::protobuf::int32 Image::width() const {
  return width_;
}
inline void Image::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// optional int32 height = 3 [default = 240];
inline bool Image::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Image::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Image::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Image::clear_height() {
  height_ = 240;
  clear_has_height();
}
inline ::google::protobuf::int32 Image::height() const {
  return height_;
}
inline void Image::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// optional .naothmessages.CameraInfo cameraInfo = 4;
inline bool Image::has_camerainfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Image::set_has_camerainfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Image::clear_has_camerainfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Image::clear_camerainfo() {
  if (camerainfo_ != NULL) camerainfo_->::naothmessages::CameraInfo::Clear();
  clear_has_camerainfo();
}
inline const ::naothmessages::CameraInfo& Image::camerainfo() const {
  return camerainfo_ != NULL ? *camerainfo_ : *default_instance_->camerainfo_;
}
inline ::naothmessages::CameraInfo* Image::mutable_camerainfo() {
  set_has_camerainfo();
  if (camerainfo_ == NULL) camerainfo_ = new ::naothmessages::CameraInfo;
  return camerainfo_;
}
inline ::naothmessages::CameraInfo* Image::release_camerainfo() {
  clear_has_camerainfo();
  ::naothmessages::CameraInfo* temp = camerainfo_;
  camerainfo_ = NULL;
  return temp;
}

// optional .naothmessages.Image.Format format = 5 [default = YUV];
inline bool Image::has_format() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Image::set_has_format() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Image::clear_has_format() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Image::clear_format() {
  format_ = 0;
  clear_has_format();
}
inline ::naothmessages::Image_Format Image::format() const {
  return static_cast< ::naothmessages::Image_Format >(format_);
}
inline void Image::set_format(::naothmessages::Image_Format value) {
  GOOGLE_DCHECK(::naothmessages::Image_Format_IsValid(value));
  set_has_format();
  format_ = value;
}

// optional uint32 timestamp = 6;
inline bool Image::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Image::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Image::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Image::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 Image::timestamp() const {
  return timestamp_;
}
inline void Image::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// -------------------------------------------------------------------

// CameraInfo

// required int32 resolutionWidth = 1;
inline bool CameraInfo::has_resolutionwidth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraInfo::set_has_resolutionwidth() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraInfo::clear_has_resolutionwidth() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraInfo::clear_resolutionwidth() {
  resolutionwidth_ = 0;
  clear_has_resolutionwidth();
}
inline ::google::protobuf::int32 CameraInfo::resolutionwidth() const {
  return resolutionwidth_;
}
inline void CameraInfo::set_resolutionwidth(::google::protobuf::int32 value) {
  set_has_resolutionwidth();
  resolutionwidth_ = value;
}

// required int32 resolutionHeight = 2;
inline bool CameraInfo::has_resolutionheight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraInfo::set_has_resolutionheight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraInfo::clear_has_resolutionheight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraInfo::clear_resolutionheight() {
  resolutionheight_ = 0;
  clear_has_resolutionheight();
}
inline ::google::protobuf::int32 CameraInfo::resolutionheight() const {
  return resolutionheight_;
}
inline void CameraInfo::set_resolutionheight(::google::protobuf::int32 value) {
  set_has_resolutionheight();
  resolutionheight_ = value;
}

// optional .naothmessages.CameraID cameraID = 4 [default = bottom];
inline bool CameraInfo::has_cameraid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraInfo::set_has_cameraid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CameraInfo::clear_has_cameraid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CameraInfo::clear_cameraid() {
  cameraid_ = 1;
  clear_has_cameraid();
}
inline naothmessages::CameraID CameraInfo::cameraid() const {
  return static_cast< naothmessages::CameraID >(cameraid_);
}
inline void CameraInfo::set_cameraid(naothmessages::CameraID value) {
  GOOGLE_DCHECK(naothmessages::CameraID_IsValid(value));
  set_has_cameraid();
  cameraid_ = value;
}

// optional double focalLength = 5;
inline bool CameraInfo::has_focallength() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraInfo::set_has_focallength() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CameraInfo::clear_has_focallength() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CameraInfo::clear_focallength() {
  focallength_ = 0;
  clear_has_focallength();
}
inline double CameraInfo::focallength() const {
  return focallength_;
}
inline void CameraInfo::set_focallength(double value) {
  set_has_focallength();
  focallength_ = value;
}

// optional double openingAngleWidth = 6;
inline bool CameraInfo::has_openinganglewidth() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CameraInfo::set_has_openinganglewidth() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CameraInfo::clear_has_openinganglewidth() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CameraInfo::clear_openinganglewidth() {
  openinganglewidth_ = 0;
  clear_has_openinganglewidth();
}
inline double CameraInfo::openinganglewidth() const {
  return openinganglewidth_;
}
inline void CameraInfo::set_openinganglewidth(double value) {
  set_has_openinganglewidth();
  openinganglewidth_ = value;
}

// optional double openingAngleHeight = 7;
inline bool CameraInfo::has_openingangleheight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CameraInfo::set_has_openingangleheight() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CameraInfo::clear_has_openingangleheight() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CameraInfo::clear_openingangleheight() {
  openingangleheight_ = 0;
  clear_has_openingangleheight();
}
inline double CameraInfo::openingangleheight() const {
  return openingangleheight_;
}
inline void CameraInfo::set_openingangleheight(double value) {
  set_has_openingangleheight();
  openingangleheight_ = value;
}

// optional double opticalCenterX = 8;
inline bool CameraInfo::has_opticalcenterx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CameraInfo::set_has_opticalcenterx() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CameraInfo::clear_has_opticalcenterx() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CameraInfo::clear_opticalcenterx() {
  opticalcenterx_ = 0;
  clear_has_opticalcenterx();
}
inline double CameraInfo::opticalcenterx() const {
  return opticalcenterx_;
}
inline void CameraInfo::set_opticalcenterx(double value) {
  set_has_opticalcenterx();
  opticalcenterx_ = value;
}

// optional double opticalCenterY = 9;
inline bool CameraInfo::has_opticalcentery() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CameraInfo::set_has_opticalcentery() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CameraInfo::clear_has_opticalcentery() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CameraInfo::clear_opticalcentery() {
  opticalcentery_ = 0;
  clear_has_opticalcentery();
}
inline double CameraInfo::opticalcentery() const {
  return opticalcentery_;
}
inline void CameraInfo::set_opticalcentery(double value) {
  set_has_opticalcentery();
  opticalcentery_ = value;
}

// optional int64 size = 10;
inline bool CameraInfo::has_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CameraInfo::set_has_size() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CameraInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CameraInfo::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::int64 CameraInfo::size() const {
  return size_;
}
inline void CameraInfo::set_size(::google::protobuf::int64 value) {
  set_has_size();
  size_ = value;
}

// optional int64 memorysize = 11;
inline bool CameraInfo::has_memorysize() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CameraInfo::set_has_memorysize() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CameraInfo::clear_has_memorysize() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CameraInfo::clear_memorysize() {
  memorysize_ = GOOGLE_LONGLONG(0);
  clear_has_memorysize();
}
inline ::google::protobuf::int64 CameraInfo::memorysize() const {
  return memorysize_;
}
inline void CameraInfo::set_memorysize(::google::protobuf::int64 value) {
  set_has_memorysize();
  memorysize_ = value;
}

// optional double cameraRollOffset = 12;
inline bool CameraInfo::has_camerarolloffset() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CameraInfo::set_has_camerarolloffset() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CameraInfo::clear_has_camerarolloffset() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CameraInfo::clear_camerarolloffset() {
  camerarolloffset_ = 0;
  clear_has_camerarolloffset();
}
inline double CameraInfo::camerarolloffset() const {
  return camerarolloffset_;
}
inline void CameraInfo::set_camerarolloffset(double value) {
  set_has_camerarolloffset();
  camerarolloffset_ = value;
}

// optional double cameraTiltOffset = 13;
inline bool CameraInfo::has_cameratiltoffset() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CameraInfo::set_has_cameratiltoffset() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CameraInfo::clear_has_cameratiltoffset() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CameraInfo::clear_cameratiltoffset() {
  cameratiltoffset_ = 0;
  clear_has_cameratiltoffset();
}
inline double CameraInfo::cameratiltoffset() const {
  return cameratiltoffset_;
}
inline void CameraInfo::set_cameratiltoffset(double value) {
  set_has_cameratiltoffset();
  cameratiltoffset_ = value;
}

// -------------------------------------------------------------------

// JointData

// repeated double position = 1;
inline int JointData::position_size() const {
  return position_.size();
}
inline void JointData::clear_position() {
  position_.Clear();
}
inline double JointData::position(int index) const {
  return position_.Get(index);
}
inline void JointData::set_position(int index, double value) {
  position_.Set(index, value);
}
inline void JointData::add_position(double value) {
  position_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
JointData::position() const {
  return position_;
}
inline ::google::protobuf::RepeatedField< double >*
JointData::mutable_position() {
  return &position_;
}

// repeated double stiffness = 2;
inline int JointData::stiffness_size() const {
  return stiffness_.size();
}
inline void JointData::clear_stiffness() {
  stiffness_.Clear();
}
inline double JointData::stiffness(int index) const {
  return stiffness_.Get(index);
}
inline void JointData::set_stiffness(int index, double value) {
  stiffness_.Set(index, value);
}
inline void JointData::add_stiffness(double value) {
  stiffness_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
JointData::stiffness() const {
  return stiffness_;
}
inline ::google::protobuf::RepeatedField< double >*
JointData::mutable_stiffness() {
  return &stiffness_;
}

// repeated double dp = 3;
inline int JointData::dp_size() const {
  return dp_.size();
}
inline void JointData::clear_dp() {
  dp_.Clear();
}
inline double JointData::dp(int index) const {
  return dp_.Get(index);
}
inline void JointData::set_dp(int index, double value) {
  dp_.Set(index, value);
}
inline void JointData::add_dp(double value) {
  dp_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
JointData::dp() const {
  return dp_;
}
inline ::google::protobuf::RepeatedField< double >*
JointData::mutable_dp() {
  return &dp_;
}

// repeated double ddp = 4;
inline int JointData::ddp_size() const {
  return ddp_.size();
}
inline void JointData::clear_ddp() {
  ddp_.Clear();
}
inline double JointData::ddp(int index) const {
  return ddp_.Get(index);
}
inline void JointData::set_ddp(int index, double value) {
  ddp_.Set(index, value);
}
inline void JointData::add_ddp(double value) {
  ddp_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
JointData::ddp() const {
  return ddp_;
}
inline ::google::protobuf::RepeatedField< double >*
JointData::mutable_ddp() {
  return &ddp_;
}

// -------------------------------------------------------------------

// SensorJointData

// required .naothmessages.JointData jointData = 1;
inline bool SensorJointData::has_jointdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorJointData::set_has_jointdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SensorJointData::clear_has_jointdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SensorJointData::clear_jointdata() {
  if (jointdata_ != NULL) jointdata_->::naothmessages::JointData::Clear();
  clear_has_jointdata();
}
inline const ::naothmessages::JointData& SensorJointData::jointdata() const {
  return jointdata_ != NULL ? *jointdata_ : *default_instance_->jointdata_;
}
inline ::naothmessages::JointData* SensorJointData::mutable_jointdata() {
  set_has_jointdata();
  if (jointdata_ == NULL) jointdata_ = new ::naothmessages::JointData;
  return jointdata_;
}
inline ::naothmessages::JointData* SensorJointData::release_jointdata() {
  clear_has_jointdata();
  ::naothmessages::JointData* temp = jointdata_;
  jointdata_ = NULL;
  return temp;
}

// repeated double temperature = 2;
inline int SensorJointData::temperature_size() const {
  return temperature_.size();
}
inline void SensorJointData::clear_temperature() {
  temperature_.Clear();
}
inline double SensorJointData::temperature(int index) const {
  return temperature_.Get(index);
}
inline void SensorJointData::set_temperature(int index, double value) {
  temperature_.Set(index, value);
}
inline void SensorJointData::add_temperature(double value) {
  temperature_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
SensorJointData::temperature() const {
  return temperature_;
}
inline ::google::protobuf::RepeatedField< double >*
SensorJointData::mutable_temperature() {
  return &temperature_;
}

// repeated double electricCurrent = 3;
inline int SensorJointData::electriccurrent_size() const {
  return electriccurrent_.size();
}
inline void SensorJointData::clear_electriccurrent() {
  electriccurrent_.Clear();
}
inline double SensorJointData::electriccurrent(int index) const {
  return electriccurrent_.Get(index);
}
inline void SensorJointData::set_electriccurrent(int index, double value) {
  electriccurrent_.Set(index, value);
}
inline void SensorJointData::add_electriccurrent(double value) {
  electriccurrent_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
SensorJointData::electriccurrent() const {
  return electriccurrent_;
}
inline ::google::protobuf::RepeatedField< double >*
SensorJointData::mutable_electriccurrent() {
  return &electriccurrent_;
}

// -------------------------------------------------------------------

// CameraMatrix

// required .naothmessages.Pose3D pose = 1;
inline bool CameraMatrix::has_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraMatrix::set_has_pose() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraMatrix::clear_has_pose() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraMatrix::clear_pose() {
  if (pose_ != NULL) pose_->::naothmessages::Pose3D::Clear();
  clear_has_pose();
}
inline const ::naothmessages::Pose3D& CameraMatrix::pose() const {
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::naothmessages::Pose3D* CameraMatrix::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) pose_ = new ::naothmessages::Pose3D;
  return pose_;
}
inline ::naothmessages::Pose3D* CameraMatrix::release_pose() {
  clear_has_pose();
  ::naothmessages::Pose3D* temp = pose_;
  pose_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// FrameInfo

// required uint32 frameNumber = 1;
inline bool FrameInfo::has_framenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FrameInfo::set_has_framenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FrameInfo::clear_has_framenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FrameInfo::clear_framenumber() {
  framenumber_ = 0u;
  clear_has_framenumber();
}
inline ::google::protobuf::uint32 FrameInfo::framenumber() const {
  return framenumber_;
}
inline void FrameInfo::set_framenumber(::google::protobuf::uint32 value) {
  set_has_framenumber();
  framenumber_ = value;
}

// required uint32 time = 2;
inline bool FrameInfo::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FrameInfo::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FrameInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FrameInfo::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 FrameInfo::time() const {
  return time_;
}
inline void FrameInfo::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// required uint32 basicTimeStep = 3;
inline bool FrameInfo::has_basictimestep() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FrameInfo::set_has_basictimestep() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FrameInfo::clear_has_basictimestep() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FrameInfo::clear_basictimestep() {
  basictimestep_ = 0u;
  clear_has_basictimestep();
}
inline ::google::protobuf::uint32 FrameInfo::basictimestep() const {
  return basictimestep_;
}
inline void FrameInfo::set_basictimestep(::google::protobuf::uint32 value) {
  set_has_basictimestep();
  basictimestep_ = value;
}

// -------------------------------------------------------------------

// BallPercept

// optional bool ballWasSeen = 1;
inline bool BallPercept::has_ballwasseen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BallPercept::set_has_ballwasseen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BallPercept::clear_has_ballwasseen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BallPercept::clear_ballwasseen() {
  ballwasseen_ = false;
  clear_has_ballwasseen();
}
inline bool BallPercept::ballwasseen() const {
  return ballwasseen_;
}
inline void BallPercept::set_ballwasseen(bool value) {
  set_has_ballwasseen();
  ballwasseen_ = value;
}

// optional .naothmessages.DoubleVector2 centerInImage = 2;
inline bool BallPercept::has_centerinimage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BallPercept::set_has_centerinimage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BallPercept::clear_has_centerinimage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BallPercept::clear_centerinimage() {
  if (centerinimage_ != NULL) centerinimage_->::naothmessages::DoubleVector2::Clear();
  clear_has_centerinimage();
}
inline const ::naothmessages::DoubleVector2& BallPercept::centerinimage() const {
  return centerinimage_ != NULL ? *centerinimage_ : *default_instance_->centerinimage_;
}
inline ::naothmessages::DoubleVector2* BallPercept::mutable_centerinimage() {
  set_has_centerinimage();
  if (centerinimage_ == NULL) centerinimage_ = new ::naothmessages::DoubleVector2;
  return centerinimage_;
}
inline ::naothmessages::DoubleVector2* BallPercept::release_centerinimage() {
  clear_has_centerinimage();
  ::naothmessages::DoubleVector2* temp = centerinimage_;
  centerinimage_ = NULL;
  return temp;
}

// optional double radiusInImage = 3;
inline bool BallPercept::has_radiusinimage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BallPercept::set_has_radiusinimage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BallPercept::clear_has_radiusinimage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BallPercept::clear_radiusinimage() {
  radiusinimage_ = 0;
  clear_has_radiusinimage();
}
inline double BallPercept::radiusinimage() const {
  return radiusinimage_;
}
inline void BallPercept::set_radiusinimage(double value) {
  set_has_radiusinimage();
  radiusinimage_ = value;
}

// optional .naothmessages.Color ballColor = 4;
inline bool BallPercept::has_ballcolor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BallPercept::set_has_ballcolor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BallPercept::clear_has_ballcolor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BallPercept::clear_ballcolor() {
  ballcolor_ = 0;
  clear_has_ballcolor();
}
inline naothmessages::Color BallPercept::ballcolor() const {
  return static_cast< naothmessages::Color >(ballcolor_);
}
inline void BallPercept::set_ballcolor(naothmessages::Color value) {
  GOOGLE_DCHECK(naothmessages::Color_IsValid(value));
  set_has_ballcolor();
  ballcolor_ = value;
}

// optional .naothmessages.DoubleVector2 bearingBasedOffsetOnField = 5;
inline bool BallPercept::has_bearingbasedoffsetonfield() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BallPercept::set_has_bearingbasedoffsetonfield() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BallPercept::clear_has_bearingbasedoffsetonfield() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BallPercept::clear_bearingbasedoffsetonfield() {
  if (bearingbasedoffsetonfield_ != NULL) bearingbasedoffsetonfield_->::naothmessages::DoubleVector2::Clear();
  clear_has_bearingbasedoffsetonfield();
}
inline const ::naothmessages::DoubleVector2& BallPercept::bearingbasedoffsetonfield() const {
  return bearingbasedoffsetonfield_ != NULL ? *bearingbasedoffsetonfield_ : *default_instance_->bearingbasedoffsetonfield_;
}
inline ::naothmessages::DoubleVector2* BallPercept::mutable_bearingbasedoffsetonfield() {
  set_has_bearingbasedoffsetonfield();
  if (bearingbasedoffsetonfield_ == NULL) bearingbasedoffsetonfield_ = new ::naothmessages::DoubleVector2;
  return bearingbasedoffsetonfield_;
}
inline ::naothmessages::DoubleVector2* BallPercept::release_bearingbasedoffsetonfield() {
  clear_has_bearingbasedoffsetonfield();
  ::naothmessages::DoubleVector2* temp = bearingbasedoffsetonfield_;
  bearingbasedoffsetonfield_ = NULL;
  return temp;
}

// optional .naothmessages.FrameInfo frameInfoWhenBallWasSeen = 6;
inline bool BallPercept::has_frameinfowhenballwasseen() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BallPercept::set_has_frameinfowhenballwasseen() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BallPercept::clear_has_frameinfowhenballwasseen() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BallPercept::clear_frameinfowhenballwasseen() {
  if (frameinfowhenballwasseen_ != NULL) frameinfowhenballwasseen_->::naothmessages::FrameInfo::Clear();
  clear_has_frameinfowhenballwasseen();
}
inline const ::naothmessages::FrameInfo& BallPercept::frameinfowhenballwasseen() const {
  return frameinfowhenballwasseen_ != NULL ? *frameinfowhenballwasseen_ : *default_instance_->frameinfowhenballwasseen_;
}
inline ::naothmessages::FrameInfo* BallPercept::mutable_frameinfowhenballwasseen() {
  set_has_frameinfowhenballwasseen();
  if (frameinfowhenballwasseen_ == NULL) frameinfowhenballwasseen_ = new ::naothmessages::FrameInfo;
  return frameinfowhenballwasseen_;
}
inline ::naothmessages::FrameInfo* BallPercept::release_frameinfowhenballwasseen() {
  clear_has_frameinfowhenballwasseen();
  ::naothmessages::FrameInfo* temp = frameinfowhenballwasseen_;
  frameinfowhenballwasseen_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// GoalPercept

// optional double angleToSeenGoal = 1;
inline bool GoalPercept::has_angletoseengoal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GoalPercept::set_has_angletoseengoal() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GoalPercept::clear_has_angletoseengoal() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GoalPercept::clear_angletoseengoal() {
  angletoseengoal_ = 0;
  clear_has_angletoseengoal();
}
inline double GoalPercept::angletoseengoal() const {
  return angletoseengoal_;
}
inline void GoalPercept::set_angletoseengoal(double value) {
  set_has_angletoseengoal();
  angletoseengoal_ = value;
}

// optional .naothmessages.DoubleVector3 goalCentroid = 2;
inline bool GoalPercept::has_goalcentroid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GoalPercept::set_has_goalcentroid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GoalPercept::clear_has_goalcentroid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GoalPercept::clear_goalcentroid() {
  if (goalcentroid_ != NULL) goalcentroid_->::naothmessages::DoubleVector3::Clear();
  clear_has_goalcentroid();
}
inline const ::naothmessages::DoubleVector3& GoalPercept::goalcentroid() const {
  return goalcentroid_ != NULL ? *goalcentroid_ : *default_instance_->goalcentroid_;
}
inline ::naothmessages::DoubleVector3* GoalPercept::mutable_goalcentroid() {
  set_has_goalcentroid();
  if (goalcentroid_ == NULL) goalcentroid_ = new ::naothmessages::DoubleVector3;
  return goalcentroid_;
}
inline ::naothmessages::DoubleVector3* GoalPercept::release_goalcentroid() {
  clear_has_goalcentroid();
  ::naothmessages::DoubleVector3* temp = goalcentroid_;
  goalcentroid_ = NULL;
  return temp;
}

// optional int32 numberOfSeenPosts = 3;
inline bool GoalPercept::has_numberofseenposts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GoalPercept::set_has_numberofseenposts() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GoalPercept::clear_has_numberofseenposts() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GoalPercept::clear_numberofseenposts() {
  numberofseenposts_ = 0;
  clear_has_numberofseenposts();
}
inline ::google::protobuf::int32 GoalPercept::numberofseenposts() const {
  return numberofseenposts_;
}
inline void GoalPercept::set_numberofseenposts(::google::protobuf::int32 value) {
  set_has_numberofseenposts();
  numberofseenposts_ = value;
}

// repeated .naothmessages.GoalPost post = 4;
inline int GoalPercept::post_size() const {
  return post_.size();
}
inline void GoalPercept::clear_post() {
  post_.Clear();
}
inline const ::naothmessages::GoalPost& GoalPercept::post(int index) const {
  return post_.Get(index);
}
inline ::naothmessages::GoalPost* GoalPercept::mutable_post(int index) {
  return post_.Mutable(index);
}
inline ::naothmessages::GoalPost* GoalPercept::add_post() {
  return post_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::naothmessages::GoalPost >&
GoalPercept::post() const {
  return post_;
}
inline ::google::protobuf::RepeatedPtrField< ::naothmessages::GoalPost >*
GoalPercept::mutable_post() {
  return &post_;
}

// -------------------------------------------------------------------

// HeadMotionRequest

// required uint32 id = 1;
inline bool HeadMotionRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeadMotionRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeadMotionRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeadMotionRequest::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 HeadMotionRequest::id() const {
  return id_;
}
inline void HeadMotionRequest::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 cameraID = 2;
inline bool HeadMotionRequest::has_cameraid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeadMotionRequest::set_has_cameraid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeadMotionRequest::clear_has_cameraid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeadMotionRequest::clear_cameraid() {
  cameraid_ = 0u;
  clear_has_cameraid();
}
inline ::google::protobuf::uint32 HeadMotionRequest::cameraid() const {
  return cameraid_;
}
inline void HeadMotionRequest::set_cameraid(::google::protobuf::uint32 value) {
  set_has_cameraid();
  cameraid_ = value;
}

// optional .naothmessages.DoubleVector2 targetJointPosition = 3;
inline bool HeadMotionRequest::has_targetjointposition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeadMotionRequest::set_has_targetjointposition() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeadMotionRequest::clear_has_targetjointposition() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeadMotionRequest::clear_targetjointposition() {
  if (targetjointposition_ != NULL) targetjointposition_->::naothmessages::DoubleVector2::Clear();
  clear_has_targetjointposition();
}
inline const ::naothmessages::DoubleVector2& HeadMotionRequest::targetjointposition() const {
  return targetjointposition_ != NULL ? *targetjointposition_ : *default_instance_->targetjointposition_;
}
inline ::naothmessages::DoubleVector2* HeadMotionRequest::mutable_targetjointposition() {
  set_has_targetjointposition();
  if (targetjointposition_ == NULL) targetjointposition_ = new ::naothmessages::DoubleVector2;
  return targetjointposition_;
}
inline ::naothmessages::DoubleVector2* HeadMotionRequest::release_targetjointposition() {
  clear_has_targetjointposition();
  ::naothmessages::DoubleVector2* temp = targetjointposition_;
  targetjointposition_ = NULL;
  return temp;
}

// optional .naothmessages.DoubleVector2 targetPointInImage = 4;
inline bool HeadMotionRequest::has_targetpointinimage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HeadMotionRequest::set_has_targetpointinimage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HeadMotionRequest::clear_has_targetpointinimage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HeadMotionRequest::clear_targetpointinimage() {
  if (targetpointinimage_ != NULL) targetpointinimage_->::naothmessages::DoubleVector2::Clear();
  clear_has_targetpointinimage();
}
inline const ::naothmessages::DoubleVector2& HeadMotionRequest::targetpointinimage() const {
  return targetpointinimage_ != NULL ? *targetpointinimage_ : *default_instance_->targetpointinimage_;
}
inline ::naothmessages::DoubleVector2* HeadMotionRequest::mutable_targetpointinimage() {
  set_has_targetpointinimage();
  if (targetpointinimage_ == NULL) targetpointinimage_ = new ::naothmessages::DoubleVector2;
  return targetpointinimage_;
}
inline ::naothmessages::DoubleVector2* HeadMotionRequest::release_targetpointinimage() {
  clear_has_targetpointinimage();
  ::naothmessages::DoubleVector2* temp = targetpointinimage_;
  targetpointinimage_ = NULL;
  return temp;
}

// optional .naothmessages.DoubleVector3 targetPointInTheWorld = 5;
inline bool HeadMotionRequest::has_targetpointintheworld() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HeadMotionRequest::set_has_targetpointintheworld() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HeadMotionRequest::clear_has_targetpointintheworld() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HeadMotionRequest::clear_targetpointintheworld() {
  if (targetpointintheworld_ != NULL) targetpointintheworld_->::naothmessages::DoubleVector3::Clear();
  clear_has_targetpointintheworld();
}
inline const ::naothmessages::DoubleVector3& HeadMotionRequest::targetpointintheworld() const {
  return targetpointintheworld_ != NULL ? *targetpointintheworld_ : *default_instance_->targetpointintheworld_;
}
inline ::naothmessages::DoubleVector3* HeadMotionRequest::mutable_targetpointintheworld() {
  set_has_targetpointintheworld();
  if (targetpointintheworld_ == NULL) targetpointintheworld_ = new ::naothmessages::DoubleVector3;
  return targetpointintheworld_;
}
inline ::naothmessages::DoubleVector3* HeadMotionRequest::release_targetpointintheworld() {
  clear_has_targetpointintheworld();
  ::naothmessages::DoubleVector3* temp = targetpointintheworld_;
  targetpointintheworld_ = NULL;
  return temp;
}

// optional .naothmessages.DoubleVector3 searchCenter = 6;
inline bool HeadMotionRequest::has_searchcenter() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HeadMotionRequest::set_has_searchcenter() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HeadMotionRequest::clear_has_searchcenter() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HeadMotionRequest::clear_searchcenter() {
  if (searchcenter_ != NULL) searchcenter_->::naothmessages::DoubleVector3::Clear();
  clear_has_searchcenter();
}
inline const ::naothmessages::DoubleVector3& HeadMotionRequest::searchcenter() const {
  return searchcenter_ != NULL ? *searchcenter_ : *default_instance_->searchcenter_;
}
inline ::naothmessages::DoubleVector3* HeadMotionRequest::mutable_searchcenter() {
  set_has_searchcenter();
  if (searchcenter_ == NULL) searchcenter_ = new ::naothmessages::DoubleVector3;
  return searchcenter_;
}
inline ::naothmessages::DoubleVector3* HeadMotionRequest::release_searchcenter() {
  clear_has_searchcenter();
  ::naothmessages::DoubleVector3* temp = searchcenter_;
  searchcenter_ = NULL;
  return temp;
}

// optional .naothmessages.DoubleVector3 searchSize = 7;
inline bool HeadMotionRequest::has_searchsize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HeadMotionRequest::set_has_searchsize() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HeadMotionRequest::clear_has_searchsize() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HeadMotionRequest::clear_searchsize() {
  if (searchsize_ != NULL) searchsize_->::naothmessages::DoubleVector3::Clear();
  clear_has_searchsize();
}
inline const ::naothmessages::DoubleVector3& HeadMotionRequest::searchsize() const {
  return searchsize_ != NULL ? *searchsize_ : *default_instance_->searchsize_;
}
inline ::naothmessages::DoubleVector3* HeadMotionRequest::mutable_searchsize() {
  set_has_searchsize();
  if (searchsize_ == NULL) searchsize_ = new ::naothmessages::DoubleVector3;
  return searchsize_;
}
inline ::naothmessages::DoubleVector3* HeadMotionRequest::release_searchsize() {
  clear_has_searchsize();
  ::naothmessages::DoubleVector3* temp = searchsize_;
  searchsize_ = NULL;
  return temp;
}

// optional bool searchDirection = 8;
inline bool HeadMotionRequest::has_searchdirection() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HeadMotionRequest::set_has_searchdirection() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HeadMotionRequest::clear_has_searchdirection() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HeadMotionRequest::clear_searchdirection() {
  searchdirection_ = false;
  clear_has_searchdirection();
}
inline bool HeadMotionRequest::searchdirection() const {
  return searchdirection_;
}
inline void HeadMotionRequest::set_searchdirection(bool value) {
  set_has_searchdirection();
  searchdirection_ = value;
}

// -------------------------------------------------------------------

// WalkRequest

// required uint32 coordinate = 1;
inline bool WalkRequest::has_coordinate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WalkRequest::set_has_coordinate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WalkRequest::clear_has_coordinate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WalkRequest::clear_coordinate() {
  coordinate_ = 0u;
  clear_has_coordinate();
}
inline ::google::protobuf::uint32 WalkRequest::coordinate() const {
  return coordinate_;
}
inline void WalkRequest::set_coordinate(::google::protobuf::uint32 value) {
  set_has_coordinate();
  coordinate_ = value;
}

// required bool stopWithStand = 2;
inline bool WalkRequest::has_stopwithstand() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WalkRequest::set_has_stopwithstand() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WalkRequest::clear_has_stopwithstand() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WalkRequest::clear_stopwithstand() {
  stopwithstand_ = false;
  clear_has_stopwithstand();
}
inline bool WalkRequest::stopwithstand() const {
  return stopwithstand_;
}
inline void WalkRequest::set_stopwithstand(bool value) {
  set_has_stopwithstand();
  stopwithstand_ = value;
}

// required .naothmessages.Pose2D pose = 3;
inline bool WalkRequest::has_pose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WalkRequest::set_has_pose() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WalkRequest::clear_has_pose() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WalkRequest::clear_pose() {
  if (pose_ != NULL) pose_->::naothmessages::Pose2D::Clear();
  clear_has_pose();
}
inline const ::naothmessages::Pose2D& WalkRequest::pose() const {
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::naothmessages::Pose2D* WalkRequest::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) pose_ = new ::naothmessages::Pose2D;
  return pose_;
}
inline ::naothmessages::Pose2D* WalkRequest::release_pose() {
  clear_has_pose();
  ::naothmessages::Pose2D* temp = pose_;
  pose_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// MotionRequest

// required uint32 id = 1;
inline bool MotionRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MotionRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MotionRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MotionRequest::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 MotionRequest::id() const {
  return id_;
}
inline void MotionRequest::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 time = 2;
inline bool MotionRequest::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MotionRequest::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MotionRequest::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MotionRequest::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 MotionRequest::time() const {
  return time_;
}
inline void MotionRequest::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// required bool forced = 3;
inline bool MotionRequest::has_forced() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MotionRequest::set_has_forced() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MotionRequest::clear_has_forced() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MotionRequest::clear_forced() {
  forced_ = false;
  clear_has_forced();
}
inline bool MotionRequest::forced() const {
  return forced_;
}
inline void MotionRequest::set_forced(bool value) {
  set_has_forced();
  forced_ = value;
}

// optional .naothmessages.WalkRequest walkRequest = 4;
inline bool MotionRequest::has_walkrequest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MotionRequest::set_has_walkrequest() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MotionRequest::clear_has_walkrequest() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MotionRequest::clear_walkrequest() {
  if (walkrequest_ != NULL) walkrequest_->::naothmessages::WalkRequest::Clear();
  clear_has_walkrequest();
}
inline const ::naothmessages::WalkRequest& MotionRequest::walkrequest() const {
  return walkrequest_ != NULL ? *walkrequest_ : *default_instance_->walkrequest_;
}
inline ::naothmessages::WalkRequest* MotionRequest::mutable_walkrequest() {
  set_has_walkrequest();
  if (walkrequest_ == NULL) walkrequest_ = new ::naothmessages::WalkRequest;
  return walkrequest_;
}
inline ::naothmessages::WalkRequest* MotionRequest::release_walkrequest() {
  clear_has_walkrequest();
  ::naothmessages::WalkRequest* temp = walkrequest_;
  walkrequest_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// LinePercept

// repeated .naothmessages.FieldLineSegment lines = 1;
inline int LinePercept::lines_size() const {
  return lines_.size();
}
inline void LinePercept::clear_lines() {
  lines_.Clear();
}
inline const ::naothmessages::FieldLineSegment& LinePercept::lines(int index) const {
  return lines_.Get(index);
}
inline ::naothmessages::FieldLineSegment* LinePercept::mutable_lines(int index) {
  return lines_.Mutable(index);
}
inline ::naothmessages::FieldLineSegment* LinePercept::add_lines() {
  return lines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::naothmessages::FieldLineSegment >&
LinePercept::lines() const {
  return lines_;
}
inline ::google::protobuf::RepeatedPtrField< ::naothmessages::FieldLineSegment >*
LinePercept::mutable_lines() {
  return &lines_;
}

// repeated .naothmessages.Intersection intersections = 2;
inline int LinePercept::intersections_size() const {
  return intersections_.size();
}
inline void LinePercept::clear_intersections() {
  intersections_.Clear();
}
inline const ::naothmessages::Intersection& LinePercept::intersections(int index) const {
  return intersections_.Get(index);
}
inline ::naothmessages::Intersection* LinePercept::mutable_intersections(int index) {
  return intersections_.Mutable(index);
}
inline ::naothmessages::Intersection* LinePercept::add_intersections() {
  return intersections_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::naothmessages::Intersection >&
LinePercept::intersections() const {
  return intersections_;
}
inline ::google::protobuf::RepeatedPtrField< ::naothmessages::Intersection >*
LinePercept::mutable_intersections() {
  return &intersections_;
}

// optional .naothmessages.DoubleVector2 middleCircleCenter = 3;
inline bool LinePercept::has_middlecirclecenter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LinePercept::set_has_middlecirclecenter() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LinePercept::clear_has_middlecirclecenter() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LinePercept::clear_middlecirclecenter() {
  if (middlecirclecenter_ != NULL) middlecirclecenter_->::naothmessages::DoubleVector2::Clear();
  clear_has_middlecirclecenter();
}
inline const ::naothmessages::DoubleVector2& LinePercept::middlecirclecenter() const {
  return middlecirclecenter_ != NULL ? *middlecirclecenter_ : *default_instance_->middlecirclecenter_;
}
inline ::naothmessages::DoubleVector2* LinePercept::mutable_middlecirclecenter() {
  set_has_middlecirclecenter();
  if (middlecirclecenter_ == NULL) middlecirclecenter_ = new ::naothmessages::DoubleVector2;
  return middlecirclecenter_;
}
inline ::naothmessages::DoubleVector2* LinePercept::release_middlecirclecenter() {
  clear_has_middlecirclecenter();
  ::naothmessages::DoubleVector2* temp = middlecirclecenter_;
  middlecirclecenter_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// FSRData

// repeated double force = 1;
inline int FSRData::force_size() const {
  return force_.size();
}
inline void FSRData::clear_force() {
  force_.Clear();
}
inline double FSRData::force(int index) const {
  return force_.Get(index);
}
inline void FSRData::set_force(int index, double value) {
  force_.Set(index, value);
}
inline void FSRData::add_force(double value) {
  force_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
FSRData::force() const {
  return force_;
}
inline ::google::protobuf::RepeatedField< double >*
FSRData::mutable_force() {
  return &force_;
}

// repeated double data = 2;
inline int FSRData::data_size() const {
  return data_.size();
}
inline void FSRData::clear_data() {
  data_.Clear();
}
inline double FSRData::data(int index) const {
  return data_.Get(index);
}
inline void FSRData::set_data(int index, double value) {
  data_.Set(index, value);
}
inline void FSRData::add_data(double value) {
  data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
FSRData::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedField< double >*
FSRData::mutable_data() {
  return &data_;
}

// repeated bool valid = 3;
inline int FSRData::valid_size() const {
  return valid_.size();
}
inline void FSRData::clear_valid() {
  valid_.Clear();
}
inline bool FSRData::valid(int index) const {
  return valid_.Get(index);
}
inline void FSRData::set_valid(int index, bool value) {
  valid_.Set(index, value);
}
inline void FSRData::add_valid(bool value) {
  valid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
FSRData::valid() const {
  return valid_;
}
inline ::google::protobuf::RepeatedField< bool >*
FSRData::mutable_valid() {
  return &valid_;
}

// -------------------------------------------------------------------

// MotionStatus

// required uint32 time = 1;
inline bool MotionStatus::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MotionStatus::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MotionStatus::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MotionStatus::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 MotionStatus::time() const {
  return time_;
}
inline void MotionStatus::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// required uint32 lastMotion = 2;
inline bool MotionStatus::has_lastmotion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MotionStatus::set_has_lastmotion() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MotionStatus::clear_has_lastmotion() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MotionStatus::clear_lastmotion() {
  lastmotion_ = 0u;
  clear_has_lastmotion();
}
inline ::google::protobuf::uint32 MotionStatus::lastmotion() const {
  return lastmotion_;
}
inline void MotionStatus::set_lastmotion(::google::protobuf::uint32 value) {
  set_has_lastmotion();
  lastmotion_ = value;
}

// required uint32 currentMotion = 3;
inline bool MotionStatus::has_currentmotion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MotionStatus::set_has_currentmotion() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MotionStatus::clear_has_currentmotion() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MotionStatus::clear_currentmotion() {
  currentmotion_ = 0u;
  clear_has_currentmotion();
}
inline ::google::protobuf::uint32 MotionStatus::currentmotion() const {
  return currentmotion_;
}
inline void MotionStatus::set_currentmotion(::google::protobuf::uint32 value) {
  set_has_currentmotion();
  currentmotion_ = value;
}

// required uint32 headMotion = 4;
inline bool MotionStatus::has_headmotion() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MotionStatus::set_has_headmotion() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MotionStatus::clear_has_headmotion() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MotionStatus::clear_headmotion() {
  headmotion_ = 0u;
  clear_has_headmotion();
}
inline ::google::protobuf::uint32 MotionStatus::headmotion() const {
  return headmotion_;
}
inline void MotionStatus::set_headmotion(::google::protobuf::uint32 value) {
  set_has_headmotion();
  headmotion_ = value;
}

// required uint32 currentMotionState = 5;
inline bool MotionStatus::has_currentmotionstate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MotionStatus::set_has_currentmotionstate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MotionStatus::clear_has_currentmotionstate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MotionStatus::clear_currentmotionstate() {
  currentmotionstate_ = 0u;
  clear_has_currentmotionstate();
}
inline ::google::protobuf::uint32 MotionStatus::currentmotionstate() const {
  return currentmotionstate_;
}
inline void MotionStatus::set_currentmotionstate(::google::protobuf::uint32 value) {
  set_has_currentmotionstate();
  currentmotionstate_ = value;
}

// -------------------------------------------------------------------

// OdometryData

// required .naothmessages.Pose2D pose = 1;
inline bool OdometryData::has_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OdometryData::set_has_pose() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OdometryData::clear_has_pose() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OdometryData::clear_pose() {
  if (pose_ != NULL) pose_->::naothmessages::Pose2D::Clear();
  clear_has_pose();
}
inline const ::naothmessages::Pose2D& OdometryData::pose() const {
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::naothmessages::Pose2D* OdometryData::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) pose_ = new ::naothmessages::Pose2D;
  return pose_;
}
inline ::naothmessages::Pose2D* OdometryData::release_pose() {
  clear_has_pose();
  ::naothmessages::Pose2D* temp = pose_;
  pose_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace naothmessages

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::naothmessages::Image_Format>() {
  return ::naothmessages::Image_Format_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Representations_2eproto__INCLUDED
