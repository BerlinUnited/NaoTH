// added by NaoTH 
#if defined(__GNUC__) && defined(_NAOTH_CHECK_CONVERSION_)
#if __GNUC__ > 3 && __GNUC_MINOR__ > 5
#pragma GCC diagnostic push
#endif
#pragma GCC diagnostic ignored "-Wconversion"
#endif

// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Framework-Representations.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace naothmessages {

namespace {

const ::google::protobuf::Descriptor* Image_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Image_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Image_Format_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CameraInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JointData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JointData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SensorJointData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorJointData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UltraSoundReceiveData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UltraSoundReceiveData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FSRData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FSRData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Framework_2dRepresentations_2eproto() {
  protobuf_AddDesc_Framework_2dRepresentations_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Framework-Representations.proto");
  GOOGLE_CHECK(file != NULL);
  Image_descriptor_ = file->message_type(0);
  static const int Image_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, camerainfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, timestamp_),
  };
  Image_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Image_descriptor_,
      Image::default_instance_,
      Image_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Image));
  Image_Format_descriptor_ = Image_descriptor_->enum_type(0);
  CameraInfo_descriptor_ = file->message_type(1);
  static const int CameraInfo_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, resolutionwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, resolutionheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, cameraid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, focallength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, openinganglewidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, openingangleheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, opticalcenterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, opticalcentery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, memorysize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, camerarolloffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, cameratiltoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, correctionoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, headjointoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, transformation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, openinganglediagonal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, pixelsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, focus_),
  };
  CameraInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraInfo_descriptor_,
      CameraInfo::default_instance_,
      CameraInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraInfo));
  JointData_descriptor_ = file->message_type(2);
  static const int JointData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointData, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointData, stiffness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointData, dp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointData, ddp_),
  };
  JointData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JointData_descriptor_,
      JointData::default_instance_,
      JointData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JointData));
  SensorJointData_descriptor_ = file->message_type(3);
  static const int SensorJointData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorJointData, jointdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorJointData, temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorJointData, electriccurrent_),
  };
  SensorJointData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SensorJointData_descriptor_,
      SensorJointData::default_instance_,
      SensorJointData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorJointData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorJointData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SensorJointData));
  UltraSoundReceiveData_descriptor_ = file->message_type(4);
  static const int UltraSoundReceiveData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltraSoundReceiveData, ultrasoundtimestep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltraSoundReceiveData, rawdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltraSoundReceiveData, dataleft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltraSoundReceiveData, dataright_),
  };
  UltraSoundReceiveData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UltraSoundReceiveData_descriptor_,
      UltraSoundReceiveData::default_instance_,
      UltraSoundReceiveData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltraSoundReceiveData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltraSoundReceiveData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UltraSoundReceiveData));
  FrameInfo_descriptor_ = file->message_type(5);
  static const int FrameInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameInfo, framenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameInfo, time_),
  };
  FrameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameInfo_descriptor_,
      FrameInfo::default_instance_,
      FrameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameInfo));
  FSRData_descriptor_ = file->message_type(6);
  static const int FSRData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSRData, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSRData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSRData, valid_),
  };
  FSRData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FSRData_descriptor_,
      FSRData::default_instance_,
      FSRData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSRData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSRData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FSRData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Framework_2dRepresentations_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Image_descriptor_, &Image::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraInfo_descriptor_, &CameraInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JointData_descriptor_, &JointData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SensorJointData_descriptor_, &SensorJointData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UltraSoundReceiveData_descriptor_, &UltraSoundReceiveData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameInfo_descriptor_, &FrameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FSRData_descriptor_, &FSRData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Framework_2dRepresentations_2eproto() {
  delete Image::default_instance_;
  delete Image_reflection_;
  delete CameraInfo::default_instance_;
  delete CameraInfo_reflection_;
  delete JointData::default_instance_;
  delete JointData_reflection_;
  delete SensorJointData::default_instance_;
  delete SensorJointData_reflection_;
  delete UltraSoundReceiveData::default_instance_;
  delete UltraSoundReceiveData_reflection_;
  delete FrameInfo::default_instance_;
  delete FrameInfo_reflection_;
  delete FSRData::default_instance_;
  delete FSRData_reflection_;
}

void protobuf_AddDesc_Framework_2dRepresentations_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::naothmessages::protobuf_AddDesc_CommonTypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037Framework-Representations.proto\022\rnaoth"
    "messages\032\021CommonTypes.proto\"\321\001\n\005Image\022\014\n"
    "\004data\030\001 \002(\014\022\022\n\005width\030\002 \001(\005:\003320\022\023\n\006heigh"
    "t\030\003 \001(\005:\003240\022-\n\ncameraInfo\030\004 \001(\0132\031.naoth"
    "messages.CameraInfo\0220\n\006format\030\005 \001(\0162\033.na"
    "othmessages.Image.Format:\003YUV\022\021\n\ttimesta"
    "mp\030\006 \001(\r\"\035\n\006Format\022\007\n\003YUV\020\000\022\n\n\006YUV422\020\001\""
    "\306\004\n\nCameraInfo\022\027\n\017resolutionWidth\030\001 \002(\005\022"
    "\030\n\020resolutionHeight\030\002 \002(\005\0221\n\010cameraID\030\004 "
    "\001(\0162\027.naothmessages.CameraID:\006bottom\022\027\n\013"
    "focalLength\030\005 \001(\001B\002\030\001\022\035\n\021openingAngleWid"
    "th\030\006 \001(\001B\002\030\001\022\036\n\022openingAngleHeight\030\007 \001(\001"
    "B\002\030\001\022\032\n\016opticalCenterX\030\010 \001(\001B\002\030\001\022\032\n\016opti"
    "calCenterY\030\t \001(\001B\002\030\001\022\020\n\004size\030\n \001(\003B\002\030\001\022\026"
    "\n\nmemorysize\030\013 \001(\003B\002\030\001\022\034\n\020cameraRollOffs"
    "et\030\014 \001(\001B\002\030\001\022\034\n\020cameraTiltOffset\030\r \001(\001B\002"
    "\030\001\0226\n\020correctionOffset\030\022 \003(\0132\034.naothmess"
    "ages.DoubleVector2\0225\n\017headJointOffset\030\023 "
    "\003(\0132\034.naothmessages.DoubleVector2\022-\n\016tra"
    "nsformation\030\016 \003(\0132\025.naothmessages.Pose3D"
    "\022\034\n\024openingAngleDiagonal\030\017 \001(\001\022\021\n\tpixelS"
    "ize\030\020 \001(\001\022\r\n\005focus\030\021 \001(\001\"I\n\tJointData\022\020\n"
    "\010position\030\001 \003(\001\022\021\n\tstiffness\030\002 \003(\001\022\n\n\002dp"
    "\030\003 \003(\001\022\013\n\003ddp\030\004 \003(\001\"l\n\017SensorJointData\022+"
    "\n\tjointData\030\001 \002(\0132\030.naothmessages.JointD"
    "ata\022\023\n\013temperature\030\002 \003(\001\022\027\n\017electricCurr"
    "ent\030\003 \003(\001\"i\n\025UltraSoundReceiveData\022\032\n\022ul"
    "traSoundTimeStep\030\001 \001(\r\022\017\n\007rawdata\030\002 \002(\001\022"
    "\020\n\010dataLeft\030\003 \003(\001\022\021\n\tdataRight\030\004 \003(\001\".\n\t"
    "FrameInfo\022\023\n\013frameNumber\030\001 \002(\r\022\014\n\004time\030\002"
    " \002(\r\"5\n\007FSRData\022\r\n\005force\030\001 \003(\001\022\014\n\004data\030\002"
    " \003(\001\022\r\n\005valid\030\003 \003(\010B\026\n\024de.naoth.rc.messa"
    "ges", 1283);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Framework-Representations.proto", &protobuf_RegisterTypes);
  Image::default_instance_ = new Image();
  CameraInfo::default_instance_ = new CameraInfo();
  JointData::default_instance_ = new JointData();
  SensorJointData::default_instance_ = new SensorJointData();
  UltraSoundReceiveData::default_instance_ = new UltraSoundReceiveData();
  FrameInfo::default_instance_ = new FrameInfo();
  FSRData::default_instance_ = new FSRData();
  Image::default_instance_->InitAsDefaultInstance();
  CameraInfo::default_instance_->InitAsDefaultInstance();
  JointData::default_instance_->InitAsDefaultInstance();
  SensorJointData::default_instance_->InitAsDefaultInstance();
  UltraSoundReceiveData::default_instance_->InitAsDefaultInstance();
  FrameInfo::default_instance_->InitAsDefaultInstance();
  FSRData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Framework_2dRepresentations_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Framework_2dRepresentations_2eproto {
  StaticDescriptorInitializer_Framework_2dRepresentations_2eproto() {
    protobuf_AddDesc_Framework_2dRepresentations_2eproto();
  }
} static_descriptor_initializer_Framework_2dRepresentations_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Image_Format_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Image_Format_descriptor_;
}
bool Image_Format_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Image_Format Image::YUV;
const Image_Format Image::YUV422;
const Image_Format Image::Format_MIN;
const Image_Format Image::Format_MAX;
const int Image::Format_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Image::kDataFieldNumber;
const int Image::kWidthFieldNumber;
const int Image::kHeightFieldNumber;
const int Image::kCameraInfoFieldNumber;
const int Image::kFormatFieldNumber;
const int Image::kTimestampFieldNumber;
#endif  // !_MSC_VER

Image::Image()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Image::InitAsDefaultInstance() {
  camerainfo_ = const_cast< ::naothmessages::CameraInfo*>(&::naothmessages::CameraInfo::default_instance());
}

Image::Image(const Image& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Image::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  width_ = 320;
  height_ = 240;
  camerainfo_ = NULL;
  format_ = 0;
  timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Image::~Image() {
  SharedDtor();
}

void Image::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
    delete camerainfo_;
  }
}

void Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Image::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Image_descriptor_;
}

const Image& Image::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Framework_2dRepresentations_2eproto();  return *default_instance_;
}

Image* Image::default_instance_ = NULL;

Image* Image::New() const {
  return new Image;
}

void Image::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    width_ = 320;
    height_ = 240;
    if (has_camerainfo()) {
      if (camerainfo_ != NULL) camerainfo_->::naothmessages::CameraInfo::Clear();
    }
    format_ = 0;
    timestamp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }
      
      // optional int32 width = 2 [default = 320];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }
      
      // optional int32 height = 3 [default = 240];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cameraInfo;
        break;
      }
      
      // optional .naothmessages.CameraInfo cameraInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cameraInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camerainfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_format;
        break;
      }
      
      // optional .naothmessages.Image.Format format = 5 [default = YUV];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::naothmessages::Image_Format_IsValid(value)) {
            set_format(static_cast< ::naothmessages::Image_Format >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_timestamp;
        break;
      }
      
      // optional uint32 timestamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(), output);
  }
  
  // optional int32 width = 2 [default = 320];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }
  
  // optional int32 height = 3 [default = 240];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }
  
  // optional .naothmessages.CameraInfo cameraInfo = 4;
  if (has_camerainfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->camerainfo(), output);
  }
  
  // optional .naothmessages.Image.Format format = 5 [default = YUV];
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->format(), output);
  }
  
  // optional uint32 timestamp = 6;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Image::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }
  
  // optional int32 width = 2 [default = 320];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }
  
  // optional int32 height = 3 [default = 240];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }
  
  // optional .naothmessages.CameraInfo cameraInfo = 4;
  if (has_camerainfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->camerainfo(), target);
  }
  
  // optional .naothmessages.Image.Format format = 5 [default = YUV];
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->format(), target);
  }
  
  // optional uint32 timestamp = 6;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Image::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
    // optional int32 width = 2 [default = 320];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }
    
    // optional int32 height = 3 [default = 240];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }
    
    // optional .naothmessages.CameraInfo cameraInfo = 4;
    if (has_camerainfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camerainfo());
    }
    
    // optional .naothmessages.Image.Format format = 5 [default = YUV];
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
    }
    
    // optional uint32 timestamp = 6;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Image::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Image* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Image*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_camerainfo()) {
      mutable_camerainfo()->::naothmessages::CameraInfo::MergeFrom(from.camerainfo());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Image::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_camerainfo()) {
    if (!this->camerainfo().IsInitialized()) return false;
  }
  return true;
}

void Image::Swap(Image* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(camerainfo_, other->camerainfo_);
    std::swap(format_, other->format_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Image::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Image_descriptor_;
  metadata.reflection = Image_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CameraInfo::kResolutionWidthFieldNumber;
const int CameraInfo::kResolutionHeightFieldNumber;
const int CameraInfo::kCameraIDFieldNumber;
const int CameraInfo::kFocalLengthFieldNumber;
const int CameraInfo::kOpeningAngleWidthFieldNumber;
const int CameraInfo::kOpeningAngleHeightFieldNumber;
const int CameraInfo::kOpticalCenterXFieldNumber;
const int CameraInfo::kOpticalCenterYFieldNumber;
const int CameraInfo::kSizeFieldNumber;
const int CameraInfo::kMemorysizeFieldNumber;
const int CameraInfo::kCameraRollOffsetFieldNumber;
const int CameraInfo::kCameraTiltOffsetFieldNumber;
const int CameraInfo::kCorrectionOffsetFieldNumber;
const int CameraInfo::kHeadJointOffsetFieldNumber;
const int CameraInfo::kTransformationFieldNumber;
const int CameraInfo::kOpeningAngleDiagonalFieldNumber;
const int CameraInfo::kPixelSizeFieldNumber;
const int CameraInfo::kFocusFieldNumber;
#endif  // !_MSC_VER

CameraInfo::CameraInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CameraInfo::InitAsDefaultInstance() {
}

CameraInfo::CameraInfo(const CameraInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CameraInfo::SharedCtor() {
  _cached_size_ = 0;
  resolutionwidth_ = 0;
  resolutionheight_ = 0;
  cameraid_ = 1;
  focallength_ = 0;
  openinganglewidth_ = 0;
  openingangleheight_ = 0;
  opticalcenterx_ = 0;
  opticalcentery_ = 0;
  size_ = GOOGLE_LONGLONG(0);
  memorysize_ = GOOGLE_LONGLONG(0);
  camerarolloffset_ = 0;
  cameratiltoffset_ = 0;
  openinganglediagonal_ = 0;
  pixelsize_ = 0;
  focus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraInfo::~CameraInfo() {
  SharedDtor();
}

void CameraInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CameraInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraInfo_descriptor_;
}

const CameraInfo& CameraInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Framework_2dRepresentations_2eproto();  return *default_instance_;
}

CameraInfo* CameraInfo::default_instance_ = NULL;

CameraInfo* CameraInfo::New() const {
  return new CameraInfo;
}

void CameraInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resolutionwidth_ = 0;
    resolutionheight_ = 0;
    cameraid_ = 1;
    focallength_ = 0;
    openinganglewidth_ = 0;
    openingangleheight_ = 0;
    opticalcenterx_ = 0;
    opticalcentery_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    size_ = GOOGLE_LONGLONG(0);
    memorysize_ = GOOGLE_LONGLONG(0);
    camerarolloffset_ = 0;
    cameratiltoffset_ = 0;
    openinganglediagonal_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    pixelsize_ = 0;
    focus_ = 0;
  }
  correctionoffset_.Clear();
  headjointoffset_.Clear();
  transformation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 resolutionWidth = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resolutionwidth_)));
          set_has_resolutionwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_resolutionHeight;
        break;
      }
      
      // required int32 resolutionHeight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resolutionHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resolutionheight_)));
          set_has_resolutionheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cameraID;
        break;
      }
      
      // optional .naothmessages.CameraID cameraID = 4 [default = bottom];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cameraID:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (naothmessages::CameraID_IsValid(value)) {
            set_cameraid(static_cast< naothmessages::CameraID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_focalLength;
        break;
      }
      
      // optional double focalLength = 5 [deprecated = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_focalLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &focallength_)));
          set_has_focallength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_openingAngleWidth;
        break;
      }
      
      // optional double openingAngleWidth = 6 [deprecated = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_openingAngleWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openinganglewidth_)));
          set_has_openinganglewidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_openingAngleHeight;
        break;
      }
      
      // optional double openingAngleHeight = 7 [deprecated = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_openingAngleHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openingangleheight_)));
          set_has_openingangleheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_opticalCenterX;
        break;
      }
      
      // optional double opticalCenterX = 8 [deprecated = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_opticalCenterX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &opticalcenterx_)));
          set_has_opticalcenterx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_opticalCenterY;
        break;
      }
      
      // optional double opticalCenterY = 9 [deprecated = true];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_opticalCenterY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &opticalcentery_)));
          set_has_opticalcentery();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_size;
        break;
      }
      
      // optional int64 size = 10 [deprecated = true];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_memorysize;
        break;
      }
      
      // optional int64 memorysize = 11 [deprecated = true];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memorysize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &memorysize_)));
          set_has_memorysize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_cameraRollOffset;
        break;
      }
      
      // optional double cameraRollOffset = 12 [deprecated = true];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cameraRollOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &camerarolloffset_)));
          set_has_camerarolloffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_cameraTiltOffset;
        break;
      }
      
      // optional double cameraTiltOffset = 13 [deprecated = true];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cameraTiltOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cameratiltoffset_)));
          set_has_cameratiltoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_transformation;
        break;
      }
      
      // repeated .naothmessages.Pose3D transformation = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transformation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_transformation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_transformation;
        if (input->ExpectTag(121)) goto parse_openingAngleDiagonal;
        break;
      }
      
      // optional double openingAngleDiagonal = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_openingAngleDiagonal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openinganglediagonal_)));
          set_has_openinganglediagonal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_pixelSize;
        break;
      }
      
      // optional double pixelSize = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pixelSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pixelsize_)));
          set_has_pixelsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_focus;
        break;
      }
      
      // optional double focus = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_focus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &focus_)));
          set_has_focus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_correctionOffset;
        break;
      }
      
      // repeated .naothmessages.DoubleVector2 correctionOffset = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_correctionOffset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_correctionoffset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_correctionOffset;
        if (input->ExpectTag(154)) goto parse_headJointOffset;
        break;
      }
      
      // repeated .naothmessages.DoubleVector2 headJointOffset = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headJointOffset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_headjointoffset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_headJointOffset;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CameraInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 resolutionWidth = 1;
  if (has_resolutionwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->resolutionwidth(), output);
  }
  
  // required int32 resolutionHeight = 2;
  if (has_resolutionheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->resolutionheight(), output);
  }
  
  // optional .naothmessages.CameraID cameraID = 4 [default = bottom];
  if (has_cameraid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->cameraid(), output);
  }
  
  // optional double focalLength = 5 [deprecated = true];
  if (has_focallength()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->focallength(), output);
  }
  
  // optional double openingAngleWidth = 6 [deprecated = true];
  if (has_openinganglewidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->openinganglewidth(), output);
  }
  
  // optional double openingAngleHeight = 7 [deprecated = true];
  if (has_openingangleheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->openingangleheight(), output);
  }
  
  // optional double opticalCenterX = 8 [deprecated = true];
  if (has_opticalcenterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->opticalcenterx(), output);
  }
  
  // optional double opticalCenterY = 9 [deprecated = true];
  if (has_opticalcentery()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->opticalcentery(), output);
  }
  
  // optional int64 size = 10 [deprecated = true];
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->size(), output);
  }
  
  // optional int64 memorysize = 11 [deprecated = true];
  if (has_memorysize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->memorysize(), output);
  }
  
  // optional double cameraRollOffset = 12 [deprecated = true];
  if (has_camerarolloffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->camerarolloffset(), output);
  }
  
  // optional double cameraTiltOffset = 13 [deprecated = true];
  if (has_cameratiltoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->cameratiltoffset(), output);
  }
  
  // repeated .naothmessages.Pose3D transformation = 14;
  for (int i = 0; i < this->transformation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->transformation(i), output);
  }
  
  // optional double openingAngleDiagonal = 15;
  if (has_openinganglediagonal()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->openinganglediagonal(), output);
  }
  
  // optional double pixelSize = 16;
  if (has_pixelsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->pixelsize(), output);
  }
  
  // optional double focus = 17;
  if (has_focus()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->focus(), output);
  }
  
  // repeated .naothmessages.DoubleVector2 correctionOffset = 18;
  for (int i = 0; i < this->correctionoffset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->correctionoffset(i), output);
  }
  
  // repeated .naothmessages.DoubleVector2 headJointOffset = 19;
  for (int i = 0; i < this->headjointoffset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->headjointoffset(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CameraInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 resolutionWidth = 1;
  if (has_resolutionwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->resolutionwidth(), target);
  }
  
  // required int32 resolutionHeight = 2;
  if (has_resolutionheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->resolutionheight(), target);
  }
  
  // optional .naothmessages.CameraID cameraID = 4 [default = bottom];
  if (has_cameraid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->cameraid(), target);
  }
  
  // optional double focalLength = 5 [deprecated = true];
  if (has_focallength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->focallength(), target);
  }
  
  // optional double openingAngleWidth = 6 [deprecated = true];
  if (has_openinganglewidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->openinganglewidth(), target);
  }
  
  // optional double openingAngleHeight = 7 [deprecated = true];
  if (has_openingangleheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->openingangleheight(), target);
  }
  
  // optional double opticalCenterX = 8 [deprecated = true];
  if (has_opticalcenterx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->opticalcenterx(), target);
  }
  
  // optional double opticalCenterY = 9 [deprecated = true];
  if (has_opticalcentery()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->opticalcentery(), target);
  }
  
  // optional int64 size = 10 [deprecated = true];
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->size(), target);
  }
  
  // optional int64 memorysize = 11 [deprecated = true];
  if (has_memorysize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->memorysize(), target);
  }
  
  // optional double cameraRollOffset = 12 [deprecated = true];
  if (has_camerarolloffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->camerarolloffset(), target);
  }
  
  // optional double cameraTiltOffset = 13 [deprecated = true];
  if (has_cameratiltoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->cameratiltoffset(), target);
  }
  
  // repeated .naothmessages.Pose3D transformation = 14;
  for (int i = 0; i < this->transformation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->transformation(i), target);
  }
  
  // optional double openingAngleDiagonal = 15;
  if (has_openinganglediagonal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->openinganglediagonal(), target);
  }
  
  // optional double pixelSize = 16;
  if (has_pixelsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->pixelsize(), target);
  }
  
  // optional double focus = 17;
  if (has_focus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->focus(), target);
  }
  
  // repeated .naothmessages.DoubleVector2 correctionOffset = 18;
  for (int i = 0; i < this->correctionoffset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->correctionoffset(i), target);
  }
  
  // repeated .naothmessages.DoubleVector2 headJointOffset = 19;
  for (int i = 0; i < this->headjointoffset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->headjointoffset(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CameraInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 resolutionWidth = 1;
    if (has_resolutionwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resolutionwidth());
    }
    
    // required int32 resolutionHeight = 2;
    if (has_resolutionheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resolutionheight());
    }
    
    // optional .naothmessages.CameraID cameraID = 4 [default = bottom];
    if (has_cameraid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cameraid());
    }
    
    // optional double focalLength = 5 [deprecated = true];
    if (has_focallength()) {
      total_size += 1 + 8;
    }
    
    // optional double openingAngleWidth = 6 [deprecated = true];
    if (has_openinganglewidth()) {
      total_size += 1 + 8;
    }
    
    // optional double openingAngleHeight = 7 [deprecated = true];
    if (has_openingangleheight()) {
      total_size += 1 + 8;
    }
    
    // optional double opticalCenterX = 8 [deprecated = true];
    if (has_opticalcenterx()) {
      total_size += 1 + 8;
    }
    
    // optional double opticalCenterY = 9 [deprecated = true];
    if (has_opticalcentery()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 size = 10 [deprecated = true];
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->size());
    }
    
    // optional int64 memorysize = 11 [deprecated = true];
    if (has_memorysize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->memorysize());
    }
    
    // optional double cameraRollOffset = 12 [deprecated = true];
    if (has_camerarolloffset()) {
      total_size += 1 + 8;
    }
    
    // optional double cameraTiltOffset = 13 [deprecated = true];
    if (has_cameratiltoffset()) {
      total_size += 1 + 8;
    }
    
    // optional double openingAngleDiagonal = 15;
    if (has_openinganglediagonal()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double pixelSize = 16;
    if (has_pixelsize()) {
      total_size += 2 + 8;
    }
    
    // optional double focus = 17;
    if (has_focus()) {
      total_size += 2 + 8;
    }
    
  }
  // repeated .naothmessages.DoubleVector2 correctionOffset = 18;
  total_size += 2 * this->correctionoffset_size();
  for (int i = 0; i < this->correctionoffset_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->correctionoffset(i));
  }
  
  // repeated .naothmessages.DoubleVector2 headJointOffset = 19;
  total_size += 2 * this->headjointoffset_size();
  for (int i = 0; i < this->headjointoffset_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->headjointoffset(i));
  }
  
  // repeated .naothmessages.Pose3D transformation = 14;
  total_size += 1 * this->transformation_size();
  for (int i = 0; i < this->transformation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transformation(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraInfo::MergeFrom(const CameraInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  correctionoffset_.MergeFrom(from.correctionoffset_);
  headjointoffset_.MergeFrom(from.headjointoffset_);
  transformation_.MergeFrom(from.transformation_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resolutionwidth()) {
      set_resolutionwidth(from.resolutionwidth());
    }
    if (from.has_resolutionheight()) {
      set_resolutionheight(from.resolutionheight());
    }
    if (from.has_cameraid()) {
      set_cameraid(from.cameraid());
    }
    if (from.has_focallength()) {
      set_focallength(from.focallength());
    }
    if (from.has_openinganglewidth()) {
      set_openinganglewidth(from.openinganglewidth());
    }
    if (from.has_openingangleheight()) {
      set_openingangleheight(from.openingangleheight());
    }
    if (from.has_opticalcenterx()) {
      set_opticalcenterx(from.opticalcenterx());
    }
    if (from.has_opticalcentery()) {
      set_opticalcentery(from.opticalcentery());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_memorysize()) {
      set_memorysize(from.memorysize());
    }
    if (from.has_camerarolloffset()) {
      set_camerarolloffset(from.camerarolloffset());
    }
    if (from.has_cameratiltoffset()) {
      set_cameratiltoffset(from.cameratiltoffset());
    }
    if (from.has_openinganglediagonal()) {
      set_openinganglediagonal(from.openinganglediagonal());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_pixelsize()) {
      set_pixelsize(from.pixelsize());
    }
    if (from.has_focus()) {
      set_focus(from.focus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraInfo::CopyFrom(const CameraInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < correctionoffset_size(); i++) {
    if (!this->correctionoffset(i).IsInitialized()) return false;
  }
  for (int i = 0; i < headjointoffset_size(); i++) {
    if (!this->headjointoffset(i).IsInitialized()) return false;
  }
  for (int i = 0; i < transformation_size(); i++) {
    if (!this->transformation(i).IsInitialized()) return false;
  }
  return true;
}

void CameraInfo::Swap(CameraInfo* other) {
  if (other != this) {
    std::swap(resolutionwidth_, other->resolutionwidth_);
    std::swap(resolutionheight_, other->resolutionheight_);
    std::swap(cameraid_, other->cameraid_);
    std::swap(focallength_, other->focallength_);
    std::swap(openinganglewidth_, other->openinganglewidth_);
    std::swap(openingangleheight_, other->openingangleheight_);
    std::swap(opticalcenterx_, other->opticalcenterx_);
    std::swap(opticalcentery_, other->opticalcentery_);
    std::swap(size_, other->size_);
    std::swap(memorysize_, other->memorysize_);
    std::swap(camerarolloffset_, other->camerarolloffset_);
    std::swap(cameratiltoffset_, other->cameratiltoffset_);
    correctionoffset_.Swap(&other->correctionoffset_);
    headjointoffset_.Swap(&other->headjointoffset_);
    transformation_.Swap(&other->transformation_);
    std::swap(openinganglediagonal_, other->openinganglediagonal_);
    std::swap(pixelsize_, other->pixelsize_);
    std::swap(focus_, other->focus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraInfo_descriptor_;
  metadata.reflection = CameraInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JointData::kPositionFieldNumber;
const int JointData::kStiffnessFieldNumber;
const int JointData::kDpFieldNumber;
const int JointData::kDdpFieldNumber;
#endif  // !_MSC_VER

JointData::JointData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JointData::InitAsDefaultInstance() {
}

JointData::JointData(const JointData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JointData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JointData::~JointData() {
  SharedDtor();
}

void JointData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JointData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JointData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JointData_descriptor_;
}

const JointData& JointData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Framework_2dRepresentations_2eproto();  return *default_instance_;
}

JointData* JointData::default_instance_ = NULL;

JointData* JointData::New() const {
  return new JointData;
}

void JointData::Clear() {
  position_.Clear();
  stiffness_.Clear();
  dp_.Clear();
  ddp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JointData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_position())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_position())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_position;
        if (input->ExpectTag(17)) goto parse_stiffness;
        break;
      }
      
      // repeated double stiffness = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_stiffness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_stiffness())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_stiffness())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_stiffness;
        if (input->ExpectTag(25)) goto parse_dp;
        break;
      }
      
      // repeated double dp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_dp())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dp())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_dp;
        if (input->ExpectTag(33)) goto parse_ddp;
        break;
      }
      
      // repeated double ddp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ddp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_ddp())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_ddp())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_ddp;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JointData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double position = 1;
  for (int i = 0; i < this->position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->position(i), output);
  }
  
  // repeated double stiffness = 2;
  for (int i = 0; i < this->stiffness_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->stiffness(i), output);
  }
  
  // repeated double dp = 3;
  for (int i = 0; i < this->dp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->dp(i), output);
  }
  
  // repeated double ddp = 4;
  for (int i = 0; i < this->ddp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->ddp(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JointData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double position = 1;
  for (int i = 0; i < this->position_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->position(i), target);
  }
  
  // repeated double stiffness = 2;
  for (int i = 0; i < this->stiffness_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->stiffness(i), target);
  }
  
  // repeated double dp = 3;
  for (int i = 0; i < this->dp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->dp(i), target);
  }
  
  // repeated double ddp = 4;
  for (int i = 0; i < this->ddp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->ddp(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JointData::ByteSize() const {
  int total_size = 0;
  
  // repeated double position = 1;
  {
    int data_size = 0;
    data_size = 8 * this->position_size();
    total_size += 1 * this->position_size() + data_size;
  }
  
  // repeated double stiffness = 2;
  {
    int data_size = 0;
    data_size = 8 * this->stiffness_size();
    total_size += 1 * this->stiffness_size() + data_size;
  }
  
  // repeated double dp = 3;
  {
    int data_size = 0;
    data_size = 8 * this->dp_size();
    total_size += 1 * this->dp_size() + data_size;
  }
  
  // repeated double ddp = 4;
  {
    int data_size = 0;
    data_size = 8 * this->ddp_size();
    total_size += 1 * this->ddp_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JointData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JointData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JointData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JointData::MergeFrom(const JointData& from) {
  GOOGLE_CHECK_NE(&from, this);
  position_.MergeFrom(from.position_);
  stiffness_.MergeFrom(from.stiffness_);
  dp_.MergeFrom(from.dp_);
  ddp_.MergeFrom(from.ddp_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JointData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointData::CopyFrom(const JointData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointData::IsInitialized() const {
  
  return true;
}

void JointData::Swap(JointData* other) {
  if (other != this) {
    position_.Swap(&other->position_);
    stiffness_.Swap(&other->stiffness_);
    dp_.Swap(&other->dp_);
    ddp_.Swap(&other->ddp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JointData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JointData_descriptor_;
  metadata.reflection = JointData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SensorJointData::kJointDataFieldNumber;
const int SensorJointData::kTemperatureFieldNumber;
const int SensorJointData::kElectricCurrentFieldNumber;
#endif  // !_MSC_VER

SensorJointData::SensorJointData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SensorJointData::InitAsDefaultInstance() {
  jointdata_ = const_cast< ::naothmessages::JointData*>(&::naothmessages::JointData::default_instance());
}

SensorJointData::SensorJointData(const SensorJointData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SensorJointData::SharedCtor() {
  _cached_size_ = 0;
  jointdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorJointData::~SensorJointData() {
  SharedDtor();
}

void SensorJointData::SharedDtor() {
  if (this != default_instance_) {
    delete jointdata_;
  }
}

void SensorJointData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorJointData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorJointData_descriptor_;
}

const SensorJointData& SensorJointData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Framework_2dRepresentations_2eproto();  return *default_instance_;
}

SensorJointData* SensorJointData::default_instance_ = NULL;

SensorJointData* SensorJointData::New() const {
  return new SensorJointData;
}

void SensorJointData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_jointdata()) {
      if (jointdata_ != NULL) jointdata_->::naothmessages::JointData::Clear();
    }
  }
  temperature_.Clear();
  electriccurrent_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SensorJointData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .naothmessages.JointData jointData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jointdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_temperature;
        break;
      }
      
      // repeated double temperature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_temperature())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_temperature())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_temperature;
        if (input->ExpectTag(25)) goto parse_electricCurrent;
        break;
      }
      
      // repeated double electricCurrent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_electricCurrent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_electriccurrent())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_electriccurrent())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_electricCurrent;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SensorJointData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .naothmessages.JointData jointData = 1;
  if (has_jointdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->jointdata(), output);
  }
  
  // repeated double temperature = 2;
  for (int i = 0; i < this->temperature_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->temperature(i), output);
  }
  
  // repeated double electricCurrent = 3;
  for (int i = 0; i < this->electriccurrent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->electriccurrent(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SensorJointData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .naothmessages.JointData jointData = 1;
  if (has_jointdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->jointdata(), target);
  }
  
  // repeated double temperature = 2;
  for (int i = 0; i < this->temperature_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->temperature(i), target);
  }
  
  // repeated double electricCurrent = 3;
  for (int i = 0; i < this->electriccurrent_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->electriccurrent(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SensorJointData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .naothmessages.JointData jointData = 1;
    if (has_jointdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jointdata());
    }
    
  }
  // repeated double temperature = 2;
  {
    int data_size = 0;
    data_size = 8 * this->temperature_size();
    total_size += 1 * this->temperature_size() + data_size;
  }
  
  // repeated double electricCurrent = 3;
  {
    int data_size = 0;
    data_size = 8 * this->electriccurrent_size();
    total_size += 1 * this->electriccurrent_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorJointData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SensorJointData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SensorJointData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SensorJointData::MergeFrom(const SensorJointData& from) {
  GOOGLE_CHECK_NE(&from, this);
  temperature_.MergeFrom(from.temperature_);
  electriccurrent_.MergeFrom(from.electriccurrent_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jointdata()) {
      mutable_jointdata()->::naothmessages::JointData::MergeFrom(from.jointdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SensorJointData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorJointData::CopyFrom(const SensorJointData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorJointData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SensorJointData::Swap(SensorJointData* other) {
  if (other != this) {
    std::swap(jointdata_, other->jointdata_);
    temperature_.Swap(&other->temperature_);
    electriccurrent_.Swap(&other->electriccurrent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SensorJointData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorJointData_descriptor_;
  metadata.reflection = SensorJointData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UltraSoundReceiveData::kUltraSoundTimeStepFieldNumber;
const int UltraSoundReceiveData::kRawdataFieldNumber;
const int UltraSoundReceiveData::kDataLeftFieldNumber;
const int UltraSoundReceiveData::kDataRightFieldNumber;
#endif  // !_MSC_VER

UltraSoundReceiveData::UltraSoundReceiveData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UltraSoundReceiveData::InitAsDefaultInstance() {
}

UltraSoundReceiveData::UltraSoundReceiveData(const UltraSoundReceiveData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UltraSoundReceiveData::SharedCtor() {
  _cached_size_ = 0;
  ultrasoundtimestep_ = 0u;
  rawdata_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UltraSoundReceiveData::~UltraSoundReceiveData() {
  SharedDtor();
}

void UltraSoundReceiveData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UltraSoundReceiveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UltraSoundReceiveData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UltraSoundReceiveData_descriptor_;
}

const UltraSoundReceiveData& UltraSoundReceiveData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Framework_2dRepresentations_2eproto();  return *default_instance_;
}

UltraSoundReceiveData* UltraSoundReceiveData::default_instance_ = NULL;

UltraSoundReceiveData* UltraSoundReceiveData::New() const {
  return new UltraSoundReceiveData;
}

void UltraSoundReceiveData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ultrasoundtimestep_ = 0u;
    rawdata_ = 0;
  }
  dataleft_.Clear();
  dataright_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UltraSoundReceiveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ultraSoundTimeStep = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ultrasoundtimestep_)));
          set_has_ultrasoundtimestep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_rawdata;
        break;
      }
      
      // required double rawdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_rawdata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rawdata_)));
          set_has_rawdata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_dataLeft;
        break;
      }
      
      // repeated double dataLeft = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dataLeft:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_dataleft())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dataleft())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_dataLeft;
        if (input->ExpectTag(33)) goto parse_dataRight;
        break;
      }
      
      // repeated double dataRight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dataRight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_dataright())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dataright())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_dataRight;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UltraSoundReceiveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ultraSoundTimeStep = 1;
  if (has_ultrasoundtimestep()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ultrasoundtimestep(), output);
  }
  
  // required double rawdata = 2;
  if (has_rawdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->rawdata(), output);
  }
  
  // repeated double dataLeft = 3;
  for (int i = 0; i < this->dataleft_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->dataleft(i), output);
  }
  
  // repeated double dataRight = 4;
  for (int i = 0; i < this->dataright_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->dataright(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UltraSoundReceiveData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ultraSoundTimeStep = 1;
  if (has_ultrasoundtimestep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ultrasoundtimestep(), target);
  }
  
  // required double rawdata = 2;
  if (has_rawdata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->rawdata(), target);
  }
  
  // repeated double dataLeft = 3;
  for (int i = 0; i < this->dataleft_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->dataleft(i), target);
  }
  
  // repeated double dataRight = 4;
  for (int i = 0; i < this->dataright_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->dataright(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UltraSoundReceiveData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ultraSoundTimeStep = 1;
    if (has_ultrasoundtimestep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ultrasoundtimestep());
    }
    
    // required double rawdata = 2;
    if (has_rawdata()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated double dataLeft = 3;
  {
    int data_size = 0;
    data_size = 8 * this->dataleft_size();
    total_size += 1 * this->dataleft_size() + data_size;
  }
  
  // repeated double dataRight = 4;
  {
    int data_size = 0;
    data_size = 8 * this->dataright_size();
    total_size += 1 * this->dataright_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UltraSoundReceiveData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UltraSoundReceiveData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UltraSoundReceiveData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UltraSoundReceiveData::MergeFrom(const UltraSoundReceiveData& from) {
  GOOGLE_CHECK_NE(&from, this);
  dataleft_.MergeFrom(from.dataleft_);
  dataright_.MergeFrom(from.dataright_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ultrasoundtimestep()) {
      set_ultrasoundtimestep(from.ultrasoundtimestep());
    }
    if (from.has_rawdata()) {
      set_rawdata(from.rawdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UltraSoundReceiveData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UltraSoundReceiveData::CopyFrom(const UltraSoundReceiveData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltraSoundReceiveData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void UltraSoundReceiveData::Swap(UltraSoundReceiveData* other) {
  if (other != this) {
    std::swap(ultrasoundtimestep_, other->ultrasoundtimestep_);
    std::swap(rawdata_, other->rawdata_);
    dataleft_.Swap(&other->dataleft_);
    dataright_.Swap(&other->dataright_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UltraSoundReceiveData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UltraSoundReceiveData_descriptor_;
  metadata.reflection = UltraSoundReceiveData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrameInfo::kFrameNumberFieldNumber;
const int FrameInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

FrameInfo::FrameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FrameInfo::InitAsDefaultInstance() {
}

FrameInfo::FrameInfo(const FrameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FrameInfo::SharedCtor() {
  _cached_size_ = 0;
  framenumber_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameInfo::~FrameInfo() {
  SharedDtor();
}

void FrameInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FrameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameInfo_descriptor_;
}

const FrameInfo& FrameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Framework_2dRepresentations_2eproto();  return *default_instance_;
}

FrameInfo* FrameInfo::default_instance_ = NULL;

FrameInfo* FrameInfo::New() const {
  return new FrameInfo;
}

void FrameInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    framenumber_ = 0u;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 frameNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framenumber_)));
          set_has_framenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // required uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FrameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 frameNumber = 1;
  if (has_framenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->framenumber(), output);
  }
  
  // required uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FrameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 frameNumber = 1;
  if (has_framenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->framenumber(), target);
  }
  
  // required uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FrameInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 frameNumber = 1;
    if (has_framenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framenumber());
    }
    
    // required uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameInfo::MergeFrom(const FrameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framenumber()) {
      set_framenumber(from.framenumber());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameInfo::CopyFrom(const FrameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void FrameInfo::Swap(FrameInfo* other) {
  if (other != this) {
    std::swap(framenumber_, other->framenumber_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameInfo_descriptor_;
  metadata.reflection = FrameInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FSRData::kForceFieldNumber;
const int FSRData::kDataFieldNumber;
const int FSRData::kValidFieldNumber;
#endif  // !_MSC_VER

FSRData::FSRData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FSRData::InitAsDefaultInstance() {
}

FSRData::FSRData(const FSRData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FSRData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FSRData::~FSRData() {
  SharedDtor();
}

void FSRData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FSRData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FSRData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FSRData_descriptor_;
}

const FSRData& FSRData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Framework_2dRepresentations_2eproto();  return *default_instance_;
}

FSRData* FSRData::default_instance_ = NULL;

FSRData* FSRData::New() const {
  return new FSRData;
}

void FSRData::Clear() {
  force_.Clear();
  data_.Clear();
  valid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FSRData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double force = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_force())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_force())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_force;
        if (input->ExpectTag(17)) goto parse_data;
        break;
      }
      
      // repeated double data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_data;
        if (input->ExpectTag(24)) goto parse_valid;
        break;
      }
      
      // repeated bool valid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 24, input, this->mutable_valid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_valid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FSRData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double force = 1;
  for (int i = 0; i < this->force_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->force(i), output);
  }
  
  // repeated double data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->data(i), output);
  }
  
  // repeated bool valid = 3;
  for (int i = 0; i < this->valid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      3, this->valid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FSRData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double force = 1;
  for (int i = 0; i < this->force_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->force(i), target);
  }
  
  // repeated double data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->data(i), target);
  }
  
  // repeated bool valid = 3;
  for (int i = 0; i < this->valid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(3, this->valid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FSRData::ByteSize() const {
  int total_size = 0;
  
  // repeated double force = 1;
  {
    int data_size = 0;
    data_size = 8 * this->force_size();
    total_size += 1 * this->force_size() + data_size;
  }
  
  // repeated double data = 2;
  {
    int data_size = 0;
    data_size = 8 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }
  
  // repeated bool valid = 3;
  {
    int data_size = 0;
    data_size = 1 * this->valid_size();
    total_size += 1 * this->valid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FSRData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FSRData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FSRData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FSRData::MergeFrom(const FSRData& from) {
  GOOGLE_CHECK_NE(&from, this);
  force_.MergeFrom(from.force_);
  data_.MergeFrom(from.data_);
  valid_.MergeFrom(from.valid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FSRData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FSRData::CopyFrom(const FSRData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FSRData::IsInitialized() const {
  
  return true;
}

void FSRData::Swap(FSRData* other) {
  if (other != this) {
    force_.Swap(&other->force_);
    data_.Swap(&other->data_);
    valid_.Swap(&other->valid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FSRData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FSRData_descriptor_;
  metadata.reflection = FSRData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace naothmessages

// @@protoc_insertion_point(global_scope)


// added by NaoTH 
#if defined(__GNUC__) && defined(_NAOTH_CHECK_CONVERSION_)
#if __GNUC__ > 3 && __GNUC_MINOR__ > 5
#pragma GCC diagnostic pop
#else
#pragma GCC diagnostic error "-Wconversion"
#endif
#endif

