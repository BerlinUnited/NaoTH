/* Messages used by the simulator
**
*/

package de.fumanoids.message;

import "msg_position.proto";
import "msg_connection.proto";
import "msg_fumanoid.proto";


message SimulatorConnect {

	// SensorSelection
	message SensorConnection {
		message SensorConfigValue {
			optional int32      value_int   = 10;
			optional string     value_str   = 11;
			optional bool       value_bool  = 12;
		}
	
		message SensorConfigOption {
			// value type definition (used below)
			enum ValueType {
				INTEGER = 10;
				STRING  = 11;
				BOOLEAN = 12;
			}
		
			// key (name of option)
			required string key = 1;
		
			// data type of configuration value (int, string, etc)
			required ValueType type = 2;
		
			// value
			required SensorConfigValue value = 3;
		}
	
		required int32       sensorID       = 1;
		required Connection  connection     = 2;
		repeated SensorConfigOption options = 3;
	}

	// Request from client (robot agent program)
	message ClientMessage {
	
		// basic settings
		required int32   robotID              = 1;
		optional int32   clientCommPort       = 2;
		
		// RbtDescFile
		optional string  rdfName              = 3;
		
		// Sensor selection
		repeated SensorConnection connections = 4; 	
	}
	
	
	// Simulator response, can be seen as an ACK
	message ServerMessage {
	
		// acknowlegment: sensors initialized, connection pending
		repeated SensorConnection connections = 1; 
	}

	optional ClientMessage client = 1;
	optional ServerMessage server = 2;
}


message SimulatedWorldModel {
	required int32    robotID               = 1;

	required Position robotAbsPos           = 2;
	required int32    robotOrientation      = 3;
	optional int32    robotPositionBelief   = 4 [ default = 100 ];

	optional Position ballAbsPos            = 5;
	optional Position yellowGoalLeftAbsPos  = 6;
	optional Position yellowGoalRightAbsPos = 7;
	optional Position blueGoalLeftAbsPos    = 8;
	optional Position blueGoalRightAbsPos   = 9;
	optional Position ybyAbsPos             = 10;
	optional Position bybAbsPos             = 11;

	optional Position circleAbsPos          = 12;

	message Obstacle {
		optional Position absPos            = 1;
		optional int32    width             = 2;
	}

	repeated Obstacle obstaclesTeam         = 20;
	repeated Obstacle obstaclesEnemy        = 21;
	repeated Obstacle obstaclesUnknown      = 22;
}

extend Message {
	optional SimulatedWorldModel simulatedWM = 10;
}
